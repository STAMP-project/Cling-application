import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest9 {

    public static boolean debug = false;

    @Test
    public void test04501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04501");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder7.replaceFirst("", "");
        char[] charArray11 = strBuilder7.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder6.appendln(charArray11);
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.setNewLineText("\n");
        java.lang.String str15 = strBuilder14.toString();
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder14.append(false);
        java.io.Reader reader18 = strBuilder17.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = new org.apache.commons.lang3.text.StrBuilder();
        int int20 = strBuilder19.capacity();
        java.lang.StringBuffer stringBuffer21 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder19.appendln(stringBuffer21, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder19.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder19.setLength(32);
        java.io.Writer writer30 = strBuilder29.asWriter();
        writer30.write(" 4#4", (int) (byte) 0, (int) (byte) 0);
        char[] charArray35 = null;
        writer30.write(charArray35);
        writer30.write("\n32.0-1.0", (int) (short) 0, 0);
        writer30.flush();
        java.util.Properties properties42 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = strBuilder43.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer48 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray49 = strTokenizer48.getTokenArray();
        java.lang.String[] strArray50 = strTokenizer48.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder46.appendWithSeparators((java.lang.Object[]) strArray50, "4#4");
        char[] charArray55 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer56 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray55);
        java.lang.Object obj57 = properties42.getOrDefault((java.lang.Object) strBuilder46, (java.lang.Object) strTokenizer56);
        int int58 = properties42.size();
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = strBuilder59.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer63 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray64 = strTokenizer63.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder65 = strBuilder59.appendAll((java.lang.Object[]) strArray64);
        org.apache.commons.lang3.text.StrBuilder strBuilder68 = strBuilder59.replaceFirst('a', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder69 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder71 = strBuilder69.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer73 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray74 = strTokenizer73.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder75 = strBuilder69.appendAll((java.lang.Object[]) strArray74);
        org.apache.commons.lang3.text.StrBuilder strBuilder76 = strBuilder59.appendln(strBuilder75);
        org.apache.commons.lang3.text.StrBuilder strBuilder78 = strBuilder75.appendln((long) 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder79 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder81 = strBuilder79.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder82 = strBuilder81.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder84 = strBuilder82.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder87 = strBuilder82.replaceFirst('4', 'a');
        boolean boolean88 = properties42.remove((java.lang.Object) strBuilder75, (java.lang.Object) '4');
        char[] charArray89 = strBuilder75.toCharArray();
        writer30.write(charArray89, 0, 2);
        // The following exception was thrown during execution in test generation
        try {
            int int95 = reader18.read(charArray89, (int) (byte) 0, 41);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\n" + "'", str15, "\n");
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(reader18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 32 + "'", int20 == 32);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(writer30);
        org.junit.Assert.assertNotNull(strBuilder46);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer56);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(strBuilder61);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strBuilder65);
        org.junit.Assert.assertNotNull(strBuilder68);
        org.junit.Assert.assertNotNull(strBuilder71);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strBuilder75);
        org.junit.Assert.assertNotNull(strBuilder76);
        org.junit.Assert.assertNotNull(strBuilder78);
        org.junit.Assert.assertNotNull(strBuilder81);
        org.junit.Assert.assertNotNull(strBuilder82);
        org.junit.Assert.assertNotNull(strBuilder84);
        org.junit.Assert.assertNotNull(strBuilder87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(charArray89);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray89), "97\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray89), "97\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray89), "[9, 7, \n]");
    }

    @Test
    public void test04502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04502");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        boolean boolean8 = strTokenizer6.hasNext();
        java.util.List<java.lang.String> strList9 = strTokenizer6.getTokenList();
        java.lang.String[] strArray13 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        boolean boolean16 = strList9.addAll((java.util.Collection<java.lang.String>) strList14);
        java.util.Spliterator<java.lang.String> strSpliterator17 = strList14.spliterator();
        int int18 = strList14.size();
        boolean boolean20 = strList14.add("StrTokenizer[]");
        int int21 = strList14.size();
        java.lang.String str23 = strList14.remove(3);
        boolean boolean25 = strList14.add("-132.0");
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strSpliterator17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "StrTokenizer[]" + "'", str23, "StrTokenizer[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test04503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04503");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance("StrTokenizer[4#4]");
        java.lang.String str2 = strTokenizer1.nextToken();
        // The following exception was thrown during execution in test generation
        try {
            strTokenizer1.add("\000\000\000\000\000\000#\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: add() is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strTokenizer1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "StrTokenizer[4#4]" + "'", str2, "StrTokenizer[4#4]");
    }

    @Test
    public void test04504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04504");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Enumeration<java.lang.Object> objEnumeration1 = properties0.keys();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder2.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder5.appendSeparator('#', (int) (byte) 100);
        java.io.Reader reader9 = strBuilder5.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray15 = strTokenizer14.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder10.appendAll((java.lang.Object[]) strArray15);
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder10.replaceFirst('a', 'a');
        java.util.stream.IntStream intStream20 = strBuilder10.codePoints();
        java.lang.Object obj21 = properties0.replace((java.lang.Object) reader9, (java.lang.Object) intStream20);
        long long23 = reader9.skip(0L);
        reader9.close();
        boolean boolean25 = reader9.markSupported();
        long long27 = reader9.skip((long) 'a');
        reader9.close();
        reader9.reset();
        reader9.close();
        org.junit.Assert.assertNotNull(objEnumeration1);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(reader9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(intStream20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
    }

    @Test
    public void test04505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04505");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        boolean boolean8 = strTokenizer6.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher9 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer10 = strTokenizer6.setIgnoredMatcher(strMatcher9);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer12 = strTokenizer6.setDelimiterChar('4');
        org.apache.commons.lang3.text.StrMatcher strMatcher13 = strTokenizer6.getIgnoredMatcher();
        boolean boolean14 = strTokenizer6.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = strTokenizer6.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strMatcher9);
        org.junit.Assert.assertNotNull(strTokenizer10);
        org.junit.Assert.assertNotNull(strTokenizer12);
        org.junit.Assert.assertNotNull(strMatcher13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test04506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04506");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.lang.Object obj2 = properties1.clone();
        int int3 = properties1.size();
        char[] charArray8 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer10 = new org.apache.commons.lang3.text.StrTokenizer(charArray8, ' ');
        int int11 = strTokenizer10.size();
        boolean boolean12 = strTokenizer10.hasNext();
        java.util.List<java.lang.String> strList13 = strTokenizer10.getTokenList();
        java.lang.String[] strArray17 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        boolean boolean20 = strList13.addAll((java.util.Collection<java.lang.String>) strList18);
        char[] charArray25 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer27 = new org.apache.commons.lang3.text.StrTokenizer(charArray25, ' ');
        int int28 = strTokenizer27.size();
        boolean boolean29 = strTokenizer27.hasNext();
        java.util.List<java.lang.String> strList30 = strTokenizer27.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder31.replaceFirst("", "");
        char[] charArray35 = strBuilder31.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer37 = new org.apache.commons.lang3.text.StrTokenizer(charArray35, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer38 = new org.apache.commons.lang3.text.StrTokenizer(charArray35);
        boolean boolean39 = strList30.equals((java.lang.Object) charArray35);
        char[] charArray44 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer46 = new org.apache.commons.lang3.text.StrTokenizer(charArray44, ' ');
        int int47 = strTokenizer46.size();
        boolean boolean48 = strTokenizer46.hasNext();
        java.util.List<java.lang.String> strList49 = strTokenizer46.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = new org.apache.commons.lang3.text.StrBuilder();
        int int51 = strBuilder50.capacity();
        java.lang.StringBuffer stringBuffer52 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = strBuilder50.appendln(stringBuffer52, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder50.insert(1, (double) 32);
        java.lang.String str60 = strBuilder50.rightString((int) ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = strBuilder50.insert(1, '#');
        boolean boolean64 = strList49.equals((java.lang.Object) strBuilder50);
        boolean boolean65 = strList30.containsAll((java.util.Collection<java.lang.String>) strList49);
        boolean boolean66 = strList13.addAll((java.util.Collection<java.lang.String>) strList49);
        org.apache.commons.lang3.text.StrBuilder strBuilder67 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder70 = strBuilder67.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder72 = strBuilder70.appendln('#');
        java.lang.StringBuffer stringBuffer73 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder76 = strBuilder70.append(stringBuffer73, (int) (byte) -1, (int) (byte) 100);
        int int77 = strList13.lastIndexOf((java.lang.Object) stringBuffer73);
        boolean boolean79 = strList13.add("StrTokenizer[not tokenized yet]");
        boolean boolean81 = strList13.add("");
        java.lang.Object obj82 = properties1.get((java.lang.Object) boolean81);
        java.io.OutputStream outputStream83 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(outputStream83, "true\n###################################org.apache.co");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 32 + "'", int51 == 32);
        org.junit.Assert.assertNotNull(strBuilder55);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\n32.0" + "'", str60, "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strBuilder70);
        org.junit.Assert.assertNotNull(strBuilder72);
        org.junit.Assert.assertNotNull(strBuilder76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNull(obj82);
    }

    @Test
    public void test04507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04507");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray5 = strTokenizer4.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder0.appendAll((java.lang.Object[]) strArray5);
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder0.replaceFirst('a', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray15 = strTokenizer14.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder10.appendAll((java.lang.Object[]) strArray15);
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder0.appendln(strBuilder16);
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder16.appendln((long) 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder16.appendSeparator("hi!", "");
        org.apache.commons.lang3.text.StrMatcher strMatcher23 = org.apache.commons.lang3.text.StrMatcher.spaceMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder22.deleteAll(strMatcher23);
        java.io.Reader reader25 = strBuilder24.asReader();
        boolean boolean26 = reader25.markSupported();
        long long28 = reader25.skip((long) 101);
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(strMatcher23);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(reader25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 6L + "'", long28 == 6L);
    }

    @Test
    public void test04508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04508");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        boolean boolean8 = strTokenizer6.hasNext();
        java.util.List<java.lang.String> strList9 = strTokenizer6.getTokenList();
        java.lang.String[] strArray13 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        boolean boolean16 = strList9.addAll((java.util.Collection<java.lang.String>) strList14);
        char[] charArray21 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer23 = new org.apache.commons.lang3.text.StrTokenizer(charArray21, ' ');
        int int24 = strTokenizer23.size();
        boolean boolean25 = strTokenizer23.hasNext();
        java.util.List<java.lang.String> strList26 = strTokenizer23.getTokenList();
        java.lang.String[] strArray30 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        boolean boolean33 = strList26.addAll((java.util.Collection<java.lang.String>) strList31);
        java.util.Spliterator<java.lang.String> strSpliterator34 = strList31.spliterator();
        int int35 = strList31.size();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer38 = new org.apache.commons.lang3.text.StrTokenizer(" 4#4", "");
        int int39 = strList31.lastIndexOf((java.lang.Object) strTokenizer38);
        java.util.List<java.lang.String> strList40 = strTokenizer38.getTokenList();
        org.apache.commons.lang3.text.StrSubstitutor strSubstitutor41 = new org.apache.commons.lang3.text.StrSubstitutor();
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = new org.apache.commons.lang3.text.StrBuilder();
        int int43 = strBuilder42.capacity();
        java.lang.StringBuffer stringBuffer44 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder42.appendln(stringBuffer44, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder42.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder49.appendln(true);
        boolean boolean54 = strSubstitutor41.replaceIn(strBuilder51, (int) '$', 0);
        boolean boolean55 = strList40.equals((java.lang.Object) '$');
        boolean boolean56 = strList9.retainAll((java.util.Collection<java.lang.String>) strList40);
        char[] charArray61 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer63 = new org.apache.commons.lang3.text.StrTokenizer(charArray61, ' ');
        int int64 = strTokenizer63.size();
        boolean boolean65 = strTokenizer63.hasNext();
        java.util.List<java.lang.String> strList66 = strTokenizer63.getTokenList();
        java.lang.String[] strArray70 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        boolean boolean73 = strList66.addAll((java.util.Collection<java.lang.String>) strList71);
        java.lang.String str75 = strList71.remove(0);
        java.util.stream.Stream<java.lang.String> strStream76 = strList71.stream();
        boolean boolean77 = strList40.addAll((java.util.Collection<java.lang.String>) strList71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str79 = strList40.get(41);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 41, Size: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strSpliterator34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 32 + "'", int43 == 32);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(strBuilder51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\n32.0" + "'", str75, "\n32.0");
        org.junit.Assert.assertNotNull(strStream76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test04509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04509");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.appendSeparator("java.io.IOException: hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder10.appendSeparator('e', 8);
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder13.replaceAll('a', '\000');
        java.io.Reader reader17 = strBuilder13.asReader();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(reader17);
    }

    @Test
    public void test04510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04510");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder2.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder5.replaceFirst('a', '4');
        java.io.Writer writer9 = strBuilder8.asWriter();
        properties1.store(writer9, "");
        writer9.flush();
        writer9.flush();
        java.io.Writer writer15 = writer9.append(' ');
        java.util.Properties properties16 = new java.util.Properties();
        int int17 = properties16.size();
        java.lang.Object obj18 = properties16.clone();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder19.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder23.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder25.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder26.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder19.appendFixedWidthPadRight((java.lang.Object) strBuilder28, (int) (byte) -1, '#');
        java.lang.Object obj32 = properties16.get((java.lang.Object) strBuilder19);
        java.util.Properties properties33 = new java.util.Properties();
        int int34 = properties33.size();
        boolean boolean36 = properties33.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties37 = new java.util.Properties();
        int int38 = properties37.size();
        boolean boolean40 = properties37.containsKey((java.lang.Object) (-1.0f));
        properties33.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        char[] charArray46 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer48 = new org.apache.commons.lang3.text.StrTokenizer(charArray46, ' ');
        int int49 = strTokenizer48.size();
        boolean boolean50 = strTokenizer48.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher51 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer52 = strTokenizer48.setIgnoredMatcher(strMatcher51);
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = strBuilder53.replaceFirst("", "");
        java.lang.Object obj57 = properties33.putIfAbsent((java.lang.Object) strMatcher51, (java.lang.Object) strBuilder53);
        boolean boolean58 = strBuilder19.equals(obj57);
        org.apache.commons.lang3.text.StrBuilder strBuilder60 = strBuilder19.appendln((long) (short) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = strBuilder60.insert((int) (short) 0, (int) (short) 100);
        java.lang.String str66 = strBuilder60.midString(0, (int) (short) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder69 = strBuilder60.replaceFirst(' ', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder71 = strBuilder60.setLength(52);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Writer writer74 = writer15.append((java.lang.CharSequence) strBuilder71, (int) '#', 26);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -9");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(writer9);
        org.junit.Assert.assertNotNull(writer15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strMatcher51);
        org.junit.Assert.assertNotNull(strTokenizer52);
        org.junit.Assert.assertNotNull(strBuilder56);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strBuilder60);
        org.junit.Assert.assertNotNull(strBuilder63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1" + "'", str66, "1");
        org.junit.Assert.assertNotNull(strBuilder69);
        org.junit.Assert.assertNotNull(strBuilder71);
    }

    @Test
    public void test04511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04511");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder2.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder5.appendln('#');
        java.lang.StringBuffer stringBuffer8 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder5.append(stringBuffer8, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder5.deleteFirst("hi!");
        char[] charArray14 = strBuilder5.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = strTokenizer1.reset(charArray14);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray14);
        int int17 = strTokenizer16.nextIndex();
        int int18 = strTokenizer16.nextIndex();
        org.junit.Assert.assertNotNull(strTokenizer1);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, \n]");
        org.junit.Assert.assertNotNull(strTokenizer15);
        org.junit.Assert.assertNotNull(strTokenizer16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test04512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04512");
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder(116);
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder1.appendFixedWidthPadRight((int) ' ', (int) 't', '\000');
        org.apache.commons.lang3.text.StrMatcher strMatcher7 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher("");
        int int9 = strBuilder5.lastIndexOf(strMatcher7, 116);
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder5.appendSeparator('s', '9');
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strMatcher7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(strBuilder12);
    }

    @Test
    public void test04513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04513");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray5 = strTokenizer4.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder0.appendAll((java.lang.Object[]) strArray5);
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder0.replaceFirst('a', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray15 = strTokenizer14.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder10.appendAll((java.lang.Object[]) strArray15);
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder0.appendln(strBuilder16);
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder17.append((long) '$');
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder19.ensureCapacity((int) (short) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder19.appendFixedWidthPadLeft(103, 85, '2');
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder25);
    }

    @Test
    public void test04514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04514");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer5 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray6 = strTokenizer5.getTokenArray();
        java.lang.String[] strArray7 = strTokenizer5.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder3.appendWithSeparators((java.lang.Object[]) strArray7, "4#4");
        org.apache.commons.lang3.text.StrMatcher strMatcher10 = org.apache.commons.lang3.text.StrMatcher.tabMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.deleteAll(strMatcher10);
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder9.trim();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder9.append(false);
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder15.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder15.deleteAll('4');
        int int22 = strBuilder20.indexOf('a');
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder23.replaceFirst("", "");
        char[] charArray27 = strBuilder23.toCharArray();
        char[] charArray28 = strBuilder20.getChars(charArray27);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer29 = new org.apache.commons.lang3.text.StrTokenizer(charArray27);
        char[] charArray30 = strBuilder14.getChars(charArray27);
        int int31 = strBuilder14.size();
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder14.setLength(116);
        int int35 = strBuilder33.indexOf("1\n");
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strMatcher10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "false");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "false");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[f, a, l, s, e]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test04515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04515");
        java.util.Properties properties0 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray7 = strTokenizer6.getTokenArray();
        java.lang.String[] strArray8 = strTokenizer6.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder4.appendWithSeparators((java.lang.Object[]) strArray8, "4#4");
        char[] charArray13 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray13);
        java.lang.Object obj15 = properties0.getOrDefault((java.lang.Object) strBuilder4, (java.lang.Object) strTokenizer14);
        java.util.Collection<java.lang.Object> objCollection16 = properties0.values();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer18 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher19 = strTokenizer18.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer20 = strTokenizer18.reset();
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder21.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder25.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder27.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder28.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder21.appendFixedWidthPadRight((java.lang.Object) strBuilder30, (int) (byte) -1, '#');
        org.apache.commons.lang3.text.StrMatcher strMatcher34 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int35 = strBuilder21.lastIndexOf(strMatcher34);
        char[] charArray40 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer42 = new org.apache.commons.lang3.text.StrTokenizer(charArray40, ' ');
        int int43 = strTokenizer42.size();
        boolean boolean44 = strTokenizer42.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher45 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer46 = strTokenizer42.setIgnoredMatcher(strMatcher45);
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder21.deleteFirst(strMatcher45);
        java.lang.Object obj48 = properties0.getOrDefault((java.lang.Object) strTokenizer20, (java.lang.Object) strBuilder47);
        java.util.Collection<java.lang.Object> objCollection49 = properties0.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet50 = properties0.entrySet();
        java.util.Properties properties51 = new java.util.Properties();
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties51.keys();
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = strBuilder53.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = strBuilder56.appendSeparator('#', (int) (byte) 100);
        java.io.Reader reader60 = strBuilder56.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = strBuilder61.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer65 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray66 = strTokenizer65.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder67 = strBuilder61.appendAll((java.lang.Object[]) strArray66);
        org.apache.commons.lang3.text.StrBuilder strBuilder70 = strBuilder61.replaceFirst('a', 'a');
        java.util.stream.IntStream intStream71 = strBuilder61.codePoints();
        java.lang.Object obj72 = properties51.replace((java.lang.Object) reader60, (java.lang.Object) intStream71);
        long long74 = reader60.skip(0L);
        boolean boolean75 = reader60.ready();
        reader60.reset();
        reader60.reset();
        int int78 = reader60.read();
        properties0.load(reader60);
        boolean boolean80 = reader60.markSupported();
        java.nio.CharBuffer charBuffer81 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int82 = reader60.read(charBuffer81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNotNull(strMatcher19);
        org.junit.Assert.assertNotNull(strTokenizer20);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strMatcher34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strMatcher45);
        org.junit.Assert.assertNotNull(strTokenizer46);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "");
        org.junit.Assert.assertNotNull(objCollection49);
        org.junit.Assert.assertNotNull(objEntrySet50);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertNotNull(strBuilder56);
        org.junit.Assert.assertNotNull(strBuilder59);
        org.junit.Assert.assertNotNull(reader60);
        org.junit.Assert.assertNotNull(strBuilder63);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strBuilder67);
        org.junit.Assert.assertNotNull(strBuilder70);
        org.junit.Assert.assertNotNull(intStream71);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test04516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04516");
        java.util.Properties properties0 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder4.appendln('#');
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder9.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = new org.apache.commons.lang3.text.StrBuilder();
        int int12 = strBuilder11.capacity();
        java.lang.StringBuffer stringBuffer13 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder11.appendln(stringBuffer13, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher17 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int18 = strBuilder16.lastIndexOf(strMatcher17);
        boolean boolean19 = strBuilder9.equalsIgnoreCase(strBuilder16);
        char[] charArray22 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer23 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray22);
        boolean boolean24 = properties0.replace((java.lang.Object) strBuilder6, (java.lang.Object) strBuilder9, (java.lang.Object) strTokenizer23);
        int int27 = strBuilder9.lastIndexOf("4#4", (int) (byte) -1);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer28 = strBuilder9.asTokenizer();
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder29.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder32.replaceFirst("", "");
        char[] charArray36 = strBuilder32.toCharArray();
        char[] charArray37 = strBuilder29.getChars(charArray36);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer38 = new org.apache.commons.lang3.text.StrTokenizer(charArray36);
        boolean boolean39 = strTokenizer38.hasPrevious();
        java.util.List<java.lang.String> strList40 = strTokenizer38.getTokenList();
        strList40.clear();
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder9.appendAll((java.lang.Iterable<java.lang.String>) strList40);
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = strBuilder9.appendPadding((int) (short) -1, '\000');
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder45.append("0.01.0");
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strMatcher17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(strTokenizer28);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertNotNull(strBuilder45);
        org.junit.Assert.assertNotNull(strBuilder47);
    }

    @Test
    public void test04517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04517");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray2 = strTokenizer1.getTokenArray();
        java.lang.String[] strArray3 = strTokenizer1.getTokenArray();
        boolean boolean4 = strTokenizer1.hasNext();
        int int5 = strTokenizer1.size();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = strTokenizer1.reset();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer8 = strTokenizer6.setEmptyTokenAsNull(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder9.replaceFirst("", "");
        java.io.Reader reader13 = strBuilder9.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder14.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder17.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder21.replaceFirst("", "");
        char[] charArray25 = strBuilder21.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder20.appendln(charArray25);
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder20.appendln((double) '$');
        char[] charArray33 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer35 = new org.apache.commons.lang3.text.StrTokenizer(charArray33, ' ');
        int int36 = strTokenizer35.size();
        boolean boolean37 = strTokenizer35.hasNext();
        java.util.List<java.lang.String> strList38 = strTokenizer35.getTokenList();
        java.lang.String[] strArray42 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        boolean boolean45 = strList38.addAll((java.util.Collection<java.lang.String>) strList43);
        java.lang.String str47 = strList43.remove(0);
        char[] charArray52 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer54 = new org.apache.commons.lang3.text.StrTokenizer(charArray52, ' ');
        int int55 = strTokenizer54.size();
        boolean boolean56 = strTokenizer54.hasNext();
        java.util.List<java.lang.String> strList57 = strTokenizer54.getTokenList();
        java.lang.String[] strArray61 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        boolean boolean64 = strList57.addAll((java.util.Collection<java.lang.String>) strList62);
        boolean boolean65 = strList43.addAll((java.util.Collection<java.lang.String>) strList62);
        org.apache.commons.lang3.text.StrBuilder strBuilder66 = strBuilder20.appendAll((java.lang.Iterable<java.lang.String>) strList43);
        org.apache.commons.lang3.text.StrBuilder strBuilder67 = strBuilder9.append((java.lang.CharSequence) strBuilder66);
        java.lang.String str68 = strBuilder67.getNullText();
        java.lang.String str69 = strBuilder67.getNullText();
        java.util.Properties properties71 = new java.util.Properties();
        int int72 = properties71.size();
        boolean boolean74 = properties71.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties75 = new java.util.Properties();
        int int76 = properties75.size();
        boolean boolean78 = properties75.containsKey((java.lang.Object) (-1.0f));
        properties71.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties75);
        char[] charArray84 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer86 = new org.apache.commons.lang3.text.StrTokenizer(charArray84, ' ');
        int int87 = strTokenizer86.size();
        boolean boolean88 = strTokenizer86.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher89 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer90 = strTokenizer86.setIgnoredMatcher(strMatcher89);
        org.apache.commons.lang3.text.StrBuilder strBuilder91 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder94 = strBuilder91.replaceFirst("", "");
        java.lang.Object obj95 = properties71.putIfAbsent((java.lang.Object) strMatcher89, (java.lang.Object) strBuilder91);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer96 = new org.apache.commons.lang3.text.StrTokenizer("10.0StrTokenizer[ 4#4]\n10.0\n", strMatcher89);
        org.apache.commons.lang3.text.StrBuilder strBuilder98 = strBuilder67.replaceAll(strMatcher89, "\ntrue\n\000\000\000\000{}");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer99 = strTokenizer6.setIgnoredMatcher(strMatcher89);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(strTokenizer6);
        org.junit.Assert.assertNotNull(strTokenizer8);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(reader13);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[]");
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\n32.0" + "'", str47, "\n32.0");
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strBuilder66);
        org.junit.Assert.assertNotNull(strBuilder67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray84), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray84), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray84), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(strMatcher89);
        org.junit.Assert.assertNotNull(strTokenizer90);
        org.junit.Assert.assertNotNull(strBuilder94);
        org.junit.Assert.assertNull(obj95);
        org.junit.Assert.assertNotNull(strBuilder98);
        org.junit.Assert.assertNotNull(strTokenizer99);
    }

    @Test
    public void test04518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04518");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder0.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.append((float) '4');
        int int14 = strBuilder9.indexOf("", (int) (short) 10);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance("");
        boolean boolean17 = strTokenizer16.hasNext();
        java.lang.String[] strArray18 = strTokenizer16.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder9.appendWithSeparators((java.lang.Object[]) strArray18, "4#4");
        java.lang.String str21 = strBuilder20.toString();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder20.insert((int) (short) 10, "true\n###################################");
        java.lang.Class<?> wildcardClass25 = strBuilder20.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(strTokenizer16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ntrue\n52.0" + "'", str21, "\ntrue\n52.0");
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test04519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04519");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder4.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder6.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder0.appendFixedWidthPadRight((java.lang.Object) strBuilder9, (int) (byte) -1, '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.append("\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder14.setNewLineText("a");
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder16.appendSeparator('t', 'e');
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder19);
    }

    @Test
    public void test04520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04520");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray5 = strTokenizer4.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder0.appendAll((java.lang.Object[]) strArray5);
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder0.replaceFirst('a', 'a');
        char[] charArray14 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = new org.apache.commons.lang3.text.StrTokenizer(charArray14, ' ');
        int int17 = strTokenizer16.size();
        boolean boolean18 = strTokenizer16.hasNext();
        java.util.List<java.lang.String> strList19 = strTokenizer16.getTokenList();
        java.lang.String[] strArray23 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        boolean boolean26 = strList19.addAll((java.util.Collection<java.lang.String>) strList24);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder0.appendAll((java.lang.Iterable<java.lang.String>) strList24);
        org.apache.commons.lang3.text.StrSubstitutor strSubstitutor28 = new org.apache.commons.lang3.text.StrSubstitutor();
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = new org.apache.commons.lang3.text.StrBuilder();
        int int30 = strBuilder29.capacity();
        java.lang.StringBuffer stringBuffer31 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder29.appendln(stringBuffer31, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder29.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder36.appendln(true);
        boolean boolean41 = strSubstitutor28.replaceIn(strBuilder38, (int) '$', 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder0.append((java.lang.CharSequence) strBuilder38);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer43 = strBuilder38.asTokenizer();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer45 = strTokenizer43.setDelimiterString("-1");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer47 = strTokenizer45.setQuoteChar('t');
        java.lang.String[] strArray48 = strTokenizer45.getTokenArray();
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 32 + "'", int30 == 32);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertNotNull(strTokenizer43);
        org.junit.Assert.assertNotNull(strTokenizer45);
        org.junit.Assert.assertNotNull(strTokenizer47);
        org.junit.Assert.assertNotNull(strArray48);
    }

    @Test
    public void test04521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04521");
        char[] charArray3 = new char[] { 'a', '$', '$' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer5 = new org.apache.commons.lang3.text.StrTokenizer(charArray3, '$');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer7 = new org.apache.commons.lang3.text.StrTokenizer(charArray3, 's');
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "a$$");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "a$$");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[a, $, $]");
    }

    @Test
    public void test04522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04522");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder2.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder5.appendln('#');
        java.lang.StringBuffer stringBuffer8 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder5.append(stringBuffer8, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder5.deleteFirst("hi!");
        char[] charArray14 = strBuilder5.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = strTokenizer1.reset(charArray14);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = strTokenizer15.reset();
        int int17 = strTokenizer16.previousIndex();
        org.apache.commons.lang3.text.StrMatcher strMatcher18 = strTokenizer16.getIgnoredMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = strTokenizer16.reset();
        org.apache.commons.lang3.text.StrMatcher strMatcher20 = org.apache.commons.lang3.text.StrSubstitutor.DEFAULT_SUFFIX;
        org.apache.commons.lang3.text.StrTokenizer strTokenizer21 = strTokenizer19.setDelimiterMatcher(strMatcher20);
        boolean boolean22 = strTokenizer21.hasNext();
        org.junit.Assert.assertNotNull(strTokenizer1);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, \n]");
        org.junit.Assert.assertNotNull(strTokenizer15);
        org.junit.Assert.assertNotNull(strTokenizer16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(strMatcher18);
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertNotNull(strMatcher20);
        org.junit.Assert.assertNotNull(strTokenizer21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test04523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04523");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        boolean boolean9 = strBuilder0.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder0.clear();
        boolean boolean13 = strBuilder11.startsWith(" 4#4");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder11.setCharAt(62, '3');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 62");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04524");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.setLength(32);
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder10.trim();
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder10.append((int) (short) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder13.append('#');
        int int16 = strBuilder13.capacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder13.deleteFirst("###");
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder13.appendSeparator("#\n4#4", (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder13.append("java.io.IOException: java.io.IOException: {}", 36, 42);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: length must be valid");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 32 + "'", int16 == 32);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(strBuilder21);
    }

    @Test
    public void test04525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04525");
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder((int) (byte) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst('$', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder1.append('a');
        boolean boolean8 = strBuilder6.endsWith("100.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder6.append('4');
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder6.append((double) 3);
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder15.deleteFirst("");
        int int19 = strBuilder15.indexOf("");
        int int22 = strBuilder15.lastIndexOf('#', (int) (byte) 0);
        boolean boolean24 = strBuilder15.startsWith("4#4");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer25 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance();
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder15.appendAll((java.util.Iterator<java.lang.String>) strTokenizer25);
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder15.appendSeparator("{}");
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder15.append((double) 0.0f);
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder31.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer35 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray36 = strTokenizer35.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder31.appendAll((java.lang.Object[]) strArray36);
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder31.replaceFirst('a', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder41.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer45 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray46 = strTokenizer45.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder41.appendAll((java.lang.Object[]) strArray46);
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder31.appendln(strBuilder47);
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = strBuilder47.appendln((long) 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder47.appendSeparator("hi!", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder57 = strBuilder54.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder60 = strBuilder57.replaceFirst('a', '4');
        java.io.Writer writer61 = strBuilder60.asWriter();
        org.apache.commons.lang3.text.StrBuilder strBuilder62 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder65 = strBuilder62.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder68 = strBuilder65.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder69 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder72 = strBuilder69.replaceFirst("", "");
        char[] charArray73 = strBuilder69.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder74 = strBuilder68.appendln(charArray73);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer75 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray73);
        writer61.write(charArray73);
        org.apache.commons.lang3.text.StrBuilder strBuilder77 = strBuilder53.append(charArray73);
        org.apache.commons.lang3.text.StrMatcher strMatcher78 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray73);
        org.apache.commons.lang3.text.StrBuilder strBuilder80 = strBuilder30.replaceFirst(strMatcher78, "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder83 = strBuilder30.appendSeparator("h", (int) '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder85 = strBuilder30.appendln((int) ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder87 = strBuilder30.appendln("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        boolean boolean88 = strBuilder14.equals(strBuilder30);
        org.apache.commons.lang3.text.StrBuilder strBuilder89 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder91 = strBuilder89.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder92 = strBuilder91.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder94 = strBuilder92.setNullText("");
        int int96 = strBuilder92.indexOf("#");
        org.apache.commons.lang3.text.StrBuilder strBuilder97 = strBuilder30.append((java.lang.CharSequence) strBuilder92);
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strTokenizer25);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNotNull(strBuilder43);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(strBuilder48);
        org.junit.Assert.assertNotNull(strBuilder50);
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertNotNull(strBuilder57);
        org.junit.Assert.assertNotNull(strBuilder60);
        org.junit.Assert.assertNotNull(writer61);
        org.junit.Assert.assertNotNull(strBuilder65);
        org.junit.Assert.assertNotNull(strBuilder68);
        org.junit.Assert.assertNotNull(strBuilder72);
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[]");
        org.junit.Assert.assertNotNull(strBuilder74);
        org.junit.Assert.assertNotNull(strTokenizer75);
        org.junit.Assert.assertNotNull(strBuilder77);
        org.junit.Assert.assertNotNull(strMatcher78);
        org.junit.Assert.assertNotNull(strBuilder80);
        org.junit.Assert.assertNotNull(strBuilder83);
        org.junit.Assert.assertNotNull(strBuilder85);
        org.junit.Assert.assertNotNull(strBuilder87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(strBuilder91);
        org.junit.Assert.assertNotNull(strBuilder92);
        org.junit.Assert.assertNotNull(strBuilder94);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertNotNull(strBuilder97);
    }

    @Test
    public void test04526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04526");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder4.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder6.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder0.appendFixedWidthPadRight((java.lang.Object) strBuilder9, (int) (byte) -1, '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.append("\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder12.setLength(3);
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder17.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer22 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray23 = strTokenizer22.getTokenArray();
        java.lang.String[] strArray24 = strTokenizer22.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder20.appendWithSeparators((java.lang.Object[]) strArray24, "4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder20.delete(0, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder20.appendSeparator("1", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder32.appendNull();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer34 = strBuilder33.asTokenizer();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer36 = strTokenizer34.setDelimiterString("100.0\000\000\000\000\000");
        org.apache.commons.lang3.text.StrMatcher strMatcher37 = strTokenizer36.getQuoteMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder12.deleteFirst(strMatcher37);
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder39.deleteFirst("");
        int int43 = strBuilder39.indexOf("");
        int int46 = strBuilder39.lastIndexOf('#', (int) (byte) 0);
        boolean boolean48 = strBuilder39.startsWith("4#4");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer49 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance();
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = strBuilder39.appendAll((java.util.Iterator<java.lang.String>) strTokenizer49);
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder39.appendSeparator("{}");
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder39.append((double) 0.0f);
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = strBuilder39.appendln((int) (byte) 100);
        char[] charArray57 = strBuilder39.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer59 = new org.apache.commons.lang3.text.StrTokenizer(charArray57, '#');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer60 = new org.apache.commons.lang3.text.StrTokenizer(charArray57);
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = strBuilder38.append(charArray57);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer63 = new org.apache.commons.lang3.text.StrTokenizer(charArray57, " 4#4");
        // The following exception was thrown during execution in test generation
        try {
            strTokenizer63.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove() is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strTokenizer34);
        org.junit.Assert.assertNotNull(strTokenizer36);
        org.junit.Assert.assertNotNull(strMatcher37);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strTokenizer49);
        org.junit.Assert.assertNotNull(strBuilder50);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertNotNull(strBuilder56);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "0.0100\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "0.0100\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[0, ., 0, 1, 0, 0, \n]");
        org.junit.Assert.assertNotNull(strBuilder61);
    }

    @Test
    public void test04527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04527");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer5 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray6 = strTokenizer5.getTokenArray();
        java.lang.String[] strArray7 = strTokenizer5.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder3.appendWithSeparators((java.lang.Object[]) strArray7, "4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder3.delete(0, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder13.replaceFirst("", "");
        boolean boolean18 = strBuilder16.endsWith("StrTokenizer[]");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer20 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder21.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder24.appendln('#');
        java.lang.StringBuffer stringBuffer27 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder24.append(stringBuffer27, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder24.deleteFirst("hi!");
        char[] charArray33 = strBuilder24.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer34 = strTokenizer20.reset(charArray33);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer35 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray33);
        char[] charArray36 = strBuilder16.getChars(charArray33);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer37 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray33);
        org.apache.commons.lang3.text.StrMatcher strMatcher39 = org.apache.commons.lang3.text.StrMatcher.stringMatcher("{}");
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = new org.apache.commons.lang3.text.StrBuilder((int) (byte) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder41.replaceFirst('$', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = strBuilder41.append('a');
        int int48 = strBuilder41.lastIndexOf("\n32.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = new org.apache.commons.lang3.text.StrBuilder();
        int int50 = strBuilder49.capacity();
        java.lang.StringBuffer stringBuffer51 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder49.appendln(stringBuffer51, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder57 = strBuilder49.insert(1, (double) 32);
        boolean boolean58 = strBuilder49.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = strBuilder49.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder60 = strBuilder49.clear();
        int int61 = strBuilder60.capacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder62 = strBuilder41.append(strBuilder60);
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = strBuilder41.appendNewLine();
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder67 = strBuilder64.replaceFirst("", "");
        char[] charArray68 = strBuilder64.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer70 = new org.apache.commons.lang3.text.StrTokenizer(charArray68, "");
        boolean boolean71 = strTokenizer70.hasNext();
        int int72 = strTokenizer70.previousIndex();
        org.apache.commons.lang3.text.StrMatcher strMatcher73 = strTokenizer70.getIgnoredMatcher();
        boolean boolean74 = strBuilder41.contains(strMatcher73);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer75 = new org.apache.commons.lang3.text.StrTokenizer(charArray33, strMatcher39, strMatcher73);
        int int77 = strBuilder3.lastIndexOf(strMatcher73, (int) (byte) -1);
        org.apache.commons.lang3.text.StrBuilder strBuilder79 = strBuilder3.setNewLineText("false");
        java.lang.String str80 = strBuilder79.getNullText();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder83 = strBuilder79.insert(132, (double) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 132");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strTokenizer20);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[#, \n]");
        org.junit.Assert.assertNotNull(strTokenizer34);
        org.junit.Assert.assertNotNull(strTokenizer35);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, \n]");
        org.junit.Assert.assertNotNull(strTokenizer37);
        org.junit.Assert.assertNotNull(strMatcher39);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strBuilder46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 32 + "'", int50 == 32);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertNotNull(strBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strBuilder59);
        org.junit.Assert.assertNotNull(strBuilder60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 32 + "'", int61 == 32);
        org.junit.Assert.assertNotNull(strBuilder62);
        org.junit.Assert.assertNotNull(strBuilder63);
        org.junit.Assert.assertNotNull(strBuilder67);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(strMatcher73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(strBuilder79);
        org.junit.Assert.assertNull(str80);
    }

    @Test
    public void test04528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04528");
        java.util.Properties properties0 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray7 = strTokenizer6.getTokenArray();
        java.lang.String[] strArray8 = strTokenizer6.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder4.appendWithSeparators((java.lang.Object[]) strArray8, "4#4");
        char[] charArray13 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray13);
        java.lang.Object obj15 = properties0.getOrDefault((java.lang.Object) strBuilder4, (java.lang.Object) strTokenizer14);
        int int16 = properties0.size();
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder17.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer21 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray22 = strTokenizer21.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder17.appendAll((java.lang.Object[]) strArray22);
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder17.replaceFirst('a', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder27.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer31 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray32 = strTokenizer31.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder27.appendAll((java.lang.Object[]) strArray32);
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder17.appendln(strBuilder33);
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder33.appendln((long) 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder37.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder39.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder40.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = strBuilder40.replaceFirst('4', 'a');
        boolean boolean46 = properties0.remove((java.lang.Object) strBuilder33, (java.lang.Object) '4');
        java.lang.Object obj47 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = strBuilder33.appendFixedWidthPadRight(obj47, (int) 'a', ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder50.append((int) (byte) -1);
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = strBuilder52.appendSeparator('a', 49);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer57 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher58 = strTokenizer57.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer60 = strTokenizer57.reset("");
        java.lang.String str61 = strTokenizer60.nextToken();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer63 = strTokenizer60.setIgnoreEmptyTokens(true);
        org.apache.commons.lang3.text.StrMatcher strMatcher64 = strTokenizer60.getDelimiterMatcher();
        org.apache.commons.lang3.text.StrMatcher strMatcher65 = strTokenizer60.getIgnoredMatcher();
        boolean boolean66 = strBuilder55.contains(strMatcher65);
        char[] charArray67 = strBuilder55.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer68 = new org.apache.commons.lang3.text.StrTokenizer(charArray67);
        // The following exception was thrown during execution in test generation
        try {
            strTokenizer68.set("63\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: set() is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertNotNull(strBuilder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strBuilder50);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(strBuilder55);
        org.junit.Assert.assertNotNull(strMatcher58);
        org.junit.Assert.assertNotNull(strTokenizer60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(strTokenizer63);
        org.junit.Assert.assertNotNull(strMatcher64);
        org.junit.Assert.assertNotNull(strMatcher65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "97\n                                                                                                 -1a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "97\n                                                                                                 -1a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[9, 7, \n,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , -, 1, a]");
    }

    @Test
    public void test04529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04529");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        boolean boolean9 = strBuilder0.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder10.replaceAll("#", "true\n###################################3\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder10.appendPadding((int) 'a', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder16.replaceAll('a', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder19.append((float) 49);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder21);
    }

    @Test
    public void test04530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04530");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        boolean boolean8 = strTokenizer6.hasNext();
        java.util.List<java.lang.String> strList9 = strTokenizer6.getTokenList();
        java.lang.String[] strArray13 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        boolean boolean16 = strList9.addAll((java.util.Collection<java.lang.String>) strList14);
        char[] charArray21 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer23 = new org.apache.commons.lang3.text.StrTokenizer(charArray21, ' ');
        int int24 = strTokenizer23.size();
        boolean boolean25 = strTokenizer23.hasNext();
        java.util.List<java.lang.String> strList26 = strTokenizer23.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder27.replaceFirst("", "");
        char[] charArray31 = strBuilder27.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer33 = new org.apache.commons.lang3.text.StrTokenizer(charArray31, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer34 = new org.apache.commons.lang3.text.StrTokenizer(charArray31);
        boolean boolean35 = strList26.equals((java.lang.Object) charArray31);
        char[] charArray40 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer42 = new org.apache.commons.lang3.text.StrTokenizer(charArray40, ' ');
        int int43 = strTokenizer42.size();
        boolean boolean44 = strTokenizer42.hasNext();
        java.util.List<java.lang.String> strList45 = strTokenizer42.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = new org.apache.commons.lang3.text.StrBuilder();
        int int47 = strBuilder46.capacity();
        java.lang.StringBuffer stringBuffer48 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder46.appendln(stringBuffer48, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder46.insert(1, (double) 32);
        java.lang.String str56 = strBuilder46.rightString((int) ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = strBuilder46.insert(1, '#');
        boolean boolean60 = strList45.equals((java.lang.Object) strBuilder46);
        boolean boolean61 = strList26.containsAll((java.util.Collection<java.lang.String>) strList45);
        boolean boolean62 = strList9.addAll((java.util.Collection<java.lang.String>) strList45);
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder66 = strBuilder63.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder68 = strBuilder66.appendln('#');
        java.lang.StringBuffer stringBuffer69 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder72 = strBuilder66.append(stringBuffer69, (int) (byte) -1, (int) (byte) 100);
        int int73 = strList9.lastIndexOf((java.lang.Object) stringBuffer69);
        char[] charArray78 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer80 = new org.apache.commons.lang3.text.StrTokenizer(charArray78, ' ');
        int int81 = strTokenizer80.size();
        int int82 = strTokenizer80.previousIndex();
        boolean boolean83 = strList9.equals((java.lang.Object) strTokenizer80);
        java.lang.String str84 = strTokenizer80.next();
        java.lang.String str85 = strTokenizer80.previous();
        org.apache.commons.lang3.text.StrMatcher strMatcher86 = strTokenizer80.getQuoteMatcher();
        org.apache.commons.lang3.text.StrMatcher strMatcher87 = strTokenizer80.getIgnoredMatcher();
        java.util.List<java.lang.String> strList88 = strTokenizer80.getTokenList();
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 32 + "'", int47 == 32);
        org.junit.Assert.assertNotNull(strBuilder51);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\n32.0" + "'", str56, "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strBuilder66);
        org.junit.Assert.assertNotNull(strBuilder68);
        org.junit.Assert.assertNotNull(strBuilder72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "4#4" + "'", str84, "4#4");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "4#4" + "'", str85, "4#4");
        org.junit.Assert.assertNotNull(strMatcher86);
        org.junit.Assert.assertNotNull(strMatcher87);
        org.junit.Assert.assertNotNull(strList88);
    }

    @Test
    public void test04531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04531");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.appendSeparator('#', (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder6.append((float) '$');
        java.lang.String str9 = strBuilder6.getNewLineText();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder12.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder13.setNullText("");
        char[] charArray16 = strBuilder15.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = new org.apache.commons.lang3.text.StrTokenizer(charArray16, '$', 't');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer20 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray16);
        boolean boolean21 = strBuilder6.equals((java.lang.Object) strTokenizer20);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
        org.junit.Assert.assertNotNull(strTokenizer20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test04532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04532");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder4.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder6.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder0.appendFixedWidthPadRight((java.lang.Object) strBuilder9, (int) (byte) -1, '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.append("\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder14.appendln("\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder17.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder21.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder23.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder24.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder17.appendFixedWidthPadRight((java.lang.Object) strBuilder26, (int) (byte) -1, '#');
        org.apache.commons.lang3.text.StrMatcher strMatcher30 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int31 = strBuilder17.lastIndexOf(strMatcher30);
        char[] charArray36 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer38 = new org.apache.commons.lang3.text.StrTokenizer(charArray36, ' ');
        int int39 = strTokenizer38.size();
        boolean boolean40 = strTokenizer38.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher41 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer42 = strTokenizer38.setIgnoredMatcher(strMatcher41);
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder17.deleteFirst(strMatcher41);
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder14.deleteFirst(strMatcher41);
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder14.appendSeparator('4', 45);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder50 = strBuilder47.insert((int) '9', (float) 2L);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 57");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(strMatcher30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strMatcher41);
        org.junit.Assert.assertNotNull(strTokenizer42);
        org.junit.Assert.assertNotNull(strBuilder43);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strBuilder47);
    }

    @Test
    public void test04533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04533");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder0.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.append((float) '4');
        int int14 = strBuilder9.indexOf("", (int) (short) 10);
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder15.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder19.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder21.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder22.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder15.appendFixedWidthPadRight((java.lang.Object) strBuilder24, (int) (byte) -1, '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder27.append("\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder29.appendln("\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder32.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder36.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder38.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder39.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder32.appendFixedWidthPadRight((java.lang.Object) strBuilder41, (int) (byte) -1, '#');
        org.apache.commons.lang3.text.StrMatcher strMatcher45 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int46 = strBuilder32.lastIndexOf(strMatcher45);
        char[] charArray51 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer53 = new org.apache.commons.lang3.text.StrTokenizer(charArray51, ' ');
        int int54 = strTokenizer53.size();
        boolean boolean55 = strTokenizer53.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher56 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer57 = strTokenizer53.setIgnoredMatcher(strMatcher56);
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder32.deleteFirst(strMatcher56);
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = strBuilder29.deleteFirst(strMatcher56);
        org.apache.commons.lang3.text.StrBuilder strBuilder62 = strBuilder9.appendFixedWidthPadLeft((java.lang.Object) strBuilder59, 53, '$');
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder65 = strBuilder63.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer67 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray68 = strTokenizer67.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder69 = strBuilder63.appendAll((java.lang.Object[]) strArray68);
        org.apache.commons.lang3.text.StrBuilder strBuilder71 = strBuilder69.append((double) (short) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder72 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder75 = strBuilder72.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder77 = strBuilder75.appendln('#');
        java.lang.StringBuffer stringBuffer78 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder81 = strBuilder75.append(stringBuffer78, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder83 = strBuilder75.deleteFirst("hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder86 = strBuilder75.appendSeparator("4#4", "\n32.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder88 = strBuilder75.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder89 = strBuilder69.append((java.lang.CharSequence) strBuilder88);
        org.apache.commons.lang3.text.StrBuilder strBuilder92 = strBuilder69.replaceFirst("#", "[4#4]");
        org.apache.commons.lang3.text.StrBuilder strBuilder93 = strBuilder92.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder95 = strBuilder93.append(117);
        org.apache.commons.lang3.text.StrBuilder strBuilder96 = strBuilder59.append((java.lang.Object) strBuilder95);
        java.lang.Class<?> wildcardClass97 = strBuilder59.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strMatcher45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strMatcher56);
        org.junit.Assert.assertNotNull(strTokenizer57);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertNotNull(strBuilder59);
        org.junit.Assert.assertNotNull(strBuilder62);
        org.junit.Assert.assertNotNull(strBuilder65);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strBuilder69);
        org.junit.Assert.assertNotNull(strBuilder71);
        org.junit.Assert.assertNotNull(strBuilder75);
        org.junit.Assert.assertNotNull(strBuilder77);
        org.junit.Assert.assertNotNull(strBuilder81);
        org.junit.Assert.assertNotNull(strBuilder83);
        org.junit.Assert.assertNotNull(strBuilder86);
        org.junit.Assert.assertNotNull(strBuilder88);
        org.junit.Assert.assertNotNull(strBuilder89);
        org.junit.Assert.assertNotNull(strBuilder92);
        org.junit.Assert.assertNotNull(strBuilder93);
        org.junit.Assert.assertNotNull(strBuilder95);
        org.junit.Assert.assertNotNull(strBuilder96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test04534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04534");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer2 = new org.apache.commons.lang3.text.StrTokenizer(" #\n", '#');
        // The following exception was thrown during execution in test generation
        try {
            strTokenizer2.set("java.io.IOException: hi!falsejava.io.IOException: hi!false");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: set() is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04535");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder12.replaceFirst("", "");
        char[] charArray16 = strBuilder12.toCharArray();
        char[] charArray17 = strBuilder9.getChars(charArray16);
        java.io.Reader reader18 = strBuilder9.asReader();
        java.lang.Object obj19 = properties0.remove((java.lang.Object) strBuilder9);
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties20.keys();
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder22.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder25.appendSeparator('#', (int) (byte) 100);
        java.io.Reader reader29 = strBuilder25.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder30.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer34 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray35 = strTokenizer34.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder30.appendAll((java.lang.Object[]) strArray35);
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder30.replaceFirst('a', 'a');
        java.util.stream.IntStream intStream40 = strBuilder30.codePoints();
        java.lang.Object obj41 = properties20.replace((java.lang.Object) reader29, (java.lang.Object) intStream40);
        reader29.reset();
        properties0.load(reader29);
        java.io.PrintStream printStream44 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printStream44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
        org.junit.Assert.assertNotNull(reader18);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(reader29);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNotNull(intStream40);
        org.junit.Assert.assertNull(obj41);
    }

    @Test
    public void test04536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04536");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst('a', '4');
        java.io.Writer writer7 = strBuilder6.asWriter();
        char[] charArray12 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = new org.apache.commons.lang3.text.StrTokenizer(charArray12, ' ');
        int int15 = strTokenizer14.size();
        boolean boolean16 = strTokenizer14.hasNext();
        java.util.List<java.lang.String> strList17 = strTokenizer14.getTokenList();
        java.lang.String[] strArray21 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        boolean boolean24 = strList17.addAll((java.util.Collection<java.lang.String>) strList22);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer26 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray27 = strTokenizer26.getTokenArray();
        java.lang.String[] strArray28 = strTokenizer26.getTokenArray();
        boolean boolean29 = strTokenizer26.hasNext();
        int int30 = strTokenizer26.size();
        org.apache.commons.lang3.text.StrMatcher strMatcher31 = strTokenizer26.getQuoteMatcher();
        java.util.List<java.lang.String> strList32 = strTokenizer26.getTokenList();
        boolean boolean33 = strList17.retainAll((java.util.Collection<java.lang.String>) strList32);
        java.util.stream.Stream<java.lang.String> strStream34 = strList17.parallelStream();
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder6.appendWithSeparators((java.lang.Iterable<java.lang.String>) strList17, "\n36.0\n\n32.0");
        char[] charArray41 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer43 = new org.apache.commons.lang3.text.StrTokenizer(charArray41, ' ');
        int int44 = strTokenizer43.size();
        boolean boolean45 = strTokenizer43.hasNext();
        java.util.List<java.lang.String> strList46 = strTokenizer43.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = strBuilder47.replaceFirst("", "");
        char[] charArray51 = strBuilder47.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer53 = new org.apache.commons.lang3.text.StrTokenizer(charArray51, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer54 = new org.apache.commons.lang3.text.StrTokenizer(charArray51);
        boolean boolean55 = strList46.equals((java.lang.Object) charArray51);
        char[] charArray60 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer62 = new org.apache.commons.lang3.text.StrTokenizer(charArray60, ' ');
        int int63 = strTokenizer62.size();
        boolean boolean64 = strTokenizer62.hasNext();
        java.util.List<java.lang.String> strList65 = strTokenizer62.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder66 = new org.apache.commons.lang3.text.StrBuilder();
        int int67 = strBuilder66.capacity();
        java.lang.StringBuffer stringBuffer68 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder71 = strBuilder66.appendln(stringBuffer68, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder74 = strBuilder66.insert(1, (double) 32);
        java.lang.String str76 = strBuilder66.rightString((int) ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder79 = strBuilder66.insert(1, '#');
        boolean boolean80 = strList65.equals((java.lang.Object) strBuilder66);
        boolean boolean81 = strList46.containsAll((java.util.Collection<java.lang.String>) strList65);
        java.lang.String str83 = strList46.remove((int) (short) 0);
        java.util.Iterator<java.lang.String> strItor84 = strList46.iterator();
        java.util.Iterator<java.lang.String> strItor85 = strList46.iterator();
        boolean boolean86 = strList17.remove((java.lang.Object) strItor85);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(writer7);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(strMatcher31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strStream34);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(strBuilder50);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 32 + "'", int67 == 32);
        org.junit.Assert.assertNotNull(strBuilder71);
        org.junit.Assert.assertNotNull(strBuilder74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\n32.0" + "'", str76, "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "4#4" + "'", str83, "4#4");
        org.junit.Assert.assertNotNull(strItor84);
        org.junit.Assert.assertNotNull(strItor85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test04537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04537");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray5 = strTokenizer4.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder0.appendAll((java.lang.Object[]) strArray5);
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder0.replaceFirst('a', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray15 = strTokenizer14.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder10.appendAll((java.lang.Object[]) strArray15);
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder0.appendln(strBuilder16);
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder18.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder21.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder25.replaceFirst("", "");
        char[] charArray29 = strBuilder25.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder24.appendln(charArray29);
        boolean boolean31 = strBuilder0.equals((java.lang.Object) strBuilder24);
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder32.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder36.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder38.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder39.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder32.appendFixedWidthPadRight((java.lang.Object) strBuilder41, (int) (byte) -1, '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = strBuilder44.append("\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder44.replaceFirst("StrTokenizer[not tokenized yet]", "{}");
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder49.insert((int) (short) 1, (float) (-1));
        int int54 = strBuilder52.indexOf(" ");
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = strBuilder24.appendln((java.lang.Object) " ");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder57 = strBuilder24.deleteCharAt(15);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 15");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[]");
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strBuilder46);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(strBuilder55);
    }

    @Test
    public void test04538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04538");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst('a', '4');
        char[] charArray7 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder3.appendln(charArray7, (int) (short) 1, 100);
        int int13 = strBuilder3.lastIndexOf('$', 5);
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder3.append((float) 2L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = strBuilder15.substring(44, 51);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: end < start");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(strBuilder15);
    }

    @Test
    public void test04539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04539");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        char[] charArray13 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = new org.apache.commons.lang3.text.StrTokenizer(charArray13, ' ');
        int int16 = strTokenizer15.size();
        boolean boolean17 = strTokenizer15.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher18 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = strTokenizer15.setIgnoredMatcher(strMatcher18);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.replaceFirst("", "");
        java.lang.Object obj24 = properties0.putIfAbsent((java.lang.Object) strMatcher18, (java.lang.Object) strBuilder20);
        java.lang.Object obj27 = properties0.setProperty(" 4#4", "\n32.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = new org.apache.commons.lang3.text.StrBuilder();
        int int29 = strBuilder28.capacity();
        java.lang.StringBuffer stringBuffer30 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder28.appendln(stringBuffer30, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher34 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int35 = strBuilder33.lastIndexOf(strMatcher34);
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder33.insert((int) (short) 1, 32);
        java.util.Properties properties39 = new java.util.Properties();
        int int40 = properties39.size();
        boolean boolean42 = properties39.containsKey((java.lang.Object) (-1.0f));
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet43 = properties39.entrySet();
        java.lang.Object obj44 = properties0.putIfAbsent((java.lang.Object) strBuilder38, (java.lang.Object) objEntrySet43);
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = new org.apache.commons.lang3.text.StrBuilder();
        int int46 = strBuilder45.capacity();
        java.lang.StringBuffer stringBuffer47 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = strBuilder45.appendln(stringBuffer47, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder45.insert(1, (double) 32);
        java.lang.String str55 = strBuilder45.rightString((int) ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder45.replaceAll("", "hi!");
        boolean boolean59 = properties0.contains((java.lang.Object) "");
        java.util.Properties properties60 = new java.util.Properties(properties0);
        org.apache.commons.lang3.text.StrMatcher strMatcher62 = org.apache.commons.lang3.text.StrMatcher.stringMatcher("");
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder66 = strBuilder63.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder69 = strBuilder66.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder70 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder73 = strBuilder70.replaceFirst("", "");
        char[] charArray74 = strBuilder70.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder75 = strBuilder69.appendln(charArray74);
        int int79 = strMatcher62.isMatch(charArray74, (-1), (int) ' ', (int) (byte) -1);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer80 = new org.apache.commons.lang3.text.StrTokenizer(charArray74);
        java.lang.Object obj81 = properties60.remove((java.lang.Object) charArray74);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer83 = new org.apache.commons.lang3.text.StrTokenizer(charArray74, "{StrTokenizer[not tokenized yet]=}");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer85 = new org.apache.commons.lang3.text.StrTokenizer(charArray74, "\n-1.0");
        int int86 = strTokenizer85.size();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strMatcher18);
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 32 + "'", int29 == 32);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strMatcher34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objEntrySet43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 32 + "'", int46 == 32);
        org.junit.Assert.assertNotNull(strBuilder50);
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\n32.0" + "'", str55, "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strMatcher62);
        org.junit.Assert.assertNotNull(strBuilder66);
        org.junit.Assert.assertNotNull(strBuilder69);
        org.junit.Assert.assertNotNull(strBuilder73);
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[]");
        org.junit.Assert.assertNotNull(strBuilder75);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test04540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04540");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        char[] charArray13 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = new org.apache.commons.lang3.text.StrTokenizer(charArray13, ' ');
        int int16 = strTokenizer15.size();
        boolean boolean17 = strTokenizer15.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher18 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = strTokenizer15.setIgnoredMatcher(strMatcher18);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.replaceFirst("", "");
        java.lang.Object obj24 = properties0.putIfAbsent((java.lang.Object) strMatcher18, (java.lang.Object) strBuilder20);
        java.util.Properties properties25 = new java.util.Properties();
        java.util.Properties properties26 = new java.util.Properties(properties25);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder27.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder30.replaceFirst('a', '4');
        java.io.Writer writer34 = strBuilder33.asWriter();
        properties26.store(writer34, "");
        java.util.Properties properties37 = new java.util.Properties();
        int int38 = properties37.size();
        boolean boolean40 = properties37.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties41 = new java.util.Properties();
        int int42 = properties41.size();
        boolean boolean44 = properties41.containsKey((java.lang.Object) (-1.0f));
        properties37.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties41.keys();
        boolean boolean47 = properties26.containsValue((java.lang.Object) objEnumeration46);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.util.Collection<java.lang.Object> objCollection49 = properties26.values();
        java.util.Properties properties50 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder51.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer56 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray57 = strTokenizer56.getTokenArray();
        java.lang.String[] strArray58 = strTokenizer56.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder60 = strBuilder54.appendWithSeparators((java.lang.Object[]) strArray58, "4#4");
        char[] charArray63 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer64 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray63);
        java.lang.Object obj65 = properties50.getOrDefault((java.lang.Object) strBuilder54, (java.lang.Object) strTokenizer64);
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties50);
        boolean boolean67 = properties50.isEmpty();
        java.util.Set<java.lang.Object> objSet68 = properties50.keySet();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strMatcher18);
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(writer34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objEnumeration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objCollection49);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strBuilder60);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer64);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objSet68);
    }

    @Test
    public void test04541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04541");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.lang.Object obj4 = properties0.clone();
        java.lang.Object obj5 = properties0.clone();
        java.util.Enumeration<?> wildcardEnumeration6 = properties0.propertyNames();
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder9.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.setNullText("");
        java.lang.Object obj13 = properties0.remove((java.lang.Object) strBuilder12);
        boolean boolean14 = properties0.isEmpty();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("{h={}}");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer18 = strTokenizer16.setIgnoreEmptyTokens(true);
        java.lang.Object obj19 = properties0.get((java.lang.Object) strTokenizer16);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "{}");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertNotNull(wildcardEnumeration6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strTokenizer16);
        org.junit.Assert.assertNotNull(strTokenizer18);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test04542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04542");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder0.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder7.appendNull();
        int int12 = strBuilder7.indexOf('7');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test04543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04543");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        java.lang.String str10 = strBuilder0.rightString((int) ' ');
        boolean boolean12 = strBuilder0.startsWith("");
        char[] charArray13 = strBuilder0.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder0.ensureCapacity((int) (short) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder15.appendSeparator('#');
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder15.replaceAll("java.io.IOException: {}", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.appendSeparator('t', '$');
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder20.appendln("E");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer26 = strBuilder20.asTokenizer();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\n32.0" + "'", str10, "\n32.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "\n32.0");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "\n32.0");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[\n, 3, 2, ., 0]");
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(strTokenizer26);
    }

    @Test
    public void test04544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04544");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        java.util.stream.IntStream intStream6 = strBuilder0.codePoints();
        org.apache.commons.lang3.text.StrMatcher strMatcher9 = org.apache.commons.lang3.text.StrMatcher.stringMatcher("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder10.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder13.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder17.replaceFirst("", "");
        char[] charArray21 = strBuilder17.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder16.appendln(charArray21);
        int int26 = strMatcher9.isMatch(charArray21, (-1), (int) ' ', (int) (byte) -1);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder27.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer31 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray32 = strTokenizer31.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder27.appendAll((java.lang.Object[]) strArray32);
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder27.replaceFirst('a', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder37.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer41 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray42 = strTokenizer41.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder37.appendAll((java.lang.Object[]) strArray42);
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder27.appendln(strBuilder43);
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = strBuilder43.appendln((long) 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder43.appendSeparator("hi!", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder50.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = strBuilder53.replaceFirst('a', '4');
        java.io.Writer writer57 = strBuilder56.asWriter();
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = strBuilder58.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = strBuilder61.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder65 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder68 = strBuilder65.replaceFirst("", "");
        char[] charArray69 = strBuilder65.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder70 = strBuilder64.appendln(charArray69);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer71 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray69);
        writer57.write(charArray69);
        org.apache.commons.lang3.text.StrBuilder strBuilder73 = strBuilder49.append(charArray69);
        org.apache.commons.lang3.text.StrMatcher strMatcher74 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray69);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer75 = new org.apache.commons.lang3.text.StrTokenizer("java.io.IOException", strMatcher9, strMatcher74);
        org.apache.commons.lang3.text.StrBuilder strBuilder76 = strBuilder0.appendln((java.lang.Object) strMatcher74);
        org.apache.commons.lang3.text.StrBuilder strBuilder78 = strBuilder0.appendln(0);
        org.apache.commons.lang3.text.StrBuilder strBuilder80 = strBuilder0.deleteFirst('a');
        int int83 = strBuilder80.lastIndexOf('o', 35);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(intStream6);
        org.junit.Assert.assertNotNull(strMatcher9);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[]");
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strBuilder43);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strBuilder46);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertNotNull(strBuilder56);
        org.junit.Assert.assertNotNull(writer57);
        org.junit.Assert.assertNotNull(strBuilder61);
        org.junit.Assert.assertNotNull(strBuilder64);
        org.junit.Assert.assertNotNull(strBuilder68);
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[]");
        org.junit.Assert.assertNotNull(strBuilder70);
        org.junit.Assert.assertNotNull(strTokenizer71);
        org.junit.Assert.assertNotNull(strBuilder73);
        org.junit.Assert.assertNotNull(strMatcher74);
        org.junit.Assert.assertNotNull(strBuilder76);
        org.junit.Assert.assertNotNull(strBuilder78);
        org.junit.Assert.assertNotNull(strBuilder80);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 15 + "'", int83 == 15);
    }

    @Test
    public void test04545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04545");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.setLength(32);
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder10.trim();
        boolean boolean13 = strBuilder10.contains("4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder10.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder14.ensureCapacity(58);
        java.lang.String str18 = strBuilder14.rightString(6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder14.insert(14, "truetrue\n");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 14");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "32.0" + "'", str18, "32.0");
    }

    @Test
    public void test04546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04546");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer2 = new org.apache.commons.lang3.text.StrTokenizer("", "0");
        boolean boolean3 = strTokenizer2.hasPrevious();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer5 = strTokenizer2.setEmptyTokenAsNull(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strTokenizer5);
    }

    @Test
    public void test04547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04547");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder2.minimizeCapacity();
        int int5 = strBuilder3.lastIndexOf('#');
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder3.append("");
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder3.setNullText("\n#\n\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder12.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder13.append((double) 10L);
        boolean boolean17 = strBuilder15.contains('a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder9.appendln(strBuilder15, 24, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: startIndex must be valid");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test04548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04548");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        java.lang.Object obj2 = properties0.clone();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder9.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder3.appendFixedWidthPadRight((java.lang.Object) strBuilder12, (int) (byte) -1, '#');
        java.lang.Object obj16 = properties0.get((java.lang.Object) strBuilder3);
        java.util.Properties properties17 = new java.util.Properties();
        int int18 = properties17.size();
        boolean boolean20 = properties17.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties21 = new java.util.Properties();
        int int22 = properties21.size();
        boolean boolean24 = properties21.containsKey((java.lang.Object) (-1.0f));
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        char[] charArray30 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer32 = new org.apache.commons.lang3.text.StrTokenizer(charArray30, ' ');
        int int33 = strTokenizer32.size();
        boolean boolean34 = strTokenizer32.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher35 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer36 = strTokenizer32.setIgnoredMatcher(strMatcher35);
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder37.replaceFirst("", "");
        java.lang.Object obj41 = properties17.putIfAbsent((java.lang.Object) strMatcher35, (java.lang.Object) strBuilder37);
        boolean boolean42 = strBuilder3.equals(obj41);
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder3.appendln((long) (short) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = strBuilder3.clear();
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = strBuilder3.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder46.appendln((long) 74);
        char[] charArray49 = strBuilder46.toCharArray();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strMatcher35);
        org.junit.Assert.assertNotNull(strTokenizer36);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strBuilder45);
        org.junit.Assert.assertNotNull(strBuilder46);
        org.junit.Assert.assertNotNull(strBuilder48);
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "74\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "74\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[7, 4, \n]");
    }

    @Test
    public void test04549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04549");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        boolean boolean8 = strTokenizer6.hasNext();
        java.util.List<java.lang.String> strList9 = strTokenizer6.getTokenList();
        java.lang.String[] strArray13 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        boolean boolean16 = strList9.addAll((java.util.Collection<java.lang.String>) strList14);
        char[] charArray21 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer23 = new org.apache.commons.lang3.text.StrTokenizer(charArray21, ' ');
        int int24 = strTokenizer23.size();
        boolean boolean25 = strTokenizer23.hasNext();
        java.util.List<java.lang.String> strList26 = strTokenizer23.getTokenList();
        java.lang.String[] strArray30 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        boolean boolean33 = strList26.addAll((java.util.Collection<java.lang.String>) strList31);
        java.util.Spliterator<java.lang.String> strSpliterator34 = strList31.spliterator();
        int int35 = strList31.size();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer38 = new org.apache.commons.lang3.text.StrTokenizer(" 4#4", "");
        int int39 = strList31.lastIndexOf((java.lang.Object) strTokenizer38);
        java.util.List<java.lang.String> strList40 = strTokenizer38.getTokenList();
        org.apache.commons.lang3.text.StrSubstitutor strSubstitutor41 = new org.apache.commons.lang3.text.StrSubstitutor();
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = new org.apache.commons.lang3.text.StrBuilder();
        int int43 = strBuilder42.capacity();
        java.lang.StringBuffer stringBuffer44 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder42.appendln(stringBuffer44, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder42.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder49.appendln(true);
        boolean boolean54 = strSubstitutor41.replaceIn(strBuilder51, (int) '$', 0);
        boolean boolean55 = strList40.equals((java.lang.Object) '$');
        boolean boolean56 = strList9.retainAll((java.util.Collection<java.lang.String>) strList40);
        java.util.Iterator<java.lang.String> strItor57 = strList40.iterator();
        java.util.stream.Stream<java.lang.String> strStream58 = strList40.stream();
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder62 = strBuilder59.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer64 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher65 = strTokenizer64.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder67 = strBuilder59.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer64, "h");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer69 = strTokenizer64.reset("\n32.0");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer71 = strTokenizer69.setEmptyTokenAsNull(true);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer72 = strTokenizer71.reset();
        int int73 = strList40.indexOf((java.lang.Object) strTokenizer71);
        // The following exception was thrown during execution in test generation
        try {
            strTokenizer71.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove() is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strSpliterator34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 32 + "'", int43 == 32);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(strBuilder51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertNotNull(strStream58);
        org.junit.Assert.assertNotNull(strBuilder62);
        org.junit.Assert.assertNotNull(strMatcher65);
        org.junit.Assert.assertNotNull(strBuilder67);
        org.junit.Assert.assertNotNull(strTokenizer69);
        org.junit.Assert.assertNotNull(strTokenizer71);
        org.junit.Assert.assertNotNull(strTokenizer72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
    }

    @Test
    public void test04550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04550");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        char[] charArray13 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = new org.apache.commons.lang3.text.StrTokenizer(charArray13, ' ');
        int int16 = strTokenizer15.size();
        boolean boolean17 = strTokenizer15.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher18 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = strTokenizer15.setIgnoredMatcher(strMatcher18);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.replaceFirst("", "");
        java.lang.Object obj24 = properties0.putIfAbsent((java.lang.Object) strMatcher18, (java.lang.Object) strBuilder20);
        java.lang.Object obj27 = properties0.setProperty(" 4#4", "\n32.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder28.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer33 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher34 = strTokenizer33.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder28.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer33, "h");
        int int37 = strTokenizer33.nextIndex();
        boolean boolean38 = properties0.containsValue((java.lang.Object) strTokenizer33);
        char[] charArray43 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer45 = new org.apache.commons.lang3.text.StrTokenizer(charArray43, ' ');
        int int46 = strTokenizer45.size();
        boolean boolean47 = strTokenizer45.hasNext();
        java.util.List<java.lang.String> strList48 = strTokenizer45.getTokenList();
        java.lang.String[] strArray52 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        boolean boolean55 = strList48.addAll((java.util.Collection<java.lang.String>) strList53);
        java.lang.String str57 = strList53.remove(0);
        char[] charArray62 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer64 = new org.apache.commons.lang3.text.StrTokenizer(charArray62, ' ');
        int int65 = strTokenizer64.size();
        boolean boolean66 = strTokenizer64.hasNext();
        java.util.List<java.lang.String> strList67 = strTokenizer64.getTokenList();
        java.lang.String[] strArray71 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        boolean boolean74 = strList67.addAll((java.util.Collection<java.lang.String>) strList72);
        boolean boolean75 = strList53.addAll((java.util.Collection<java.lang.String>) strList72);
        java.lang.Object obj76 = properties0.remove((java.lang.Object) strList72);
        java.util.Spliterator<java.lang.String> strSpliterator77 = strList72.spliterator();
        java.util.stream.Stream<java.lang.String> strStream78 = strList72.parallelStream();
        boolean boolean79 = strList72.isEmpty();
        java.util.ListIterator<java.lang.String> strItor80 = strList72.listIterator();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strMatcher18);
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(strMatcher34);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\n32.0" + "'", str57, "\n32.0");
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(strSpliterator77);
        org.junit.Assert.assertNotNull(strStream78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strItor80);
    }

    @Test
    public void test04551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04551");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer2 = new org.apache.commons.lang3.text.StrTokenizer("h", "10.0");
        org.apache.commons.lang3.text.StrMatcher strMatcher3 = strTokenizer2.getTrimmerMatcher();
        // The following exception was thrown during execution in test generation
        try {
            strTokenizer2.set("io.IOException: hi!116\n\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: set() is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMatcher3);
    }

    @Test
    public void test04552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04552");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        boolean boolean8 = strTokenizer6.hasNext();
        java.util.List<java.lang.String> strList9 = strTokenizer6.getTokenList();
        java.lang.String[] strArray13 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        boolean boolean16 = strList9.addAll((java.util.Collection<java.lang.String>) strList14);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer18 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray19 = strTokenizer18.getTokenArray();
        java.lang.String[] strArray20 = strTokenizer18.getTokenArray();
        boolean boolean21 = strTokenizer18.hasNext();
        int int22 = strTokenizer18.size();
        org.apache.commons.lang3.text.StrMatcher strMatcher23 = strTokenizer18.getQuoteMatcher();
        java.util.List<java.lang.String> strList24 = strTokenizer18.getTokenList();
        boolean boolean25 = strList9.retainAll((java.util.Collection<java.lang.String>) strList24);
        java.util.Properties properties26 = new java.util.Properties();
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties27.keys();
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder29.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder32.appendSeparator('#', (int) (byte) 100);
        java.io.Reader reader36 = strBuilder32.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder37.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer41 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray42 = strTokenizer41.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder37.appendAll((java.lang.Object[]) strArray42);
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = strBuilder37.replaceFirst('a', 'a');
        java.util.stream.IntStream intStream47 = strBuilder37.codePoints();
        java.lang.Object obj48 = properties27.replace((java.lang.Object) reader36, (java.lang.Object) intStream47);
        reader36.reset();
        properties26.load(reader36);
        int int51 = strList9.indexOf((java.lang.Object) properties26);
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = strBuilder52.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer57 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher58 = strTokenizer57.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder60 = strBuilder52.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer57, "h");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer62 = strTokenizer57.reset("\n32.0");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer64 = strTokenizer62.setEmptyTokenAsNull(true);
        java.util.List<java.lang.String> strList65 = strTokenizer62.getTokenList();
        boolean boolean66 = strList9.retainAll((java.util.Collection<java.lang.String>) strList65);
        java.lang.String[] strArray69 = new java.lang.String[] { "StrTokenizer[4#4]", "\n32.0" };
        java.lang.Comparable<java.lang.String>[] strComparableArray70 = strList65.toArray((java.lang.Comparable<java.lang.String>[]) strArray69);
        java.lang.Object[] objArray71 = strList65.toArray();
        int int72 = strList65.size();
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(strMatcher23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(reader36);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strBuilder43);
        org.junit.Assert.assertNotNull(strBuilder46);
        org.junit.Assert.assertNotNull(intStream47);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strBuilder55);
        org.junit.Assert.assertNotNull(strMatcher58);
        org.junit.Assert.assertNotNull(strBuilder60);
        org.junit.Assert.assertNotNull(strTokenizer62);
        org.junit.Assert.assertNotNull(strTokenizer64);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strComparableArray70);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[32.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[32.0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
    }

    @Test
    public void test04553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04553");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray2 = strTokenizer1.getTokenArray();
        java.lang.String[] strArray3 = strTokenizer1.getTokenArray();
        boolean boolean4 = strTokenizer1.isIgnoreEmptyTokens();
        org.apache.commons.lang3.text.StrMatcher strMatcher5 = strTokenizer1.getTrimmerMatcher();
        java.lang.String str6 = strTokenizer1.previousToken();
        boolean boolean7 = strTokenizer1.hasNext();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strMatcher5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test04554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04554");
        java.lang.Throwable throwable1 = null;
        java.io.IOException iOException2 = new java.io.IOException("\n32.0", throwable1);
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties8 = new java.util.Properties();
        int int9 = properties8.size();
        boolean boolean11 = properties8.containsKey((java.lang.Object) (-1.0f));
        properties4.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.lang.String str14 = properties8.getProperty("h");
        java.util.Enumeration<?> wildcardEnumeration15 = properties8.propertyNames();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet16 = properties8.entrySet();
        java.io.IOException iOException17 = new java.io.IOException();
        java.lang.Throwable[] throwableArray18 = iOException17.getSuppressed();
        java.lang.Throwable[] throwableArray19 = iOException17.getSuppressed();
        java.io.IOException iOException20 = new java.io.IOException((java.lang.Throwable) iOException17);
        boolean boolean21 = properties8.containsValue((java.lang.Object) iOException20);
        iOException3.addSuppressed((java.lang.Throwable) iOException20);
        java.io.IOException iOException23 = new java.io.IOException((java.lang.Throwable) iOException20);
        java.io.IOException iOException24 = new java.io.IOException((java.lang.Throwable) iOException20);
        java.lang.Throwable throwable26 = null;
        java.io.IOException iOException27 = new java.io.IOException("\n32.0", throwable26);
        java.lang.Throwable[] throwableArray28 = iOException27.getSuppressed();
        iOException24.addSuppressed((java.lang.Throwable) iOException27);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(wildcardEnumeration15);
        org.junit.Assert.assertNotNull(objEntrySet16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(throwableArray28);
    }

    @Test
    public void test04555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04555");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        char[] charArray13 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = new org.apache.commons.lang3.text.StrTokenizer(charArray13, ' ');
        int int16 = strTokenizer15.size();
        boolean boolean17 = strTokenizer15.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher18 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = strTokenizer15.setIgnoredMatcher(strMatcher18);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.replaceFirst("", "");
        java.lang.Object obj24 = properties0.putIfAbsent((java.lang.Object) strMatcher18, (java.lang.Object) strBuilder20);
        java.lang.Object obj27 = properties0.setProperty(" 4#4", "\n32.0");
        java.lang.Object obj30 = properties0.setProperty("hi!", "hi!");
        java.lang.String str32 = properties0.getProperty("{}");
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder33.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder35.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder36.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder36.replaceFirst('4', 'a');
        boolean boolean42 = properties0.containsKey((java.lang.Object) 'a');
        java.util.Set<java.lang.Object> objSet43 = properties0.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet44 = properties0.entrySet();
        java.lang.String str47 = properties0.getProperty("aaaa\n35.0", "");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strMatcher18);
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objSet43);
        org.junit.Assert.assertNotNull(objEntrySet44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test04556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04556");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("\n32.0 ");
        java.util.List<java.lang.String> strList2 = strTokenizer1.getTokenList();
        org.junit.Assert.assertNotNull(strTokenizer1);
        org.junit.Assert.assertNotNull(strList2);
    }

    @Test
    public void test04557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04557");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        int int9 = strBuilder0.capacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder0.append((double) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder11.deleteFirst('4');
        char[] charArray18 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer20 = new org.apache.commons.lang3.text.StrTokenizer(charArray18, ' ');
        int int21 = strTokenizer20.size();
        boolean boolean22 = strTokenizer20.hasNext();
        java.util.List<java.lang.String> strList23 = strTokenizer20.getTokenList();
        java.lang.String[] strArray27 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.addAll((java.util.Collection<java.lang.String>) strList28);
        java.lang.String str32 = strList28.remove(0);
        char[] charArray37 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer39 = new org.apache.commons.lang3.text.StrTokenizer(charArray37, ' ');
        int int40 = strTokenizer39.size();
        boolean boolean41 = strTokenizer39.hasNext();
        java.util.List<java.lang.String> strList42 = strTokenizer39.getTokenList();
        java.lang.String[] strArray46 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        boolean boolean49 = strList42.addAll((java.util.Collection<java.lang.String>) strList47);
        boolean boolean50 = strList28.addAll((java.util.Collection<java.lang.String>) strList47);
        java.util.stream.Stream<java.lang.String> strStream51 = strList47.parallelStream();
        strList47.clear();
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder11.appendWithSeparators((java.lang.Iterable<java.lang.String>) strList47, "\ntrue\n");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = strList47.remove(103);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 103, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\n32.0" + "'", str32, "\n32.0");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strStream51);
        org.junit.Assert.assertNotNull(strBuilder54);
    }

    @Test
    public void test04558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04558");
        java.lang.Throwable throwable1 = null;
        java.io.IOException iOException2 = new java.io.IOException("97\nhi!101.0\n", throwable1);
    }

    @Test
    public void test04559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04559");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder5.appendNewLine();
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder6.appendSeparator('#');
        int int11 = strBuilder6.lastIndexOf("0.0100\n", 104);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test04560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04560");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder2.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.ensureCapacity((int) (short) 10);
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder6.replaceFirst("", "");
        java.lang.String str10 = strBuilder6.getNewLineText();
        java.util.stream.IntStream intStream11 = strBuilder6.chars();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder3.append((java.lang.CharSequence) strBuilder6);
        java.lang.StringBuffer stringBuffer13 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder6.appendln(stringBuffer13);
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder6.append(false);
        java.lang.String str17 = strBuilder16.toString();
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(intStream11);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\nfalse" + "'", str17, "\nfalse");
    }

    @Test
    public void test04561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04561");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.lang.String str10 = properties4.getProperty("h");
        java.util.Enumeration<?> wildcardEnumeration11 = properties4.propertyNames();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray17 = strTokenizer16.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder12.appendAll((java.lang.Object[]) strArray17);
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder12.replaceFirst('a', 'a');
        char[] charArray26 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer28 = new org.apache.commons.lang3.text.StrTokenizer(charArray26, ' ');
        int int29 = strTokenizer28.size();
        boolean boolean30 = strTokenizer28.hasNext();
        java.util.List<java.lang.String> strList31 = strTokenizer28.getTokenList();
        java.lang.String[] strArray35 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        boolean boolean38 = strList31.addAll((java.util.Collection<java.lang.String>) strList36);
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder12.appendAll((java.lang.Iterable<java.lang.String>) strList36);
        org.apache.commons.lang3.text.StrSubstitutor strSubstitutor40 = new org.apache.commons.lang3.text.StrSubstitutor();
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = new org.apache.commons.lang3.text.StrBuilder();
        int int42 = strBuilder41.capacity();
        java.lang.StringBuffer stringBuffer43 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = strBuilder41.appendln(stringBuffer43, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder41.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = strBuilder48.appendln(true);
        boolean boolean53 = strSubstitutor40.replaceIn(strBuilder50, (int) '$', 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder12.append((java.lang.CharSequence) strBuilder50);
        boolean boolean55 = properties4.equals((java.lang.Object) strBuilder12);
        java.util.Enumeration<java.lang.Object> objEnumeration56 = properties4.keys();
        properties4.clear();
        java.lang.String str59 = properties4.getProperty("#");
        java.io.InputStream inputStream60 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.loadFromXML(inputStream60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(wildcardEnumeration11);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 32 + "'", int42 == 32);
        org.junit.Assert.assertNotNull(strBuilder46);
        org.junit.Assert.assertNotNull(strBuilder48);
        org.junit.Assert.assertNotNull(strBuilder50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objEnumeration56);
        org.junit.Assert.assertNull(str59);
    }

    @Test
    public void test04562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04562");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        boolean boolean9 = strBuilder0.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder0.appendSeparator('a', ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder13.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer17 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray18 = strTokenizer17.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder13.appendAll((java.lang.Object[]) strArray18);
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder13.replaceFirst('a', 'a');
        java.lang.StringBuffer stringBuffer23 = strBuilder22.toStringBuffer();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder0.append(stringBuffer23);
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder24.appendln((float) (-1));
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder26.replaceAll("a", "\n32.0a");
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder29.appendNull();
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder33.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder36.replaceFirst("", "");
        char[] charArray40 = strBuilder36.toCharArray();
        char[] charArray41 = strBuilder33.getChars(charArray40);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer42 = new org.apache.commons.lang3.text.StrTokenizer(charArray40);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer43 = new org.apache.commons.lang3.text.StrTokenizer(charArray40);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer45 = new org.apache.commons.lang3.text.StrTokenizer(charArray40, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        // The following exception was thrown during execution in test generation
        try {
            strBuilder29.getChars(0, (int) (short) 1, charArray40, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(stringBuffer23);
        org.junit.Assert.assertEquals(stringBuffer23.toString(), "");
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[]");
    }

    @Test
    public void test04563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04563");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.setLength(32);
        java.io.Writer writer11 = strBuilder10.asWriter();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = new org.apache.commons.lang3.text.StrBuilder();
        int int13 = strBuilder12.capacity();
        java.lang.StringBuffer stringBuffer14 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder12.appendln(stringBuffer14, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder12.insert(1, (double) 32);
        java.lang.String str22 = strBuilder12.rightString((int) ' ');
        boolean boolean24 = strBuilder12.startsWith("");
        char[] charArray25 = strBuilder12.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder26.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer31 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray32 = strTokenizer31.getTokenArray();
        java.lang.String[] strArray33 = strTokenizer31.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder29.appendWithSeparators((java.lang.Object[]) strArray33, "4#4");
        org.apache.commons.lang3.text.StrMatcher strMatcher36 = org.apache.commons.lang3.text.StrMatcher.tabMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder35.deleteAll(strMatcher36);
        int int38 = strBuilder12.lastIndexOf(strMatcher36);
        boolean boolean40 = strBuilder12.startsWith("StrTokenizer[not tokenized yet]");
        java.io.Writer writer41 = writer11.append((java.lang.CharSequence) "StrTokenizer[not tokenized yet]");
        writer41.close();
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = new org.apache.commons.lang3.text.StrBuilder();
        int int44 = strBuilder43.capacity();
        java.lang.StringBuffer stringBuffer45 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder43.appendln(stringBuffer45, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder43.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder43.setLength(32);
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder53.trim();
        java.io.Writer writer55 = writer41.append((java.lang.CharSequence) strBuilder53);
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder56.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = strBuilder58.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder62 = strBuilder59.appendSeparator("hi!", "4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = new org.apache.commons.lang3.text.StrBuilder();
        int int64 = strBuilder63.capacity();
        java.lang.StringBuffer stringBuffer65 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder68 = strBuilder63.appendln(stringBuffer65, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher69 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int70 = strBuilder68.lastIndexOf(strMatcher69);
        org.apache.commons.lang3.text.StrBuilder strBuilder72 = strBuilder59.replaceFirst(strMatcher69, "hi!");
        char[] charArray75 = strBuilder72.toCharArray(0, (int) (short) 10);
        org.apache.commons.lang3.text.StrBuilder strBuilder77 = strBuilder72.deleteAll("\n32.0java.io.IOException: hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder80 = strBuilder72.appendSeparator('4', ' ');
        char[] charArray81 = strBuilder72.toCharArray();
        // The following exception was thrown during execution in test generation
        try {
            writer41.write(charArray81, (int) '\000', 6);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: Invalid length: 6");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(writer11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 32 + "'", int13 == 32);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\n32.0" + "'", str22, "\n32.0");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\n32.0");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\n32.0");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\n, 3, 2, ., 0]");
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(strMatcher36);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(writer41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 32 + "'", int44 == 32);
        org.junit.Assert.assertNotNull(strBuilder48);
        org.junit.Assert.assertNotNull(strBuilder51);
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertNotNull(writer55);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertNotNull(strBuilder59);
        org.junit.Assert.assertNotNull(strBuilder62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 32 + "'", int64 == 32);
        org.junit.Assert.assertNotNull(strBuilder68);
        org.junit.Assert.assertNotNull(strMatcher69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(strBuilder72);
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[4, #, 4]");
        org.junit.Assert.assertNotNull(strBuilder77);
        org.junit.Assert.assertNotNull(strBuilder80);
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "4#44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "4#44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[4, #, 4, 4]");
    }

    @Test
    public void test04564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04564");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder4.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder6.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder0.appendFixedWidthPadRight((java.lang.Object) strBuilder9, (int) (byte) -1, '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.append("\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder12.replaceFirst("StrTokenizer[not tokenized yet]", "{}");
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder17.insert((int) (short) 1, (float) (-1));
        java.lang.StringBuffer stringBuffer21 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder17.append(stringBuffer21, (-1), 10);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder24.appendSeparator("{}3.0", "1001\n");
        java.io.Reader reader28 = strBuilder27.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder27.appendln(strBuilder29, (int) 't', 166);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(reader28);
        org.junit.Assert.assertNotNull(strBuilder32);
    }

    @Test
    public void test04565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04565");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        java.lang.Object obj2 = properties0.clone();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder9.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder3.appendFixedWidthPadRight((java.lang.Object) strBuilder12, (int) (byte) -1, '#');
        java.lang.Object obj16 = properties0.get((java.lang.Object) strBuilder3);
        java.util.Properties properties17 = new java.util.Properties();
        int int18 = properties17.size();
        boolean boolean20 = properties17.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties21 = new java.util.Properties();
        int int22 = properties21.size();
        boolean boolean24 = properties21.containsKey((java.lang.Object) (-1.0f));
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        char[] charArray30 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer32 = new org.apache.commons.lang3.text.StrTokenizer(charArray30, ' ');
        int int33 = strTokenizer32.size();
        boolean boolean34 = strTokenizer32.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher35 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer36 = strTokenizer32.setIgnoredMatcher(strMatcher35);
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder37.replaceFirst("", "");
        java.lang.Object obj41 = properties17.putIfAbsent((java.lang.Object) strMatcher35, (java.lang.Object) strBuilder37);
        boolean boolean42 = strBuilder3.equals(obj41);
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder3.appendln((long) (short) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = strBuilder3.clear();
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = strBuilder3.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder46.appendln((long) 74);
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder49.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = strBuilder52.appendSeparator('#', (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder57 = strBuilder55.append((float) '$');
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = strBuilder55.appendln(32);
        java.io.Reader reader60 = strBuilder55.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder62 = strBuilder55.setNewLineText("00.0\000\000\000\000\000");
        java.lang.StringBuffer stringBuffer63 = strBuilder62.toStringBuffer();
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = strBuilder46.append(stringBuffer63);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strMatcher35);
        org.junit.Assert.assertNotNull(strTokenizer36);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strBuilder45);
        org.junit.Assert.assertNotNull(strBuilder46);
        org.junit.Assert.assertNotNull(strBuilder48);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(strBuilder55);
        org.junit.Assert.assertNotNull(strBuilder57);
        org.junit.Assert.assertNotNull(strBuilder59);
        org.junit.Assert.assertNotNull(reader60);
        org.junit.Assert.assertNotNull(strBuilder62);
        org.junit.Assert.assertNotNull(stringBuffer63);
        org.junit.Assert.assertEquals(stringBuffer63.toString(), "#36.032\n");
        org.junit.Assert.assertNotNull(strBuilder64);
    }

    @Test
    public void test04566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04566");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer5 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray6 = strTokenizer5.getTokenArray();
        java.lang.String[] strArray7 = strTokenizer5.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder3.appendWithSeparators((java.lang.Object[]) strArray7, "4#4");
        org.apache.commons.lang3.text.StrMatcher strMatcher10 = org.apache.commons.lang3.text.StrMatcher.tabMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.deleteAll(strMatcher10);
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder9.trim();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder12.replaceAll("{}3.0", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder12.append("\na32.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder18.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer23 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher24 = strTokenizer23.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder18.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer23, "h");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer28 = strTokenizer23.reset("\n32.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder29.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder33.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder35.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder36.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder29.appendFixedWidthPadRight((java.lang.Object) strBuilder38, (int) (byte) -1, '#');
        org.apache.commons.lang3.text.StrMatcher strMatcher42 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int43 = strBuilder29.lastIndexOf(strMatcher42);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer44 = strTokenizer23.setQuoteMatcher(strMatcher42);
        int int45 = strBuilder17.lastIndexOf(strMatcher42);
        java.lang.StringBuffer stringBuffer46 = strBuilder17.toStringBuffer();
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder17.appendln((float) 117);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strMatcher10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strMatcher24);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strTokenizer28);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertNotNull(strMatcher42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(strTokenizer44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(stringBuffer46);
        org.junit.Assert.assertEquals(stringBuffer46.toString(), "\na32.0");
        org.junit.Assert.assertNotNull(strBuilder48);
    }

    @Test
    public void test04567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04567");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher6 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int7 = strBuilder5.lastIndexOf(strMatcher6);
        org.apache.commons.lang3.text.StrMatcher strMatcher8 = org.apache.commons.lang3.text.StrMatcher.noneMatcher();
        boolean boolean9 = strBuilder5.contains(strMatcher8);
        boolean boolean11 = strBuilder5.endsWith("java.io.IOException: hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder12.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer17 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray18 = strTokenizer17.getTokenArray();
        java.lang.String[] strArray19 = strTokenizer17.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder15.appendWithSeparators((java.lang.Object[]) strArray19, "4#4");
        java.util.Properties properties22 = new java.util.Properties();
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.keys();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder24.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder27.appendSeparator('#', (int) (byte) 100);
        java.io.Reader reader31 = strBuilder27.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder32.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer36 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray37 = strTokenizer36.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder32.appendAll((java.lang.Object[]) strArray37);
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder32.replaceFirst('a', 'a');
        java.util.stream.IntStream intStream42 = strBuilder32.codePoints();
        java.lang.Object obj43 = properties22.replace((java.lang.Object) reader31, (java.lang.Object) intStream42);
        long long45 = reader31.skip(0L);
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder46.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer50 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray51 = strTokenizer50.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder46.appendAll((java.lang.Object[]) strArray51);
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = strBuilder46.replaceFirst('a', 'a');
        java.util.stream.IntStream intStream56 = strBuilder46.codePoints();
        org.apache.commons.lang3.text.StrBuilder strBuilder57 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder60 = strBuilder57.replaceFirst("", "");
        char[] charArray61 = strBuilder57.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer63 = new org.apache.commons.lang3.text.StrTokenizer(charArray61, "");
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = strBuilder46.appendln(charArray61);
        int int65 = reader31.read(charArray61);
        org.apache.commons.lang3.text.StrBuilder strBuilder66 = strBuilder15.append(charArray61);
        org.apache.commons.lang3.text.StrBuilder strBuilder68 = strBuilder66.appendln(50);
        java.util.stream.IntStream intStream69 = strBuilder68.chars();
        org.apache.commons.lang3.text.StrBuilder strBuilder72 = strBuilder68.appendSeparator("tue", (-1));
        org.apache.commons.lang3.text.StrBuilder strBuilder73 = strBuilder5.appendln(strBuilder68);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strMatcher6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(strMatcher8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(reader31);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertNotNull(intStream42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(strBuilder48);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(strBuilder55);
        org.junit.Assert.assertNotNull(intStream56);
        org.junit.Assert.assertNotNull(strBuilder60);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[]");
        org.junit.Assert.assertNotNull(strBuilder64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(strBuilder66);
        org.junit.Assert.assertNotNull(strBuilder68);
        org.junit.Assert.assertNotNull(intStream69);
        org.junit.Assert.assertNotNull(strBuilder72);
        org.junit.Assert.assertNotNull(strBuilder73);
    }

    @Test
    public void test04568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04568");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder6.appendSeparator(' ', (int) '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder6.replaceFirst('a', ' ');
        java.lang.String str13 = strBuilder6.getNullText();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder6.appendln(' ');
        char[] charArray18 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray18);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer21 = strTokenizer19.setDelimiterString("hi!");
        java.lang.String str22 = strTokenizer19.next();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer24 = strTokenizer19.setDelimiterString("StrTokenizer[ 4#4]");
        int int25 = strTokenizer24.nextIndex();
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder6.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer24, "0.0true");
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder6.appendNull();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder28.appendln("\nt\n\n", (int) '1', (int) '\000');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: startIndex must be valid");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertNotNull(strTokenizer21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "a4" + "'", str22, "a4");
        org.junit.Assert.assertNotNull(strTokenizer24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strBuilder28);
    }

    @Test
    public void test04569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04569");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        char[] charArray13 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = new org.apache.commons.lang3.text.StrTokenizer(charArray13, ' ');
        int int16 = strTokenizer15.size();
        boolean boolean17 = strTokenizer15.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher18 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = strTokenizer15.setIgnoredMatcher(strMatcher18);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.replaceFirst("", "");
        java.lang.Object obj24 = properties0.putIfAbsent((java.lang.Object) strMatcher18, (java.lang.Object) strBuilder20);
        java.lang.Object obj27 = properties0.setProperty(" 4#4", "\n32.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = new org.apache.commons.lang3.text.StrBuilder();
        int int29 = strBuilder28.capacity();
        java.lang.StringBuffer stringBuffer30 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder28.appendln(stringBuffer30, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher34 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int35 = strBuilder33.lastIndexOf(strMatcher34);
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder33.insert((int) (short) 1, 32);
        java.util.Properties properties39 = new java.util.Properties();
        int int40 = properties39.size();
        boolean boolean42 = properties39.containsKey((java.lang.Object) (-1.0f));
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet43 = properties39.entrySet();
        java.lang.Object obj44 = properties0.putIfAbsent((java.lang.Object) strBuilder38, (java.lang.Object) objEntrySet43);
        java.lang.String str45 = strBuilder38.getNewLineText();
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder38.appendSeparator("", " 4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = strBuilder48.setNewLineText("100.0\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder48.appendFixedWidthPadLeft((java.lang.Object) "a4", 45, '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = strBuilder48.appendln(true);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strMatcher18);
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 32 + "'", int29 == 32);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strMatcher34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objEntrySet43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(strBuilder48);
        org.junit.Assert.assertNotNull(strBuilder50);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertNotNull(strBuilder56);
    }

    @Test
    public void test04570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04570");
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder1.appendln((float) '\000');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = strBuilder3.asTokenizer();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = strBuilder3.substring((int) (short) 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: end < start");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strTokenizer4);
    }

    @Test
    public void test04571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04571");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        boolean boolean8 = strTokenizer6.hasNext();
        java.util.List<java.lang.String> strList9 = strTokenizer6.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder10.replaceFirst("", "");
        char[] charArray14 = strBuilder10.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = new org.apache.commons.lang3.text.StrTokenizer(charArray14, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer17 = new org.apache.commons.lang3.text.StrTokenizer(charArray14);
        boolean boolean18 = strList9.equals((java.lang.Object) charArray14);
        char[] charArray23 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer25 = new org.apache.commons.lang3.text.StrTokenizer(charArray23, ' ');
        int int26 = strTokenizer25.size();
        boolean boolean27 = strTokenizer25.hasNext();
        java.util.List<java.lang.String> strList28 = strTokenizer25.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = new org.apache.commons.lang3.text.StrBuilder();
        int int30 = strBuilder29.capacity();
        java.lang.StringBuffer stringBuffer31 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder29.appendln(stringBuffer31, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder29.insert(1, (double) 32);
        java.lang.String str39 = strBuilder29.rightString((int) ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder29.insert(1, '#');
        boolean boolean43 = strList28.equals((java.lang.Object) strBuilder29);
        boolean boolean44 = strList9.containsAll((java.util.Collection<java.lang.String>) strList28);
        java.lang.String str46 = strList9.remove((int) (short) 0);
        java.util.Iterator<java.lang.String> strItor47 = strList9.iterator();
        java.util.ListIterator<java.lang.String> strItor48 = strList9.listIterator();
        java.lang.String[] strArray50 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        java.lang.Object obj53 = null;
        boolean boolean54 = strList51.contains(obj53);
        java.util.stream.Stream<java.lang.String> strStream55 = strList51.stream();
        boolean boolean56 = strList9.retainAll((java.util.Collection<java.lang.String>) strList51);
        boolean boolean58 = strList9.add("#\n4#4");
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 32 + "'", int30 == 32);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\n32.0" + "'", str39, "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "4#4" + "'", str46, "4#4");
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertNotNull(strItor48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strStream55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test04572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04572");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        boolean boolean9 = strBuilder0.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder0.appendSeparator('a', ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder13.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer17 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray18 = strTokenizer17.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder13.appendAll((java.lang.Object[]) strArray18);
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder13.replaceFirst('a', 'a');
        java.lang.StringBuffer stringBuffer23 = strBuilder22.toStringBuffer();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder0.append(stringBuffer23);
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder25.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder28.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder31.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder35.replaceFirst("", "");
        char[] charArray39 = strBuilder35.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder34.appendln(charArray39);
        org.apache.commons.lang3.text.StrMatcher strMatcher41 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray39);
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder25.replaceFirst(strMatcher41, "StrTokenizer[]");
        boolean boolean44 = strBuilder0.equalsIgnoreCase(strBuilder25);
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder45.deleteFirst("");
        int int49 = strBuilder45.indexOf("");
        int int52 = strBuilder45.lastIndexOf('#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer54 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance("");
        boolean boolean55 = strTokenizer54.hasNext();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer57 = strTokenizer54.setDelimiterChar('a');
        int int58 = strTokenizer54.nextIndex();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer60 = strTokenizer54.setIgnoredChar(' ');
        java.lang.String[] strArray61 = strTokenizer60.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = strBuilder45.appendWithSeparators((java.lang.Object[]) strArray61, "###");
        org.apache.commons.lang3.text.StrBuilder strBuilder66 = strBuilder63.delete((int) (short) 0, 53);
        org.apache.commons.lang3.text.StrBuilder strBuilder68 = strBuilder66.deleteFirst("#\nfalse\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder69 = strBuilder0.appendln(strBuilder66);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder72 = strBuilder66.insert(169, false);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 169");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(stringBuffer23);
        org.junit.Assert.assertEquals(stringBuffer23.toString(), "");
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[]");
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNotNull(strMatcher41);
        org.junit.Assert.assertNotNull(strBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(strTokenizer54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strTokenizer57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(strTokenizer60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strBuilder63);
        org.junit.Assert.assertNotNull(strBuilder66);
        org.junit.Assert.assertNotNull(strBuilder68);
        org.junit.Assert.assertNotNull(strBuilder69);
    }

    @Test
    public void test04573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04573");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        char[] charArray13 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = new org.apache.commons.lang3.text.StrTokenizer(charArray13, ' ');
        int int16 = strTokenizer15.size();
        boolean boolean17 = strTokenizer15.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher18 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = strTokenizer15.setIgnoredMatcher(strMatcher18);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.replaceFirst("", "");
        java.lang.Object obj24 = properties0.putIfAbsent((java.lang.Object) strMatcher18, (java.lang.Object) strBuilder20);
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder25.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder28.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = new org.apache.commons.lang3.text.StrBuilder();
        int int32 = strBuilder31.capacity();
        java.lang.StringBuffer stringBuffer33 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder31.appendln(stringBuffer33, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder31.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder31.setLength(32);
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder41.trim();
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder41.append((int) (short) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = strBuilder44.append('#');
        java.lang.Object obj47 = properties0.putIfAbsent((java.lang.Object) strBuilder30, (java.lang.Object) '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder30.ensureCapacity(2);
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder50.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer55 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher56 = strTokenizer55.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder50.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer55, "h");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer60 = strTokenizer55.reset("\n32.0");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer62 = strTokenizer60.setEmptyTokenAsNull(true);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer63 = strTokenizer62.reset();
        org.apache.commons.lang3.text.StrBuilder strBuilder65 = strBuilder30.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer63, "java.io.IOException: java.io.IOException: hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder68 = strBuilder30.delete(0, 8);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strMatcher18);
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 32 + "'", int32 == 32);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strBuilder46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertNotNull(strMatcher56);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertNotNull(strTokenizer60);
        org.junit.Assert.assertNotNull(strTokenizer62);
        org.junit.Assert.assertNotNull(strTokenizer63);
        org.junit.Assert.assertNotNull(strBuilder65);
        org.junit.Assert.assertNotNull(strBuilder68);
    }

    @Test
    public void test04574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04574");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        boolean boolean9 = strBuilder0.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder0.clear();
        int int12 = strBuilder11.capacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder11.replaceAll("\n\n", "#\nfalse\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder15.append('4');
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder17.appendPadding((int) (byte) 1, '\000');
        char[] charArray25 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer27 = new org.apache.commons.lang3.text.StrTokenizer(charArray25, ' ');
        int int28 = strTokenizer27.size();
        boolean boolean29 = strTokenizer27.hasNext();
        java.util.List<java.lang.String> strList30 = strTokenizer27.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder31.replaceFirst("", "");
        char[] charArray35 = strBuilder31.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer37 = new org.apache.commons.lang3.text.StrTokenizer(charArray35, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer38 = new org.apache.commons.lang3.text.StrTokenizer(charArray35);
        boolean boolean39 = strList30.equals((java.lang.Object) charArray35);
        java.util.Spliterator<java.lang.String> strSpliterator40 = strList30.spliterator();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer42 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher43 = strTokenizer42.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer45 = strTokenizer42.reset("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer47 = strTokenizer45.reset("4#4");
        int int48 = strList30.indexOf((java.lang.Object) "4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder49.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder51.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder52.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder57 = strBuilder52.replaceFirst('4', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = strBuilder52.append((float) 3);
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = strBuilder52.setLength((int) (byte) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = strBuilder52.append("");
        org.apache.commons.lang3.text.StrMatcher strMatcher65 = org.apache.commons.lang3.text.StrMatcher.stringMatcher("\n32.0");
        int int66 = strBuilder63.indexOf(strMatcher65);
        org.apache.commons.lang3.text.StrBuilder strBuilder70 = strBuilder63.replace((int) (byte) 1, (int) (byte) 1, "35.0\n100.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder74 = strBuilder70.appendFixedWidthPadRight(3, 45, '4');
        int int75 = strList30.indexOf((java.lang.Object) 45);
        java.util.stream.Stream<java.lang.String> strStream76 = strList30.stream();
        java.lang.Object[] objArray77 = strList30.toArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder79 = strBuilder20.appendWithSeparators(objArray77, "java.io.IOException: StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSpliterator40);
        org.junit.Assert.assertNotNull(strMatcher43);
        org.junit.Assert.assertNotNull(strTokenizer45);
        org.junit.Assert.assertNotNull(strTokenizer47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(strBuilder51);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertNotNull(strBuilder57);
        org.junit.Assert.assertNotNull(strBuilder59);
        org.junit.Assert.assertNotNull(strBuilder61);
        org.junit.Assert.assertNotNull(strBuilder63);
        org.junit.Assert.assertNotNull(strMatcher65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(strBuilder70);
        org.junit.Assert.assertNotNull(strBuilder74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(strStream76);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[4#4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[4#4]");
        org.junit.Assert.assertNotNull(strBuilder79);
    }

    @Test
    public void test04575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04575");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.appendln('#');
        java.lang.StringBuffer stringBuffer6 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder3.append(stringBuffer6, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder3.deleteFirst("hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder3.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder3.appendSeparator('$', '$');
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder18.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer22 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray23 = strTokenizer22.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder18.appendAll((java.lang.Object[]) strArray23);
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder24.append((double) (short) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder26.setLength((int) (short) 10);
        java.lang.String str30 = strBuilder28.rightString((int) 't');
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder28.clear();
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder28.appendNewLine();
        java.lang.String str33 = strBuilder28.getNullText();
        int int36 = strBuilder28.lastIndexOf("\n36E", 57);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder17.appendln(strBuilder28, 50, 39);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: startIndex must be valid");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "100.0\000\000\000\000\000" + "'", str30, "100.0\000\000\000\000\000");
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test04576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04576");
        char[] charArray2 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer3 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray2);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer5 = strTokenizer3.setDelimiterString("hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer7 = strTokenizer3.setDelimiterString("");
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder8.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder11.appendln('#');
        java.lang.StringBuffer stringBuffer14 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder11.append(stringBuffer14, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder11.deleteFirst("hi!");
        char[] charArray20 = strBuilder11.toCharArray();
        org.apache.commons.lang3.text.StrMatcher strMatcher21 = null;
        org.apache.commons.lang3.text.StrMatcher strMatcher22 = null;
        org.apache.commons.lang3.text.StrTokenizer strTokenizer23 = new org.apache.commons.lang3.text.StrTokenizer(charArray20, strMatcher21, strMatcher22);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer24 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray20);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer25 = strTokenizer3.reset(charArray20);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer3);
        org.junit.Assert.assertNotNull(strTokenizer5);
        org.junit.Assert.assertNotNull(strTokenizer7);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#, \n]");
        org.junit.Assert.assertNotNull(strTokenizer24);
        org.junit.Assert.assertNotNull(strTokenizer25);
    }

    @Test
    public void test04577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04577");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.lang.String str10 = properties4.getProperty("h");
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = new org.apache.commons.lang3.text.StrBuilder();
        int int12 = strBuilder11.capacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder11.deleteFirst('a');
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder14.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder17.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer21 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray22 = strTokenizer21.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder17.appendAll((java.lang.Object[]) strArray22);
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder17.replaceFirst('a', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder27.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer31 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray32 = strTokenizer31.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder27.appendAll((java.lang.Object[]) strArray32);
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder17.appendln(strBuilder33);
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder33.appendln((long) 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder33.appendSeparator("hi!", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder40.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = strBuilder43.replaceFirst('a', '4');
        java.io.Writer writer47 = strBuilder46.asWriter();
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder48.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder51.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder55.replaceFirst("", "");
        char[] charArray59 = strBuilder55.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder60 = strBuilder54.appendln(charArray59);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer61 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray59);
        writer47.write(charArray59);
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = strBuilder39.append(charArray59);
        org.apache.commons.lang3.text.StrMatcher strMatcher65 = org.apache.commons.lang3.text.StrMatcher.charMatcher('#');
        int int67 = strBuilder39.indexOf(strMatcher65, 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder68 = strBuilder14.deleteAll(strMatcher65);
        org.apache.commons.lang3.text.StrBuilder strBuilder71 = strBuilder68.insert(0, (long) 10);
        java.io.Writer writer72 = strBuilder68.asWriter();
        writer72.close();
        properties4.store(writer72, "\n32.0a\n");
        java.util.Properties properties76 = new java.util.Properties(properties4);
        boolean boolean77 = properties4.isEmpty();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNotNull(strBuilder43);
        org.junit.Assert.assertNotNull(strBuilder46);
        org.junit.Assert.assertNotNull(writer47);
        org.junit.Assert.assertNotNull(strBuilder51);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[]");
        org.junit.Assert.assertNotNull(strBuilder60);
        org.junit.Assert.assertNotNull(strTokenizer61);
        org.junit.Assert.assertNotNull(strBuilder63);
        org.junit.Assert.assertNotNull(strMatcher65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(strBuilder68);
        org.junit.Assert.assertNotNull(strBuilder71);
        org.junit.Assert.assertNotNull(writer72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test04578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04578");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst('a', '4');
        java.io.Writer writer7 = strBuilder6.asWriter();
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder8.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder11.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder15.replaceFirst("", "");
        char[] charArray19 = strBuilder15.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder14.appendln(charArray19);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer21 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray19);
        writer7.write(charArray19);
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder23.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder26.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder28.appendPadding((int) '#', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder32.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder34.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder35.appendln((double) '#');
        boolean boolean38 = strBuilder28.equals(strBuilder37);
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder37.appendSeparator('4', '#');
        char[] charArray47 = new char[] { ' ', '4', '#', '#', ' ' };
        org.apache.commons.lang3.text.StrMatcher strMatcher48 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray47);
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder37.append(charArray47, (int) (byte) 0, (int) (byte) 0);
        writer7.write(charArray47);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer53 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray47);
        org.apache.commons.lang3.text.StrMatcher strMatcher54 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray47);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(writer7);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertNotNull(strTokenizer21);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), " 4## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), " 4## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[ , 4, #, #,  ]");
        org.junit.Assert.assertNotNull(strMatcher48);
        org.junit.Assert.assertNotNull(strBuilder51);
        org.junit.Assert.assertNotNull(strTokenizer53);
        org.junit.Assert.assertNotNull(strMatcher54);
    }

    @Test
    public void test04579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04579");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration9 = properties4.keys();
        java.util.Set<java.lang.String> strSet10 = properties4.stringPropertyNames();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = new org.apache.commons.lang3.text.StrBuilder();
        int int12 = strBuilder11.capacity();
        java.lang.StringBuffer stringBuffer13 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder11.appendln(stringBuffer13, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder11.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder11.setLength(32);
        java.io.Writer writer22 = strBuilder21.asWriter();
        writer22.write(" 4#4", (int) (byte) 0, (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = new org.apache.commons.lang3.text.StrBuilder();
        int int28 = strBuilder27.capacity();
        java.lang.StringBuffer stringBuffer29 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder27.appendln(stringBuffer29, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder27.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder34.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder36.append((float) '4');
        java.io.Writer writer39 = writer22.append((java.lang.CharSequence) strBuilder36);
        writer39.write((int) '4');
        writer39.flush();
        writer39.write(0);
        writer39.write("0.0true");
        properties4.store(writer39, "E");
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = new org.apache.commons.lang3.text.StrBuilder();
        int int50 = strBuilder49.capacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder49.deleteFirst('a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer54 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder55.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder60 = strBuilder58.appendln('#');
        java.lang.StringBuffer stringBuffer61 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = strBuilder58.append(stringBuffer61, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder66 = strBuilder58.deleteFirst("hi!");
        char[] charArray67 = strBuilder58.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer68 = strTokenizer54.reset(charArray67);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer69 = strTokenizer68.reset();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer70 = strTokenizer69.reset();
        java.lang.String[] strArray71 = strTokenizer70.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder74 = strBuilder52.appendFixedWidthPadLeft((java.lang.Object) strTokenizer70, 5, 't');
        java.lang.String str76 = strBuilder74.rightString(0);
        org.apache.commons.lang3.text.StrBuilder strBuilder78 = strBuilder74.appendln((double) 53);
        boolean boolean79 = properties4.contains((java.lang.Object) 53);
        java.util.Set<java.lang.Object> objSet80 = properties4.keySet();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objEnumeration9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(writer22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 32 + "'", int28 == 32);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(writer39);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 32 + "'", int50 == 32);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(strTokenizer54);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertNotNull(strBuilder60);
        org.junit.Assert.assertNotNull(strBuilder64);
        org.junit.Assert.assertNotNull(strBuilder66);
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[#, \n]");
        org.junit.Assert.assertNotNull(strTokenizer68);
        org.junit.Assert.assertNotNull(strTokenizer69);
        org.junit.Assert.assertNotNull(strTokenizer70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strBuilder74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(strBuilder78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objSet80);
    }

    @Test
    public void test04580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04580");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        char[] charArray13 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = new org.apache.commons.lang3.text.StrTokenizer(charArray13, ' ');
        int int16 = strTokenizer15.size();
        boolean boolean17 = strTokenizer15.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher18 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = strTokenizer15.setIgnoredMatcher(strMatcher18);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.replaceFirst("", "");
        java.lang.Object obj24 = properties0.putIfAbsent((java.lang.Object) strMatcher18, (java.lang.Object) strBuilder20);
        java.lang.Object obj27 = properties0.setProperty(" 4#4", "\n32.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder28.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer33 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher34 = strTokenizer33.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder28.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer33, "h");
        int int37 = strTokenizer33.nextIndex();
        boolean boolean38 = properties0.containsValue((java.lang.Object) strTokenizer33);
        java.util.Set<java.lang.Object> objSet39 = properties0.keySet();
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder40.replaceFirst("", "");
        char[] charArray44 = strBuilder40.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer46 = new org.apache.commons.lang3.text.StrTokenizer(charArray44, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer47 = new org.apache.commons.lang3.text.StrTokenizer(charArray44);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer49 = strTokenizer47.setEmptyTokenAsNull(false);
        java.lang.Object obj50 = properties0.get((java.lang.Object) false);
        properties0.clear();
        java.util.Properties properties52 = new java.util.Properties();
        int int53 = properties52.size();
        boolean boolean55 = properties52.containsKey((java.lang.Object) (-1.0f));
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet56 = properties52.entrySet();
        java.lang.Object obj57 = properties52.clone();
        java.util.Collection<java.lang.Object> objCollection58 = properties52.values();
        java.lang.Object obj59 = properties0.get((java.lang.Object) properties52);
        java.io.PrintStream printStream60 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties52.list(printStream60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strMatcher18);
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(strMatcher34);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSet39);
        org.junit.Assert.assertNotNull(strBuilder43);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[]");
        org.junit.Assert.assertNotNull(strTokenizer49);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objEntrySet56);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "{}");
        org.junit.Assert.assertNotNull(objCollection58);
        org.junit.Assert.assertNull(obj59);
    }

    @Test
    public void test04581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04581");
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder((int) (byte) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder1.appendFixedWidthPadLeft((int) '4', (-1), ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = new org.apache.commons.lang3.text.StrBuilder();
        int int7 = strBuilder6.capacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder6.deleteFirst('a');
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray17 = strTokenizer16.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder12.appendAll((java.lang.Object[]) strArray17);
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder12.replaceFirst('a', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder22.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer26 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray27 = strTokenizer26.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder22.appendAll((java.lang.Object[]) strArray27);
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder12.appendln(strBuilder28);
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder28.appendln((long) 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder28.appendSeparator("hi!", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder35.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder38.replaceFirst('a', '4');
        java.io.Writer writer42 = strBuilder41.asWriter();
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = strBuilder43.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder46.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder50.replaceFirst("", "");
        char[] charArray54 = strBuilder50.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = strBuilder49.appendln(charArray54);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer56 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray54);
        writer42.write(charArray54);
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder34.append(charArray54);
        org.apache.commons.lang3.text.StrMatcher strMatcher60 = org.apache.commons.lang3.text.StrMatcher.charMatcher('#');
        int int62 = strBuilder34.indexOf(strMatcher60, 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = strBuilder9.deleteAll(strMatcher60);
        org.apache.commons.lang3.text.StrBuilder strBuilder65 = strBuilder1.replaceFirst(strMatcher60, " 4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder66 = strBuilder65.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder70 = strBuilder66.appendFixedWidthPadLeft((int) (short) 10, (int) (byte) -1, ' ');
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertNotNull(writer42);
        org.junit.Assert.assertNotNull(strBuilder46);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[]");
        org.junit.Assert.assertNotNull(strBuilder55);
        org.junit.Assert.assertNotNull(strTokenizer56);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertNotNull(strMatcher60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(strBuilder63);
        org.junit.Assert.assertNotNull(strBuilder65);
        org.junit.Assert.assertNotNull(strBuilder66);
        org.junit.Assert.assertNotNull(strBuilder70);
    }

    @Test
    public void test04582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04582");
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder(3);
        char[] charArray2 = strBuilder1.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder4.deleteCharAt(2);
        org.apache.commons.lang3.text.StrMatcher strMatcher7 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder4.replaceAll(strMatcher7, " #\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.appendln(14);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder11);
    }

    @Test
    public void test04583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04583");
        java.util.Properties properties0 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder4.appendln('#');
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder9.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = new org.apache.commons.lang3.text.StrBuilder();
        int int12 = strBuilder11.capacity();
        java.lang.StringBuffer stringBuffer13 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder11.appendln(stringBuffer13, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher17 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int18 = strBuilder16.lastIndexOf(strMatcher17);
        boolean boolean19 = strBuilder9.equalsIgnoreCase(strBuilder16);
        char[] charArray22 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer23 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray22);
        boolean boolean24 = properties0.replace((java.lang.Object) strBuilder6, (java.lang.Object) strBuilder9, (java.lang.Object) strTokenizer23);
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder9.deleteAll("StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder9.deleteAll("1");
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder9.append((float) (byte) -1);
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder9.appendPadding(8, 't');
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder9.appendln((double) '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder9.appendSeparator("1001\n", "");
        java.lang.String str40 = strBuilder9.leftString(7);
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder9.clear();
        java.util.Iterator<java.lang.String> strItor42 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder9.appendAll(strItor42);
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strMatcher17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-1.0ttt" + "'", str40, "-1.0ttt");
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertNotNull(strBuilder43);
    }

    @Test
    public void test04584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04584");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.setLength(32);
        java.io.Writer writer11 = strBuilder10.asWriter();
        writer11.write(" 4#4", (int) (byte) 0, (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = new org.apache.commons.lang3.text.StrBuilder();
        int int17 = strBuilder16.capacity();
        java.lang.StringBuffer stringBuffer18 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder16.appendln(stringBuffer18, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder16.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder23.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder25.append((float) '4');
        java.io.Writer writer28 = writer11.append((java.lang.CharSequence) strBuilder25);
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder29.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder31.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder32.appendSeparator("hi!", "4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder35.deleteAll("");
        java.io.Writer writer38 = writer11.append((java.lang.CharSequence) strBuilder35);
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder39.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = strBuilder42.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder46.replaceFirst("", "");
        char[] charArray50 = strBuilder46.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder45.appendln(charArray50);
        org.apache.commons.lang3.text.StrMatcher strMatcher52 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray50);
        writer11.write(charArray50);
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder57 = strBuilder54.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder60 = strBuilder57.appendSeparator('#', (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder62 = strBuilder60.append((float) '$');
        char char64 = strBuilder62.charAt(0);
        java.io.Writer writer65 = writer11.append((java.lang.CharSequence) strBuilder62);
        org.apache.commons.lang3.text.StrBuilder strBuilder67 = strBuilder62.ensureCapacity((int) (short) 100);
        boolean boolean69 = strBuilder67.contains('#');
        int int70 = strBuilder67.capacity();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(writer11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 32 + "'", int17 == 32);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(writer28);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertNotNull(writer38);
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertNotNull(strBuilder45);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[]");
        org.junit.Assert.assertNotNull(strBuilder51);
        org.junit.Assert.assertNotNull(strMatcher52);
        org.junit.Assert.assertNotNull(strBuilder57);
        org.junit.Assert.assertNotNull(strBuilder60);
        org.junit.Assert.assertNotNull(strBuilder62);
        org.junit.Assert.assertTrue("'" + char64 + "' != '" + '#' + "'", char64 == '#');
        org.junit.Assert.assertNotNull(writer65);
        org.junit.Assert.assertNotNull(strBuilder67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 200 + "'", int70 == 200);
    }

    @Test
    public void test04585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04585");
        java.util.Properties properties0 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray7 = strTokenizer6.getTokenArray();
        java.lang.String[] strArray8 = strTokenizer6.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder4.appendWithSeparators((java.lang.Object[]) strArray8, "4#4");
        char[] charArray13 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray13);
        java.lang.Object obj15 = properties0.getOrDefault((java.lang.Object) strBuilder4, (java.lang.Object) strTokenizer14);
        java.util.Collection<java.lang.Object> objCollection16 = properties0.values();
        boolean boolean17 = properties0.isEmpty();
        properties0.clear();
        java.lang.Object obj19 = properties0.clone();
        boolean boolean20 = properties0.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder21.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder24.appendSeparator('#', (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder27.append((float) '$');
        char char31 = strBuilder29.charAt(0);
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder29.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder33.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder35.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder36.ensureCapacity((int) (short) 10);
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder39.replaceFirst("", "");
        java.lang.String str43 = strBuilder39.getNewLineText();
        java.util.stream.IntStream intStream44 = strBuilder39.chars();
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = strBuilder36.append((java.lang.CharSequence) strBuilder39);
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder36.setNewLineText("1");
        java.lang.Object obj48 = properties0.putIfAbsent((java.lang.Object) strBuilder32, (java.lang.Object) strBuilder36);
        java.io.Writer writer49 = strBuilder36.asWriter();
        writer49.flush();
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{}");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertTrue("'" + char31 + "' != '" + '#' + "'", char31 == '#');
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(intStream44);
        org.junit.Assert.assertNotNull(strBuilder45);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(writer49);
    }

    @Test
    public void test04586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04586");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        java.lang.String str10 = strBuilder0.rightString((int) ' ');
        boolean boolean12 = strBuilder0.startsWith("");
        char[] charArray13 = strBuilder0.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder0.insert(1, (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder0.append(53);
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder18.appendSeparator("#", 32);
        char[] charArray22 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder21.append(charArray22);
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder21.deleteAll('1');
        int int27 = strBuilder21.indexOf('#');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\n32.0" + "'", str10, "\n32.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "\n32.0");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "\n32.0");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[\n, 3, 2, ., 0]");
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
    }

    @Test
    public void test04587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04587");
        org.apache.commons.lang3.text.StrMatcher strMatcher1 = org.apache.commons.lang3.text.StrMatcher.stringMatcher("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertNotNull(strMatcher1);
    }

    @Test
    public void test04588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04588");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer5 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher6 = strTokenizer5.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer5, "h");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer10 = strTokenizer5.reset("\n32.0");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer12 = strTokenizer10.setEmptyTokenAsNull(true);
        boolean boolean13 = strTokenizer10.hasNext();
        boolean boolean14 = strTokenizer10.isEmptyTokenAsNull();
        java.lang.String str15 = strTokenizer10.toString();
        int int16 = strTokenizer10.nextIndex();
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strMatcher6);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strTokenizer10);
        org.junit.Assert.assertNotNull(strTokenizer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "StrTokenizer[32.0]" + "'", str15, "StrTokenizer[32.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test04589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04589");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder2.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.append((double) 10L);
        java.lang.Object obj6 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder3.appendFixedWidthPadLeft(obj6, (int) (byte) -1, '$');
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.appendln((float) '\000');
        java.util.Properties properties12 = new java.util.Properties();
        int int13 = properties12.size();
        java.lang.Object obj14 = properties12.clone();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder15.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder19.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder21.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder22.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder15.appendFixedWidthPadRight((java.lang.Object) strBuilder24, (int) (byte) -1, '#');
        java.lang.Object obj28 = properties12.get((java.lang.Object) strBuilder15);
        java.util.Properties properties29 = new java.util.Properties();
        int int30 = properties29.size();
        boolean boolean32 = properties29.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties33 = new java.util.Properties();
        int int34 = properties33.size();
        boolean boolean36 = properties33.containsKey((java.lang.Object) (-1.0f));
        properties29.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties33);
        char[] charArray42 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer44 = new org.apache.commons.lang3.text.StrTokenizer(charArray42, ' ');
        int int45 = strTokenizer44.size();
        boolean boolean46 = strTokenizer44.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher47 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer48 = strTokenizer44.setIgnoredMatcher(strMatcher47);
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder49.replaceFirst("", "");
        java.lang.Object obj53 = properties29.putIfAbsent((java.lang.Object) strMatcher47, (java.lang.Object) strBuilder49);
        boolean boolean54 = strBuilder15.equals(obj53);
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = strBuilder15.appendln((long) (short) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = strBuilder56.insert((int) (short) 0, (int) (short) 100);
        java.lang.String str62 = strBuilder56.midString(0, (int) (short) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = strBuilder9.append((java.lang.CharSequence) strBuilder56);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder66 = strBuilder63.insert(52, true);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 52");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "{}");
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strMatcher47);
        org.junit.Assert.assertNotNull(strTokenizer48);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strBuilder56);
        org.junit.Assert.assertNotNull(strBuilder59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1" + "'", str62, "1");
        org.junit.Assert.assertNotNull(strBuilder63);
    }

    @Test
    public void test04590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04590");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance("java.io.IOException: {}");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer3 = strTokenizer1.setEmptyTokenAsNull(false);
        int int4 = strTokenizer1.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = strTokenizer1.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strTokenizer1);
        org.junit.Assert.assertNotNull(strTokenizer3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test04591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04591");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Enumeration<java.lang.Object> objEnumeration1 = properties0.keys();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder2.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder5.appendSeparator('#', (int) (byte) 100);
        java.io.Reader reader9 = strBuilder5.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray15 = strTokenizer14.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder10.appendAll((java.lang.Object[]) strArray15);
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder10.replaceFirst('a', 'a');
        java.util.stream.IntStream intStream20 = strBuilder10.codePoints();
        java.lang.Object obj21 = properties0.replace((java.lang.Object) reader9, (java.lang.Object) intStream20);
        long long23 = reader9.skip(0L);
        reader9.close();
        boolean boolean25 = reader9.markSupported();
        long long27 = reader9.skip((long) 'a');
        int int28 = reader9.read();
        boolean boolean29 = reader9.markSupported();
        reader9.mark(101);
        org.junit.Assert.assertNotNull(objEnumeration1);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(reader9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(intStream20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test04592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04592");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        int int4 = strBuilder0.indexOf("");
        int int7 = strBuilder0.lastIndexOf('#', (int) (byte) 0);
        boolean boolean9 = strBuilder0.startsWith("4#4");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer10 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder0.appendAll((java.util.Iterator<java.lang.String>) strTokenizer10);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer13 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray14 = strTokenizer13.getTokenArray();
        java.lang.String[] strArray15 = strTokenizer13.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder0.appendWithSeparators((java.lang.Object[]) strArray15, "");
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder17.append("true\n###################################");
        java.util.stream.IntStream intStream20 = strBuilder17.chars();
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strTokenizer10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(intStream20);
    }

    @Test
    public void test04593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04593");
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder((int) (byte) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst('$', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder1.append('a');
        int int8 = strBuilder1.lastIndexOf("\n32.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = new org.apache.commons.lang3.text.StrBuilder();
        int int10 = strBuilder9.capacity();
        java.lang.StringBuffer stringBuffer11 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder9.appendln(stringBuffer11, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder9.insert(1, (double) 32);
        boolean boolean18 = strBuilder9.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder9.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder9.clear();
        int int21 = strBuilder20.capacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder1.append(strBuilder20);
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder1.appendNewLine();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer24 = strBuilder1.asTokenizer();
        int int25 = strTokenizer24.nextIndex();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer27 = strTokenizer24.setDelimiterChar('\000');
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 32 + "'", int21 == 32);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strTokenizer24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strTokenizer27);
    }

    @Test
    public void test04594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04594");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Enumeration<java.lang.Object> objEnumeration1 = properties0.keys();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = new org.apache.commons.lang3.text.StrBuilder();
        int int3 = strBuilder2.capacity();
        java.lang.StringBuffer stringBuffer4 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder2.appendln(stringBuffer4, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder2.insert(1, (double) 32);
        java.util.Properties properties11 = new java.util.Properties();
        int int12 = properties11.size();
        boolean boolean14 = properties11.containsKey((java.lang.Object) (-1.0f));
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder15.replaceFirst("", "");
        char[] charArray19 = strBuilder15.toCharArray();
        boolean boolean20 = properties11.containsValue((java.lang.Object) charArray19);
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder2.append(charArray19, (int) (byte) 0, 0);
        boolean boolean24 = properties0.equals((java.lang.Object) 0);
        java.util.Collection<java.lang.Object> objCollection25 = properties0.values();
        java.util.Enumeration<java.lang.Object> objEnumeration26 = properties0.keys();
        java.util.Properties properties27 = new java.util.Properties();
        int int28 = properties27.size();
        boolean boolean30 = properties27.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties31 = new java.util.Properties();
        int int32 = properties31.size();
        boolean boolean34 = properties31.containsKey((java.lang.Object) (-1.0f));
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties31);
        char[] charArray40 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer42 = new org.apache.commons.lang3.text.StrTokenizer(charArray40, ' ');
        int int43 = strTokenizer42.size();
        boolean boolean44 = strTokenizer42.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher45 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer46 = strTokenizer42.setIgnoredMatcher(strMatcher45);
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = strBuilder47.replaceFirst("", "");
        java.lang.Object obj51 = properties27.putIfAbsent((java.lang.Object) strMatcher45, (java.lang.Object) strBuilder47);
        java.util.Properties properties52 = new java.util.Properties();
        java.util.Properties properties53 = new java.util.Properties(properties52);
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder57 = strBuilder54.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder60 = strBuilder57.replaceFirst('a', '4');
        java.io.Writer writer61 = strBuilder60.asWriter();
        properties53.store(writer61, "");
        java.util.Properties properties64 = new java.util.Properties();
        int int65 = properties64.size();
        boolean boolean67 = properties64.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties68 = new java.util.Properties();
        int int69 = properties68.size();
        boolean boolean71 = properties68.containsKey((java.lang.Object) (-1.0f));
        properties64.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties68);
        java.util.Enumeration<java.lang.Object> objEnumeration73 = properties68.keys();
        boolean boolean74 = properties53.containsValue((java.lang.Object) objEnumeration73);
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties53);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet76 = properties27.entrySet();
        java.util.Properties properties77 = new java.util.Properties(properties27);
        java.lang.Object obj80 = properties27.setProperty("true", "l");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = org.apache.commons.lang3.text.StrSubstitutor.replace((java.lang.Object) properties0, properties27);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.lang3.text.StrMatcher$CharSetMatcher cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objCollection25);
        org.junit.Assert.assertNotNull(objEnumeration26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strMatcher45);
        org.junit.Assert.assertNotNull(strTokenizer46);
        org.junit.Assert.assertNotNull(strBuilder50);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(strBuilder57);
        org.junit.Assert.assertNotNull(strBuilder60);
        org.junit.Assert.assertNotNull(writer61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objEnumeration73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objEntrySet76);
        org.junit.Assert.assertNull(obj80);
    }

    @Test
    public void test04595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04595");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher6 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int7 = strBuilder5.lastIndexOf(strMatcher6);
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.lang.Object obj12 = null;
        boolean boolean13 = strList10.contains(obj12);
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder5.appendAll((java.lang.Iterable<java.lang.String>) strList10);
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = new org.apache.commons.lang3.text.StrBuilder((int) (byte) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder16.replaceFirst('$', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder16.append('a');
        int int23 = strBuilder16.lastIndexOf("\n32.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = new org.apache.commons.lang3.text.StrBuilder();
        int int25 = strBuilder24.capacity();
        java.lang.StringBuffer stringBuffer26 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder24.appendln(stringBuffer26, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder24.insert(1, (double) 32);
        boolean boolean33 = strBuilder24.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder24.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder24.clear();
        int int36 = strBuilder35.capacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder16.append(strBuilder35);
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = new org.apache.commons.lang3.text.StrBuilder();
        int int40 = strBuilder39.capacity();
        java.lang.StringBuffer stringBuffer41 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder39.appendln(stringBuffer41, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder39.insert(1, (double) 32);
        java.lang.String str49 = strBuilder39.rightString((int) ' ');
        boolean boolean51 = strBuilder39.startsWith("");
        char[] charArray52 = strBuilder39.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder37.insert((int) (short) 0, charArray52);
        boolean boolean54 = strList10.contains((java.lang.Object) strBuilder37);
        java.util.Properties properties55 = new java.util.Properties();
        int int56 = properties55.size();
        java.util.Set<java.lang.Object> objSet57 = properties55.keySet();
        java.util.Properties properties60 = new java.util.Properties();
        int int61 = properties60.size();
        boolean boolean63 = properties60.containsKey((java.lang.Object) (-1.0f));
        boolean boolean64 = properties55.replace((java.lang.Object) (byte) 1, (java.lang.Object) true, (java.lang.Object) (-1.0f));
        char[] charArray69 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer71 = new org.apache.commons.lang3.text.StrTokenizer(charArray69, ' ');
        int int72 = strTokenizer71.size();
        boolean boolean73 = strTokenizer71.hasNext();
        java.util.List<java.lang.String> strList74 = strTokenizer71.getTokenList();
        java.lang.String[] strArray78 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList79 = new java.util.ArrayList<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList79, strArray78);
        boolean boolean81 = strList74.addAll((java.util.Collection<java.lang.String>) strList79);
        java.util.Spliterator<java.lang.String> strSpliterator82 = strList79.spliterator();
        int int83 = strList79.size();
        boolean boolean85 = strList79.add("StrTokenizer[]");
        java.util.stream.Stream<java.lang.String> strStream86 = strList79.stream();
        boolean boolean87 = properties55.containsKey((java.lang.Object) strList79);
        int int88 = strList79.size();
        boolean boolean89 = strList10.retainAll((java.util.Collection<java.lang.String>) strList79);
        java.util.Iterator<java.lang.String> strItor90 = strList79.iterator();
        boolean boolean91 = strItor90.hasNext();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strMatcher6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 32 + "'", int36 == 32);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 32 + "'", int40 == 32);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\n32.0" + "'", str49, "\n32.0");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "\n32.0");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "\n32.0");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[\n, 3, 2, ., 0]");
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(objSet57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(strSpliterator82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(strStream86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 4 + "'", int88 == 4);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(strItor90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test04596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04596");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer2 = new org.apache.commons.lang3.text.StrTokenizer(" 4#4", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = strTokenizer2.reset("{\ntrue\n=1.0}");
        org.apache.commons.lang3.text.StrMatcher strMatcher5 = strTokenizer4.getTrimmerMatcher();
        // The following exception was thrown during execution in test generation
        try {
            strTokenizer4.add("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000.0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: add() is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strTokenizer4);
        org.junit.Assert.assertNotNull(strMatcher5);
    }

    @Test
    public void test04597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04597");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder2.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder5.replaceFirst('a', '4');
        java.io.Writer writer9 = strBuilder8.asWriter();
        properties1.store(writer9, "");
        writer9.flush();
        writer9.flush();
        java.io.Writer writer15 = writer9.append(' ');
        writer9.write("java.io.IOException: {}");
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = new org.apache.commons.lang3.text.StrBuilder();
        int int19 = strBuilder18.capacity();
        java.lang.StringBuffer stringBuffer20 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder18.appendln(stringBuffer20, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder18.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder25.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder27.append((float) '4');
        int int32 = strBuilder27.indexOf("", (int) (short) 10);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer34 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance("");
        boolean boolean35 = strTokenizer34.hasNext();
        java.lang.String[] strArray36 = strTokenizer34.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder27.appendWithSeparators((java.lang.Object[]) strArray36, "4#4");
        java.lang.String str39 = strBuilder38.toString();
        java.lang.StringBuffer stringBuffer40 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder38.appendln(stringBuffer40, 10, 10);
        java.io.Writer writer44 = writer9.append((java.lang.CharSequence) strBuilder43);
        writer44.write(0);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(writer9);
        org.junit.Assert.assertNotNull(writer15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(strTokenizer34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\ntrue\n52.0" + "'", str39, "\ntrue\n52.0");
        org.junit.Assert.assertNotNull(strBuilder43);
        org.junit.Assert.assertNotNull(writer44);
    }

    @Test
    public void test04598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04598");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        boolean boolean8 = strTokenizer6.hasNext();
        java.util.List<java.lang.String> strList9 = strTokenizer6.getTokenList();
        java.lang.String[] strArray13 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        boolean boolean16 = strList9.addAll((java.util.Collection<java.lang.String>) strList14);
        char[] charArray21 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer23 = new org.apache.commons.lang3.text.StrTokenizer(charArray21, ' ');
        int int24 = strTokenizer23.size();
        boolean boolean25 = strTokenizer23.hasNext();
        java.util.List<java.lang.String> strList26 = strTokenizer23.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder27.replaceFirst("", "");
        char[] charArray31 = strBuilder27.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer33 = new org.apache.commons.lang3.text.StrTokenizer(charArray31, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer34 = new org.apache.commons.lang3.text.StrTokenizer(charArray31);
        boolean boolean35 = strList26.equals((java.lang.Object) charArray31);
        char[] charArray40 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer42 = new org.apache.commons.lang3.text.StrTokenizer(charArray40, ' ');
        int int43 = strTokenizer42.size();
        boolean boolean44 = strTokenizer42.hasNext();
        java.util.List<java.lang.String> strList45 = strTokenizer42.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = new org.apache.commons.lang3.text.StrBuilder();
        int int47 = strBuilder46.capacity();
        java.lang.StringBuffer stringBuffer48 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder46.appendln(stringBuffer48, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder46.insert(1, (double) 32);
        java.lang.String str56 = strBuilder46.rightString((int) ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = strBuilder46.insert(1, '#');
        boolean boolean60 = strList45.equals((java.lang.Object) strBuilder46);
        boolean boolean61 = strList26.containsAll((java.util.Collection<java.lang.String>) strList45);
        boolean boolean62 = strList9.addAll((java.util.Collection<java.lang.String>) strList45);
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder66 = strBuilder63.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder68 = strBuilder66.appendln('#');
        java.lang.StringBuffer stringBuffer69 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder72 = strBuilder66.append(stringBuffer69, (int) (byte) -1, (int) (byte) 100);
        int int73 = strList9.lastIndexOf((java.lang.Object) stringBuffer69);
        java.util.ListIterator<java.lang.String> strItor75 = strList9.listIterator((int) (short) 0);
        boolean boolean76 = strList9.isEmpty();
        org.apache.commons.lang3.text.StrMatcher strMatcher78 = org.apache.commons.lang3.text.StrMatcher.trimMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer79 = new org.apache.commons.lang3.text.StrTokenizer("a4", strMatcher78);
        int int80 = strTokenizer79.size();
        java.lang.String str81 = strTokenizer79.next();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer82 = strTokenizer79.reset();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer84 = strTokenizer82.setDelimiterChar('4');
        java.lang.String[] strArray85 = strTokenizer82.getTokenArray();
        org.apache.commons.lang3.text.StrMatcher strMatcher86 = strTokenizer82.getQuoteMatcher();
        boolean boolean87 = strList9.remove((java.lang.Object) strTokenizer82);
        java.util.Iterator<java.lang.String> strItor88 = strList9.iterator();
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 32 + "'", int47 == 32);
        org.junit.Assert.assertNotNull(strBuilder51);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\n32.0" + "'", str56, "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strBuilder66);
        org.junit.Assert.assertNotNull(strBuilder68);
        org.junit.Assert.assertNotNull(strBuilder72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(strItor75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strMatcher78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "a4" + "'", str81, "a4");
        org.junit.Assert.assertNotNull(strTokenizer82);
        org.junit.Assert.assertNotNull(strTokenizer84);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(strMatcher86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(strItor88);
    }

    @Test
    public void test04599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04599");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder4.replaceFirst("", "");
        char[] charArray8 = strBuilder4.toCharArray();
        boolean boolean9 = properties0.containsValue((java.lang.Object) charArray8);
        java.util.Set<java.lang.Object> objSet10 = properties0.keySet();
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(outputStream11, "java.io.IOException: StrTokenizer[not tokenized yet]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objSet10);
    }

    @Test
    public void test04600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04600");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        char[] charArray13 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = new org.apache.commons.lang3.text.StrTokenizer(charArray13, ' ');
        int int16 = strTokenizer15.size();
        boolean boolean17 = strTokenizer15.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher18 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = strTokenizer15.setIgnoredMatcher(strMatcher18);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.replaceFirst("", "");
        java.lang.Object obj24 = properties0.putIfAbsent((java.lang.Object) strMatcher18, (java.lang.Object) strBuilder20);
        java.util.Properties properties25 = new java.util.Properties();
        java.util.Properties properties26 = new java.util.Properties(properties25);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder27.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder30.replaceFirst('a', '4');
        java.io.Writer writer34 = strBuilder33.asWriter();
        properties26.store(writer34, "");
        java.util.Properties properties37 = new java.util.Properties();
        int int38 = properties37.size();
        boolean boolean40 = properties37.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties41 = new java.util.Properties();
        int int42 = properties41.size();
        boolean boolean44 = properties41.containsKey((java.lang.Object) (-1.0f));
        properties37.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties41.keys();
        boolean boolean47 = properties26.containsValue((java.lang.Object) objEnumeration46);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.util.Properties properties49 = new java.util.Properties(properties0);
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder50.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder52.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = strBuilder53.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder53.replaceFirst('4', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder60 = strBuilder53.append((float) 3);
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = strBuilder53.insert((int) (short) 0, "{}");
        int int66 = strBuilder63.indexOf("#", (int) (byte) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder69 = strBuilder63.replaceAll("StrTokenizer[not tokenized yet]", "\n32.0java.io.IOException: hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder72 = strBuilder69.setCharAt((int) (short) 0, 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder74 = strBuilder72.append('$');
        java.lang.Object obj75 = properties0.get((java.lang.Object) strBuilder74);
        java.util.Set<java.lang.Object> objSet76 = properties0.keySet();
        java.io.InputStream inputStream77 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.loadFromXML(inputStream77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strMatcher18);
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(writer34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objEnumeration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertNotNull(strBuilder55);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertNotNull(strBuilder60);
        org.junit.Assert.assertNotNull(strBuilder63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(strBuilder69);
        org.junit.Assert.assertNotNull(strBuilder72);
        org.junit.Assert.assertNotNull(strBuilder74);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNotNull(objSet76);
    }

    @Test
    public void test04601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04601");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer5 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray6 = strTokenizer5.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder0.appendAll((java.lang.Object[]) strArray6);
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder0.append((long) 'a');
        boolean boolean11 = strBuilder0.endsWith("false");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder0.minimizeCapacity();
        java.util.stream.IntStream intStream13 = strBuilder0.chars();
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(intStream13);
    }

    @Test
    public void test04602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04602");
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder(3);
        char[] charArray2 = strBuilder1.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.appendSeparator("32.0");
        java.lang.String str5 = strBuilder1.getNewLineText();
        int int7 = strBuilder1.indexOf("java.io.IOException: l");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test04603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04603");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        int int4 = strBuilder0.indexOf("");
        int int7 = strBuilder0.lastIndexOf('#', (int) (byte) 0);
        boolean boolean9 = strBuilder0.startsWith("4#4");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer10 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder0.appendAll((java.util.Iterator<java.lang.String>) strTokenizer10);
        boolean boolean12 = strTokenizer10.isIgnoreEmptyTokens();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = strTokenizer10.setIgnoreEmptyTokens(false);
        org.apache.commons.lang3.text.StrMatcher strMatcher16 = org.apache.commons.lang3.text.StrMatcher.stringMatcher("");
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder17.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder24.replaceFirst("", "");
        char[] charArray28 = strBuilder24.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder23.appendln(charArray28);
        int int33 = strMatcher16.isMatch(charArray28, (-1), (int) ' ', (int) (byte) -1);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer34 = strTokenizer14.setTrimmerMatcher(strMatcher16);
        boolean boolean35 = strTokenizer34.hasNext();
        int int36 = strTokenizer34.previousIndex();
        java.lang.String str37 = strTokenizer34.toString();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer39 = strTokenizer34.setEmptyTokenAsNull(true);
        // The following exception was thrown during execution in test generation
        try {
            strTokenizer39.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove() is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strTokenizer10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strTokenizer14);
        org.junit.Assert.assertNotNull(strMatcher16);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[]");
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(strTokenizer34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "StrTokenizer[]" + "'", str37, "StrTokenizer[]");
        org.junit.Assert.assertNotNull(strTokenizer39);
    }

    @Test
    public void test04604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04604");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder7.replaceFirst("", "");
        char[] charArray11 = strBuilder7.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder6.appendln(charArray11);
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder6.appendln((double) '$');
        char[] charArray19 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer21 = new org.apache.commons.lang3.text.StrTokenizer(charArray19, ' ');
        int int22 = strTokenizer21.size();
        boolean boolean23 = strTokenizer21.hasNext();
        java.util.List<java.lang.String> strList24 = strTokenizer21.getTokenList();
        java.lang.String[] strArray28 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        boolean boolean31 = strList24.addAll((java.util.Collection<java.lang.String>) strList29);
        java.lang.String str33 = strList29.remove(0);
        char[] charArray38 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer40 = new org.apache.commons.lang3.text.StrTokenizer(charArray38, ' ');
        int int41 = strTokenizer40.size();
        boolean boolean42 = strTokenizer40.hasNext();
        java.util.List<java.lang.String> strList43 = strTokenizer40.getTokenList();
        java.lang.String[] strArray47 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        boolean boolean50 = strList43.addAll((java.util.Collection<java.lang.String>) strList48);
        boolean boolean51 = strList29.addAll((java.util.Collection<java.lang.String>) strList48);
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder6.appendAll((java.lang.Iterable<java.lang.String>) strList29);
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = strBuilder53.deleteFirst("");
        int int57 = strBuilder53.indexOf("");
        int int60 = strBuilder53.lastIndexOf('#', (int) (byte) 0);
        boolean boolean62 = strBuilder53.startsWith("4#4");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer63 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance();
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = strBuilder53.appendAll((java.util.Iterator<java.lang.String>) strTokenizer63);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer66 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray67 = strTokenizer66.getTokenArray();
        java.lang.String[] strArray68 = strTokenizer66.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder70 = strBuilder53.appendWithSeparators((java.lang.Object[]) strArray68, "");
        org.apache.commons.lang3.text.StrBuilder strBuilder71 = strBuilder52.appendln((java.lang.Object) "");
        org.apache.commons.lang3.text.StrBuilder strBuilder72 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder74 = strBuilder72.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder75 = strBuilder74.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder78 = strBuilder75.appendSeparator("hi!", "4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder79 = new org.apache.commons.lang3.text.StrBuilder();
        int int80 = strBuilder79.capacity();
        java.lang.StringBuffer stringBuffer81 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder84 = strBuilder79.appendln(stringBuffer81, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher85 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int86 = strBuilder84.lastIndexOf(strMatcher85);
        org.apache.commons.lang3.text.StrBuilder strBuilder88 = strBuilder75.replaceFirst(strMatcher85, "hi!");
        char[] charArray91 = strBuilder88.toCharArray(0, (int) (short) 10);
        org.apache.commons.lang3.text.StrBuilder strBuilder93 = strBuilder88.deleteAll("\n32.0java.io.IOException: hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder96 = strBuilder71.append((java.lang.CharSequence) "\n32.0java.io.IOException: hi!", 3, 2);
        org.apache.commons.lang3.text.StrBuilder strBuilder99 = strBuilder71.replaceFirst("\na32.0", "0true");
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\n32.0" + "'", str33, "\n32.0");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(strBuilder55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strTokenizer63);
        org.junit.Assert.assertNotNull(strBuilder64);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strBuilder70);
        org.junit.Assert.assertNotNull(strBuilder71);
        org.junit.Assert.assertNotNull(strBuilder74);
        org.junit.Assert.assertNotNull(strBuilder75);
        org.junit.Assert.assertNotNull(strBuilder78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 32 + "'", int80 == 32);
        org.junit.Assert.assertNotNull(strBuilder84);
        org.junit.Assert.assertNotNull(strMatcher85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(strBuilder88);
        org.junit.Assert.assertNotNull(charArray91);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray91), "4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray91), "4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray91), "[4, #, 4]");
        org.junit.Assert.assertNotNull(strBuilder93);
        org.junit.Assert.assertNotNull(strBuilder96);
        org.junit.Assert.assertNotNull(strBuilder99);
    }

    @Test
    public void test04605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04605");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        java.lang.String str4 = strBuilder0.getNewLineText();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder0.appendln((float) 100);
        int int8 = strBuilder6.indexOf('#');
        boolean boolean9 = strBuilder6.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray15 = strTokenizer14.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder10.appendAll((java.lang.Object[]) strArray15);
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder10.replaceFirst('a', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder20.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer24 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray25 = strTokenizer24.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder20.appendAll((java.lang.Object[]) strArray25);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder10.appendln(strBuilder26);
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder27.append((long) '$');
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder30.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder33.appendSeparator('#', (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder36.append((float) '$');
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder36.appendln(32);
        java.io.Reader reader41 = strBuilder36.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder42.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder45.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder48.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = strBuilder52.replaceFirst("", "");
        char[] charArray56 = strBuilder52.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder57 = strBuilder51.appendln(charArray56);
        org.apache.commons.lang3.text.StrMatcher strMatcher58 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray56);
        org.apache.commons.lang3.text.StrBuilder strBuilder60 = strBuilder42.replaceFirst(strMatcher58, "StrTokenizer[]");
        int int61 = strBuilder36.lastIndexOf(strMatcher58);
        org.apache.commons.lang3.text.StrBuilder strBuilder62 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder65 = strBuilder62.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder68 = strBuilder65.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder69 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder72 = strBuilder69.replaceFirst("", "");
        char[] charArray73 = strBuilder69.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder74 = strBuilder68.appendln(charArray73);
        org.apache.commons.lang3.text.StrMatcher strMatcher75 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray73);
        int int79 = strMatcher58.isMatch(charArray73, (int) (byte) 0, (int) (byte) 100, (int) (byte) 100);
        int int80 = strBuilder29.lastIndexOf(strMatcher58);
        org.apache.commons.lang3.text.StrBuilder strBuilder81 = strBuilder6.deleteFirst(strMatcher58);
        org.apache.commons.lang3.text.StrBuilder strBuilder83 = strBuilder6.setNullText("\ntrue\n52.0");
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNotNull(reader41);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strBuilder48);
        org.junit.Assert.assertNotNull(strBuilder51);
        org.junit.Assert.assertNotNull(strBuilder55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[]");
        org.junit.Assert.assertNotNull(strBuilder57);
        org.junit.Assert.assertNotNull(strMatcher58);
        org.junit.Assert.assertNotNull(strBuilder60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(strBuilder65);
        org.junit.Assert.assertNotNull(strBuilder68);
        org.junit.Assert.assertNotNull(strBuilder72);
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[]");
        org.junit.Assert.assertNotNull(strBuilder74);
        org.junit.Assert.assertNotNull(strMatcher75);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(strBuilder81);
        org.junit.Assert.assertNotNull(strBuilder83);
    }

    @Test
    public void test04606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04606");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst("", "");
        char[] charArray7 = strBuilder3.toCharArray();
        char[] charArray8 = strBuilder0.getChars(charArray7);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer9 = new org.apache.commons.lang3.text.StrTokenizer(charArray7);
        boolean boolean10 = strTokenizer9.hasPrevious();
        java.util.List<java.lang.String> strList11 = strTokenizer9.getTokenList();
        boolean boolean12 = strTokenizer9.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher13 = strTokenizer9.getDelimiterMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = strTokenizer9.setDelimiterString("1001\n");
        boolean boolean16 = strTokenizer15.hasPrevious();
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMatcher13);
        org.junit.Assert.assertNotNull(strTokenizer15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04607");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        boolean boolean8 = strTokenizer6.hasNext();
        java.util.List<java.lang.String> strList9 = strTokenizer6.getTokenList();
        java.lang.String[] strArray13 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        boolean boolean16 = strList9.addAll((java.util.Collection<java.lang.String>) strList14);
        char[] charArray21 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer23 = new org.apache.commons.lang3.text.StrTokenizer(charArray21, ' ');
        int int24 = strTokenizer23.size();
        boolean boolean25 = strTokenizer23.hasNext();
        java.util.List<java.lang.String> strList26 = strTokenizer23.getTokenList();
        java.lang.String[] strArray30 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        boolean boolean33 = strList26.addAll((java.util.Collection<java.lang.String>) strList31);
        java.util.Spliterator<java.lang.String> strSpliterator34 = strList31.spliterator();
        int int35 = strList31.size();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer38 = new org.apache.commons.lang3.text.StrTokenizer(" 4#4", "");
        int int39 = strList31.lastIndexOf((java.lang.Object) strTokenizer38);
        java.util.List<java.lang.String> strList40 = strTokenizer38.getTokenList();
        org.apache.commons.lang3.text.StrSubstitutor strSubstitutor41 = new org.apache.commons.lang3.text.StrSubstitutor();
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = new org.apache.commons.lang3.text.StrBuilder();
        int int43 = strBuilder42.capacity();
        java.lang.StringBuffer stringBuffer44 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder42.appendln(stringBuffer44, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder42.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder49.appendln(true);
        boolean boolean54 = strSubstitutor41.replaceIn(strBuilder51, (int) '$', 0);
        boolean boolean55 = strList40.equals((java.lang.Object) '$');
        boolean boolean56 = strList9.retainAll((java.util.Collection<java.lang.String>) strList40);
        char[] charArray61 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer63 = new org.apache.commons.lang3.text.StrTokenizer(charArray61, ' ');
        int int64 = strTokenizer63.size();
        boolean boolean65 = strTokenizer63.hasNext();
        java.util.List<java.lang.String> strList66 = strTokenizer63.getTokenList();
        java.lang.String[] strArray70 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        boolean boolean73 = strList66.addAll((java.util.Collection<java.lang.String>) strList71);
        java.lang.String str75 = strList71.remove(0);
        java.util.stream.Stream<java.lang.String> strStream76 = strList71.stream();
        boolean boolean77 = strList40.addAll((java.util.Collection<java.lang.String>) strList71);
        org.apache.commons.lang3.text.StrBuilder strBuilder78 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder80 = strBuilder78.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder81 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder84 = strBuilder81.replaceFirst("", "");
        char[] charArray85 = strBuilder81.toCharArray();
        char[] charArray86 = strBuilder78.getChars(charArray85);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer87 = new org.apache.commons.lang3.text.StrTokenizer(charArray85);
        boolean boolean88 = strTokenizer87.hasPrevious();
        java.util.List<java.lang.String> strList89 = strTokenizer87.getTokenList();
        boolean boolean91 = strList89.add("StrTokenizer[not tokenized yet]");
        int int92 = strList89.size();
        boolean boolean93 = strList71.removeAll((java.util.Collection<java.lang.String>) strList89);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strSpliterator34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 32 + "'", int43 == 32);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(strBuilder51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\n32.0" + "'", str75, "\n32.0");
        org.junit.Assert.assertNotNull(strStream76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(strBuilder80);
        org.junit.Assert.assertNotNull(strBuilder84);
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray85), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray85), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray85), "[]");
        org.junit.Assert.assertNotNull(charArray86);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray86), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray86), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray86), "[]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test04608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04608");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray5 = strTokenizer4.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder0.appendAll((java.lang.Object[]) strArray5);
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder0.replaceFirst('a', 'a');
        java.util.stream.IntStream intStream10 = strBuilder0.codePoints();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder11.replaceFirst("", "");
        char[] charArray15 = strBuilder11.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer17 = new org.apache.commons.lang3.text.StrTokenizer(charArray15, "");
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder0.appendln(charArray15);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder0.deleteFirst('1');
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = new org.apache.commons.lang3.text.StrBuilder("true\n###################################");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder0.append((java.lang.CharSequence) strBuilder22, 15, 112);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: length must be valid");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[]");
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(strBuilder20);
    }

    @Test
    public void test04609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04609");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder4.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder6.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder0.appendFixedWidthPadRight((java.lang.Object) strBuilder9, (int) (byte) -1, '#');
        org.apache.commons.lang3.text.StrMatcher strMatcher13 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int14 = strBuilder0.lastIndexOf(strMatcher13);
        char[] charArray19 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer21 = new org.apache.commons.lang3.text.StrTokenizer(charArray19, ' ');
        int int22 = strTokenizer21.size();
        boolean boolean23 = strTokenizer21.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher24 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer25 = strTokenizer21.setIgnoredMatcher(strMatcher24);
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder0.deleteFirst(strMatcher24);
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder26.deleteAll("1");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder26.delete(48, (int) 'o');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: end < start");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strMatcher13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strMatcher24);
        org.junit.Assert.assertNotNull(strTokenizer25);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder28);
    }

    @Test
    public void test04610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04610");
        java.util.Properties properties0 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray7 = strTokenizer6.getTokenArray();
        java.lang.String[] strArray8 = strTokenizer6.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder4.appendWithSeparators((java.lang.Object[]) strArray8, "4#4");
        char[] charArray13 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray13);
        java.lang.Object obj15 = properties0.getOrDefault((java.lang.Object) strBuilder4, (java.lang.Object) strTokenizer14);
        java.util.Collection<java.lang.Object> objCollection16 = properties0.values();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer18 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher19 = strTokenizer18.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer20 = strTokenizer18.reset();
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder21.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder25.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder27.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder28.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder21.appendFixedWidthPadRight((java.lang.Object) strBuilder30, (int) (byte) -1, '#');
        org.apache.commons.lang3.text.StrMatcher strMatcher34 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int35 = strBuilder21.lastIndexOf(strMatcher34);
        char[] charArray40 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer42 = new org.apache.commons.lang3.text.StrTokenizer(charArray40, ' ');
        int int43 = strTokenizer42.size();
        boolean boolean44 = strTokenizer42.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher45 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer46 = strTokenizer42.setIgnoredMatcher(strMatcher45);
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder21.deleteFirst(strMatcher45);
        java.lang.Object obj48 = properties0.getOrDefault((java.lang.Object) strTokenizer20, (java.lang.Object) strBuilder47);
        java.util.Collection<java.lang.Object> objCollection49 = properties0.values();
        java.util.Properties properties50 = new java.util.Properties();
        int int51 = properties50.size();
        boolean boolean53 = properties50.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties54 = new java.util.Properties();
        int int55 = properties54.size();
        boolean boolean57 = properties54.containsKey((java.lang.Object) (-1.0f));
        properties50.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties54);
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = strBuilder59.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder62 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder65 = strBuilder62.replaceFirst("", "");
        char[] charArray66 = strBuilder62.toCharArray();
        char[] charArray67 = strBuilder59.getChars(charArray66);
        java.io.Reader reader68 = strBuilder59.asReader();
        java.lang.Object obj69 = properties50.remove((java.lang.Object) strBuilder59);
        java.util.Enumeration<java.lang.Object> objEnumeration70 = properties50.elements();
        boolean boolean71 = properties0.contains((java.lang.Object) properties50);
        java.util.Properties properties72 = new java.util.Properties();
        java.util.Properties properties73 = new java.util.Properties(properties72);
        org.apache.commons.lang3.text.StrBuilder strBuilder74 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder77 = strBuilder74.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder80 = strBuilder77.replaceFirst('a', '4');
        java.io.Writer writer81 = strBuilder80.asWriter();
        properties73.store(writer81, "");
        java.util.Properties properties84 = new java.util.Properties();
        int int85 = properties84.size();
        boolean boolean87 = properties84.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties88 = new java.util.Properties();
        int int89 = properties88.size();
        boolean boolean91 = properties88.containsKey((java.lang.Object) (-1.0f));
        properties84.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties88);
        java.util.Enumeration<java.lang.Object> objEnumeration93 = properties88.keys();
        boolean boolean94 = properties73.containsValue((java.lang.Object) objEnumeration93);
        java.util.Set<java.lang.Object> objSet95 = properties73.keySet();
        properties50.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties73);
        java.util.Collection<java.lang.Object> objCollection97 = properties73.values();
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNotNull(strMatcher19);
        org.junit.Assert.assertNotNull(strTokenizer20);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strMatcher34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strMatcher45);
        org.junit.Assert.assertNotNull(strTokenizer46);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "");
        org.junit.Assert.assertNotNull(objCollection49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strBuilder61);
        org.junit.Assert.assertNotNull(strBuilder65);
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[]");
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[]");
        org.junit.Assert.assertNotNull(reader68);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(objEnumeration70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strBuilder77);
        org.junit.Assert.assertNotNull(strBuilder80);
        org.junit.Assert.assertNotNull(writer81);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(objEnumeration93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(objSet95);
        org.junit.Assert.assertNotNull(objCollection97);
    }

    @Test
    public void test04611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04611");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        java.lang.Object obj2 = properties0.clone();
        java.util.Set<java.lang.String> strSet3 = properties0.stringPropertyNames();
        properties0.clear();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = new org.apache.commons.lang3.text.StrBuilder();
        int int6 = strBuilder5.capacity();
        java.lang.StringBuffer stringBuffer7 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder5.appendln(stringBuffer7, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder5.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder5.setLength(32);
        java.io.Writer writer16 = strBuilder15.asWriter();
        writer16.write(" 4#4", (int) (byte) 0, (int) (byte) 0);
        writer16.flush();
        writer16.flush();
        properties0.store(writer16, "t");
        writer16.write(39);
        writer16.write("java.io.IOException: java.io.IOException: StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder29.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder32.replaceFirst("", "");
        char[] charArray36 = strBuilder32.toCharArray();
        char[] charArray37 = strBuilder29.getChars(charArray36);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer38 = new org.apache.commons.lang3.text.StrTokenizer(charArray36);
        boolean boolean39 = strTokenizer38.hasPrevious();
        org.apache.commons.lang3.text.StrMatcher strMatcher41 = org.apache.commons.lang3.text.StrMatcher.stringMatcher("");
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = strBuilder42.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder45.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder49.replaceFirst("", "");
        char[] charArray53 = strBuilder49.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder48.appendln(charArray53);
        int int58 = strMatcher41.isMatch(charArray53, (-1), (int) ' ', (int) (byte) -1);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer59 = new org.apache.commons.lang3.text.StrTokenizer(charArray53);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer60 = strTokenizer38.reset(charArray53);
        org.apache.commons.lang3.text.StrMatcher strMatcher61 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray53);
        org.apache.commons.lang3.text.StrMatcher strMatcher62 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray53);
        writer16.write(charArray53);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer65 = new org.apache.commons.lang3.text.StrTokenizer(charArray53, '\000');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer67 = strTokenizer65.setQuoteChar('g');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer69 = strTokenizer65.setEmptyTokenAsNull(true);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(writer16);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strMatcher41);
        org.junit.Assert.assertNotNull(strBuilder45);
        org.junit.Assert.assertNotNull(strBuilder48);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[]");
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(strTokenizer60);
        org.junit.Assert.assertNotNull(strMatcher61);
        org.junit.Assert.assertNotNull(strMatcher62);
        org.junit.Assert.assertNotNull(strTokenizer67);
        org.junit.Assert.assertNotNull(strTokenizer69);
    }

    @Test
    public void test04612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04612");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder5.appendPadding((int) '#', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder11.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.appendln((double) '#');
        boolean boolean15 = strBuilder5.equals(strBuilder14);
        java.util.stream.IntStream intStream16 = strBuilder5.codePoints();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder5.replaceFirst('a', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder5.appendln('$');
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder5.appendFixedWidthPadRight((int) (short) 0, 112, '\000');
        java.io.Writer writer26 = strBuilder25.asWriter();
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intStream16);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(writer26);
    }

    @Test
    public void test04613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04613");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        boolean boolean8 = strTokenizer6.hasNext();
        java.util.List<java.lang.String> strList9 = strTokenizer6.getTokenList();
        java.lang.String[] strArray13 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        boolean boolean16 = strList9.addAll((java.util.Collection<java.lang.String>) strList14);
        char[] charArray21 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer23 = new org.apache.commons.lang3.text.StrTokenizer(charArray21, ' ');
        int int24 = strTokenizer23.size();
        boolean boolean25 = strTokenizer23.hasNext();
        java.util.List<java.lang.String> strList26 = strTokenizer23.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder27.replaceFirst("", "");
        char[] charArray31 = strBuilder27.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer33 = new org.apache.commons.lang3.text.StrTokenizer(charArray31, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer34 = new org.apache.commons.lang3.text.StrTokenizer(charArray31);
        boolean boolean35 = strList26.equals((java.lang.Object) charArray31);
        char[] charArray40 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer42 = new org.apache.commons.lang3.text.StrTokenizer(charArray40, ' ');
        int int43 = strTokenizer42.size();
        boolean boolean44 = strTokenizer42.hasNext();
        java.util.List<java.lang.String> strList45 = strTokenizer42.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = new org.apache.commons.lang3.text.StrBuilder();
        int int47 = strBuilder46.capacity();
        java.lang.StringBuffer stringBuffer48 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder46.appendln(stringBuffer48, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder46.insert(1, (double) 32);
        java.lang.String str56 = strBuilder46.rightString((int) ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = strBuilder46.insert(1, '#');
        boolean boolean60 = strList45.equals((java.lang.Object) strBuilder46);
        boolean boolean61 = strList26.containsAll((java.util.Collection<java.lang.String>) strList45);
        java.lang.String str63 = strList26.remove((int) (short) 0);
        java.util.Iterator<java.lang.String> strItor64 = strList26.iterator();
        java.util.Iterator<java.lang.String> strItor65 = strList26.iterator();
        char[] charArray70 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer72 = new org.apache.commons.lang3.text.StrTokenizer(charArray70, ' ');
        int int73 = strTokenizer72.size();
        boolean boolean74 = strTokenizer72.hasNext();
        java.util.List<java.lang.String> strList75 = strTokenizer72.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder76 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder79 = strBuilder76.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder81 = strBuilder79.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder84 = strBuilder81.appendPadding((int) '#', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder85 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder87 = strBuilder85.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder88 = strBuilder87.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder90 = strBuilder88.appendln((double) '#');
        boolean boolean91 = strBuilder81.equals(strBuilder90);
        java.util.stream.IntStream intStream92 = strBuilder81.codePoints();
        boolean boolean93 = strList75.contains((java.lang.Object) strBuilder81);
        java.util.stream.Stream<java.lang.String> strStream94 = strList75.stream();
        boolean boolean95 = strList26.containsAll((java.util.Collection<java.lang.String>) strList75);
        boolean boolean96 = strList26.isEmpty();
        boolean boolean97 = strList9.addAll((java.util.Collection<java.lang.String>) strList26);
        java.util.stream.Stream<java.lang.String> strStream98 = strList9.parallelStream();
        java.lang.Object[] objArray99 = strList9.toArray();
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 32 + "'", int47 == 32);
        org.junit.Assert.assertNotNull(strBuilder51);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\n32.0" + "'", str56, "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "4#4" + "'", str63, "4#4");
        org.junit.Assert.assertNotNull(strItor64);
        org.junit.Assert.assertNotNull(strItor65);
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNotNull(strBuilder79);
        org.junit.Assert.assertNotNull(strBuilder81);
        org.junit.Assert.assertNotNull(strBuilder84);
        org.junit.Assert.assertNotNull(strBuilder87);
        org.junit.Assert.assertNotNull(strBuilder88);
        org.junit.Assert.assertNotNull(strBuilder90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(intStream92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(strStream94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(strStream98);
        org.junit.Assert.assertNotNull(objArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray99), "[4#4, \n32.0, , ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray99), "[4#4, \n32.0, , ]");
    }

    @Test
    public void test04614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04614");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer5 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray6 = strTokenizer5.getTokenArray();
        java.lang.String[] strArray7 = strTokenizer5.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder3.appendWithSeparators((java.lang.Object[]) strArray7, "4#4");
        org.apache.commons.lang3.text.StrMatcher strMatcher10 = org.apache.commons.lang3.text.StrMatcher.tabMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.deleteAll(strMatcher10);
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder9.trim();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder9.append(false);
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder15.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder15.deleteAll('4');
        int int22 = strBuilder20.indexOf('a');
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder23.replaceFirst("", "");
        char[] charArray27 = strBuilder23.toCharArray();
        char[] charArray28 = strBuilder20.getChars(charArray27);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer29 = new org.apache.commons.lang3.text.StrTokenizer(charArray27);
        char[] charArray30 = strBuilder14.getChars(charArray27);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer32 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher33 = strTokenizer32.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer34 = strTokenizer32.reset();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer36 = strTokenizer34.setDelimiterString(" 4#4");
        org.apache.commons.lang3.text.StrMatcher strMatcher37 = strTokenizer34.getDelimiterMatcher();
        int int38 = strBuilder14.indexOf(strMatcher37);
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder14.appendFixedWidthPadRight((int) '4', (int) 's', 't');
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strMatcher10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "false");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "false");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[f, a, l, s, e]");
        org.junit.Assert.assertNotNull(strMatcher33);
        org.junit.Assert.assertNotNull(strTokenizer34);
        org.junit.Assert.assertNotNull(strTokenizer36);
        org.junit.Assert.assertNotNull(strMatcher37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(strBuilder42);
    }

    @Test
    public void test04615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04615");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        boolean boolean9 = strBuilder0.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder0.clear();
        int int12 = strBuilder11.capacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder13.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder16.appendSeparator('#', (int) (byte) 100);
        java.io.Reader reader20 = strBuilder16.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder11.appendln(strBuilder16);
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = new org.apache.commons.lang3.text.StrBuilder();
        int int23 = strBuilder22.capacity();
        java.lang.StringBuffer stringBuffer24 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder22.appendln(stringBuffer24, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder22.insert(1, (double) 32);
        boolean boolean31 = strBuilder22.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder22.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder22.append((long) (byte) -1);
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder34.appendln("100.0\000\000\000\000\000");
        char[] charArray37 = strBuilder34.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder38.deleteFirst("");
        int int42 = strBuilder38.indexOf("");
        int int45 = strBuilder38.lastIndexOf('#', (int) (byte) 0);
        boolean boolean47 = strBuilder38.startsWith("4#4");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer48 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance();
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder38.appendAll((java.util.Iterator<java.lang.String>) strTokenizer48);
        boolean boolean50 = strTokenizer48.isIgnoreEmptyTokens();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer52 = strTokenizer48.setIgnoreEmptyTokens(false);
        org.apache.commons.lang3.text.StrMatcher strMatcher54 = org.apache.commons.lang3.text.StrMatcher.stringMatcher("");
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder55.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = strBuilder58.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder62 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder65 = strBuilder62.replaceFirst("", "");
        char[] charArray66 = strBuilder62.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder67 = strBuilder61.appendln(charArray66);
        int int71 = strMatcher54.isMatch(charArray66, (-1), (int) ' ', (int) (byte) -1);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer72 = strTokenizer52.setTrimmerMatcher(strMatcher54);
        boolean boolean73 = strTokenizer72.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher74 = strTokenizer72.getIgnoredMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer75 = new org.apache.commons.lang3.text.StrTokenizer(charArray37, strMatcher74);
        org.apache.commons.lang3.text.StrBuilder strBuilder77 = strBuilder21.replaceAll(strMatcher74, "{}3.0");
        int int79 = strBuilder21.lastIndexOf('a');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(reader20);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 32 + "'", int23 == 32);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "0.23\n-1100.0\000\000\000\000\000\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "0.23\n-1100.0\000\000\000\000\000\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[0, ., 2, 3, \n, -, 1, 1, 0, 0, ., 0, \000, \000, \000, \000, \000, \n]");
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strTokenizer48);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strTokenizer52);
        org.junit.Assert.assertNotNull(strMatcher54);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertNotNull(strBuilder61);
        org.junit.Assert.assertNotNull(strBuilder65);
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[]");
        org.junit.Assert.assertNotNull(strBuilder67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(strTokenizer72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strMatcher74);
        org.junit.Assert.assertNotNull(strBuilder77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
    }

    @Test
    public void test04616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04616");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = new org.apache.commons.lang3.text.StrTokenizer("\n10.035\n32.0a3");
    }

    @Test
    public void test04617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04617");
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder((int) 'o');
    }

    @Test
    public void test04618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04618");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance("-132.0");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder5.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder8.appendln('#');
        java.lang.StringBuffer stringBuffer11 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder8.append(stringBuffer11, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder8.deleteFirst("hi!");
        char[] charArray17 = strBuilder8.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer18 = strTokenizer4.reset(charArray17);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = strTokenizer18.reset();
        org.apache.commons.lang3.text.StrMatcher strMatcher20 = strTokenizer18.getDelimiterMatcher();
        org.apache.commons.lang3.text.StrMatcher strMatcher22 = org.apache.commons.lang3.text.StrMatcher.stringMatcher("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer23 = new org.apache.commons.lang3.text.StrTokenizer("\n32.0", strMatcher20, strMatcher22);
        org.apache.commons.lang3.text.StrMatcher strMatcher24 = strTokenizer23.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer25 = strTokenizer1.setIgnoredMatcher(strMatcher24);
        org.junit.Assert.assertNotNull(strTokenizer1);
        org.junit.Assert.assertNotNull(strTokenizer4);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#, \n]");
        org.junit.Assert.assertNotNull(strTokenizer18);
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertNotNull(strMatcher20);
        org.junit.Assert.assertNotNull(strMatcher22);
        org.junit.Assert.assertNotNull(strMatcher24);
        org.junit.Assert.assertNotNull(strTokenizer25);
    }

    @Test
    public void test04619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04619");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        java.lang.String str4 = strBuilder0.getNewLineText();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder0.appendln((float) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder6.setNullText(" ");
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder8.appendSeparator(' ', 53);
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder8.appendln((float) 't');
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder13.appendSeparator("32.0", "50\nttt");
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder16);
    }

    @Test
    public void test04620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04620");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder2.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder5.appendln('#');
        java.lang.StringBuffer stringBuffer8 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder5.append(stringBuffer8, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder5.deleteFirst("hi!");
        char[] charArray14 = strBuilder5.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = strTokenizer1.reset(charArray14);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = strTokenizer15.reset();
        int int17 = strTokenizer16.previousIndex();
        int int18 = strTokenizer16.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            strTokenizer16.set("1\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: set() is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strTokenizer1);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, \n]");
        org.junit.Assert.assertNotNull(strTokenizer15);
        org.junit.Assert.assertNotNull(strTokenizer16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test04621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04621");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        boolean boolean9 = strBuilder0.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder10.replaceAll("#", "true\n###################################3\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder10.appendPadding((int) 'a', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder16.replaceAll('a', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder16.appendSeparator('#', 'a');
        int int24 = strBuilder22.indexOf('g');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test04622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04622");
        java.io.IOException iOException2 = new java.io.IOException("{}");
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException4 = new java.io.IOException("", (java.lang.Throwable) iOException2);
    }

    @Test
    public void test04623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04623");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.deleteAll('4');
        int int7 = strBuilder5.indexOf('a');
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder5.replaceFirst("java.io.IOException: hi!", "");
        java.lang.StringBuffer stringBuffer11 = strBuilder5.toStringBuffer();
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(stringBuffer11);
        org.junit.Assert.assertEquals(stringBuffer11.toString(), "");
    }

    @Test
    public void test04624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04624");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        boolean boolean5 = strBuilder3.endsWith("StrTokenizer[]");
        java.io.Writer writer6 = strBuilder3.asWriter();
        java.io.Writer writer8 = writer6.append('#');
        writer6.flush();
        writer6.write((int) '4');
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(writer6);
        org.junit.Assert.assertNotNull(writer8);
    }

    @Test
    public void test04625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04625");
        java.util.Properties properties0 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray7 = strTokenizer6.getTokenArray();
        java.lang.String[] strArray8 = strTokenizer6.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder4.appendWithSeparators((java.lang.Object[]) strArray8, "4#4");
        char[] charArray13 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray13);
        java.lang.Object obj15 = properties0.getOrDefault((java.lang.Object) strBuilder4, (java.lang.Object) strTokenizer14);
        java.util.Collection<java.lang.Object> objCollection16 = properties0.values();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer18 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher19 = strTokenizer18.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer20 = strTokenizer18.reset();
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder21.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder25.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder27.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder28.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder21.appendFixedWidthPadRight((java.lang.Object) strBuilder30, (int) (byte) -1, '#');
        org.apache.commons.lang3.text.StrMatcher strMatcher34 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int35 = strBuilder21.lastIndexOf(strMatcher34);
        char[] charArray40 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer42 = new org.apache.commons.lang3.text.StrTokenizer(charArray40, ' ');
        int int43 = strTokenizer42.size();
        boolean boolean44 = strTokenizer42.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher45 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer46 = strTokenizer42.setIgnoredMatcher(strMatcher45);
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder21.deleteFirst(strMatcher45);
        java.lang.Object obj48 = properties0.getOrDefault((java.lang.Object) strTokenizer20, (java.lang.Object) strBuilder47);
        java.util.Collection<java.lang.Object> objCollection49 = properties0.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet50 = properties0.entrySet();
        properties0.clear();
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties0.elements();
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNotNull(strMatcher19);
        org.junit.Assert.assertNotNull(strTokenizer20);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strMatcher34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strMatcher45);
        org.junit.Assert.assertNotNull(strTokenizer46);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "");
        org.junit.Assert.assertNotNull(objCollection49);
        org.junit.Assert.assertNotNull(objEntrySet50);
        org.junit.Assert.assertNotNull(objEnumeration52);
    }

    @Test
    public void test04626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04626");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher2 = strTokenizer1.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = strTokenizer1.reset("");
        org.apache.commons.lang3.text.StrMatcher strMatcher5 = strTokenizer1.getIgnoredMatcher();
        java.lang.String[] strArray6 = strTokenizer1.getTokenArray();
        java.util.Properties properties7 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder8.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer13 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray14 = strTokenizer13.getTokenArray();
        java.lang.String[] strArray15 = strTokenizer13.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder11.appendWithSeparators((java.lang.Object[]) strArray15, "4#4");
        char[] charArray20 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer21 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray20);
        java.lang.Object obj22 = properties7.getOrDefault((java.lang.Object) strBuilder11, (java.lang.Object) strTokenizer21);
        java.util.Collection<java.lang.Object> objCollection23 = properties7.values();
        boolean boolean24 = properties7.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder25.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder28.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder32.replaceFirst("", "");
        char[] charArray36 = strBuilder32.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder31.appendln(charArray36);
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder31.appendln((double) '$');
        java.lang.Object obj40 = properties7.get((java.lang.Object) strBuilder31);
        java.lang.String str41 = org.apache.commons.lang3.text.StrSubstitutor.replace((java.lang.Object) strArray6, properties7);
        java.io.OutputStream outputStream42 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.save(outputStream42, "rg.apace.common");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMatcher2);
        org.junit.Assert.assertNotNull(strTokenizer4);
        org.junit.Assert.assertNotNull(strMatcher5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[]");
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNull(obj40);
    }

    @Test
    public void test04627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04627");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        char[] charArray13 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = new org.apache.commons.lang3.text.StrTokenizer(charArray13, ' ');
        int int16 = strTokenizer15.size();
        boolean boolean17 = strTokenizer15.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher18 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = strTokenizer15.setIgnoredMatcher(strMatcher18);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.replaceFirst("", "");
        java.lang.Object obj24 = properties0.putIfAbsent((java.lang.Object) strMatcher18, (java.lang.Object) strBuilder20);
        java.lang.Object obj27 = properties0.setProperty(" 4#4", "\n32.0");
        java.lang.Object obj30 = properties0.setProperty("hi!", "hi!");
        java.lang.String str32 = properties0.getProperty("{}");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer36 = new org.apache.commons.lang3.text.StrTokenizer("#", 'a', '$');
        boolean boolean37 = strTokenizer36.hasPrevious();
        boolean boolean38 = strTokenizer36.isEmptyTokenAsNull();
        boolean boolean39 = properties0.containsValue((java.lang.Object) boolean38);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strMatcher18);
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test04628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04628");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder2.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder5.appendln('#');
        java.lang.StringBuffer stringBuffer8 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder5.append(stringBuffer8, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder5.deleteFirst("hi!");
        char[] charArray14 = strBuilder5.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = strTokenizer1.reset(charArray14);
        org.apache.commons.lang3.text.StrMatcher strMatcher16 = strTokenizer15.getQuoteMatcher();
        org.junit.Assert.assertNotNull(strTokenizer1);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, \n]");
        org.junit.Assert.assertNotNull(strTokenizer15);
        org.junit.Assert.assertNotNull(strMatcher16);
    }

    @Test
    public void test04629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04629");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        char[] charArray13 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = new org.apache.commons.lang3.text.StrTokenizer(charArray13, ' ');
        int int16 = strTokenizer15.size();
        boolean boolean17 = strTokenizer15.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher18 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = strTokenizer15.setIgnoredMatcher(strMatcher18);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.replaceFirst("", "");
        java.lang.Object obj24 = properties0.putIfAbsent((java.lang.Object) strMatcher18, (java.lang.Object) strBuilder20);
        java.lang.Object obj27 = properties0.setProperty(" 4#4", "\n32.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = new org.apache.commons.lang3.text.StrBuilder();
        int int29 = strBuilder28.capacity();
        java.lang.StringBuffer stringBuffer30 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder28.appendln(stringBuffer30, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher34 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int35 = strBuilder33.lastIndexOf(strMatcher34);
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder33.insert((int) (short) 1, 32);
        java.util.Properties properties39 = new java.util.Properties();
        int int40 = properties39.size();
        boolean boolean42 = properties39.containsKey((java.lang.Object) (-1.0f));
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet43 = properties39.entrySet();
        java.lang.Object obj44 = properties0.putIfAbsent((java.lang.Object) strBuilder38, (java.lang.Object) objEntrySet43);
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = new org.apache.commons.lang3.text.StrBuilder();
        int int46 = strBuilder45.capacity();
        java.lang.StringBuffer stringBuffer47 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = strBuilder45.appendln(stringBuffer47, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher51 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int52 = strBuilder50.lastIndexOf(strMatcher51);
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = strBuilder50.insert((int) (short) 1, 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder57 = strBuilder55.deleteAll("java.io.IOException: hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder60 = strBuilder58.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = strBuilder60.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = strBuilder61.setNullText("");
        char[] charArray64 = strBuilder63.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder67 = strBuilder63.insert(0, true);
        java.io.Writer writer68 = strBuilder63.asWriter();
        boolean boolean69 = properties0.remove((java.lang.Object) "java.io.IOException: hi!", (java.lang.Object) writer68);
        writer68.write((int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder72 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder75 = strBuilder72.replaceFirst("", "");
        char[] charArray76 = strBuilder72.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer78 = new org.apache.commons.lang3.text.StrTokenizer(charArray76, 'a');
        writer68.write(charArray76);
        java.lang.CharSequence charSequence80 = null;
        java.io.Writer writer81 = writer68.append(charSequence80);
        writer68.close();
        // The following exception was thrown during execution in test generation
        try {
            writer68.write("java.io.IOException: [\n32.0, , , StrTokenizer[]]", (int) (short) -1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: startIndex must be valid");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strMatcher18);
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 32 + "'", int29 == 32);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strMatcher34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objEntrySet43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 32 + "'", int46 == 32);
        org.junit.Assert.assertNotNull(strBuilder50);
        org.junit.Assert.assertNotNull(strMatcher51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(strBuilder55);
        org.junit.Assert.assertNotNull(strBuilder57);
        org.junit.Assert.assertNotNull(strBuilder60);
        org.junit.Assert.assertNotNull(strBuilder61);
        org.junit.Assert.assertNotNull(strBuilder63);
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[]");
        org.junit.Assert.assertNotNull(strBuilder67);
        org.junit.Assert.assertNotNull(writer68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strBuilder75);
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray76), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray76), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray76), "[]");
        org.junit.Assert.assertNotNull(writer81);
    }

    @Test
    public void test04630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04630");
        org.apache.commons.lang3.text.StrSubstitutor strSubstitutor0 = new org.apache.commons.lang3.text.StrSubstitutor();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        int int2 = strBuilder1.capacity();
        java.lang.StringBuffer stringBuffer3 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder1.appendln(stringBuffer3, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder1.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder8.appendln(true);
        boolean boolean13 = strSubstitutor0.replaceIn(strBuilder10, (int) '$', 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder14.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder16.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder17.ensureCapacity((int) (short) 10);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.replaceFirst("", "");
        java.lang.String str24 = strBuilder20.getNewLineText();
        java.util.stream.IntStream intStream25 = strBuilder20.chars();
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder17.append((java.lang.CharSequence) strBuilder20);
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder17.setLength((int) (short) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder17.appendFixedWidthPadLeft((int) (byte) 1, 32, '$');
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder10.appendln(strBuilder17);
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder17.insert((int) (short) 0, 10);
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder17.appendSeparator(' ', '\n');
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder17.appendSeparator("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = strBuilder42.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder45.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder48.appendSeparator(' ', (int) '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder48.replaceFirst('a', ' ');
        java.lang.String str55 = strBuilder48.getNullText();
        org.apache.commons.lang3.text.StrBuilder strBuilder57 = strBuilder48.appendln(' ');
        char[] charArray60 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer61 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray60);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer63 = strTokenizer61.setDelimiterString("hi!");
        java.lang.String str64 = strTokenizer61.next();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer66 = strTokenizer61.setDelimiterString("StrTokenizer[ 4#4]");
        int int67 = strTokenizer66.nextIndex();
        org.apache.commons.lang3.text.StrBuilder strBuilder69 = strBuilder48.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer66, "0.0true");
        org.apache.commons.lang3.text.StrBuilder strBuilder70 = strBuilder41.appendln(strBuilder48);
        boolean boolean72 = strBuilder41.startsWith("StrTokenizer[not tokenized yet]]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(intStream25);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertNotNull(strBuilder45);
        org.junit.Assert.assertNotNull(strBuilder48);
        org.junit.Assert.assertNotNull(strBuilder51);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(strBuilder57);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer61);
        org.junit.Assert.assertNotNull(strTokenizer63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "a4" + "'", str64, "a4");
        org.junit.Assert.assertNotNull(strTokenizer66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(strBuilder69);
        org.junit.Assert.assertNotNull(strBuilder70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test04631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04631");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder12.replaceFirst("", "");
        char[] charArray16 = strBuilder12.toCharArray();
        char[] charArray17 = strBuilder9.getChars(charArray16);
        java.io.Reader reader18 = strBuilder9.asReader();
        java.lang.Object obj19 = properties0.remove((java.lang.Object) strBuilder9);
        java.io.Writer writer20 = strBuilder9.asWriter();
        java.io.Writer writer22 = writer20.append('$');
        writer20.close();
        writer20.write("#36.0\n32.0a");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
        org.junit.Assert.assertNotNull(reader18);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(writer20);
        org.junit.Assert.assertNotNull(writer22);
    }

    @Test
    public void test04632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04632");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        java.io.Reader reader4 = strBuilder0.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder5.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder8.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder12.replaceFirst("", "");
        char[] charArray16 = strBuilder12.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder11.appendln(charArray16);
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder11.appendln((double) '$');
        char[] charArray24 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer26 = new org.apache.commons.lang3.text.StrTokenizer(charArray24, ' ');
        int int27 = strTokenizer26.size();
        boolean boolean28 = strTokenizer26.hasNext();
        java.util.List<java.lang.String> strList29 = strTokenizer26.getTokenList();
        java.lang.String[] strArray33 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        boolean boolean36 = strList29.addAll((java.util.Collection<java.lang.String>) strList34);
        java.lang.String str38 = strList34.remove(0);
        char[] charArray43 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer45 = new org.apache.commons.lang3.text.StrTokenizer(charArray43, ' ');
        int int46 = strTokenizer45.size();
        boolean boolean47 = strTokenizer45.hasNext();
        java.util.List<java.lang.String> strList48 = strTokenizer45.getTokenList();
        java.lang.String[] strArray52 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        boolean boolean55 = strList48.addAll((java.util.Collection<java.lang.String>) strList53);
        boolean boolean56 = strList34.addAll((java.util.Collection<java.lang.String>) strList53);
        org.apache.commons.lang3.text.StrBuilder strBuilder57 = strBuilder11.appendAll((java.lang.Iterable<java.lang.String>) strList34);
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder0.append((java.lang.CharSequence) strBuilder57);
        java.io.Reader reader59 = strBuilder57.asReader();
        int int61 = strBuilder57.indexOf("###");
        org.apache.commons.lang3.text.StrBuilder strBuilder62 = strBuilder57.trim();
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = new org.apache.commons.lang3.text.StrBuilder();
        int int64 = strBuilder63.capacity();
        java.lang.StringBuffer stringBuffer65 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder68 = strBuilder63.appendln(stringBuffer65, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder70 = strBuilder63.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder72 = strBuilder70.appendln(true);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer74 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher75 = strTokenizer74.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrMatcher strMatcher76 = strTokenizer74.getIgnoredMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder78 = strBuilder70.replaceFirst(strMatcher76, "h");
        org.apache.commons.lang3.text.StrBuilder strBuilder80 = strBuilder78.setLength(10);
        org.apache.commons.lang3.text.StrBuilder strBuilder82 = strBuilder80.append(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder85 = strBuilder80.appendSeparator(' ', 2);
        boolean boolean86 = strBuilder62.equalsIgnoreCase(strBuilder80);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(reader4);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\n32.0" + "'", str38, "\n32.0");
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strBuilder57);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertNotNull(reader59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(strBuilder62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 32 + "'", int64 == 32);
        org.junit.Assert.assertNotNull(strBuilder68);
        org.junit.Assert.assertNotNull(strBuilder70);
        org.junit.Assert.assertNotNull(strBuilder72);
        org.junit.Assert.assertNotNull(strMatcher75);
        org.junit.Assert.assertNotNull(strMatcher76);
        org.junit.Assert.assertNotNull(strBuilder78);
        org.junit.Assert.assertNotNull(strBuilder80);
        org.junit.Assert.assertNotNull(strBuilder82);
        org.junit.Assert.assertNotNull(strBuilder85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test04633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04633");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.lang.Object obj2 = properties1.clone();
        java.io.PrintStream printStream3 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printStream3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
    }

    @Test
    public void test04634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04634");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        java.lang.Throwable throwable3 = null;
        java.io.IOException iOException4 = new java.io.IOException("\n32.0", throwable3);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        char[] charArray8 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer9 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray8);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer11 = strTokenizer9.setDelimiterString("hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer13 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder14.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder17.appendln('#');
        java.lang.StringBuffer stringBuffer20 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder17.append(stringBuffer20, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder17.deleteFirst("hi!");
        char[] charArray26 = strBuilder17.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer27 = strTokenizer13.reset(charArray26);
        boolean boolean28 = properties0.replace((java.lang.Object) iOException4, (java.lang.Object) "hi!", (java.lang.Object) strTokenizer13);
        java.io.IOException iOException30 = new java.io.IOException("{");
        iOException4.addSuppressed((java.lang.Throwable) iOException30);
        java.lang.String str32 = iOException30.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer9);
        org.junit.Assert.assertNotNull(strTokenizer11);
        org.junit.Assert.assertNotNull(strTokenizer13);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, \n]");
        org.junit.Assert.assertNotNull(strTokenizer27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.io.IOException: {" + "'", str32, "java.io.IOException: {");
    }

    @Test
    public void test04635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04635");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder0.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.append((float) '4');
        int int14 = strBuilder9.indexOf("", (int) (short) 10);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance("");
        boolean boolean17 = strTokenizer16.hasNext();
        java.lang.String[] strArray18 = strTokenizer16.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder9.appendWithSeparators((java.lang.Object[]) strArray18, "4#4");
        java.lang.String str21 = strBuilder20.toString();
        java.lang.StringBuffer stringBuffer22 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder20.appendln(stringBuffer22, 10, 10);
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder20.appendFixedWidthPadRight((int) '3', (int) 'g', 'g');
        java.lang.String str30 = org.apache.commons.lang3.text.StrSubstitutor.replaceSystemProperties((java.lang.Object) '3');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(strTokenizer16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ntrue\n52.0" + "'", str21, "\ntrue\n52.0");
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "3" + "'", str30, "3");
    }

    @Test
    public void test04636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04636");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray5 = strTokenizer4.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder0.appendAll((java.lang.Object[]) strArray5);
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder0.replaceFirst('a', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray15 = strTokenizer14.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder10.appendAll((java.lang.Object[]) strArray15);
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder0.appendln(strBuilder16);
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder17.append((long) '$');
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder17.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder17.insert((int) (short) 0, '\n');
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder17.appendln((double) 4);
        int int27 = strBuilder25.lastIndexOf('4');
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
    }

    @Test
    public void test04637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04637");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer3 = new org.apache.commons.lang3.text.StrTokenizer("true\n", 'a', 't');
    }

    @Test
    public void test04638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04638");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder5.appendPadding((int) '#', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder11.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.appendln((double) '#');
        boolean boolean15 = strBuilder5.equals(strBuilder14);
        java.util.stream.IntStream intStream16 = strBuilder5.codePoints();
        java.util.Iterator<java.lang.String> strItor17 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder5.appendWithSeparators(strItor17, " 4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder19.replaceFirst(' ', ' ');
        java.io.Writer writer23 = strBuilder22.asWriter();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder24.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer29 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher30 = strTokenizer29.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder24.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer29, "h");
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder24.setLength((int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder34.insert((int) '4', (double) (byte) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder22.append(strBuilder37, 32, (int) (byte) 10);
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder37.appendNewLine();
        int int42 = strBuilder41.size();
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intStream16);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(writer23);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strMatcher30);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 104 + "'", int42 == 104);
    }

    @Test
    public void test04639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04639");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        boolean boolean8 = strTokenizer6.hasNext();
        java.util.List<java.lang.String> strList9 = strTokenizer6.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        int int11 = strBuilder10.capacity();
        java.lang.StringBuffer stringBuffer12 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder10.appendln(stringBuffer12, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder10.insert(1, (double) 32);
        java.lang.String str20 = strBuilder10.rightString((int) ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder10.insert(1, '#');
        boolean boolean24 = strList9.equals((java.lang.Object) strBuilder10);
        java.lang.Throwable throwable26 = null;
        java.io.IOException iOException27 = new java.io.IOException("{}", throwable26);
        java.lang.Throwable[] throwableArray28 = iOException27.getSuppressed();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder10.appendWithSeparators((java.lang.Object[]) throwableArray28, "10.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder30.appendSeparator('$', '$');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer34 = strBuilder33.asTokenizer();
        // The following exception was thrown during execution in test generation
        try {
            strTokenizer34.add("####\000\000\000\000\000\000\000\000\000\000");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: add() is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\n32.0" + "'", str20, "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strTokenizer34);
    }

    @Test
    public void test04640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04640");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray5 = strTokenizer4.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder0.appendAll((java.lang.Object[]) strArray5);
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder0.replaceFirst('a', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.clear();
        java.util.stream.IntStream intStream11 = strBuilder10.codePoints();
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(intStream11);
    }

    @Test
    public void test04641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04641");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        boolean boolean8 = strTokenizer6.hasNext();
        java.util.List<java.lang.String> strList9 = strTokenizer6.getTokenList();
        java.lang.String[] strArray13 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        boolean boolean16 = strList9.addAll((java.util.Collection<java.lang.String>) strList14);
        char[] charArray21 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer23 = new org.apache.commons.lang3.text.StrTokenizer(charArray21, ' ');
        int int24 = strTokenizer23.size();
        boolean boolean25 = strTokenizer23.hasNext();
        java.util.List<java.lang.String> strList26 = strTokenizer23.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder27.replaceFirst("", "");
        char[] charArray31 = strBuilder27.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer33 = new org.apache.commons.lang3.text.StrTokenizer(charArray31, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer34 = new org.apache.commons.lang3.text.StrTokenizer(charArray31);
        boolean boolean35 = strList26.equals((java.lang.Object) charArray31);
        char[] charArray40 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer42 = new org.apache.commons.lang3.text.StrTokenizer(charArray40, ' ');
        int int43 = strTokenizer42.size();
        boolean boolean44 = strTokenizer42.hasNext();
        java.util.List<java.lang.String> strList45 = strTokenizer42.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = new org.apache.commons.lang3.text.StrBuilder();
        int int47 = strBuilder46.capacity();
        java.lang.StringBuffer stringBuffer48 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder46.appendln(stringBuffer48, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder46.insert(1, (double) 32);
        java.lang.String str56 = strBuilder46.rightString((int) ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = strBuilder46.insert(1, '#');
        boolean boolean60 = strList45.equals((java.lang.Object) strBuilder46);
        boolean boolean61 = strList26.containsAll((java.util.Collection<java.lang.String>) strList45);
        boolean boolean62 = strList9.addAll((java.util.Collection<java.lang.String>) strList45);
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder66 = strBuilder63.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder68 = strBuilder66.appendln('#');
        java.lang.StringBuffer stringBuffer69 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder72 = strBuilder66.append(stringBuffer69, (int) (byte) -1, (int) (byte) 100);
        int int73 = strList9.lastIndexOf((java.lang.Object) stringBuffer69);
        java.util.ListIterator<java.lang.String> strItor75 = strList9.listIterator((int) (short) 0);
        java.util.List<java.lang.String> strList78 = strList9.subList((int) (short) 1, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str80 = strList78.remove(4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 32 + "'", int47 == 32);
        org.junit.Assert.assertNotNull(strBuilder51);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\n32.0" + "'", str56, "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strBuilder66);
        org.junit.Assert.assertNotNull(strBuilder68);
        org.junit.Assert.assertNotNull(strBuilder72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(strItor75);
        org.junit.Assert.assertNotNull(strList78);
    }

    @Test
    public void test04642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04642");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        boolean boolean9 = strBuilder0.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder0.clear();
        int int12 = strBuilder11.capacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder11.append("{}");
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder15.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder18.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder21.appendSeparator(' ', (int) '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder24.appendln('#');
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder27.replaceFirst("", "");
        char[] charArray31 = strBuilder27.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer33 = new org.apache.commons.lang3.text.StrTokenizer(charArray31, "");
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder24.append(charArray31, 0, (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder37.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer41 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray42 = strTokenizer41.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder37.appendAll((java.lang.Object[]) strArray42);
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = strBuilder37.replaceFirst('a', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder47.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer51 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray52 = strTokenizer51.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder47.appendAll((java.lang.Object[]) strArray52);
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder37.appendln(strBuilder53);
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder55.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = strBuilder58.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder62 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder65 = strBuilder62.replaceFirst("", "");
        char[] charArray66 = strBuilder62.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder67 = strBuilder61.appendln(charArray66);
        boolean boolean68 = strBuilder37.equals((java.lang.Object) strBuilder61);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer71 = new org.apache.commons.lang3.text.StrTokenizer("StrTokenizer[not tokenized yet]", ' ');
        org.apache.commons.lang3.text.StrMatcher strMatcher72 = strTokenizer71.getDelimiterMatcher();
        int int73 = strBuilder37.indexOf(strMatcher72);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer74 = new org.apache.commons.lang3.text.StrTokenizer(charArray31, strMatcher72);
        org.apache.commons.lang3.text.StrBuilder strBuilder75 = strBuilder11.append((java.lang.Object) strMatcher72);
        org.apache.commons.lang3.text.StrBuilder strBuilder78 = strBuilder11.appendSeparator('g', (int) (short) 10);
        int int80 = strBuilder11.indexOf('\000');
        int int83 = strBuilder11.lastIndexOf("true\n##############################true#####4", (int) '\n');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = strBuilder11.substring(104);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: end < start");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[]");
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strBuilder43);
        org.junit.Assert.assertNotNull(strBuilder46);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertNotNull(strBuilder61);
        org.junit.Assert.assertNotNull(strBuilder65);
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[]");
        org.junit.Assert.assertNotNull(strBuilder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strMatcher72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(strBuilder75);
        org.junit.Assert.assertNotNull(strBuilder78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
    }

    @Test
    public void test04643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04643");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray2 = strTokenizer1.getTokenArray();
        java.lang.String[] strArray3 = strTokenizer1.getTokenArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer5 = strTokenizer1.setIgnoreEmptyTokens(true);
        java.lang.String str6 = strTokenizer1.nextToken();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer8 = strTokenizer1.setDelimiterChar('e');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strTokenizer5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strTokenizer8);
    }

    @Test
    public void test04644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04644");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer2 = new org.apache.commons.lang3.text.StrTokenizer(" 4#4", "");
        org.apache.commons.lang3.text.StrMatcher strMatcher3 = strTokenizer2.getIgnoredMatcher();
        boolean boolean4 = strTokenizer2.hasPrevious();
        boolean boolean5 = strTokenizer2.hasNext();
        org.junit.Assert.assertNotNull(strMatcher3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test04645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04645");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        boolean boolean8 = strTokenizer6.hasNext();
        java.util.List<java.lang.String> strList9 = strTokenizer6.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder10.replaceFirst("", "");
        char[] charArray14 = strBuilder10.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = new org.apache.commons.lang3.text.StrTokenizer(charArray14, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer17 = new org.apache.commons.lang3.text.StrTokenizer(charArray14);
        boolean boolean18 = strList9.equals((java.lang.Object) charArray14);
        java.util.Spliterator<java.lang.String> strSpliterator19 = strList9.spliterator();
        char[] charArray24 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer26 = new org.apache.commons.lang3.text.StrTokenizer(charArray24, ' ');
        int int27 = strTokenizer26.size();
        boolean boolean28 = strTokenizer26.hasNext();
        java.util.List<java.lang.String> strList29 = strTokenizer26.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder30.replaceFirst("", "");
        char[] charArray34 = strBuilder30.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer36 = new org.apache.commons.lang3.text.StrTokenizer(charArray34, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer37 = new org.apache.commons.lang3.text.StrTokenizer(charArray34);
        boolean boolean38 = strList29.equals((java.lang.Object) charArray34);
        char[] charArray43 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer45 = new org.apache.commons.lang3.text.StrTokenizer(charArray43, ' ');
        int int46 = strTokenizer45.size();
        boolean boolean47 = strTokenizer45.hasNext();
        java.util.List<java.lang.String> strList48 = strTokenizer45.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = new org.apache.commons.lang3.text.StrBuilder();
        int int50 = strBuilder49.capacity();
        java.lang.StringBuffer stringBuffer51 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder49.appendln(stringBuffer51, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder57 = strBuilder49.insert(1, (double) 32);
        java.lang.String str59 = strBuilder49.rightString((int) ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder62 = strBuilder49.insert(1, '#');
        boolean boolean63 = strList48.equals((java.lang.Object) strBuilder49);
        boolean boolean64 = strList29.containsAll((java.util.Collection<java.lang.String>) strList48);
        char[] charArray69 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer71 = new org.apache.commons.lang3.text.StrTokenizer(charArray69, ' ');
        int int72 = strTokenizer71.size();
        boolean boolean73 = strTokenizer71.hasNext();
        java.util.List<java.lang.String> strList74 = strTokenizer71.getTokenList();
        java.lang.String[] strArray78 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList79 = new java.util.ArrayList<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList79, strArray78);
        boolean boolean81 = strList74.addAll((java.util.Collection<java.lang.String>) strList79);
        boolean boolean82 = strList48.containsAll((java.util.Collection<java.lang.String>) strList79);
        boolean boolean83 = strList9.addAll((java.util.Collection<java.lang.String>) strList48);
        // The following exception was thrown during execution in test generation
        try {
            strList9.add(100, "E");
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSpliterator19);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 32 + "'", int50 == 32);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertNotNull(strBuilder57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\n32.0" + "'", str59, "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test04646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04646");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.appendln('#');
        java.lang.StringBuffer stringBuffer6 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder3.append(stringBuffer6, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder3.deleteFirst("hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder11.appendFixedWidthPadRight(32, (int) 't', 'a');
        java.lang.String str16 = strBuilder11.getNullText();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder11.replaceFirst("##############################", "\n");
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strBuilder19);
    }

    @Test
    public void test04647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04647");
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder(58);
    }

    @Test
    public void test04648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04648");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.setLength(32);
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder10.trim();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder12.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder15.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder18.appendSeparator(' ', (int) '4');
        org.apache.commons.lang3.text.StrMatcher strMatcher22 = org.apache.commons.lang3.text.StrSubstitutor.DEFAULT_SUFFIX;
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder18.deleteAll(strMatcher22);
        boolean boolean24 = strBuilder10.equalsIgnoreCase(strBuilder18);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder18.appendSeparator(" #\n", (-1));
        // The following exception was thrown during execution in test generation
        try {
            char char29 = strBuilder18.charAt(43);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 43");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strMatcher22);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strBuilder27);
    }

    @Test
    public void test04649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04649");
        org.apache.commons.lang3.text.StrSubstitutor strSubstitutor0 = new org.apache.commons.lang3.text.StrSubstitutor();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        int int2 = strBuilder1.capacity();
        java.lang.StringBuffer stringBuffer3 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder1.appendln(stringBuffer3, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder1.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder8.appendln(true);
        boolean boolean13 = strSubstitutor0.replaceIn(strBuilder10, (int) '$', 0);
        int int16 = strBuilder10.indexOf(" #\n", (int) (short) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder10.insert(5, (float) (byte) 0);
        java.util.Properties properties21 = new java.util.Properties();
        int int22 = properties21.size();
        boolean boolean24 = properties21.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties25 = new java.util.Properties();
        int int26 = properties25.size();
        boolean boolean28 = properties25.containsKey((java.lang.Object) (-1.0f));
        properties21.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        java.util.Collection<java.lang.Object> objCollection30 = properties21.values();
        java.util.Set<java.lang.Object> objSet31 = properties21.keySet();
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder19.insert(4, (java.lang.Object) objSet31);
        java.util.Properties properties33 = new java.util.Properties();
        java.util.Enumeration<java.lang.Object> objEnumeration34 = properties33.keys();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder35.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder38.appendSeparator('#', (int) (byte) 100);
        java.io.Reader reader42 = strBuilder38.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = strBuilder43.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer47 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray48 = strTokenizer47.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder43.appendAll((java.lang.Object[]) strArray48);
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder43.replaceFirst('a', 'a');
        java.util.stream.IntStream intStream53 = strBuilder43.codePoints();
        java.lang.Object obj54 = properties33.replace((java.lang.Object) reader42, (java.lang.Object) intStream53);
        long long56 = reader42.skip(0L);
        boolean boolean57 = reader42.ready();
        reader42.close();
        org.apache.commons.lang3.text.StrMatcher strMatcher60 = org.apache.commons.lang3.text.StrMatcher.stringMatcher("");
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = strBuilder61.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder67 = strBuilder64.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder68 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder71 = strBuilder68.replaceFirst("", "");
        char[] charArray72 = strBuilder68.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder73 = strBuilder67.appendln(charArray72);
        int int77 = strMatcher60.isMatch(charArray72, (-1), (int) ' ', (int) (byte) -1);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer78 = new org.apache.commons.lang3.text.StrTokenizer(charArray72);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer79 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray72);
        int int80 = reader42.read(charArray72);
        org.apache.commons.lang3.text.StrBuilder strBuilder81 = strBuilder19.appendln(charArray72);
        org.apache.commons.lang3.text.StrBuilder strBuilder82 = strBuilder19.appendNewLine();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder85 = strBuilder19.insert(59, (float) 200);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 59");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertNotNull(objSet31);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(objEnumeration34);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertNotNull(reader42);
        org.junit.Assert.assertNotNull(strBuilder45);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(intStream53);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strMatcher60);
        org.junit.Assert.assertNotNull(strBuilder64);
        org.junit.Assert.assertNotNull(strBuilder67);
        org.junit.Assert.assertNotNull(strBuilder71);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[]");
        org.junit.Assert.assertNotNull(strBuilder73);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(strTokenizer79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(strBuilder81);
        org.junit.Assert.assertNotNull(strBuilder82);
    }

    @Test
    public void test04650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04650");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        java.lang.String str10 = strBuilder0.rightString((int) ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder0.replaceAll("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder14.replaceFirst("", "");
        char[] charArray18 = strBuilder14.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer20 = new org.apache.commons.lang3.text.StrTokenizer(charArray18, "");
        boolean boolean21 = strTokenizer20.hasNext();
        boolean boolean22 = strTokenizer20.hasPrevious();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder13.appendAll((java.util.Iterator<java.lang.String>) strTokenizer20);
        java.lang.String str24 = strBuilder13.getNullText();
        int int27 = strBuilder13.indexOf("2", 16);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\n32.0" + "'", str10, "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test04651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04651");
        char[] charArray0 = null;
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray0);
        java.lang.String str2 = strTokenizer1.previousToken();
        boolean boolean3 = strTokenizer1.hasPrevious();
        boolean boolean4 = strTokenizer1.hasNext();
        org.junit.Assert.assertNotNull(strTokenizer1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test04652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04652");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer5 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray6 = strTokenizer5.getTokenArray();
        java.lang.String[] strArray7 = strTokenizer5.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder3.appendWithSeparators((java.lang.Object[]) strArray7, "4#4");
        org.apache.commons.lang3.text.StrMatcher strMatcher10 = org.apache.commons.lang3.text.StrMatcher.tabMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.deleteAll(strMatcher10);
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder9.trim();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder9.append(false);
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder15.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder15.deleteAll('4');
        int int22 = strBuilder20.indexOf('a');
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder23.replaceFirst("", "");
        char[] charArray27 = strBuilder23.toCharArray();
        char[] charArray28 = strBuilder20.getChars(charArray27);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer29 = new org.apache.commons.lang3.text.StrTokenizer(charArray27);
        char[] charArray30 = strBuilder14.getChars(charArray27);
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder31.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder34.appendSeparator('#', (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder37.append((float) '$');
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder37.appendln(32);
        java.io.Reader reader42 = strBuilder37.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = strBuilder43.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder46.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder49.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = strBuilder53.replaceFirst("", "");
        char[] charArray57 = strBuilder53.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder52.appendln(charArray57);
        org.apache.commons.lang3.text.StrMatcher strMatcher59 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray57);
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = strBuilder43.replaceFirst(strMatcher59, "StrTokenizer[]");
        int int62 = strBuilder37.lastIndexOf(strMatcher59);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer63 = new org.apache.commons.lang3.text.StrTokenizer(charArray27, strMatcher59);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer64 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray27);
        // The following exception was thrown during execution in test generation
        try {
            strTokenizer64.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove() is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strMatcher10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "false");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "false");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[f, a, l, s, e]");
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertNotNull(reader42);
        org.junit.Assert.assertNotNull(strBuilder45);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(strBuilder56);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[]");
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertNotNull(strMatcher59);
        org.junit.Assert.assertNotNull(strBuilder61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(strTokenizer64);
    }

    @Test
    public void test04653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04653");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        int int4 = strBuilder0.indexOf("");
        int int7 = strBuilder0.lastIndexOf('#', (int) (byte) 0);
        boolean boolean9 = strBuilder0.startsWith("4#4");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer10 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder0.appendAll((java.util.Iterator<java.lang.String>) strTokenizer10);
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder0.appendSeparator("{}");
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder0.append((double) 0.0f);
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder0.appendln((int) (byte) 100);
        char[] charArray18 = strBuilder0.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer20 = new org.apache.commons.lang3.text.StrTokenizer(charArray18, '#');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer22 = new org.apache.commons.lang3.text.StrTokenizer(charArray18, "###");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer25 = new org.apache.commons.lang3.text.StrTokenizer(charArray18, '\000', '#');
        // The following exception was thrown during execution in test generation
        try {
            strTokenizer25.set("97true\n###################################a");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: set() is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strTokenizer10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "0.0100\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "0.0100\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[0, ., 0, 1, 0, 0, \n]");
    }

    @Test
    public void test04654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04654");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder5.appendPadding((int) '#', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder11.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.appendln((double) '#');
        boolean boolean15 = strBuilder5.equals(strBuilder14);
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder14.ensureCapacity((int) (byte) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder17.deleteFirst("true\n###################################");
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder19.appendSeparator("#\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder22.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer27 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher28 = strTokenizer27.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder22.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer27, "h");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer32 = strTokenizer27.reset("\n32.0");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer34 = strTokenizer32.setEmptyTokenAsNull(true);
        boolean boolean35 = strTokenizer32.hasNext();
        int int36 = strTokenizer32.nextIndex();
        org.apache.commons.lang3.text.StrMatcher strMatcher37 = strTokenizer32.getQuoteMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder21.replaceAll(strMatcher37, "10.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder39.appendSeparator('$', '4');
        java.util.Properties properties43 = new java.util.Properties();
        int int44 = properties43.size();
        java.lang.Object obj45 = properties43.clone();
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder46.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder50.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder52.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = strBuilder53.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder46.appendFixedWidthPadRight((java.lang.Object) strBuilder55, (int) (byte) -1, '#');
        java.lang.Object obj59 = properties43.get((java.lang.Object) strBuilder46);
        java.util.Properties properties60 = new java.util.Properties();
        int int61 = properties60.size();
        boolean boolean63 = properties60.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties64 = new java.util.Properties();
        int int65 = properties64.size();
        boolean boolean67 = properties64.containsKey((java.lang.Object) (-1.0f));
        properties60.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties64);
        char[] charArray73 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer75 = new org.apache.commons.lang3.text.StrTokenizer(charArray73, ' ');
        int int76 = strTokenizer75.size();
        boolean boolean77 = strTokenizer75.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher78 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer79 = strTokenizer75.setIgnoredMatcher(strMatcher78);
        org.apache.commons.lang3.text.StrBuilder strBuilder80 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder83 = strBuilder80.replaceFirst("", "");
        java.lang.Object obj84 = properties60.putIfAbsent((java.lang.Object) strMatcher78, (java.lang.Object) strBuilder80);
        boolean boolean85 = strBuilder46.equals(obj84);
        org.apache.commons.lang3.text.StrBuilder strBuilder87 = strBuilder46.appendln((long) (short) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder88 = strBuilder46.appendNewLine();
        org.apache.commons.lang3.text.StrBuilder strBuilder90 = strBuilder46.appendln((int) (short) 10);
        org.apache.commons.lang3.text.StrBuilder strBuilder91 = strBuilder46.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder92 = strBuilder91.minimizeCapacity();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder95 = strBuilder39.appendln(strBuilder92, (-1), (int) 's');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: startIndex must be valid");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(strMatcher28);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strTokenizer32);
        org.junit.Assert.assertNotNull(strTokenizer34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(strMatcher37);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "{}");
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertNotNull(strBuilder55);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(strMatcher78);
        org.junit.Assert.assertNotNull(strTokenizer79);
        org.junit.Assert.assertNotNull(strBuilder83);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strBuilder87);
        org.junit.Assert.assertNotNull(strBuilder88);
        org.junit.Assert.assertNotNull(strBuilder90);
        org.junit.Assert.assertNotNull(strBuilder91);
        org.junit.Assert.assertNotNull(strBuilder92);
    }

    @Test
    public void test04655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04655");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder7.replaceFirst("", "");
        char[] charArray11 = strBuilder7.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder6.appendln(charArray11);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer13 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray11);
        java.lang.String str14 = strTokenizer13.nextToken();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = strTokenizer13.setQuoteChar('4');
        boolean boolean17 = strTokenizer16.isEmptyTokenAsNull();
        org.apache.commons.lang3.text.StrMatcher strMatcher19 = org.apache.commons.lang3.text.StrMatcher.stringMatcher("\n32.0-1.0");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer20 = strTokenizer16.setQuoteMatcher(strMatcher19);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer22 = strTokenizer16.setQuoteChar('#');
        // The following exception was thrown during execution in test generation
        try {
            strTokenizer22.set("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: set() is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strTokenizer13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strTokenizer16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strMatcher19);
        org.junit.Assert.assertNotNull(strTokenizer20);
        org.junit.Assert.assertNotNull(strTokenizer22);
    }

    @Test
    public void test04656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04656");
        org.apache.commons.lang3.text.StrSubstitutor strSubstitutor0 = new org.apache.commons.lang3.text.StrSubstitutor();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        int int2 = strBuilder1.capacity();
        java.lang.StringBuffer stringBuffer3 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder1.appendln(stringBuffer3, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder1.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder8.appendln(true);
        boolean boolean13 = strSubstitutor0.replaceIn(strBuilder10, (int) '$', 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder14.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder16.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder17.ensureCapacity((int) (short) 10);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.replaceFirst("", "");
        java.lang.String str24 = strBuilder20.getNewLineText();
        java.util.stream.IntStream intStream25 = strBuilder20.chars();
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder17.append((java.lang.CharSequence) strBuilder20);
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder17.setLength((int) (short) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder17.appendFixedWidthPadLeft((int) (byte) 1, 32, '$');
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder10.appendln(strBuilder17);
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder33.appendln("StrTokenizer[32.0]");
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder35.replaceFirst('a', '#');
        int int39 = strBuilder38.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(intStream25);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 158 + "'", int39 == 158);
    }

    @Test
    public void test04657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04657");
        java.util.Properties properties0 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder4.appendln('#');
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder9.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = new org.apache.commons.lang3.text.StrBuilder();
        int int12 = strBuilder11.capacity();
        java.lang.StringBuffer stringBuffer13 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder11.appendln(stringBuffer13, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher17 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int18 = strBuilder16.lastIndexOf(strMatcher17);
        boolean boolean19 = strBuilder9.equalsIgnoreCase(strBuilder16);
        char[] charArray22 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer23 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray22);
        boolean boolean24 = properties0.replace((java.lang.Object) strBuilder6, (java.lang.Object) strBuilder9, (java.lang.Object) strTokenizer23);
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = new org.apache.commons.lang3.text.StrBuilder();
        int int26 = strBuilder25.capacity();
        java.lang.StringBuffer stringBuffer27 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder25.appendln(stringBuffer27, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder25.setNullText("");
        java.lang.Object obj33 = properties0.get((java.lang.Object) strBuilder32);
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder32.append((long) (byte) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder35.deleteAll('#');
        int int40 = strBuilder35.indexOf(' ', 43);
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder35.append("########a4\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = strBuilder43.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder46.replaceFirst('a', '4');
        char[] charArray54 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer56 = new org.apache.commons.lang3.text.StrTokenizer(charArray54, ' ');
        int int57 = strTokenizer56.size();
        boolean boolean58 = strTokenizer56.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher59 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer60 = strTokenizer56.setIgnoredMatcher(strMatcher59);
        int int62 = strBuilder46.indexOf(strMatcher59, (int) (short) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = strBuilder46.deleteFirst("StrTokenizer[32.0]");
        char[] charArray69 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer71 = new org.apache.commons.lang3.text.StrTokenizer(charArray69, ' ');
        int int72 = strTokenizer71.size();
        boolean boolean73 = strTokenizer71.hasNext();
        java.util.List<java.lang.String> strList74 = strTokenizer71.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder75 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder78 = strBuilder75.replaceFirst("", "");
        char[] charArray79 = strBuilder75.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer81 = new org.apache.commons.lang3.text.StrTokenizer(charArray79, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer82 = new org.apache.commons.lang3.text.StrTokenizer(charArray79);
        boolean boolean83 = strList74.equals((java.lang.Object) charArray79);
        boolean boolean85 = strList74.add("\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder87 = strBuilder64.appendWithSeparators((java.lang.Iterable<java.lang.String>) strList74, "StrTokenizer[not tokenized yet]");
        org.apache.commons.lang3.text.StrBuilder strBuilder88 = strBuilder42.appendAll((java.lang.Iterable<java.lang.String>) strList74);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder91 = strBuilder42.insert(100, 'o');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 100");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strMatcher17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertNotNull(strBuilder46);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strMatcher59);
        org.junit.Assert.assertNotNull(strTokenizer60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(strBuilder64);
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertNotNull(strBuilder78);
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(strBuilder87);
        org.junit.Assert.assertNotNull(strBuilder88);
    }

    @Test
    public void test04658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04658");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.lang.String str10 = properties4.getProperty("h");
        java.util.Enumeration<?> wildcardEnumeration11 = properties4.propertyNames();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet12 = properties4.entrySet();
        int int13 = properties4.size();
        java.util.Collection<java.lang.Object> objCollection14 = properties4.values();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(wildcardEnumeration11);
        org.junit.Assert.assertNotNull(objEntrySet12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objCollection14);
    }

    @Test
    public void test04659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04659");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder7.replaceFirst("", "");
        char[] charArray11 = strBuilder7.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder6.appendln(charArray11);
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.deleteFirst("StrTokenizer[]");
        int int16 = strBuilder12.indexOf(" 4#4");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence19 = strBuilder12.subSequence(5, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 32");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test04660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04660");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        java.lang.Object obj2 = properties0.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties0.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet4 = properties0.entrySet();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEntrySet4);
    }

    @Test
    public void test04661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04661");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder2.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = new org.apache.commons.lang3.text.StrBuilder();
        int int5 = strBuilder4.capacity();
        java.lang.StringBuffer stringBuffer6 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder4.appendln(stringBuffer6, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher10 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int11 = strBuilder9.lastIndexOf(strMatcher10);
        boolean boolean12 = strBuilder2.equalsIgnoreCase(strBuilder9);
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder13.replaceFirst("", "");
        char[] charArray17 = strBuilder13.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = new org.apache.commons.lang3.text.StrTokenizer(charArray17, 'a');
        java.lang.String[] strArray20 = strTokenizer19.getTokenArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer22 = strTokenizer19.setDelimiterChar('#');
        java.lang.String str23 = strTokenizer22.previousToken();
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder2.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer22, "1");
        int int26 = strTokenizer22.nextIndex();
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strMatcher10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strTokenizer22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test04662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04662");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        char[] charArray13 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = new org.apache.commons.lang3.text.StrTokenizer(charArray13, ' ');
        int int16 = strTokenizer15.size();
        boolean boolean17 = strTokenizer15.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher18 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = strTokenizer15.setIgnoredMatcher(strMatcher18);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.replaceFirst("", "");
        java.lang.Object obj24 = properties0.putIfAbsent((java.lang.Object) strMatcher18, (java.lang.Object) strBuilder20);
        java.util.Properties properties25 = new java.util.Properties();
        java.util.Properties properties26 = new java.util.Properties(properties25);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder27.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder30.replaceFirst('a', '4');
        java.io.Writer writer34 = strBuilder33.asWriter();
        properties26.store(writer34, "");
        java.util.Properties properties37 = new java.util.Properties();
        int int38 = properties37.size();
        boolean boolean40 = properties37.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties41 = new java.util.Properties();
        int int42 = properties41.size();
        boolean boolean44 = properties41.containsKey((java.lang.Object) (-1.0f));
        properties37.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties41.keys();
        boolean boolean47 = properties26.containsValue((java.lang.Object) objEnumeration46);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.util.Collection<java.lang.Object> objCollection49 = properties26.values();
        java.util.Properties properties50 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder51.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer56 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray57 = strTokenizer56.getTokenArray();
        java.lang.String[] strArray58 = strTokenizer56.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder60 = strBuilder54.appendWithSeparators((java.lang.Object[]) strArray58, "4#4");
        char[] charArray63 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer64 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray63);
        java.lang.Object obj65 = properties50.getOrDefault((java.lang.Object) strBuilder54, (java.lang.Object) strTokenizer64);
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties50);
        java.util.Set<java.lang.Object> objSet67 = properties26.keySet();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strMatcher18);
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(writer34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objEnumeration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objCollection49);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strBuilder60);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer64);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertNotNull(objSet67);
    }

    @Test
    public void test04663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04663");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst('a', '4');
        char[] charArray11 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer13 = new org.apache.commons.lang3.text.StrTokenizer(charArray11, ' ');
        int int14 = strTokenizer13.size();
        boolean boolean15 = strTokenizer13.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher16 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer17 = strTokenizer13.setIgnoredMatcher(strMatcher16);
        int int19 = strBuilder3.indexOf(strMatcher16, (int) (short) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder3.deleteFirst("StrTokenizer[32.0]");
        char[] charArray26 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer28 = new org.apache.commons.lang3.text.StrTokenizer(charArray26, ' ');
        int int29 = strTokenizer28.size();
        boolean boolean30 = strTokenizer28.hasNext();
        java.util.List<java.lang.String> strList31 = strTokenizer28.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder32.replaceFirst("", "");
        char[] charArray36 = strBuilder32.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer38 = new org.apache.commons.lang3.text.StrTokenizer(charArray36, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer39 = new org.apache.commons.lang3.text.StrTokenizer(charArray36);
        boolean boolean40 = strList31.equals((java.lang.Object) charArray36);
        boolean boolean42 = strList31.add("\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder21.appendWithSeparators((java.lang.Iterable<java.lang.String>) strList31, "StrTokenizer[not tokenized yet]");
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder44.appendSeparator('4', 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder48.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder51.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = strBuilder53.appendPadding((int) '#', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder57 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = strBuilder57.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder60 = strBuilder59.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder62 = strBuilder60.appendln((double) '#');
        boolean boolean63 = strBuilder53.equals(strBuilder62);
        java.util.stream.IntStream intStream64 = strBuilder53.codePoints();
        java.util.Iterator<java.lang.String> strItor65 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder67 = strBuilder53.appendWithSeparators(strItor65, " 4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder70 = strBuilder67.replaceFirst(' ', ' ');
        java.util.Properties properties71 = new java.util.Properties();
        int int72 = properties71.size();
        java.lang.Object obj73 = properties71.clone();
        java.util.Set<java.lang.String> strSet74 = properties71.stringPropertyNames();
        org.apache.commons.lang3.text.StrBuilder strBuilder77 = strBuilder67.appendFixedWidthPadLeft((java.lang.Object) properties71, (int) '$', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder80 = strBuilder67.insert(2, 10.0f);
        org.apache.commons.lang3.text.StrBuilder strBuilder81 = strBuilder44.append((java.lang.CharSequence) strBuilder67);
        org.apache.commons.lang3.text.StrBuilder strBuilder84 = strBuilder81.replaceFirst("java.io.IOException: StrTokenizer[not tokenized yet]", "3");
        org.apache.commons.lang3.text.StrBuilder strBuilder87 = strBuilder84.insert((int) (byte) 100, false);
        org.apache.commons.lang3.text.StrBuilder strBuilder90 = strBuilder84.insert((int) '1', false);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strMatcher16);
        org.junit.Assert.assertNotNull(strTokenizer17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(strBuilder51);
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertNotNull(strBuilder56);
        org.junit.Assert.assertNotNull(strBuilder59);
        org.junit.Assert.assertNotNull(strBuilder60);
        org.junit.Assert.assertNotNull(strBuilder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intStream64);
        org.junit.Assert.assertNotNull(strBuilder67);
        org.junit.Assert.assertNotNull(strBuilder70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "{}");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNotNull(strBuilder77);
        org.junit.Assert.assertNotNull(strBuilder80);
        org.junit.Assert.assertNotNull(strBuilder81);
        org.junit.Assert.assertNotNull(strBuilder84);
        org.junit.Assert.assertNotNull(strBuilder87);
        org.junit.Assert.assertNotNull(strBuilder90);
    }

    @Test
    public void test04664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04664");
        java.io.IOException iOException1 = new java.io.IOException("\000\000\000\000\000\000\000\000\000\000\n");
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
    }

    @Test
    public void test04665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04665");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer0 = new org.apache.commons.lang3.text.StrTokenizer();
        java.lang.String[] strArray1 = strTokenizer0.getTokenArray();
        boolean boolean2 = strTokenizer0.isEmptyTokenAsNull();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test04666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04666");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet4 = properties0.entrySet();
        boolean boolean5 = properties0.isEmpty();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        int int8 = strBuilder7.capacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder7.deleteFirst('a');
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.appendln(true);
        int int14 = strBuilder10.lastIndexOf(' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder10.replaceAll("10.0", "java.io.IOException: {}");
        boolean boolean18 = properties0.equals((java.lang.Object) strBuilder17);
        java.lang.String str20 = properties0.getProperty("97\nhi!101.0\n");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objEntrySet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test04667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04667");
        java.io.IOException iOException1 = new java.io.IOException("java.io.IOException: l");
    }

    @Test
    public void test04668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04668");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder2.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder5.appendln('#');
        java.lang.StringBuffer stringBuffer8 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder5.append(stringBuffer8, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder5.deleteFirst("hi!");
        char[] charArray14 = strBuilder5.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = strTokenizer1.reset(charArray14);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = strTokenizer15.reset();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer17 = strTokenizer16.reset();
        java.lang.String[] strArray18 = strTokenizer17.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer25 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray26 = strTokenizer25.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder20.appendAll((java.lang.Object[]) strArray26);
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder28.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder31.replaceFirst("", "");
        char[] charArray35 = strBuilder31.toCharArray();
        char[] charArray36 = strBuilder28.getChars(charArray35);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer37 = new org.apache.commons.lang3.text.StrTokenizer(charArray35);
        char[] charArray38 = strBuilder20.getChars(charArray35);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer40 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher41 = strTokenizer40.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer43 = strTokenizer40.reset("");
        org.apache.commons.lang3.text.StrMatcher strMatcher44 = strTokenizer40.getIgnoredMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer45 = new org.apache.commons.lang3.text.StrTokenizer(charArray35, strMatcher44);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer46 = new org.apache.commons.lang3.text.StrTokenizer("10.0", strMatcher44);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer47 = strTokenizer17.setIgnoredMatcher(strMatcher44);
        boolean boolean48 = strTokenizer17.hasNext();
        org.junit.Assert.assertNotNull(strTokenizer1);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, \n]");
        org.junit.Assert.assertNotNull(strTokenizer15);
        org.junit.Assert.assertNotNull(strTokenizer16);
        org.junit.Assert.assertNotNull(strTokenizer17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[]");
        org.junit.Assert.assertNotNull(strMatcher41);
        org.junit.Assert.assertNotNull(strTokenizer43);
        org.junit.Assert.assertNotNull(strMatcher44);
        org.junit.Assert.assertNotNull(strTokenizer47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test04669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04669");
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder(3);
        char[] charArray2 = strBuilder1.toCharArray();
        org.apache.commons.lang3.text.StrMatcher strMatcher3 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray2);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray2);
        org.apache.commons.lang3.text.StrMatcher strMatcher5 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray2);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray2);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertNotNull(strMatcher3);
        org.junit.Assert.assertNotNull(strTokenizer4);
        org.junit.Assert.assertNotNull(strMatcher5);
    }

    @Test
    public void test04670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04670");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray5 = strTokenizer4.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder0.appendAll((java.lang.Object[]) strArray5);
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder0.replaceFirst('a', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder10.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder13.appendln('#');
        java.lang.StringBuffer stringBuffer16 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder13.append(stringBuffer16, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder13.deleteFirst("hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder13.replaceFirst('a', '4');
        boolean boolean25 = strBuilder9.equals(strBuilder13);
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder13.reverse();
        boolean boolean27 = strBuilder26.isEmpty();
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test04671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04671");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        char[] charArray13 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = new org.apache.commons.lang3.text.StrTokenizer(charArray13, ' ');
        int int16 = strTokenizer15.size();
        boolean boolean17 = strTokenizer15.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher18 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = strTokenizer15.setIgnoredMatcher(strMatcher18);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.replaceFirst("", "");
        java.lang.Object obj24 = properties0.putIfAbsent((java.lang.Object) strMatcher18, (java.lang.Object) strBuilder20);
        java.lang.Object obj27 = properties0.setProperty(" 4#4", "\n32.0");
        java.lang.Object obj30 = properties0.setProperty("hi!", "hi!");
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties0.keys();
        java.lang.Object obj32 = properties0.clone();
        java.io.PrintWriter printWriter33 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printWriter33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strMatcher18);
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNotNull(obj32);
    }

    @Test
    public void test04672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04672");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.deleteAll('4');
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.appendSeparator("StrTokenizer[]", "java.io.IOException: hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder8.appendSeparator('g', (int) '\n');
        char[] charArray12 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder8.append(charArray12);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder13);
    }

    @Test
    public void test04673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04673");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder4.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder6.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder0.appendFixedWidthPadRight((java.lang.Object) strBuilder9, (int) (byte) -1, '#');
        int int14 = strBuilder0.lastIndexOf("java.io.IOException: hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = strBuilder0.substring(118);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: end < start");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test04674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04674");
        java.util.Properties properties0 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder4.appendln('#');
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder9.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = new org.apache.commons.lang3.text.StrBuilder();
        int int12 = strBuilder11.capacity();
        java.lang.StringBuffer stringBuffer13 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder11.appendln(stringBuffer13, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher17 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int18 = strBuilder16.lastIndexOf(strMatcher17);
        boolean boolean19 = strBuilder9.equalsIgnoreCase(strBuilder16);
        char[] charArray22 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer23 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray22);
        boolean boolean24 = properties0.replace((java.lang.Object) strBuilder6, (java.lang.Object) strBuilder9, (java.lang.Object) strTokenizer23);
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = new org.apache.commons.lang3.text.StrBuilder();
        int int26 = strBuilder25.capacity();
        java.lang.StringBuffer stringBuffer27 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder25.appendln(stringBuffer27, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder25.setNullText("");
        java.lang.Object obj33 = properties0.get((java.lang.Object) strBuilder32);
        java.util.Properties properties34 = new java.util.Properties();
        java.util.Properties properties35 = new java.util.Properties(properties34);
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder36.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder39.replaceFirst('a', '4');
        java.io.Writer writer43 = strBuilder42.asWriter();
        properties35.store(writer43, "");
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder46.replaceFirst("", "");
        java.io.Reader reader50 = strBuilder46.asReader();
        properties35.load(reader50);
        boolean boolean52 = reader50.ready();
        int int53 = reader50.read();
        properties0.load(reader50);
        java.nio.CharBuffer charBuffer55 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int56 = reader50.read(charBuffer55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strMatcher17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertNotNull(writer43);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(reader50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test04675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04675");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer3 = new org.apache.commons.lang3.text.StrTokenizer("StrTokenizer[]", '3', '#');
        // The following exception was thrown during execution in test generation
        try {
            strTokenizer3.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove() is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04676");
        java.util.Properties properties0 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray7 = strTokenizer6.getTokenArray();
        java.lang.String[] strArray8 = strTokenizer6.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder4.appendWithSeparators((java.lang.Object[]) strArray8, "4#4");
        char[] charArray13 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray13);
        java.lang.Object obj15 = properties0.getOrDefault((java.lang.Object) strBuilder4, (java.lang.Object) strTokenizer14);
        int int16 = properties0.size();
        java.util.Properties properties17 = new java.util.Properties();
        int int18 = properties17.size();
        boolean boolean20 = properties17.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties21 = new java.util.Properties();
        int int22 = properties21.size();
        boolean boolean24 = properties21.containsKey((java.lang.Object) (-1.0f));
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Set<java.lang.Object> objSet26 = properties21.keySet();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder28.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder31.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder34.appendSeparator(' ', (int) '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder37.appendln('#');
        char[] charArray44 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer46 = new org.apache.commons.lang3.text.StrTokenizer(charArray44, ' ');
        int int47 = strTokenizer46.size();
        boolean boolean48 = strTokenizer46.hasNext();
        java.util.List<java.lang.String> strList49 = strTokenizer46.getTokenList();
        java.lang.String[] strArray53 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        boolean boolean56 = strList49.addAll((java.util.Collection<java.lang.String>) strList54);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer58 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray59 = strTokenizer58.getTokenArray();
        java.lang.String[] strArray60 = strTokenizer58.getTokenArray();
        boolean boolean61 = strTokenizer58.hasNext();
        int int62 = strTokenizer58.size();
        org.apache.commons.lang3.text.StrMatcher strMatcher63 = strTokenizer58.getQuoteMatcher();
        java.util.List<java.lang.String> strList64 = strTokenizer58.getTokenList();
        boolean boolean65 = strList49.retainAll((java.util.Collection<java.lang.String>) strList64);
        org.apache.commons.lang3.text.StrBuilder strBuilder67 = strBuilder37.appendWithSeparators((java.lang.Iterable<java.lang.String>) strList49, "");
        java.lang.Object obj68 = properties0.remove((java.lang.Object) strList49);
        java.util.Enumeration<java.lang.Object> objEnumeration69 = properties0.keys();
        java.io.OutputStream outputStream70 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream70, "io.IOException: hi!116\n\n", "rg.apache.");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objSet26);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(strMatcher63);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strBuilder67);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNotNull(objEnumeration69);
    }

    @Test
    public void test04677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04677");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        boolean boolean8 = strTokenizer6.hasNext();
        java.util.List<java.lang.String> strList9 = strTokenizer6.getTokenList();
        java.lang.String[] strArray13 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        boolean boolean16 = strList9.addAll((java.util.Collection<java.lang.String>) strList14);
        java.util.Spliterator<java.lang.String> strSpliterator17 = strList14.spliterator();
        char[] charArray22 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer24 = new org.apache.commons.lang3.text.StrTokenizer(charArray22, ' ');
        int int25 = strTokenizer24.size();
        boolean boolean26 = strTokenizer24.hasNext();
        java.util.List<java.lang.String> strList27 = strTokenizer24.getTokenList();
        java.lang.String[] strArray31 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        boolean boolean34 = strList27.addAll((java.util.Collection<java.lang.String>) strList32);
        java.util.Spliterator<java.lang.String> strSpliterator35 = strList32.spliterator();
        int int36 = strList32.size();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer39 = new org.apache.commons.lang3.text.StrTokenizer(" 4#4", "");
        int int40 = strList32.lastIndexOf((java.lang.Object) strTokenizer39);
        java.util.List<java.lang.String> strList41 = strTokenizer39.getTokenList();
        org.apache.commons.lang3.text.StrSubstitutor strSubstitutor42 = new org.apache.commons.lang3.text.StrSubstitutor();
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = new org.apache.commons.lang3.text.StrBuilder();
        int int44 = strBuilder43.capacity();
        java.lang.StringBuffer stringBuffer45 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder43.appendln(stringBuffer45, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = strBuilder43.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder50.appendln(true);
        boolean boolean55 = strSubstitutor42.replaceIn(strBuilder52, (int) '$', 0);
        boolean boolean56 = strList41.equals((java.lang.Object) '$');
        boolean boolean57 = strList14.containsAll((java.util.Collection<java.lang.String>) strList41);
        java.util.ListIterator<java.lang.String> strItor59 = strList14.listIterator(0);
        boolean boolean61 = strList14.remove((java.lang.Object) false);
        java.util.ListIterator<java.lang.String> strItor63 = strList14.listIterator(3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = strList14.set(41, "#36.0");
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 41, Size: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strSpliterator17);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strSpliterator35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 32 + "'", int44 == 32);
        org.junit.Assert.assertNotNull(strBuilder48);
        org.junit.Assert.assertNotNull(strBuilder50);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strItor59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strItor63);
    }

    @Test
    public void test04678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04678");
        char[] charArray3 = new char[] { 'a', '$', '$' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer5 = new org.apache.commons.lang3.text.StrTokenizer(charArray3, '$');
        java.util.List<java.lang.String> strList6 = strTokenizer5.getTokenList();
        char[] charArray11 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer13 = new org.apache.commons.lang3.text.StrTokenizer(charArray11, ' ');
        int int14 = strTokenizer13.size();
        boolean boolean15 = strTokenizer13.hasNext();
        java.util.List<java.lang.String> strList16 = strTokenizer13.getTokenList();
        java.lang.String[] strArray20 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        boolean boolean23 = strList16.addAll((java.util.Collection<java.lang.String>) strList21);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer25 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray26 = strTokenizer25.getTokenArray();
        java.lang.String[] strArray27 = strTokenizer25.getTokenArray();
        boolean boolean28 = strTokenizer25.hasNext();
        int int29 = strTokenizer25.size();
        org.apache.commons.lang3.text.StrMatcher strMatcher30 = strTokenizer25.getQuoteMatcher();
        java.util.List<java.lang.String> strList31 = strTokenizer25.getTokenList();
        boolean boolean32 = strList16.retainAll((java.util.Collection<java.lang.String>) strList31);
        boolean boolean33 = strList6.addAll((java.util.Collection<java.lang.String>) strList31);
        strList31.clear();
        java.util.function.UnaryOperator<java.lang.String> strUnaryOperator35 = null;
        // The following exception was thrown during execution in test generation
        try {
            strList31.replaceAll(strUnaryOperator35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "a$$");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "a$$");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[a, $, $]");
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strMatcher30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test04679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04679");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        java.util.Set<java.lang.Object> objSet2 = properties0.keySet();
        java.util.Properties properties5 = new java.util.Properties();
        int int6 = properties5.size();
        boolean boolean8 = properties5.containsKey((java.lang.Object) (-1.0f));
        boolean boolean9 = properties0.replace((java.lang.Object) (byte) 1, (java.lang.Object) true, (java.lang.Object) (-1.0f));
        char[] charArray14 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = new org.apache.commons.lang3.text.StrTokenizer(charArray14, ' ');
        int int17 = strTokenizer16.size();
        boolean boolean18 = strTokenizer16.hasNext();
        java.util.List<java.lang.String> strList19 = strTokenizer16.getTokenList();
        java.lang.String[] strArray23 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        boolean boolean26 = strList19.addAll((java.util.Collection<java.lang.String>) strList24);
        java.util.Spliterator<java.lang.String> strSpliterator27 = strList24.spliterator();
        int int28 = strList24.size();
        boolean boolean30 = strList24.add("StrTokenizer[]");
        java.util.stream.Stream<java.lang.String> strStream31 = strList24.stream();
        boolean boolean32 = properties0.containsKey((java.lang.Object) strList24);
        java.util.stream.Stream<java.lang.String> strStream33 = strList24.parallelStream();
        char[] charArray38 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer40 = new org.apache.commons.lang3.text.StrTokenizer(charArray38, ' ');
        int int41 = strTokenizer40.size();
        boolean boolean42 = strTokenizer40.hasNext();
        java.util.List<java.lang.String> strList43 = strTokenizer40.getTokenList();
        java.lang.String[] strArray47 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        boolean boolean50 = strList43.addAll((java.util.Collection<java.lang.String>) strList48);
        java.util.Spliterator<java.lang.String> strSpliterator51 = strList48.spliterator();
        int int52 = strList48.size();
        boolean boolean54 = strList48.add("StrTokenizer[]");
        java.util.stream.Stream<java.lang.String> strStream55 = strList48.stream();
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder56.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer60 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray61 = strTokenizer60.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder62 = strBuilder56.appendAll((java.lang.Object[]) strArray61);
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = strBuilder62.append((double) (short) 100);
        java.lang.String str67 = strBuilder62.substring(0, (int) (short) 0);
        boolean boolean68 = strList48.equals((java.lang.Object) 0);
        boolean boolean69 = strList24.retainAll((java.util.Collection<java.lang.String>) strList48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = strList24.remove(101);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 101, Size: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objSet2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strSpliterator27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strStream31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strStream33);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strSpliterator51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strStream55);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strBuilder62);
        org.junit.Assert.assertNotNull(strBuilder64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test04680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04680");
        char[] charArray5 = new char[] { ' ', '4', '#', '#', ' ' };
        org.apache.commons.lang3.text.StrMatcher strMatcher6 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray5);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = new org.apache.commons.lang3.text.StrBuilder(3);
        char[] charArray9 = strBuilder8.toCharArray();
        org.apache.commons.lang3.text.StrMatcher strMatcher10 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray9);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer11 = new org.apache.commons.lang3.text.StrTokenizer(charArray5, strMatcher10);
        java.lang.String str12 = strTokenizer11.next();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " 4## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " 4## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ , 4, #, #,  ]");
        org.junit.Assert.assertNotNull(strMatcher6);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[]");
        org.junit.Assert.assertNotNull(strMatcher10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + " 4## " + "'", str12, " 4## ");
    }

    @Test
    public void test04681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04681");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        boolean boolean9 = strBuilder0.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder0.clear();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder11.append("java.io.IOException: java.io.IOException:", 2, (int) '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder11.setNewLineText("hi!");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strBuilder17);
    }

    @Test
    public void test04682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04682");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder4.replaceFirst("", "");
        boolean boolean9 = strBuilder7.endsWith("StrTokenizer[]");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer11 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder12.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder15.appendln('#');
        java.lang.StringBuffer stringBuffer18 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder15.append(stringBuffer18, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder15.deleteFirst("hi!");
        char[] charArray24 = strBuilder15.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer25 = strTokenizer11.reset(charArray24);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer26 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray24);
        char[] charArray27 = strBuilder7.getChars(charArray24);
        java.lang.Object obj28 = properties0.remove((java.lang.Object) charArray27);
        java.lang.String str30 = properties0.getProperty("\n32.0");
        java.lang.String str31 = properties0.toString();
        char[] charArray35 = new char[] { 'a', '$', '$' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer37 = new org.apache.commons.lang3.text.StrTokenizer(charArray35, '$');
        java.util.List<java.lang.String> strList38 = strTokenizer37.getTokenList();
        char[] charArray43 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer45 = new org.apache.commons.lang3.text.StrTokenizer(charArray43, ' ');
        int int46 = strTokenizer45.size();
        boolean boolean47 = strTokenizer45.hasNext();
        java.util.List<java.lang.String> strList48 = strTokenizer45.getTokenList();
        java.lang.String[] strArray52 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        boolean boolean55 = strList48.addAll((java.util.Collection<java.lang.String>) strList53);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer57 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray58 = strTokenizer57.getTokenArray();
        java.lang.String[] strArray59 = strTokenizer57.getTokenArray();
        boolean boolean60 = strTokenizer57.hasNext();
        int int61 = strTokenizer57.size();
        org.apache.commons.lang3.text.StrMatcher strMatcher62 = strTokenizer57.getQuoteMatcher();
        java.util.List<java.lang.String> strList63 = strTokenizer57.getTokenList();
        boolean boolean64 = strList48.retainAll((java.util.Collection<java.lang.String>) strList63);
        boolean boolean65 = strList38.addAll((java.util.Collection<java.lang.String>) strList63);
        java.util.Iterator<java.lang.String> strItor66 = strList38.iterator();
        java.lang.Object[] objArray67 = strList38.toArray();
        boolean boolean68 = properties0.equals((java.lang.Object) objArray67);
        int int69 = properties0.size();
        java.io.PrintStream printStream70 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printStream70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strTokenizer11);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#, \n]");
        org.junit.Assert.assertNotNull(strTokenizer25);
        org.junit.Assert.assertNotNull(strTokenizer26);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#, \n]");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{}" + "'", str31, "{}");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a$$");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a$$");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a, $, $]");
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(strMatcher62);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strItor66);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[a]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test04683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04683");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        int int4 = strBuilder0.indexOf("");
        int int7 = strBuilder0.lastIndexOf('#', (int) (byte) 0);
        boolean boolean9 = strBuilder0.startsWith("4#4");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer10 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder0.appendAll((java.util.Iterator<java.lang.String>) strTokenizer10);
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder0.appendSeparator("{}");
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder0.append((double) 0.0f);
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder0.appendln((int) (byte) 100);
        java.io.Writer writer18 = strBuilder0.asWriter();
        writer18.flush();
        writer18.write("");
        writer18.write("java.io.IOException: ########");
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strTokenizer10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(writer18);
    }

    @Test
    public void test04684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04684");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.appendln('#');
        java.lang.StringBuffer stringBuffer6 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder3.append(stringBuffer6, (int) (byte) -1, (int) (byte) 100);
        int int11 = strBuilder9.indexOf('$');
        java.lang.StringBuffer stringBuffer12 = strBuilder9.toStringBuffer();
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(stringBuffer12);
        org.junit.Assert.assertEquals(stringBuffer12.toString(), "#\n");
    }

    @Test
    public void test04685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04685");
        java.io.IOException iOException2 = new java.io.IOException("hi!");
        java.io.IOException iOException4 = new java.io.IOException("hi!");
        iOException2.addSuppressed((java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException("StrTokenizer[]", (java.lang.Throwable) iOException4);
        java.lang.Throwable throwable8 = null;
        java.io.IOException iOException9 = new java.io.IOException("\n32.0", throwable8);
        iOException6.addSuppressed((java.lang.Throwable) iOException9);
        java.io.IOException iOException11 = new java.io.IOException((java.lang.Throwable) iOException6);
    }

    @Test
    public void test04686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04686");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("true\n");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer3 = strTokenizer1.reset("java.io.IOException: java.io.IOException: StrTokenizer[]");
        int int4 = strTokenizer3.previousIndex();
        java.util.List<java.lang.String> strList5 = strTokenizer3.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder6.deleteFirst("");
        int int10 = strBuilder6.indexOf("");
        int int13 = strBuilder6.lastIndexOf('#', (int) (byte) 0);
        boolean boolean15 = strBuilder6.startsWith("4#4");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance();
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder6.appendAll((java.util.Iterator<java.lang.String>) strTokenizer16);
        boolean boolean18 = strTokenizer16.isIgnoreEmptyTokens();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer20 = strTokenizer16.setIgnoreEmptyTokens(false);
        org.apache.commons.lang3.text.StrMatcher strMatcher22 = org.apache.commons.lang3.text.StrMatcher.stringMatcher("");
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder23.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder26.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder30.replaceFirst("", "");
        char[] charArray34 = strBuilder30.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder29.appendln(charArray34);
        int int39 = strMatcher22.isMatch(charArray34, (-1), (int) ' ', (int) (byte) -1);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer40 = strTokenizer20.setTrimmerMatcher(strMatcher22);
        boolean boolean41 = strTokenizer40.hasNext();
        int int42 = strTokenizer40.previousIndex();
        java.lang.String str43 = strTokenizer40.toString();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer45 = strTokenizer40.setEmptyTokenAsNull(true);
        java.util.List<java.lang.String> strList46 = strTokenizer40.getTokenList();
        boolean boolean47 = strList5.retainAll((java.util.Collection<java.lang.String>) strList46);
        org.junit.Assert.assertNotNull(strTokenizer1);
        org.junit.Assert.assertNotNull(strTokenizer3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strTokenizer16);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strTokenizer20);
        org.junit.Assert.assertNotNull(strMatcher22);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[]");
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(strTokenizer40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "StrTokenizer[]" + "'", str43, "StrTokenizer[]");
        org.junit.Assert.assertNotNull(strTokenizer45);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test04687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04687");
        char[] charArray2 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer3 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray2);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer5 = strTokenizer3.setDelimiterString("hi!");
        java.lang.String str6 = strTokenizer3.next();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer8 = strTokenizer3.setDelimiterString("StrTokenizer[ 4#4]");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer10 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("StrTokenizer[]");
        java.lang.String str11 = strTokenizer10.next();
        boolean boolean12 = strTokenizer10.hasPrevious();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = new org.apache.commons.lang3.text.StrTokenizer("\n32.0", '#');
        org.apache.commons.lang3.text.StrMatcher strMatcher16 = strTokenizer15.getDelimiterMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer17 = strTokenizer10.setIgnoredMatcher(strMatcher16);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer18 = strTokenizer3.setQuoteMatcher(strMatcher16);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer20 = strTokenizer3.setQuoteChar('$');
        // The following exception was thrown during execution in test generation
        try {
            strTokenizer3.set("\n32.0#4\nt");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: set() is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer3);
        org.junit.Assert.assertNotNull(strTokenizer5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "a4" + "'", str6, "a4");
        org.junit.Assert.assertNotNull(strTokenizer8);
        org.junit.Assert.assertNotNull(strTokenizer10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "StrTokenizer[]" + "'", str11, "StrTokenizer[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strMatcher16);
        org.junit.Assert.assertNotNull(strTokenizer17);
        org.junit.Assert.assertNotNull(strTokenizer18);
        org.junit.Assert.assertNotNull(strTokenizer20);
    }

    @Test
    public void test04688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04688");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        boolean boolean9 = strBuilder0.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder10.appendPadding((int) (short) 0, 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder14.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder17.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder21.replaceFirst("", "");
        char[] charArray25 = strBuilder21.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder20.appendln(charArray25);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder27.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer32 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray33 = strTokenizer32.getTokenArray();
        java.lang.String[] strArray34 = strTokenizer32.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder30.appendWithSeparators((java.lang.Object[]) strArray34, "4#4");
        org.apache.commons.lang3.text.StrMatcher strMatcher37 = org.apache.commons.lang3.text.StrMatcher.tabMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder36.deleteAll(strMatcher37);
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder36.trim();
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder36.append(false);
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder26.appendFixedWidthPadRight((java.lang.Object) strBuilder41, 0, '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder13.appendFixedWidthPadRight((java.lang.Object) strBuilder44, 116, 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder48.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder51.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = strBuilder53.appendPadding((int) '#', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder57 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = strBuilder57.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder60 = strBuilder59.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder62 = strBuilder60.appendln((double) '#');
        boolean boolean63 = strBuilder53.equals(strBuilder62);
        org.apache.commons.lang3.text.StrBuilder strBuilder65 = strBuilder62.ensureCapacity((int) (byte) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder67 = strBuilder65.deleteFirst("true\n###################################");
        org.apache.commons.lang3.text.StrBuilder strBuilder69 = strBuilder67.appendSeparator("#\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder70 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder73 = strBuilder70.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer75 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher76 = strTokenizer75.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder78 = strBuilder70.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer75, "h");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer80 = strTokenizer75.reset("\n32.0");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer82 = strTokenizer80.setEmptyTokenAsNull(true);
        boolean boolean83 = strTokenizer80.hasNext();
        int int84 = strTokenizer80.nextIndex();
        org.apache.commons.lang3.text.StrMatcher strMatcher85 = strTokenizer80.getQuoteMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder87 = strBuilder69.replaceAll(strMatcher85, "10.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder89 = strBuilder13.replaceFirst(strMatcher85, "97\nhi!StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder91 = strBuilder13.appendln((float) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder95 = strBuilder91.replace((int) 'a', (int) ' ', "10.0StrTokenizer[ 4#4]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: end < start");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[]");
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strMatcher37);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(strBuilder51);
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertNotNull(strBuilder56);
        org.junit.Assert.assertNotNull(strBuilder59);
        org.junit.Assert.assertNotNull(strBuilder60);
        org.junit.Assert.assertNotNull(strBuilder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strBuilder65);
        org.junit.Assert.assertNotNull(strBuilder67);
        org.junit.Assert.assertNotNull(strBuilder69);
        org.junit.Assert.assertNotNull(strBuilder73);
        org.junit.Assert.assertNotNull(strMatcher76);
        org.junit.Assert.assertNotNull(strBuilder78);
        org.junit.Assert.assertNotNull(strTokenizer80);
        org.junit.Assert.assertNotNull(strTokenizer82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(strMatcher85);
        org.junit.Assert.assertNotNull(strBuilder87);
        org.junit.Assert.assertNotNull(strBuilder89);
        org.junit.Assert.assertNotNull(strBuilder91);
    }

    @Test
    public void test04689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04689");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration9 = properties4.keys();
        java.util.Set<java.lang.String> strSet10 = properties4.stringPropertyNames();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = new org.apache.commons.lang3.text.StrBuilder();
        int int12 = strBuilder11.capacity();
        java.lang.StringBuffer stringBuffer13 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder11.appendln(stringBuffer13, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder11.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder11.setLength(32);
        java.io.Writer writer22 = strBuilder21.asWriter();
        writer22.write(" 4#4", (int) (byte) 0, (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = new org.apache.commons.lang3.text.StrBuilder();
        int int28 = strBuilder27.capacity();
        java.lang.StringBuffer stringBuffer29 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder27.appendln(stringBuffer29, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder27.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder34.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder36.append((float) '4');
        java.io.Writer writer39 = writer22.append((java.lang.CharSequence) strBuilder36);
        writer39.write((int) '4');
        writer39.flush();
        writer39.write(0);
        writer39.write("0.0true");
        properties4.store(writer39, "E");
        // The following exception was thrown during execution in test generation
        try {
            writer39.write("java.io.IOException: \n32.0", 103, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: startIndex must be valid");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objEnumeration9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(writer22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 32 + "'", int28 == 32);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(writer39);
    }

    @Test
    public void test04690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04690");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        java.lang.Object obj2 = properties0.clone();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder9.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder3.appendFixedWidthPadRight((java.lang.Object) strBuilder12, (int) (byte) -1, '#');
        java.lang.Object obj16 = properties0.get((java.lang.Object) strBuilder3);
        java.util.Properties properties17 = new java.util.Properties();
        int int18 = properties17.size();
        boolean boolean20 = properties17.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties21 = new java.util.Properties();
        int int22 = properties21.size();
        boolean boolean24 = properties21.containsKey((java.lang.Object) (-1.0f));
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        char[] charArray30 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer32 = new org.apache.commons.lang3.text.StrTokenizer(charArray30, ' ');
        int int33 = strTokenizer32.size();
        boolean boolean34 = strTokenizer32.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher35 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer36 = strTokenizer32.setIgnoredMatcher(strMatcher35);
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder37.replaceFirst("", "");
        java.lang.Object obj41 = properties17.putIfAbsent((java.lang.Object) strMatcher35, (java.lang.Object) strBuilder37);
        boolean boolean42 = strBuilder3.equals(obj41);
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder3.appendln((long) (short) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = strBuilder3.clear();
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder3.appendln((long) 100);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strMatcher35);
        org.junit.Assert.assertNotNull(strTokenizer36);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strBuilder45);
        org.junit.Assert.assertNotNull(strBuilder47);
    }

    @Test
    public void test04691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04691");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher2 = strTokenizer1.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = strTokenizer1.reset("");
        // The following exception was thrown during execution in test generation
        try {
            strTokenizer1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove() is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMatcher2);
        org.junit.Assert.assertNotNull(strTokenizer4);
    }

    @Test
    public void test04692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04692");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        java.lang.Throwable throwable3 = null;
        java.io.IOException iOException4 = new java.io.IOException("\n32.0", throwable3);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        char[] charArray8 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer9 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray8);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer11 = strTokenizer9.setDelimiterString("hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer13 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder14.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder17.appendln('#');
        java.lang.StringBuffer stringBuffer20 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder17.append(stringBuffer20, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder17.deleteFirst("hi!");
        char[] charArray26 = strBuilder17.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer27 = strTokenizer13.reset(charArray26);
        boolean boolean28 = properties0.replace((java.lang.Object) iOException4, (java.lang.Object) "hi!", (java.lang.Object) strTokenizer13);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet29 = properties0.entrySet();
        java.util.Collection<java.lang.Object> objCollection30 = properties0.values();
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties0.elements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer9);
        org.junit.Assert.assertNotNull(strTokenizer11);
        org.junit.Assert.assertNotNull(strTokenizer13);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, \n]");
        org.junit.Assert.assertNotNull(strTokenizer27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objEntrySet29);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertNotNull(objEnumeration31);
    }

    @Test
    public void test04693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04693");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder7.replaceFirst("", "");
        char[] charArray11 = strBuilder7.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder6.appendln(charArray11);
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder12.setCharAt(0, '4');
        char[] charArray20 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer22 = new org.apache.commons.lang3.text.StrTokenizer(charArray20, ' ');
        int int23 = strTokenizer22.size();
        boolean boolean24 = strTokenizer22.hasNext();
        java.util.List<java.lang.String> strList25 = strTokenizer22.getTokenList();
        java.lang.String[] strArray29 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        boolean boolean32 = strList25.addAll((java.util.Collection<java.lang.String>) strList30);
        java.util.Properties properties33 = new java.util.Properties();
        int int34 = properties33.size();
        java.lang.Object obj35 = properties33.clone();
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder36.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder40.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder42.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = strBuilder43.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder36.appendFixedWidthPadRight((java.lang.Object) strBuilder45, (int) (byte) -1, '#');
        java.lang.Object obj49 = properties33.get((java.lang.Object) strBuilder36);
        java.util.Properties properties50 = new java.util.Properties();
        int int51 = properties50.size();
        boolean boolean53 = properties50.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties54 = new java.util.Properties();
        int int55 = properties54.size();
        boolean boolean57 = properties54.containsKey((java.lang.Object) (-1.0f));
        properties50.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties54);
        char[] charArray63 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer65 = new org.apache.commons.lang3.text.StrTokenizer(charArray63, ' ');
        int int66 = strTokenizer65.size();
        boolean boolean67 = strTokenizer65.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher68 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer69 = strTokenizer65.setIgnoredMatcher(strMatcher68);
        org.apache.commons.lang3.text.StrBuilder strBuilder70 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder73 = strBuilder70.replaceFirst("", "");
        java.lang.Object obj74 = properties50.putIfAbsent((java.lang.Object) strMatcher68, (java.lang.Object) strBuilder70);
        boolean boolean75 = strBuilder36.equals(obj74);
        org.apache.commons.lang3.text.StrBuilder strBuilder77 = strBuilder36.appendln((double) 100L);
        java.util.stream.IntStream intStream78 = strBuilder36.chars();
        boolean boolean80 = strBuilder36.contains('$');
        boolean boolean81 = strList30.equals((java.lang.Object) strBuilder36);
        org.apache.commons.lang3.text.StrBuilder strBuilder82 = strBuilder15.appendAll((java.lang.Iterable<java.lang.String>) strList30);
        org.apache.commons.lang3.text.StrBuilder strBuilder85 = strBuilder15.replaceAll("0.23\n", "\n32.0 ");
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "{}");
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertNotNull(strBuilder43);
        org.junit.Assert.assertNotNull(strBuilder45);
        org.junit.Assert.assertNotNull(strBuilder48);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strMatcher68);
        org.junit.Assert.assertNotNull(strTokenizer69);
        org.junit.Assert.assertNotNull(strBuilder73);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strBuilder77);
        org.junit.Assert.assertNotNull(intStream78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strBuilder82);
        org.junit.Assert.assertNotNull(strBuilder85);
    }

    @Test
    public void test04694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04694");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder2.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.setNullText("");
        char[] charArray6 = strBuilder5.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder5.insert(0, true);
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder10.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray16 = strTokenizer15.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder10.appendAll((java.lang.Object[]) strArray16);
        java.util.stream.IntStream intStream18 = strBuilder17.chars();
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder5.appendFixedWidthPadRight((java.lang.Object) strBuilder17, (int) (byte) 10, '$');
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder21.reverse();
        java.util.Properties properties23 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder24.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer29 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray30 = strTokenizer29.getTokenArray();
        java.lang.String[] strArray31 = strTokenizer29.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder27.appendWithSeparators((java.lang.Object[]) strArray31, "4#4");
        char[] charArray36 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer37 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray36);
        java.lang.Object obj38 = properties23.getOrDefault((java.lang.Object) strBuilder27, (java.lang.Object) strTokenizer37);
        int int39 = properties23.size();
        int int40 = properties23.size();
        java.io.IOException iOException41 = new java.io.IOException();
        java.lang.Throwable[] throwableArray42 = iOException41.getSuppressed();
        boolean boolean43 = properties23.equals((java.lang.Object) iOException41);
        boolean boolean45 = properties23.containsKey((java.lang.Object) " #\n");
        java.util.Set<java.lang.String> strSet46 = properties23.stringPropertyNames();
        boolean boolean47 = strBuilder22.equals((java.lang.Object) strSet46);
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder48.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder51.replaceFirst('a', '4');
        java.io.Writer writer55 = strBuilder54.asWriter();
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = strBuilder56.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder62 = strBuilder59.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder66 = strBuilder63.replaceFirst("", "");
        char[] charArray67 = strBuilder63.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder68 = strBuilder62.appendln(charArray67);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer69 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray67);
        writer55.write(charArray67);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer73 = new org.apache.commons.lang3.text.StrTokenizer(charArray67, '\n', 't');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder76 = strBuilder22.append(charArray67, 93, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: Invalid startIndex: 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(intStream18);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strBuilder51);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertNotNull(writer55);
        org.junit.Assert.assertNotNull(strBuilder59);
        org.junit.Assert.assertNotNull(strBuilder62);
        org.junit.Assert.assertNotNull(strBuilder66);
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[]");
        org.junit.Assert.assertNotNull(strBuilder68);
        org.junit.Assert.assertNotNull(strTokenizer69);
    }

    @Test
    public void test04695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04695");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        int int8 = strTokenizer6.previousIndex();
        boolean boolean9 = strTokenizer6.hasNext();
        java.lang.String str10 = strTokenizer6.toString();
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "StrTokenizer[4#4]" + "'", str10, "StrTokenizer[4#4]");
    }

    @Test
    public void test04696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04696");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder5.appendPadding((int) '#', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder11.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.appendln((double) '#');
        boolean boolean15 = strBuilder5.equals(strBuilder14);
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder14.ensureCapacity((int) (byte) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder17.deleteFirst("true\n###################################");
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder19.appendSeparator("#\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder22.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer27 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher28 = strTokenizer27.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder22.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer27, "h");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer32 = strTokenizer27.reset("\n32.0");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer34 = strTokenizer32.setEmptyTokenAsNull(true);
        boolean boolean35 = strTokenizer32.hasNext();
        int int36 = strTokenizer32.nextIndex();
        org.apache.commons.lang3.text.StrMatcher strMatcher37 = strTokenizer32.getQuoteMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder21.replaceAll(strMatcher37, "10.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder39.appendSeparator('$', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder42.appendln((double) 169);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(strMatcher28);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strTokenizer32);
        org.junit.Assert.assertNotNull(strTokenizer34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(strMatcher37);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertNotNull(strBuilder44);
    }

    @Test
    public void test04697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04697");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder2.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder5.appendln('#');
        java.lang.StringBuffer stringBuffer8 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder5.append(stringBuffer8, (int) (byte) -1, (int) (byte) 100);
        char[] charArray16 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer18 = new org.apache.commons.lang3.text.StrTokenizer(charArray16, ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder5.append(charArray16);
        boolean boolean20 = properties0.equals((java.lang.Object) strBuilder5);
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder21.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder24.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder26.appendPadding((int) '#', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder30.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder32.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder33.appendln((double) '#');
        boolean boolean36 = strBuilder26.equals(strBuilder35);
        java.util.stream.IntStream intStream37 = strBuilder26.codePoints();
        java.util.Iterator<java.lang.String> strItor38 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder26.appendWithSeparators(strItor38, " 4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder40.replaceFirst(' ', ' ');
        int int45 = strBuilder43.lastIndexOf(' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder43.insert((int) '$', '$');
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder43.insert((int) (short) 0, 53);
        boolean boolean52 = properties0.equals((java.lang.Object) (short) 0);
        int int53 = properties0.size();
        properties0.clear();
        java.util.Collection<java.lang.Object> objCollection55 = properties0.values();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[ , 4, #, 4]");
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intStream37);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNotNull(strBuilder43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(strBuilder48);
        org.junit.Assert.assertNotNull(strBuilder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objCollection55);
    }

    @Test
    public void test04698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04698");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.setLength(32);
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder10.trim();
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder10.append((int) (short) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder13.append('#');
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder15.minimizeCapacity();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder16.deleteCharAt(80);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 80");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strBuilder16);
    }

    @Test
    public void test04699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04699");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder5.appendPadding((int) '#', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder11.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.appendln((double) '#');
        boolean boolean15 = strBuilder5.equals(strBuilder14);
        java.util.stream.IntStream intStream16 = strBuilder5.codePoints();
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder5.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder5.ensureCapacity(53);
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder5.ensureCapacity((int) (byte) 1);
        java.lang.String str24 = strBuilder5.substring(32, (int) '4');
        java.lang.String str26 = strBuilder5.substring(0);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intStream16);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "########" + "'", str24, "########");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "true\n###################################" + "'", str26, "true\n###################################");
    }

    @Test
    public void test04700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04700");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer5 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray6 = strTokenizer5.getTokenArray();
        java.lang.String[] strArray7 = strTokenizer5.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder3.appendWithSeparators((java.lang.Object[]) strArray7, "4#4");
        org.apache.commons.lang3.text.StrMatcher strMatcher10 = org.apache.commons.lang3.text.StrMatcher.tabMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.deleteAll(strMatcher10);
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder9.trim();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder9.append(false);
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder15.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray20 = strTokenizer19.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder15.appendAll((java.lang.Object[]) strArray20);
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder15.replaceFirst('a', 'a');
        char[] charArray29 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer31 = new org.apache.commons.lang3.text.StrTokenizer(charArray29, ' ');
        int int32 = strTokenizer31.size();
        boolean boolean33 = strTokenizer31.hasNext();
        java.util.List<java.lang.String> strList34 = strTokenizer31.getTokenList();
        java.lang.String[] strArray38 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        boolean boolean41 = strList34.addAll((java.util.Collection<java.lang.String>) strList39);
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder15.appendAll((java.lang.Iterable<java.lang.String>) strList39);
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder9.appendAll((java.lang.Iterable<java.lang.String>) strList39);
        java.lang.Object[] objArray44 = strList39.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = strList39.remove((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strMatcher10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertNotNull(strBuilder43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[\n32.0, , ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[\n32.0, , ]");
    }

    @Test
    public void test04701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04701");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder4.replaceFirst("", "");
        boolean boolean9 = strBuilder7.endsWith("StrTokenizer[]");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer11 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder12.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder15.appendln('#');
        java.lang.StringBuffer stringBuffer18 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder15.append(stringBuffer18, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder15.deleteFirst("hi!");
        char[] charArray24 = strBuilder15.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer25 = strTokenizer11.reset(charArray24);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer26 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray24);
        char[] charArray27 = strBuilder7.getChars(charArray24);
        java.lang.Object obj28 = properties0.remove((java.lang.Object) charArray27);
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties0.keys();
        java.io.PrintStream printStream30 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printStream30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strTokenizer11);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#, \n]");
        org.junit.Assert.assertNotNull(strTokenizer25);
        org.junit.Assert.assertNotNull(strTokenizer26);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#, \n]");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(objEnumeration29);
    }

    @Test
    public void test04702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04702");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder5.appendPadding((int) '#', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder11.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.appendln((double) '#');
        boolean boolean15 = strBuilder5.equals(strBuilder14);
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder14.ensureCapacity((int) (byte) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder17.deleteFirst("true\n###################################");
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder19.appendSeparator('#', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder19.appendln(93);
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder19.appendSeparator("true\n###################################a4\n");
        java.lang.String str29 = strBuilder19.substring(42, (int) 'a');
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "#######a4\n" + "'", str29, "#######a4\n");
    }

    @Test
    public void test04703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04703");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Enumeration<java.lang.Object> objEnumeration1 = properties0.keys();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = new org.apache.commons.lang3.text.StrBuilder();
        int int3 = strBuilder2.capacity();
        java.lang.StringBuffer stringBuffer4 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder2.appendln(stringBuffer4, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder2.insert(1, (double) 32);
        java.util.Properties properties11 = new java.util.Properties();
        int int12 = properties11.size();
        boolean boolean14 = properties11.containsKey((java.lang.Object) (-1.0f));
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder15.replaceFirst("", "");
        char[] charArray19 = strBuilder15.toCharArray();
        boolean boolean20 = properties11.containsValue((java.lang.Object) charArray19);
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder2.append(charArray19, (int) (byte) 0, 0);
        boolean boolean24 = properties0.equals((java.lang.Object) 0);
        java.lang.String str25 = properties0.toString();
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = new org.apache.commons.lang3.text.StrBuilder();
        int int27 = strBuilder26.capacity();
        java.lang.StringBuffer stringBuffer28 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder26.appendln(stringBuffer28, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder26.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder26.setLength(32);
        java.io.Writer writer37 = strBuilder36.asWriter();
        writer37.write(" 4#4", (int) (byte) 0, (int) (byte) 0);
        writer37.flush();
        writer37.flush();
        properties0.store(writer37, "0.01.0");
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties0.elements();
        org.junit.Assert.assertNotNull(objEnumeration1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{}" + "'", str25, "{}");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 32 + "'", int27 == 32);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(writer37);
        org.junit.Assert.assertNotNull(objEnumeration46);
    }

    @Test
    public void test04704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04704");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        boolean boolean8 = strTokenizer6.hasNext();
        java.util.List<java.lang.String> strList9 = strTokenizer6.getTokenList();
        java.lang.String[] strArray13 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        boolean boolean16 = strList9.addAll((java.util.Collection<java.lang.String>) strList14);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer18 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray19 = strTokenizer18.getTokenArray();
        java.lang.String[] strArray20 = strTokenizer18.getTokenArray();
        boolean boolean21 = strTokenizer18.hasNext();
        int int22 = strTokenizer18.size();
        org.apache.commons.lang3.text.StrMatcher strMatcher23 = strTokenizer18.getQuoteMatcher();
        java.util.List<java.lang.String> strList24 = strTokenizer18.getTokenList();
        boolean boolean25 = strList9.retainAll((java.util.Collection<java.lang.String>) strList24);
        java.lang.Object[] objArray26 = strList9.toArray();
        java.util.stream.Stream<java.lang.String> strStream27 = strList9.parallelStream();
        strList9.clear();
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(strMatcher23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(strStream27);
    }

    @Test
    public void test04705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04705");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.appendln('#');
        int int7 = strBuilder3.lastIndexOf(" 4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder3.replace((int) (byte) 0, (int) (byte) 100, "a4");
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder11.appendPadding((int) '$', 'a');
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder14);
    }

    @Test
    public void test04706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04706");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        java.io.Reader reader4 = strBuilder0.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder0.appendSeparator('4');
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder0.trim();
        int int8 = strBuilder7.length();
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(reader4);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test04707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04707");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("true");
        java.lang.String str2 = strTokenizer1.next();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = strTokenizer1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strTokenizer1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "true" + "'", str2, "true");
    }

    @Test
    public void test04708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04708");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder4.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder6.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder0.appendFixedWidthPadRight((java.lang.Object) strBuilder9, (int) (byte) -1, '#');
        org.apache.commons.lang3.text.StrMatcher strMatcher13 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int14 = strBuilder0.lastIndexOf(strMatcher13);
        char[] charArray19 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer21 = new org.apache.commons.lang3.text.StrTokenizer(charArray19, ' ');
        int int22 = strTokenizer21.size();
        boolean boolean23 = strTokenizer21.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher24 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer25 = strTokenizer21.setIgnoredMatcher(strMatcher24);
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder0.deleteFirst(strMatcher24);
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder0.appendln(0.0d);
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder28.appendln((double) 45);
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder28.replaceFirst('$', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder33.trim();
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strMatcher13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strMatcher24);
        org.junit.Assert.assertNotNull(strTokenizer25);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strBuilder34);
    }

    @Test
    public void test04709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04709");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties0.isEmpty();
        java.util.Set<java.lang.Object> objSet3 = properties0.keySet();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder4.deleteFirst("");
        int int8 = strBuilder4.indexOf("");
        int int11 = strBuilder4.lastIndexOf('#', (int) (byte) 0);
        boolean boolean13 = strBuilder4.startsWith("4#4");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder4.appendAll((java.util.Iterator<java.lang.String>) strTokenizer14);
        boolean boolean16 = strTokenizer14.hasPrevious();
        org.apache.commons.lang3.text.StrMatcher strMatcher17 = strTokenizer14.getIgnoredMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance("{}");
        java.lang.Object obj20 = properties0.replace((java.lang.Object) strTokenizer14, (java.lang.Object) "{}");
        java.util.Set<java.lang.Object> objSet21 = properties0.keySet();
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder22.replaceFirst("", "");
        char[] charArray26 = strBuilder22.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer28 = new org.apache.commons.lang3.text.StrTokenizer(charArray26, "");
        boolean boolean29 = strTokenizer28.hasNext();
        int int30 = strTokenizer28.previousIndex();
        org.apache.commons.lang3.text.StrMatcher strMatcher31 = strTokenizer28.getIgnoredMatcher();
        boolean boolean32 = properties0.equals((java.lang.Object) strMatcher31);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objSet3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strTokenizer14);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMatcher17);
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(objSet21);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(strMatcher31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test04710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04710");
        org.apache.commons.lang3.text.StrSubstitutor strSubstitutor0 = new org.apache.commons.lang3.text.StrSubstitutor();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        int int2 = strBuilder1.capacity();
        java.lang.StringBuffer stringBuffer3 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder1.appendln(stringBuffer3, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder1.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder8.appendln(true);
        boolean boolean13 = strSubstitutor0.replaceIn(strBuilder10, (int) '$', 0);
        int int16 = strBuilder10.indexOf(" #\n", (int) (short) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder10.appendPadding(0, ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder10.replaceAll("StrTokenizer[4#4]", "\n\0002.0java.io.IOException: hi!");
        int int25 = strBuilder10.lastIndexOf("\ntrue0.0\n", (-1));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test04711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04711");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher2 = strTokenizer1.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = strTokenizer1.reset("");
        java.lang.String str5 = strTokenizer4.nextToken();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer7 = strTokenizer4.setIgnoreEmptyTokens(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder8.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder10.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder11.appendSeparator("hi!", "4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = new org.apache.commons.lang3.text.StrBuilder();
        int int16 = strBuilder15.capacity();
        java.lang.StringBuffer stringBuffer17 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder15.appendln(stringBuffer17, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher21 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int22 = strBuilder20.lastIndexOf(strMatcher21);
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder11.replaceFirst(strMatcher21, "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer25 = strTokenizer4.setIgnoredMatcher(strMatcher21);
        java.lang.String str26 = strTokenizer4.previousToken();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer28 = strTokenizer4.setDelimiterString("\ntrue\n52.0");
        int int29 = strTokenizer4.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            strTokenizer4.add("java.io.IOException: {}");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: add() is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMatcher2);
        org.junit.Assert.assertNotNull(strTokenizer4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strTokenizer7);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 32 + "'", int16 == 32);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertNotNull(strMatcher21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strTokenizer25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(strTokenizer28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test04712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04712");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        char[] charArray13 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = new org.apache.commons.lang3.text.StrTokenizer(charArray13, ' ');
        int int16 = strTokenizer15.size();
        boolean boolean17 = strTokenizer15.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher18 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = strTokenizer15.setIgnoredMatcher(strMatcher18);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.replaceFirst("", "");
        java.lang.Object obj24 = properties0.putIfAbsent((java.lang.Object) strMatcher18, (java.lang.Object) strBuilder20);
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder25.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder28.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = new org.apache.commons.lang3.text.StrBuilder();
        int int32 = strBuilder31.capacity();
        java.lang.StringBuffer stringBuffer33 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder31.appendln(stringBuffer33, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder31.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder31.setLength(32);
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder41.trim();
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder41.append((int) (short) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = strBuilder44.append('#');
        java.lang.Object obj47 = properties0.putIfAbsent((java.lang.Object) strBuilder30, (java.lang.Object) '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder30.ensureCapacity(2);
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder50.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer55 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher56 = strTokenizer55.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder50.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer55, "h");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer60 = strTokenizer55.reset("\n32.0");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer62 = strTokenizer60.setEmptyTokenAsNull(true);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer63 = strTokenizer62.reset();
        org.apache.commons.lang3.text.StrBuilder strBuilder65 = strBuilder30.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer63, "java.io.IOException: java.io.IOException: hi!");
        int int67 = strBuilder30.indexOf('2');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strMatcher18);
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 32 + "'", int32 == 32);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strBuilder46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertNotNull(strMatcher56);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertNotNull(strTokenizer60);
        org.junit.Assert.assertNotNull(strTokenizer62);
        org.junit.Assert.assertNotNull(strTokenizer63);
        org.junit.Assert.assertNotNull(strBuilder65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 6 + "'", int67 == 6);
    }

    @Test
    public void test04713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04713");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder2.minimizeCapacity();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer5 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher6 = strTokenizer5.getTrimmerMatcher();
        int int8 = strBuilder2.indexOf(strMatcher6, 7);
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strMatcher6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test04714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04714");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray5 = strTokenizer4.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder0.appendAll((java.lang.Object[]) strArray5);
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder0.replaceFirst('a', 'a');
        char[] charArray14 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = new org.apache.commons.lang3.text.StrTokenizer(charArray14, ' ');
        int int17 = strTokenizer16.size();
        boolean boolean18 = strTokenizer16.hasNext();
        java.util.List<java.lang.String> strList19 = strTokenizer16.getTokenList();
        java.lang.String[] strArray23 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        boolean boolean26 = strList19.addAll((java.util.Collection<java.lang.String>) strList24);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder0.appendAll((java.lang.Iterable<java.lang.String>) strList24);
        org.apache.commons.lang3.text.StrSubstitutor strSubstitutor28 = new org.apache.commons.lang3.text.StrSubstitutor();
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = new org.apache.commons.lang3.text.StrBuilder();
        int int30 = strBuilder29.capacity();
        java.lang.StringBuffer stringBuffer31 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder29.appendln(stringBuffer31, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder29.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder36.appendln(true);
        boolean boolean41 = strSubstitutor28.replaceIn(strBuilder38, (int) '$', 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder0.append((java.lang.CharSequence) strBuilder38);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer43 = strBuilder38.asTokenizer();
        char[] charArray48 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer50 = new org.apache.commons.lang3.text.StrTokenizer(charArray48, ' ');
        int int51 = strTokenizer50.size();
        boolean boolean52 = strTokenizer50.hasNext();
        java.util.List<java.lang.String> strList53 = strTokenizer50.getTokenList();
        java.lang.String[] strArray57 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        boolean boolean60 = strList53.addAll((java.util.Collection<java.lang.String>) strList58);
        java.util.Spliterator<java.lang.String> strSpliterator61 = strList58.spliterator();
        int int62 = strList58.size();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer65 = new org.apache.commons.lang3.text.StrTokenizer(" 4#4", "");
        int int66 = strList58.lastIndexOf((java.lang.Object) strTokenizer65);
        strList58.clear();
        java.util.Spliterator<java.lang.String> strSpliterator68 = strList58.spliterator();
        org.apache.commons.lang3.text.StrBuilder strBuilder69 = strBuilder38.appendAll((java.lang.Iterable<java.lang.String>) strList58);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList72 = strList58.subList(117, 36);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 36");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 32 + "'", int30 == 32);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertNotNull(strTokenizer43);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strSpliterator61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator68);
        org.junit.Assert.assertNotNull(strBuilder69);
    }

    @Test
    public void test04715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04715");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        boolean boolean8 = strTokenizer6.hasNext();
        java.util.List<java.lang.String> strList9 = strTokenizer6.getTokenList();
        java.lang.String[] strArray13 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        boolean boolean16 = strList9.addAll((java.util.Collection<java.lang.String>) strList14);
        java.util.Spliterator<java.lang.String> strSpliterator17 = strList14.spliterator();
        char[] charArray22 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer24 = new org.apache.commons.lang3.text.StrTokenizer(charArray22, ' ');
        int int25 = strTokenizer24.size();
        boolean boolean26 = strTokenizer24.hasNext();
        java.util.List<java.lang.String> strList27 = strTokenizer24.getTokenList();
        java.lang.String[] strArray31 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        boolean boolean34 = strList27.addAll((java.util.Collection<java.lang.String>) strList32);
        java.util.Spliterator<java.lang.String> strSpliterator35 = strList32.spliterator();
        int int36 = strList32.size();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer39 = new org.apache.commons.lang3.text.StrTokenizer(" 4#4", "");
        int int40 = strList32.lastIndexOf((java.lang.Object) strTokenizer39);
        java.util.List<java.lang.String> strList41 = strTokenizer39.getTokenList();
        org.apache.commons.lang3.text.StrSubstitutor strSubstitutor42 = new org.apache.commons.lang3.text.StrSubstitutor();
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = new org.apache.commons.lang3.text.StrBuilder();
        int int44 = strBuilder43.capacity();
        java.lang.StringBuffer stringBuffer45 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder43.appendln(stringBuffer45, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = strBuilder43.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder50.appendln(true);
        boolean boolean55 = strSubstitutor42.replaceIn(strBuilder52, (int) '$', 0);
        boolean boolean56 = strList41.equals((java.lang.Object) '$');
        boolean boolean57 = strList14.containsAll((java.util.Collection<java.lang.String>) strList41);
        java.util.ListIterator<java.lang.String> strItor59 = strList14.listIterator(0);
        boolean boolean61 = strList14.remove((java.lang.Object) false);
        java.lang.Object obj62 = null;
        int int63 = strList14.lastIndexOf(obj62);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer65 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance("");
        boolean boolean66 = strTokenizer65.hasNext();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer68 = strTokenizer65.setDelimiterChar('a');
        org.apache.commons.lang3.text.StrMatcher strMatcher69 = null;
        org.apache.commons.lang3.text.StrTokenizer strTokenizer70 = strTokenizer65.setTrimmerMatcher(strMatcher69);
        boolean boolean71 = strTokenizer70.hasPrevious();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer73 = strTokenizer70.setEmptyTokenAsNull(true);
        java.lang.String[] strArray74 = strTokenizer73.getTokenArray();
        int int75 = strList14.lastIndexOf((java.lang.Object) strArray74);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strSpliterator17);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strSpliterator35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 32 + "'", int44 == 32);
        org.junit.Assert.assertNotNull(strBuilder48);
        org.junit.Assert.assertNotNull(strBuilder50);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strItor59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(strTokenizer65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strTokenizer68);
        org.junit.Assert.assertNotNull(strTokenizer70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strTokenizer73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
    }

    @Test
    public void test04716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04716");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(" 4#4");
        int int2 = strTokenizer1.nextIndex();
        java.lang.String[] strArray3 = strTokenizer1.getTokenArray();
        java.lang.Object obj4 = strTokenizer1.clone();
        org.junit.Assert.assertNotNull(strTokenizer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "StrTokenizer[not tokenized yet]");
    }

    @Test
    public void test04717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04717");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder2.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.setNullText("");
        char[] charArray6 = strBuilder5.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer8 = new org.apache.commons.lang3.text.StrTokenizer(charArray6, "true\n###################################3\n");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer10 = new org.apache.commons.lang3.text.StrTokenizer(charArray6, "StrTokenizer[]");
        java.lang.Object obj11 = strTokenizer10.clone();
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "StrTokenizer[not tokenized yet]");
    }

    @Test
    public void test04718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04718");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer2 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder6.appendln('#');
        java.lang.StringBuffer stringBuffer9 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder6.append(stringBuffer9, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder6.deleteFirst("hi!");
        char[] charArray15 = strBuilder6.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = strTokenizer2.reset(charArray15);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer17 = strTokenizer16.reset();
        int int18 = strTokenizer17.previousIndex();
        org.apache.commons.lang3.text.StrMatcher strMatcher19 = strTokenizer17.getIgnoredMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer20 = strTokenizer17.reset();
        org.apache.commons.lang3.text.StrMatcher strMatcher21 = strTokenizer20.getDelimiterMatcher();
        java.util.Properties properties22 = new java.util.Properties();
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.keys();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder24.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder27.appendSeparator('#', (int) (byte) 100);
        java.io.Reader reader31 = strBuilder27.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder32.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer36 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray37 = strTokenizer36.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder32.appendAll((java.lang.Object[]) strArray37);
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder32.replaceFirst('a', 'a');
        java.util.stream.IntStream intStream42 = strBuilder32.codePoints();
        java.lang.Object obj43 = properties22.replace((java.lang.Object) reader31, (java.lang.Object) intStream42);
        long long45 = reader31.skip(0L);
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder46.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer50 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray51 = strTokenizer50.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder46.appendAll((java.lang.Object[]) strArray51);
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = strBuilder46.replaceFirst('a', 'a');
        java.util.stream.IntStream intStream56 = strBuilder46.codePoints();
        org.apache.commons.lang3.text.StrBuilder strBuilder57 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder60 = strBuilder57.replaceFirst("", "");
        char[] charArray61 = strBuilder57.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer63 = new org.apache.commons.lang3.text.StrTokenizer(charArray61, "");
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = strBuilder46.appendln(charArray61);
        int int65 = reader31.read(charArray61);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer66 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray61);
        java.lang.String str67 = strTokenizer66.getContent();
        java.lang.String str68 = strTokenizer66.nextToken();
        org.apache.commons.lang3.text.StrMatcher strMatcher69 = strTokenizer66.getIgnoredMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer70 = new org.apache.commons.lang3.text.StrTokenizer("java.io.IOException:  ", strMatcher21, strMatcher69);
        org.junit.Assert.assertNotNull(strTokenizer2);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[#, \n]");
        org.junit.Assert.assertNotNull(strTokenizer16);
        org.junit.Assert.assertNotNull(strTokenizer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(strMatcher19);
        org.junit.Assert.assertNotNull(strTokenizer20);
        org.junit.Assert.assertNotNull(strMatcher21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(reader31);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertNotNull(intStream42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(strBuilder48);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(strBuilder55);
        org.junit.Assert.assertNotNull(intStream56);
        org.junit.Assert.assertNotNull(strBuilder60);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[]");
        org.junit.Assert.assertNotNull(strBuilder64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(strTokenizer66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(strMatcher69);
    }

    @Test
    public void test04719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04719");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer5 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray6 = strTokenizer5.getTokenArray();
        java.lang.String[] strArray7 = strTokenizer5.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder3.appendWithSeparators((java.lang.Object[]) strArray7, "4#4");
        org.apache.commons.lang3.text.StrMatcher strMatcher10 = org.apache.commons.lang3.text.StrMatcher.tabMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.deleteAll(strMatcher10);
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder9.trim();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder9.append(false);
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder15.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder15.deleteAll('4');
        int int22 = strBuilder20.indexOf('a');
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder23.replaceFirst("", "");
        char[] charArray27 = strBuilder23.toCharArray();
        char[] charArray28 = strBuilder20.getChars(charArray27);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer29 = new org.apache.commons.lang3.text.StrTokenizer(charArray27);
        char[] charArray30 = strBuilder14.getChars(charArray27);
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder31.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder34.appendSeparator('#', (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder37.append((float) '$');
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder37.appendln(32);
        java.io.Reader reader42 = strBuilder37.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = strBuilder43.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder46.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder49.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = strBuilder53.replaceFirst("", "");
        char[] charArray57 = strBuilder53.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder52.appendln(charArray57);
        org.apache.commons.lang3.text.StrMatcher strMatcher59 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray57);
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = strBuilder43.replaceFirst(strMatcher59, "StrTokenizer[]");
        int int62 = strBuilder37.lastIndexOf(strMatcher59);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer63 = new org.apache.commons.lang3.text.StrTokenizer(charArray27, strMatcher59);
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder67 = strBuilder64.replaceFirst("", "");
        char[] charArray68 = strBuilder64.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer70 = new org.apache.commons.lang3.text.StrTokenizer(charArray68, 'a');
        int int74 = strMatcher59.isMatch(charArray68, 3, (int) '$', 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher75 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray68);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer76 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray68);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strMatcher10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "false");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "false");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[f, a, l, s, e]");
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertNotNull(reader42);
        org.junit.Assert.assertNotNull(strBuilder45);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(strBuilder56);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[]");
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertNotNull(strMatcher59);
        org.junit.Assert.assertNotNull(strBuilder61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(strBuilder67);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(strMatcher75);
        org.junit.Assert.assertNotNull(strTokenizer76);
    }

    @Test
    public void test04720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04720");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        java.util.Properties properties9 = new java.util.Properties();
        int int10 = properties9.size();
        boolean boolean12 = properties9.containsKey((java.lang.Object) (-1.0f));
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder13.replaceFirst("", "");
        char[] charArray17 = strBuilder13.toCharArray();
        boolean boolean18 = properties9.containsValue((java.lang.Object) charArray17);
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder0.append(charArray17, (int) (byte) 0, 0);
        java.lang.String str22 = strBuilder21.toString();
        char[] charArray27 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer29 = new org.apache.commons.lang3.text.StrTokenizer(charArray27, ' ');
        java.lang.String str30 = strTokenizer29.next();
        int int31 = strTokenizer29.previousIndex();
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder21.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer29, "\n32.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder21.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder34.reverse();
        int int36 = strBuilder34.capacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder34.reverse();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\n32.0" + "'", str22, "\n32.0");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ , 4, #, 4]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "4#4" + "'", str30, "4#4");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 32 + "'", int36 == 32);
        org.junit.Assert.assertNotNull(strBuilder37);
    }

    @Test
    public void test04721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04721");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.setLength(32);
        java.io.Writer writer11 = strBuilder10.asWriter();
        writer11.write(" 4#4", (int) (byte) 0, (int) (byte) 0);
        char[] charArray16 = null;
        writer11.write(charArray16);
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = new org.apache.commons.lang3.text.StrBuilder();
        int int19 = strBuilder18.capacity();
        java.lang.StringBuffer stringBuffer20 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder18.appendln(stringBuffer20, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder18.insert(1, (double) 32);
        java.util.Properties properties27 = new java.util.Properties();
        int int28 = properties27.size();
        boolean boolean30 = properties27.containsKey((java.lang.Object) (-1.0f));
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder31.replaceFirst("", "");
        char[] charArray35 = strBuilder31.toCharArray();
        boolean boolean36 = properties27.containsValue((java.lang.Object) charArray35);
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder18.append(charArray35, (int) (byte) 0, 0);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer42 = new org.apache.commons.lang3.text.StrTokenizer(charArray35, '4', 'a');
        org.apache.commons.lang3.text.StrMatcher strMatcher45 = org.apache.commons.lang3.text.StrMatcher.stringMatcher("java.io.IOException: ########");
        org.apache.commons.lang3.text.StrMatcher strMatcher47 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher("StrTokenizer[]");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer48 = new org.apache.commons.lang3.text.StrTokenizer("\n032.0", strMatcher45, strMatcher47);
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder49.deleteFirst("");
        int int53 = strBuilder49.indexOf("");
        int int56 = strBuilder49.lastIndexOf('#', (int) (byte) 0);
        boolean boolean58 = strBuilder49.startsWith("4#4");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer59 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance();
        org.apache.commons.lang3.text.StrBuilder strBuilder60 = strBuilder49.appendAll((java.util.Iterator<java.lang.String>) strTokenizer59);
        boolean boolean61 = strTokenizer59.isIgnoreEmptyTokens();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer63 = strTokenizer59.setIgnoreEmptyTokens(false);
        org.apache.commons.lang3.text.StrMatcher strMatcher65 = org.apache.commons.lang3.text.StrMatcher.stringMatcher("");
        org.apache.commons.lang3.text.StrBuilder strBuilder66 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder69 = strBuilder66.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder72 = strBuilder69.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder73 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder76 = strBuilder73.replaceFirst("", "");
        char[] charArray77 = strBuilder73.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder78 = strBuilder72.appendln(charArray77);
        int int82 = strMatcher65.isMatch(charArray77, (-1), (int) ' ', (int) (byte) -1);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer83 = strTokenizer63.setTrimmerMatcher(strMatcher65);
        boolean boolean84 = strTokenizer83.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher85 = strTokenizer83.getIgnoredMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer86 = new org.apache.commons.lang3.text.StrTokenizer(charArray35, strMatcher47, strMatcher85);
        // The following exception was thrown during execution in test generation
        try {
            writer11.write(charArray35, 58, 118);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: Invalid startIndex: 118");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(writer11);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNotNull(strMatcher45);
        org.junit.Assert.assertNotNull(strMatcher47);
        org.junit.Assert.assertNotNull(strBuilder51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strTokenizer59);
        org.junit.Assert.assertNotNull(strBuilder60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strTokenizer63);
        org.junit.Assert.assertNotNull(strMatcher65);
        org.junit.Assert.assertNotNull(strBuilder69);
        org.junit.Assert.assertNotNull(strBuilder72);
        org.junit.Assert.assertNotNull(strBuilder76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertNotNull(strBuilder78);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(strTokenizer83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(strMatcher85);
    }

    @Test
    public void test04722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04722");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.appendln('#');
        java.lang.StringBuffer stringBuffer6 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder3.append(stringBuffer6, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder3.deleteFirst("hi!");
        char[] charArray12 = strBuilder3.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder3.setNewLineText("java.io.IOException: hi!");
        java.io.Reader reader15 = strBuilder3.asReader();
        reader15.mark((int) (short) 100);
        boolean boolean18 = reader15.ready();
        boolean boolean19 = reader15.markSupported();
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, \n]");
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(reader15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test04723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04723");
        org.apache.commons.lang3.text.StrMatcher strMatcher1 = org.apache.commons.lang3.text.StrMatcher.stringMatcher("");
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder2.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder5.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder9.replaceFirst("", "");
        char[] charArray13 = strBuilder9.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder8.appendln(charArray13);
        int int18 = strMatcher1.isMatch(charArray13, (-1), (int) ' ', (int) (byte) -1);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = new org.apache.commons.lang3.text.StrTokenizer(charArray13);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer20 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray13);
        boolean boolean21 = strTokenizer20.hasPrevious();
        boolean boolean22 = strTokenizer20.hasNext();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer23 = strTokenizer20.reset();
        org.junit.Assert.assertNotNull(strMatcher1);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(strTokenizer20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strTokenizer23);
    }

    @Test
    public void test04724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04724");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendSeparator('#');
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
    }

    @Test
    public void test04725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04725");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray5 = strTokenizer4.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder0.appendAll((java.lang.Object[]) strArray5);
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder0.replaceFirst('a', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray15 = strTokenizer14.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder10.appendAll((java.lang.Object[]) strArray15);
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder0.appendln(strBuilder16);
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder16.appendln((long) 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder16.appendSeparator("hi!", "");
        int int25 = strBuilder16.lastIndexOf("{", 50);
        // The following exception was thrown during execution in test generation
        try {
            char char27 = strBuilder16.charAt(22);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 22");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test04726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04726");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.appendSeparator('#', (int) (byte) 100);
        java.io.Reader reader7 = strBuilder3.asReader();
        long long9 = reader7.skip((long) '#');
        reader7.mark((int) (short) 10);
        reader7.mark(3);
        boolean boolean14 = reader7.ready();
        boolean boolean15 = reader7.ready();
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(reader7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04727");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray2 = strTokenizer1.getTokenArray();
        java.lang.String str3 = strTokenizer1.getContent();
        // The following exception was thrown during execution in test generation
        try {
            strTokenizer1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove() is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test04728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04728");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.setLength(32);
        java.io.Writer writer11 = strBuilder10.asWriter();
        writer11.write(" 4#4", (int) (byte) 0, (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = new org.apache.commons.lang3.text.StrBuilder();
        int int17 = strBuilder16.capacity();
        java.lang.StringBuffer stringBuffer18 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder16.appendln(stringBuffer18, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder16.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder23.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder25.append((float) '4');
        java.io.Writer writer28 = writer11.append((java.lang.CharSequence) strBuilder25);
        writer11.close();
        java.io.Writer writer31 = writer11.append(' ');
        writer31.write(2);
        writer31.flush();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder35.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder38.replaceFirst('a', '4');
        java.io.Writer writer42 = strBuilder41.asWriter();
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = strBuilder43.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder46.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder50.replaceFirst("", "");
        char[] charArray54 = strBuilder50.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = strBuilder49.appendln(charArray54);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer56 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray54);
        writer42.write(charArray54);
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = strBuilder58.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = strBuilder61.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder66 = strBuilder63.appendPadding((int) '#', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder67 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder69 = strBuilder67.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder70 = strBuilder69.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder72 = strBuilder70.appendln((double) '#');
        boolean boolean73 = strBuilder63.equals(strBuilder72);
        org.apache.commons.lang3.text.StrBuilder strBuilder76 = strBuilder72.appendSeparator('4', '#');
        char[] charArray82 = new char[] { ' ', '4', '#', '#', ' ' };
        org.apache.commons.lang3.text.StrMatcher strMatcher83 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray82);
        org.apache.commons.lang3.text.StrBuilder strBuilder86 = strBuilder72.append(charArray82, (int) (byte) 0, (int) (byte) 0);
        writer42.write(charArray82);
        writer31.write(charArray82);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(writer11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 32 + "'", int17 == 32);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(writer28);
        org.junit.Assert.assertNotNull(writer31);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertNotNull(writer42);
        org.junit.Assert.assertNotNull(strBuilder46);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[]");
        org.junit.Assert.assertNotNull(strBuilder55);
        org.junit.Assert.assertNotNull(strTokenizer56);
        org.junit.Assert.assertNotNull(strBuilder61);
        org.junit.Assert.assertNotNull(strBuilder63);
        org.junit.Assert.assertNotNull(strBuilder66);
        org.junit.Assert.assertNotNull(strBuilder69);
        org.junit.Assert.assertNotNull(strBuilder70);
        org.junit.Assert.assertNotNull(strBuilder72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strBuilder76);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), " 4## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), " 4## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[ , 4, #, #,  ]");
        org.junit.Assert.assertNotNull(strMatcher83);
        org.junit.Assert.assertNotNull(strBuilder86);
    }

    @Test
    public void test04729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04729");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder2.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.setNullText("");
        int int6 = strBuilder3.size();
        boolean boolean7 = strBuilder3.isEmpty();
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test04730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04730");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        char[] charArray4 = strBuilder0.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer7 = new org.apache.commons.lang3.text.StrTokenizer(charArray4);
        java.lang.String str8 = strTokenizer7.toString();
        java.lang.String str9 = strTokenizer7.previousToken();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer11 = strTokenizer7.setIgnoredChar(' ');
        java.lang.String str12 = strTokenizer7.nextToken();
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "StrTokenizer[not tokenized yet]" + "'", str8, "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strTokenizer11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test04731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04731");
        java.util.Properties properties0 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray7 = strTokenizer6.getTokenArray();
        java.lang.String[] strArray8 = strTokenizer6.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder4.appendWithSeparators((java.lang.Object[]) strArray8, "4#4");
        char[] charArray13 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray13);
        java.lang.Object obj15 = properties0.getOrDefault((java.lang.Object) strBuilder4, (java.lang.Object) strTokenizer14);
        java.util.Enumeration<?> wildcardEnumeration16 = properties0.propertyNames();
        int int17 = properties0.size();
        java.util.Properties properties18 = new java.util.Properties(properties0);
        java.lang.Object obj21 = properties18.setProperty("java.io.IOException: java.io.IOException: \n", "100.0");
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertNotNull(wildcardEnumeration16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(obj21);
    }

    @Test
    public void test04732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04732");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        java.lang.Object obj2 = properties0.clone();
        java.util.Set<java.lang.String> strSet3 = properties0.stringPropertyNames();
        java.lang.Object obj4 = properties0.clone();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = new org.apache.commons.lang3.text.StrBuilder();
        int int6 = strBuilder5.capacity();
        java.lang.StringBuffer stringBuffer7 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder5.appendln(stringBuffer7, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder5.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder5.setLength(32);
        java.io.Writer writer16 = strBuilder15.asWriter();
        writer16.write((int) (byte) 1);
        properties0.store(writer16, "hi!");
        writer16.close();
        java.io.Writer writer23 = writer16.append('9');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "{}");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(writer16);
        org.junit.Assert.assertNotNull(writer23);
    }

    @Test
    public void test04733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04733");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.setLength(32);
        java.io.Writer writer11 = strBuilder10.asWriter();
        writer11.write(" 4#4", (int) (byte) 0, (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = new org.apache.commons.lang3.text.StrBuilder();
        int int17 = strBuilder16.capacity();
        java.lang.StringBuffer stringBuffer18 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder16.appendln(stringBuffer18, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder16.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder23.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder25.append((float) '4');
        java.io.Writer writer28 = writer11.append((java.lang.CharSequence) strBuilder25);
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder29.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder31.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder32.appendSeparator("hi!", "4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder35.deleteAll("");
        java.io.Writer writer38 = writer11.append((java.lang.CharSequence) strBuilder35);
        writer38.close();
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = new org.apache.commons.lang3.text.StrBuilder();
        int int41 = strBuilder40.capacity();
        java.lang.StringBuffer stringBuffer42 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = strBuilder40.appendln(stringBuffer42, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder40.insert(1, (double) 32);
        java.util.Properties properties49 = new java.util.Properties();
        int int50 = properties49.size();
        boolean boolean52 = properties49.containsKey((java.lang.Object) (-1.0f));
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = strBuilder53.replaceFirst("", "");
        char[] charArray57 = strBuilder53.toCharArray();
        boolean boolean58 = properties49.containsValue((java.lang.Object) charArray57);
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = strBuilder40.append(charArray57, (int) (byte) 0, 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = strBuilder40.appendln('a');
        boolean boolean64 = strBuilder40.isEmpty();
        boolean boolean66 = strBuilder40.startsWith("\n-1.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder68 = strBuilder40.appendln((float) 5);
        java.io.Writer writer69 = writer38.append((java.lang.CharSequence) strBuilder40);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(writer11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 32 + "'", int17 == 32);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(writer28);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertNotNull(writer38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 32 + "'", int41 == 32);
        org.junit.Assert.assertNotNull(strBuilder45);
        org.junit.Assert.assertNotNull(strBuilder48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strBuilder56);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strBuilder61);
        org.junit.Assert.assertNotNull(strBuilder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strBuilder68);
        org.junit.Assert.assertNotNull(writer69);
    }

    @Test
    public void test04734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04734");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher2 = strTokenizer1.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = strTokenizer1.reset("");
        org.apache.commons.lang3.text.StrMatcher strMatcher5 = strTokenizer1.getIgnoredMatcher();
        java.lang.String[] strArray6 = strTokenizer1.getTokenArray();
        org.apache.commons.lang3.text.StrMatcher strMatcher7 = org.apache.commons.lang3.text.StrMatcher.doubleQuoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer8 = strTokenizer1.setIgnoredMatcher(strMatcher7);
        boolean boolean9 = strTokenizer8.isEmptyTokenAsNull();
        org.junit.Assert.assertNotNull(strMatcher2);
        org.junit.Assert.assertNotNull(strTokenizer4);
        org.junit.Assert.assertNotNull(strMatcher5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strMatcher7);
        org.junit.Assert.assertNotNull(strTokenizer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test04735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04735");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        char[] charArray4 = strBuilder0.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, "");
        boolean boolean7 = strTokenizer6.hasNext();
        boolean boolean8 = strTokenizer6.hasNext();
        boolean boolean9 = strTokenizer6.hasNext();
        boolean boolean10 = strTokenizer6.hasNext();
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04736");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray5 = strTokenizer4.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder0.appendAll((java.lang.Object[]) strArray5);
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder9.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.ensureCapacity((int) (short) 10);
        boolean boolean13 = strBuilder6.equals((java.lang.Object) strBuilder12);
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder12.setNullText("java.io.IOException");
        java.lang.String str16 = strBuilder12.getNullText();
        java.util.Properties properties17 = new java.util.Properties();
        int int18 = properties17.size();
        boolean boolean20 = properties17.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties21 = new java.util.Properties();
        int int22 = properties21.size();
        boolean boolean24 = properties21.containsKey((java.lang.Object) (-1.0f));
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.lang.String str27 = properties21.getProperty("h");
        boolean boolean28 = properties21.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder12.appendFixedWidthPadRight((java.lang.Object) properties21, (int) '4', '$');
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder31.append("StrTokenizer[not tokenized yet]");
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder34.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer38 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray39 = strTokenizer38.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder34.appendAll((java.lang.Object[]) strArray39);
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder40.append((double) (short) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = strBuilder43.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder46.appendln('#');
        java.lang.StringBuffer stringBuffer49 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder46.append(stringBuffer49, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder46.deleteFirst("hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder57 = strBuilder46.appendSeparator("4#4", "\n32.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = strBuilder46.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder60 = strBuilder40.append((java.lang.CharSequence) strBuilder59);
        char[] charArray65 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer67 = new org.apache.commons.lang3.text.StrTokenizer(charArray65, ' ');
        int int68 = strTokenizer67.size();
        boolean boolean69 = strTokenizer67.hasNext();
        java.util.List<java.lang.String> strList70 = strTokenizer67.getTokenList();
        java.lang.String[] strArray74 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        boolean boolean77 = strList70.addAll((java.util.Collection<java.lang.String>) strList75);
        java.util.Spliterator<java.lang.String> strSpliterator78 = strList75.spliterator();
        int int79 = strList75.size();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer82 = new org.apache.commons.lang3.text.StrTokenizer(" 4#4", "");
        int int83 = strList75.lastIndexOf((java.lang.Object) strTokenizer82);
        strList75.clear();
        int int85 = strList75.size();
        org.apache.commons.lang3.text.StrBuilder strBuilder87 = strBuilder59.appendWithSeparators((java.lang.Iterable<java.lang.String>) strList75, "10.0StrTokenizer[ 4#4]\n");
        org.apache.commons.lang3.text.StrMatcher strMatcher88 = org.apache.commons.lang3.text.StrSubstitutor.DEFAULT_SUFFIX;
        int int89 = strBuilder59.lastIndexOf(strMatcher88);
        int int90 = strBuilder31.lastIndexOf(strMatcher88);
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException" + "'", str16, "java.io.IOException");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertNotNull(strBuilder46);
        org.junit.Assert.assertNotNull(strBuilder48);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertNotNull(strBuilder57);
        org.junit.Assert.assertNotNull(strBuilder59);
        org.junit.Assert.assertNotNull(strBuilder60);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(strSpliterator78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(strBuilder87);
        org.junit.Assert.assertNotNull(strMatcher88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
    }

    @Test
    public void test04737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04737");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder5.appendPadding((int) '#', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder11.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.appendln((double) '#');
        boolean boolean15 = strBuilder5.equals(strBuilder14);
        java.util.stream.IntStream intStream16 = strBuilder5.codePoints();
        org.apache.commons.lang3.text.StrMatcher strMatcher18 = org.apache.commons.lang3.text.StrMatcher.stringMatcher(".0");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder5.replace(strMatcher18, "java.io.IOException: hi!false", 24, 9, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: end < start");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intStream16);
        org.junit.Assert.assertNotNull(strMatcher18);
    }

    @Test
    public void test04738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04738");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        boolean boolean8 = strTokenizer6.hasNext();
        java.util.List<java.lang.String> strList9 = strTokenizer6.getTokenList();
        java.lang.String[] strArray13 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        boolean boolean16 = strList9.addAll((java.util.Collection<java.lang.String>) strList14);
        java.util.Spliterator<java.lang.String> strSpliterator17 = strList14.spliterator();
        int int18 = strList14.size();
        java.lang.String str20 = strList14.remove((int) (byte) 0);
        boolean boolean22 = strList14.add("{}");
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder23.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer27 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray28 = strTokenizer27.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder23.appendAll((java.lang.Object[]) strArray28);
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder23.replaceFirst('a', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder33.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer37 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray38 = strTokenizer37.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder33.appendAll((java.lang.Object[]) strArray38);
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder23.appendln(strBuilder39);
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder41.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder44.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder48.replaceFirst("", "");
        char[] charArray52 = strBuilder48.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder47.appendln(charArray52);
        boolean boolean54 = strBuilder23.equals((java.lang.Object) strBuilder47);
        boolean boolean55 = strList14.remove((java.lang.Object) strBuilder23);
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder23.replaceAll("{}", "h");
        org.apache.commons.lang3.text.StrBuilder strBuilder60 = strBuilder23.append('7');
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strSpliterator17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\n32.0" + "'", str20, "\n32.0");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(strBuilder51);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[]");
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertNotNull(strBuilder60);
    }

    @Test
    public void test04739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04739");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder2.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.setNullText("");
        char[] charArray6 = strBuilder5.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder5.insert(0, true);
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder5.insert(0, (long) '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.setNewLineText("hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder14.appendSeparator("java.io.IOException: hi!false", 116);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder14.replaceFirst(" 4## ", "java.io.IOException: StrTokenizer[not tokenized yet]");
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder23.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder26.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder30.replaceFirst("", "");
        char[] charArray34 = strBuilder30.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder29.appendln(charArray34);
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder35.deleteFirst("StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = new org.apache.commons.lang3.text.StrBuilder();
        int int39 = strBuilder38.capacity();
        java.lang.StringBuffer stringBuffer40 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder38.appendln(stringBuffer40, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = strBuilder38.insert(1, (double) 32);
        java.lang.String str48 = strBuilder38.rightString((int) ' ');
        boolean boolean50 = strBuilder38.startsWith("");
        char[] charArray51 = strBuilder38.toCharArray();
        org.apache.commons.lang3.text.StrMatcher strMatcher52 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray51);
        int int54 = strBuilder35.lastIndexOf(strMatcher52, (int) 'a');
        org.apache.commons.lang3.text.StrMatcher strMatcher56 = org.apache.commons.lang3.text.StrMatcher.stringMatcher("a}3.0$");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer57 = new org.apache.commons.lang3.text.StrTokenizer("java.io.IOException: \n", strMatcher52, strMatcher56);
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = strBuilder58.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = strBuilder61.appendSeparator('#', (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder66 = strBuilder64.append((float) '$');
        org.apache.commons.lang3.text.StrBuilder strBuilder68 = strBuilder64.appendln(58);
        org.apache.commons.lang3.text.StrMatcher strMatcher70 = org.apache.commons.lang3.text.StrMatcher.stringMatcher("00.0\000\000\000\000\000");
        org.apache.commons.lang3.text.StrBuilder strBuilder71 = strBuilder68.deleteFirst(strMatcher70);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer72 = new org.apache.commons.lang3.text.StrTokenizer("\n#\n\n", strMatcher56, strMatcher70);
        int int73 = strBuilder20.indexOf(strMatcher70);
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[]");
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 32 + "'", int39 == 32);
        org.junit.Assert.assertNotNull(strBuilder43);
        org.junit.Assert.assertNotNull(strBuilder46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\n32.0" + "'", str48, "\n32.0");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "\n32.0");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "\n32.0");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[\n, 3, 2, ., 0]");
        org.junit.Assert.assertNotNull(strMatcher52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(strMatcher56);
        org.junit.Assert.assertNotNull(strBuilder61);
        org.junit.Assert.assertNotNull(strBuilder64);
        org.junit.Assert.assertNotNull(strBuilder66);
        org.junit.Assert.assertNotNull(strBuilder68);
        org.junit.Assert.assertNotNull(strMatcher70);
        org.junit.Assert.assertNotNull(strBuilder71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
    }

    @Test
    public void test04740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04740");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        char[] charArray4 = strBuilder0.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer7 = new org.apache.commons.lang3.text.StrTokenizer(charArray4);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer9 = strTokenizer7.setEmptyTokenAsNull(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = strTokenizer9.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertNotNull(strTokenizer9);
    }

    @Test
    public void test04741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04741");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray5 = strTokenizer4.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder0.appendAll((java.lang.Object[]) strArray5);
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder0.replaceFirst('a', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray15 = strTokenizer14.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder10.appendAll((java.lang.Object[]) strArray15);
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder0.appendln(strBuilder16);
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder16.appendln((long) 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder19.appendNull();
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder20.appendln('$');
        int int25 = strBuilder20.lastIndexOf('#', 0);
        boolean boolean26 = strBuilder20.isEmpty();
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test04742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04742");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        boolean boolean8 = strTokenizer6.hasNext();
        java.util.List<java.lang.String> strList9 = strTokenizer6.getTokenList();
        java.lang.String[] strArray13 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        boolean boolean16 = strList9.addAll((java.util.Collection<java.lang.String>) strList14);
        java.util.Spliterator<java.lang.String> strSpliterator17 = strList14.spliterator();
        int int18 = strList14.size();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer21 = new org.apache.commons.lang3.text.StrTokenizer(" 4#4", "");
        int int22 = strList14.lastIndexOf((java.lang.Object) strTokenizer21);
        java.util.List<java.lang.String> strList23 = strTokenizer21.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder24.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer29 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray30 = strTokenizer29.getTokenArray();
        java.lang.String[] strArray31 = strTokenizer29.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder27.appendWithSeparators((java.lang.Object[]) strArray31, "4#4");
        org.apache.commons.lang3.text.StrMatcher strMatcher34 = org.apache.commons.lang3.text.StrMatcher.tabMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder33.deleteAll(strMatcher34);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer36 = strTokenizer21.setIgnoredMatcher(strMatcher34);
        java.lang.String str37 = strTokenizer21.toString();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer39 = strTokenizer21.setIgnoreEmptyTokens(true);
        org.apache.commons.lang3.text.StrMatcher strMatcher40 = strTokenizer21.getQuoteMatcher();
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strSpliterator17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strMatcher34);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(strTokenizer36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "StrTokenizer[ 4#4]" + "'", str37, "StrTokenizer[ 4#4]");
        org.junit.Assert.assertNotNull(strTokenizer39);
        org.junit.Assert.assertNotNull(strMatcher40);
    }

    @Test
    public void test04743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04743");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher2 = strTokenizer1.getTrimmerMatcher();
        boolean boolean3 = strTokenizer1.hasPrevious();
        java.lang.String str4 = org.apache.commons.lang3.text.StrSubstitutor.replaceSystemProperties((java.lang.Object) strTokenizer1);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = strTokenizer1.setQuoteChar('e');
        int int7 = strTokenizer6.previousIndex();
        org.junit.Assert.assertNotNull(strMatcher2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "StrTokenizer[]" + "'", str4, "StrTokenizer[]");
        org.junit.Assert.assertNotNull(strTokenizer6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test04744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04744");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.setLength(32);
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder10.trim();
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder10.append((int) (short) 1);
        int int16 = strBuilder10.lastIndexOf("{}", 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder10.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder10.setNewLineText("\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder19.insert((int) (short) 1, (long) '$');
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder19.appendln("StrTokenizer[ 4#4]");
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder19.deleteFirst('e');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder19.insert(26, true);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 26");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder26);
    }

    @Test
    public void test04745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04745");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder7.replaceFirst("", "");
        char[] charArray11 = strBuilder7.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder6.appendln(charArray11);
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.setNewLineText("\n");
        java.io.Reader reader15 = strBuilder14.asReader();
        java.io.Writer writer16 = strBuilder14.asWriter();
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder17.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer21 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray22 = strTokenizer21.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder17.appendAll((java.lang.Object[]) strArray22);
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder17.replaceFirst('a', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder27.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer31 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray32 = strTokenizer31.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder27.appendAll((java.lang.Object[]) strArray32);
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder17.appendln(strBuilder33);
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder35.deleteFirst("");
        int int39 = strBuilder35.indexOf("");
        int int42 = strBuilder35.lastIndexOf('#', (int) (byte) 0);
        boolean boolean44 = strBuilder35.startsWith("4#4");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer45 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance();
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = strBuilder35.appendAll((java.util.Iterator<java.lang.String>) strTokenizer45);
        boolean boolean47 = strTokenizer45.isIgnoreEmptyTokens();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer49 = strTokenizer45.setIgnoreEmptyTokens(false);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer51 = strTokenizer49.setIgnoreEmptyTokens(false);
        boolean boolean52 = strBuilder17.equals((java.lang.Object) strTokenizer49);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer54 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher55 = strTokenizer54.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer57 = strTokenizer54.reset("");
        org.apache.commons.lang3.text.StrMatcher strMatcher58 = strTokenizer54.getIgnoredMatcher();
        java.lang.String[] strArray59 = strTokenizer54.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder60 = strBuilder17.appendAll((java.lang.Object[]) strArray59);
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = strBuilder14.appendAll((java.lang.Object[]) strArray59);
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = strBuilder14.insert((int) (short) 0, (long) 35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str67 = strBuilder64.substring(13, 51);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: end < start");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(reader15);
        org.junit.Assert.assertNotNull(writer16);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strTokenizer45);
        org.junit.Assert.assertNotNull(strBuilder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strTokenizer49);
        org.junit.Assert.assertNotNull(strTokenizer51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strMatcher55);
        org.junit.Assert.assertNotNull(strTokenizer57);
        org.junit.Assert.assertNotNull(strMatcher58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strBuilder60);
        org.junit.Assert.assertNotNull(strBuilder61);
        org.junit.Assert.assertNotNull(strBuilder64);
    }

    @Test
    public void test04746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04746");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher2 = strTokenizer1.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer3 = strTokenizer1.reset();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer5 = strTokenizer3.setDelimiterString(" 4#4");
        org.apache.commons.lang3.text.StrMatcher strMatcher6 = strTokenizer3.getDelimiterMatcher();
        boolean boolean7 = strTokenizer3.hasPrevious();
        java.util.Properties properties8 = new java.util.Properties();
        int int9 = properties8.size();
        java.lang.Throwable throwable11 = null;
        java.io.IOException iOException12 = new java.io.IOException("\n32.0", throwable11);
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        char[] charArray16 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer17 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray16);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = strTokenizer17.setDelimiterString("hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer21 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder22.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder25.appendln('#');
        java.lang.StringBuffer stringBuffer28 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder25.append(stringBuffer28, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder25.deleteFirst("hi!");
        char[] charArray34 = strBuilder25.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer35 = strTokenizer21.reset(charArray34);
        boolean boolean36 = properties8.replace((java.lang.Object) iOException12, (java.lang.Object) "hi!", (java.lang.Object) strTokenizer21);
        int int37 = properties8.size();
        int int38 = properties8.size();
        java.util.Set<java.lang.Object> objSet39 = properties8.keySet();
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder41.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder44.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = strBuilder47.appendSeparator(' ', (int) '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder50.appendln('#');
        char[] charArray57 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer59 = new org.apache.commons.lang3.text.StrTokenizer(charArray57, ' ');
        int int60 = strTokenizer59.size();
        boolean boolean61 = strTokenizer59.hasNext();
        java.util.List<java.lang.String> strList62 = strTokenizer59.getTokenList();
        java.lang.String[] strArray66 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.addAll((java.util.Collection<java.lang.String>) strList67);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer71 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray72 = strTokenizer71.getTokenArray();
        java.lang.String[] strArray73 = strTokenizer71.getTokenArray();
        boolean boolean74 = strTokenizer71.hasNext();
        int int75 = strTokenizer71.size();
        org.apache.commons.lang3.text.StrMatcher strMatcher76 = strTokenizer71.getQuoteMatcher();
        java.util.List<java.lang.String> strList77 = strTokenizer71.getTokenList();
        boolean boolean78 = strList62.retainAll((java.util.Collection<java.lang.String>) strList77);
        org.apache.commons.lang3.text.StrBuilder strBuilder80 = strBuilder50.appendWithSeparators((java.lang.Iterable<java.lang.String>) strList62, "");
        java.lang.Object obj81 = properties8.getOrDefault((java.lang.Object) (short) 0, (java.lang.Object) strList62);
        java.util.stream.Stream<java.lang.String> strStream82 = strList62.parallelStream();
        char[] charArray87 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer89 = new org.apache.commons.lang3.text.StrTokenizer(charArray87, ' ');
        java.lang.String str90 = strTokenizer89.next();
        int int91 = strTokenizer89.nextIndex();
        org.apache.commons.lang3.text.StrMatcher strMatcher92 = strTokenizer89.getQuoteMatcher();
        int int93 = strList62.lastIndexOf((java.lang.Object) strMatcher92);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer94 = strTokenizer3.setQuoteMatcher(strMatcher92);
        int int95 = strTokenizer3.size();
        org.junit.Assert.assertNotNull(strMatcher2);
        org.junit.Assert.assertNotNull(strTokenizer3);
        org.junit.Assert.assertNotNull(strTokenizer5);
        org.junit.Assert.assertNotNull(strMatcher6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer17);
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertNotNull(strTokenizer21);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#, \n]");
        org.junit.Assert.assertNotNull(strTokenizer35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objSet39);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(strBuilder50);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(strMatcher76);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(strBuilder80);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "[]");
        org.junit.Assert.assertNotNull(strStream82);
        org.junit.Assert.assertNotNull(charArray87);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray87), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray87), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray87), "[ , 4, #, 4]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "4#4" + "'", str90, "4#4");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(strMatcher92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNotNull(strTokenizer94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test04747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04747");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer2 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray3 = strTokenizer2.getTokenArray();
        java.lang.String[] strArray4 = strTokenizer2.getTokenArray();
        boolean boolean5 = strTokenizer2.hasNext();
        int int6 = strTokenizer2.size();
        org.apache.commons.lang3.text.StrMatcher strMatcher7 = strTokenizer2.getQuoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer8 = new org.apache.commons.lang3.text.StrTokenizer("h", strMatcher7);
        java.util.List<java.lang.String> strList9 = strTokenizer8.getTokenList();
        boolean boolean11 = strList9.add("2");
        java.util.ListIterator<java.lang.String> strItor12 = strList9.listIterator();
        java.util.ListIterator<java.lang.String> strItor14 = strList9.listIterator((int) (byte) 0);
        java.util.ListIterator<java.lang.String> strItor16 = strList9.listIterator(0);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(strMatcher7);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(strItor16);
    }

    @Test
    public void test04748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04748");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer5 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher6 = strTokenizer5.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer5, "h");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder8.deleteFirst("java.io.IOException: hi!falsejava.io.IOException: hi!false");
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strMatcher6);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
    }

    @Test
    public void test04749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04749");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder4.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder6.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder0.appendFixedWidthPadRight((java.lang.Object) strBuilder9, (int) (byte) -1, '#');
        org.apache.commons.lang3.text.StrMatcher strMatcher13 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int14 = strBuilder0.lastIndexOf(strMatcher13);
        char[] charArray19 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer21 = new org.apache.commons.lang3.text.StrTokenizer(charArray19, ' ');
        int int22 = strTokenizer21.size();
        boolean boolean23 = strTokenizer21.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher24 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer25 = strTokenizer21.setIgnoredMatcher(strMatcher24);
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder0.deleteFirst(strMatcher24);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder0.minimizeCapacity();
        java.io.Reader reader28 = strBuilder27.asReader();
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strMatcher13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strMatcher24);
        org.junit.Assert.assertNotNull(strTokenizer25);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(reader28);
    }

    @Test
    public void test04750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04750");
        org.apache.commons.lang3.text.StrMatcher strMatcher1 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher("97\n");
        org.junit.Assert.assertNotNull(strMatcher1);
    }

    @Test
    public void test04751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04751");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        boolean boolean8 = strTokenizer6.hasNext();
        java.util.List<java.lang.String> strList9 = strTokenizer6.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder10.replaceFirst("", "");
        char[] charArray14 = strBuilder10.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = new org.apache.commons.lang3.text.StrTokenizer(charArray14, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer17 = new org.apache.commons.lang3.text.StrTokenizer(charArray14);
        boolean boolean18 = strList9.equals((java.lang.Object) charArray14);
        char[] charArray23 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer25 = new org.apache.commons.lang3.text.StrTokenizer(charArray23, ' ');
        int int26 = strTokenizer25.size();
        boolean boolean27 = strTokenizer25.hasNext();
        java.util.List<java.lang.String> strList28 = strTokenizer25.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = new org.apache.commons.lang3.text.StrBuilder();
        int int30 = strBuilder29.capacity();
        java.lang.StringBuffer stringBuffer31 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder29.appendln(stringBuffer31, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder29.insert(1, (double) 32);
        java.lang.String str39 = strBuilder29.rightString((int) ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder29.insert(1, '#');
        boolean boolean43 = strList28.equals((java.lang.Object) strBuilder29);
        boolean boolean44 = strList9.containsAll((java.util.Collection<java.lang.String>) strList28);
        char[] charArray49 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer51 = new org.apache.commons.lang3.text.StrTokenizer(charArray49, ' ');
        int int52 = strTokenizer51.size();
        boolean boolean53 = strTokenizer51.hasNext();
        java.util.List<java.lang.String> strList54 = strTokenizer51.getTokenList();
        java.lang.String[] strArray58 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        boolean boolean61 = strList54.addAll((java.util.Collection<java.lang.String>) strList59);
        boolean boolean62 = strList28.containsAll((java.util.Collection<java.lang.String>) strList59);
        char[] charArray67 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer69 = new org.apache.commons.lang3.text.StrTokenizer(charArray67, ' ');
        java.lang.String str70 = strTokenizer69.next();
        int int71 = strTokenizer69.previousIndex();
        boolean boolean72 = strList28.contains((java.lang.Object) int71);
        java.lang.Object[] objArray73 = strList28.toArray();
        java.util.stream.Stream<java.lang.String> strStream74 = strList28.stream();
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 32 + "'", int30 == 32);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\n32.0" + "'", str39, "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[ , 4, #, 4]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "4#4" + "'", str70, "4#4");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[4#4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[4#4]");
        org.junit.Assert.assertNotNull(strStream74);
    }

    @Test
    public void test04752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04752");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Enumeration<java.lang.Object> objEnumeration1 = properties0.keys();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder2.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder5.appendSeparator('#', (int) (byte) 100);
        java.io.Reader reader9 = strBuilder5.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray15 = strTokenizer14.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder10.appendAll((java.lang.Object[]) strArray15);
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder10.replaceFirst('a', 'a');
        java.util.stream.IntStream intStream20 = strBuilder10.codePoints();
        java.lang.Object obj21 = properties0.replace((java.lang.Object) reader9, (java.lang.Object) intStream20);
        long long23 = reader9.skip(0L);
        boolean boolean24 = reader9.markSupported();
        org.apache.commons.lang3.text.StrSubstitutor strSubstitutor25 = new org.apache.commons.lang3.text.StrSubstitutor();
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = new org.apache.commons.lang3.text.StrBuilder();
        int int27 = strBuilder26.capacity();
        java.lang.StringBuffer stringBuffer28 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder26.appendln(stringBuffer28, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder26.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder33.appendln(true);
        boolean boolean38 = strSubstitutor25.replaceIn(strBuilder35, (int) '$', 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = new org.apache.commons.lang3.text.StrBuilder();
        int int40 = strBuilder39.capacity();
        java.lang.StringBuffer stringBuffer41 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder39.appendln(stringBuffer41, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher45 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int46 = strBuilder44.lastIndexOf(strMatcher45);
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder44.insert((int) (short) 1, 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder49.deleteAll("java.io.IOException: hi!");
        boolean boolean52 = strSubstitutor25.replaceIn(strBuilder49);
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = strBuilder53.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder56.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = strBuilder58.appendPadding((int) '#', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder62 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = strBuilder62.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder65 = strBuilder64.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder67 = strBuilder65.appendln((double) '#');
        boolean boolean68 = strBuilder58.equals(strBuilder67);
        java.util.stream.IntStream intStream69 = strBuilder58.codePoints();
        java.util.Iterator<java.lang.String> strItor70 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder72 = strBuilder58.appendWithSeparators(strItor70, " 4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder75 = strBuilder72.replaceFirst(' ', ' ');
        java.io.Writer writer76 = strBuilder75.asWriter();
        org.apache.commons.lang3.text.StrBuilder strBuilder77 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder80 = strBuilder77.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer82 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher83 = strTokenizer82.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder85 = strBuilder77.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer82, "h");
        org.apache.commons.lang3.text.StrBuilder strBuilder87 = strBuilder77.setLength((int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder90 = strBuilder87.insert((int) '4', (double) (byte) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder93 = strBuilder75.append(strBuilder90, 32, (int) (byte) 10);
        char[] charArray94 = strBuilder90.toCharArray();
        char[] charArray95 = strBuilder49.getChars(charArray94);
        int int96 = reader9.read(charArray95);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer98 = new org.apache.commons.lang3.text.StrTokenizer(charArray95, "\n32.0");
        org.junit.Assert.assertNotNull(objEnumeration1);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(reader9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(intStream20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 32 + "'", int27 == 32);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 32 + "'", int40 == 32);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strMatcher45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(strBuilder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strBuilder56);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertNotNull(strBuilder61);
        org.junit.Assert.assertNotNull(strBuilder64);
        org.junit.Assert.assertNotNull(strBuilder65);
        org.junit.Assert.assertNotNull(strBuilder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intStream69);
        org.junit.Assert.assertNotNull(strBuilder72);
        org.junit.Assert.assertNotNull(strBuilder75);
        org.junit.Assert.assertNotNull(writer76);
        org.junit.Assert.assertNotNull(strBuilder80);
        org.junit.Assert.assertNotNull(strMatcher83);
        org.junit.Assert.assertNotNull(strBuilder85);
        org.junit.Assert.assertNotNull(strBuilder87);
        org.junit.Assert.assertNotNull(strBuilder90);
        org.junit.Assert.assertNotNull(strBuilder93);
        org.junit.Assert.assertNotNull(charArray94);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray94), "#32\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001.0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray94), "#32\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001.0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(charArray95);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray95), "#32\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001.0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray95), "#32\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001.0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
    }

    @Test
    public void test04753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04753");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance("java.io.IOException: {}");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer3 = strTokenizer1.setEmptyTokenAsNull(false);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer5 = strTokenizer1.setQuoteChar('e');
        org.junit.Assert.assertNotNull(strTokenizer1);
        org.junit.Assert.assertNotNull(strTokenizer3);
        org.junit.Assert.assertNotNull(strTokenizer5);
    }

    @Test
    public void test04754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04754");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder2.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = new org.apache.commons.lang3.text.StrBuilder();
        int int5 = strBuilder4.capacity();
        java.lang.StringBuffer stringBuffer6 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder4.appendln(stringBuffer6, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher10 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int11 = strBuilder9.lastIndexOf(strMatcher10);
        boolean boolean12 = strBuilder2.equalsIgnoreCase(strBuilder9);
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder2.insert((int) (byte) 0, (int) (short) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder15.replaceAll("a4", "no");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder18.insert((int) 'g', "\n0");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 103");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strMatcher10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strBuilder18);
    }

    @Test
    public void test04755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04755");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder12.replaceFirst("", "");
        char[] charArray16 = strBuilder12.toCharArray();
        char[] charArray17 = strBuilder9.getChars(charArray16);
        java.io.Reader reader18 = strBuilder9.asReader();
        java.lang.Object obj19 = properties0.remove((java.lang.Object) strBuilder9);
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties20.keys();
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder22.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder25.appendSeparator('#', (int) (byte) 100);
        java.io.Reader reader29 = strBuilder25.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder30.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer34 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray35 = strTokenizer34.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder30.appendAll((java.lang.Object[]) strArray35);
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder30.replaceFirst('a', 'a');
        java.util.stream.IntStream intStream40 = strBuilder30.codePoints();
        java.lang.Object obj41 = properties20.replace((java.lang.Object) reader29, (java.lang.Object) intStream40);
        reader29.reset();
        properties0.load(reader29);
        java.nio.CharBuffer charBuffer44 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int45 = reader29.read(charBuffer44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
        org.junit.Assert.assertNotNull(reader18);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(reader29);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNotNull(intStream40);
        org.junit.Assert.assertNull(obj41);
    }

    @Test
    public void test04756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04756");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder5.appendNewLine();
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder6.appendSeparator('#');
        int int10 = strBuilder6.lastIndexOf('t');
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder11.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder14.replaceFirst("", "");
        char[] charArray18 = strBuilder14.toCharArray();
        char[] charArray19 = strBuilder11.getChars(charArray18);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer20 = new org.apache.commons.lang3.text.StrTokenizer(charArray18);
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder21.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer26 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray27 = strTokenizer26.getTokenArray();
        java.lang.String[] strArray28 = strTokenizer26.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder24.appendWithSeparators((java.lang.Object[]) strArray28, "4#4");
        org.apache.commons.lang3.text.StrMatcher strMatcher31 = org.apache.commons.lang3.text.StrMatcher.tabMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder30.deleteAll(strMatcher31);
        org.apache.commons.lang3.text.StrMatcher strMatcher33 = org.apache.commons.lang3.text.StrMatcher.doubleQuoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer34 = new org.apache.commons.lang3.text.StrTokenizer(charArray18, strMatcher31, strMatcher33);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer35 = new org.apache.commons.lang3.text.StrTokenizer(charArray18);
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder6.append(charArray18);
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder6.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder37.reverse();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strMatcher31);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strMatcher33);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertNotNull(strBuilder38);
    }

    @Test
    public void test04757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04757");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder2.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.ensureCapacity((int) (short) 10);
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder6.replaceFirst("", "");
        java.lang.String str10 = strBuilder6.getNewLineText();
        java.util.stream.IntStream intStream11 = strBuilder6.chars();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder3.append((java.lang.CharSequence) strBuilder6);
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder3.setNewLineText("1");
        java.io.Reader reader15 = strBuilder14.asReader();
        reader15.close();
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(intStream11);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(reader15);
    }

    @Test
    public void test04758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04758");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        char[] charArray4 = strBuilder0.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer8 = strTokenizer6.reset("35.0\n100.0");
        boolean boolean9 = strTokenizer8.isEmptyTokenAsNull();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer11 = strTokenizer8.setDelimiterString("\na32");
        java.lang.String[] strArray12 = strTokenizer11.getTokenArray();
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertNotNull(strTokenizer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strTokenizer11);
        org.junit.Assert.assertNotNull(strArray12);
    }

    @Test
    public void test04759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04759");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder2.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.append((double) 10L);
        java.lang.Object obj6 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder3.appendFixedWidthPadLeft(obj6, (int) (byte) -1, '$');
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.appendln("StrTokenizer[ 4#4]");
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder11.deleteAll("\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder13.reverse();
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder14);
    }

    @Test
    public void test04760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04760");
        java.io.IOException iOException1 = new java.io.IOException("ng3.te");
    }

    @Test
    public void test04761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04761");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer3 = new org.apache.commons.lang3.text.StrTokenizer("\n32.0 100.0", '\000', 's');
    }

    @Test
    public void test04762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04762");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        char[] charArray13 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = new org.apache.commons.lang3.text.StrTokenizer(charArray13, ' ');
        int int16 = strTokenizer15.size();
        boolean boolean17 = strTokenizer15.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher18 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = strTokenizer15.setIgnoredMatcher(strMatcher18);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.replaceFirst("", "");
        java.lang.Object obj24 = properties0.putIfAbsent((java.lang.Object) strMatcher18, (java.lang.Object) strBuilder20);
        java.lang.Object obj27 = properties0.setProperty(" 4#4", "\n32.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder28.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer33 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher34 = strTokenizer33.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder28.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer33, "h");
        int int37 = strTokenizer33.nextIndex();
        boolean boolean38 = properties0.containsValue((java.lang.Object) strTokenizer33);
        java.util.Set<java.lang.Object> objSet39 = properties0.keySet();
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder40.replaceFirst("", "");
        char[] charArray44 = strBuilder40.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer46 = new org.apache.commons.lang3.text.StrTokenizer(charArray44, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer47 = new org.apache.commons.lang3.text.StrTokenizer(charArray44);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer49 = strTokenizer47.setEmptyTokenAsNull(false);
        java.lang.Object obj50 = properties0.get((java.lang.Object) false);
        properties0.clear();
        java.util.Properties properties52 = new java.util.Properties();
        int int53 = properties52.size();
        boolean boolean55 = properties52.containsKey((java.lang.Object) (-1.0f));
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet56 = properties52.entrySet();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties52);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strMatcher18);
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(strMatcher34);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSet39);
        org.junit.Assert.assertNotNull(strBuilder43);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[]");
        org.junit.Assert.assertNotNull(strTokenizer49);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objEntrySet56);
    }

    @Test
    public void test04763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04763");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder4.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder6.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder0.appendFixedWidthPadRight((java.lang.Object) strBuilder9, (int) (byte) -1, '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.append("\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder12.replaceFirst("StrTokenizer[not tokenized yet]", "{}");
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder17.insert((int) (short) 1, (float) (-1));
        java.lang.StringBuffer stringBuffer21 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder17.append(stringBuffer21, (-1), 10);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder24.appendSeparator("{}3.0", "1001\n");
        java.io.Reader reader28 = strBuilder27.asReader();
        java.nio.CharBuffer charBuffer29 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int30 = reader28.read(charBuffer29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(reader28);
    }

    @Test
    public void test04764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04764");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder2.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder5.replaceFirst('a', '4');
        java.io.Writer writer9 = strBuilder8.asWriter();
        properties1.store(writer9, "");
        java.util.Properties properties12 = new java.util.Properties();
        int int13 = properties12.size();
        boolean boolean15 = properties12.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties16 = new java.util.Properties();
        int int17 = properties16.size();
        boolean boolean19 = properties16.containsKey((java.lang.Object) (-1.0f));
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties16.keys();
        boolean boolean22 = properties1.containsValue((java.lang.Object) objEnumeration21);
        properties1.clear();
        java.io.OutputStream outputStream24 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream24, "{}3.0");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(writer9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test04765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04765");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder4.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder6.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder0.appendFixedWidthPadRight((java.lang.Object) strBuilder9, (int) (byte) -1, '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.append("\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder12.setLength(3);
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder17.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder19.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.appendSeparator("hi!", "4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder23.deleteAll("tue");
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder25.append('g');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder12.appendln(strBuilder25, 25, 49);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: startIndex must be valid");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(strBuilder27);
    }

    @Test
    public void test04766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04766");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance("java.io.IOException: {}");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer2 = strTokenizer1.reset();
        boolean boolean3 = strTokenizer1.isEmptyTokenAsNull();
        org.junit.Assert.assertNotNull(strTokenizer1);
        org.junit.Assert.assertNotNull(strTokenizer2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test04767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04767");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder2.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder3.replaceFirst('4', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder3.append((float) 3);
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder3.insert((int) (short) 0, "{}");
        int int16 = strBuilder13.indexOf("#", (int) (byte) 1);
        java.lang.String str19 = strBuilder13.substring((int) (short) 0, (int) (short) 10);
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder13.replaceFirst('t', '$');
        boolean boolean24 = strBuilder13.startsWith("#\n\n32.032.05.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder13.appendln((double) 1);
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{}3.0" + "'", str19, "{}3.0");
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strBuilder26);
    }

    @Test
    public void test04768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04768");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        boolean boolean9 = strBuilder0.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder0.appendSeparator('a', ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder13.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer17 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray18 = strTokenizer17.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder13.appendAll((java.lang.Object[]) strArray18);
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder13.replaceFirst('a', 'a');
        java.lang.StringBuffer stringBuffer23 = strBuilder22.toStringBuffer();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder0.append(stringBuffer23);
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder24.appendln((float) (-1));
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder26.replaceAll("a", "\n32.0a");
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder29.appendNull();
        boolean boolean32 = strBuilder30.startsWith("100.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder30.reverse();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(stringBuffer23);
        org.junit.Assert.assertEquals(stringBuffer23.toString(), "");
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strBuilder33);
    }

    @Test
    public void test04769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04769");
        java.io.IOException iOException1 = new java.io.IOException("hi!");
        java.io.IOException iOException3 = new java.io.IOException("hi!");
        iOException1.addSuppressed((java.lang.Throwable) iOException3);
        java.io.IOException iOException6 = new java.io.IOException("hi!");
        java.io.IOException iOException8 = new java.io.IOException("hi!");
        iOException6.addSuppressed((java.lang.Throwable) iOException8);
        iOException3.addSuppressed((java.lang.Throwable) iOException8);
        java.io.IOException iOException12 = new java.io.IOException("hi!");
        iOException3.addSuppressed((java.lang.Throwable) iOException12);
        java.lang.String str14 = iOException12.toString();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.io.IOException: hi!" + "'", str14, "java.io.IOException: hi!");
    }

    @Test
    public void test04770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04770");
        java.util.Properties properties0 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder4.appendln('#');
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder9.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = new org.apache.commons.lang3.text.StrBuilder();
        int int12 = strBuilder11.capacity();
        java.lang.StringBuffer stringBuffer13 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder11.appendln(stringBuffer13, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher17 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int18 = strBuilder16.lastIndexOf(strMatcher17);
        boolean boolean19 = strBuilder9.equalsIgnoreCase(strBuilder16);
        char[] charArray22 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer23 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray22);
        boolean boolean24 = properties0.replace((java.lang.Object) strBuilder6, (java.lang.Object) strBuilder9, (java.lang.Object) strTokenizer23);
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder9.deleteAll("StrTokenizer[]");
        int int28 = strBuilder26.lastIndexOf('#');
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder29.deleteFirst("");
        int int33 = strBuilder29.indexOf("");
        int int36 = strBuilder29.lastIndexOf('#', (int) (byte) 0);
        boolean boolean38 = strBuilder29.startsWith("4#4");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer39 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance();
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder29.appendAll((java.util.Iterator<java.lang.String>) strTokenizer39);
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder29.appendSeparator("{}");
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder29.append((double) 0.0f);
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder26.append(strBuilder44, 1, 0);
        java.lang.Iterable<java.lang.String> strIterable48 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder26.appendAll(strIterable48);
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder50.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder52.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = strBuilder53.setNullText("");
        char[] charArray56 = strBuilder55.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer58 = new org.apache.commons.lang3.text.StrTokenizer(charArray56, "true\n###################################3\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = strBuilder26.append(charArray56);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder62 = strBuilder59.insert(12, false);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 12");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strMatcher17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strTokenizer39);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertNotNull(strBuilder55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[]");
        org.junit.Assert.assertNotNull(strBuilder59);
    }

    @Test
    public void test04771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04771");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = new org.apache.commons.lang3.text.StrTokenizer("10.0");
    }

    @Test
    public void test04772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04772");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer2 = new org.apache.commons.lang3.text.StrTokenizer("[ 4#4]", 'o');
    }

    @Test
    public void test04773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04773");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher6 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int7 = strBuilder5.lastIndexOf(strMatcher6);
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.lang.Object obj12 = null;
        boolean boolean13 = strList10.contains(obj12);
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder5.appendAll((java.lang.Iterable<java.lang.String>) strList10);
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = new org.apache.commons.lang3.text.StrBuilder((int) (byte) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder16.replaceFirst('$', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder16.append('a');
        int int23 = strBuilder16.lastIndexOf("\n32.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = new org.apache.commons.lang3.text.StrBuilder();
        int int25 = strBuilder24.capacity();
        java.lang.StringBuffer stringBuffer26 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder24.appendln(stringBuffer26, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder24.insert(1, (double) 32);
        boolean boolean33 = strBuilder24.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder24.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder24.clear();
        int int36 = strBuilder35.capacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder16.append(strBuilder35);
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = new org.apache.commons.lang3.text.StrBuilder();
        int int40 = strBuilder39.capacity();
        java.lang.StringBuffer stringBuffer41 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder39.appendln(stringBuffer41, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder39.insert(1, (double) 32);
        java.lang.String str49 = strBuilder39.rightString((int) ' ');
        boolean boolean51 = strBuilder39.startsWith("");
        char[] charArray52 = strBuilder39.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder37.insert((int) (short) 0, charArray52);
        boolean boolean54 = strList10.contains((java.lang.Object) strBuilder37);
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = strBuilder37.minimizeCapacity();
        java.util.Properties properties56 = new java.util.Properties();
        java.util.Enumeration<java.lang.Object> objEnumeration57 = properties56.keys();
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = strBuilder58.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = strBuilder61.appendSeparator('#', (int) (byte) 100);
        java.io.Reader reader65 = strBuilder61.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder66 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder68 = strBuilder66.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer70 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray71 = strTokenizer70.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder72 = strBuilder66.appendAll((java.lang.Object[]) strArray71);
        org.apache.commons.lang3.text.StrBuilder strBuilder75 = strBuilder66.replaceFirst('a', 'a');
        java.util.stream.IntStream intStream76 = strBuilder66.codePoints();
        java.lang.Object obj77 = properties56.replace((java.lang.Object) reader65, (java.lang.Object) intStream76);
        org.apache.commons.lang3.text.StrBuilder strBuilder78 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder81 = strBuilder78.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder83 = strBuilder81.appendln('#');
        java.lang.StringBuffer stringBuffer84 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder87 = strBuilder81.append(stringBuffer84, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder89 = strBuilder81.deleteFirst("hi!");
        char[] charArray90 = strBuilder81.toCharArray();
        int int91 = reader65.read(charArray90);
        org.apache.commons.lang3.text.StrBuilder strBuilder92 = strBuilder37.append(charArray90);
        java.lang.String str93 = strBuilder37.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strMatcher6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 32 + "'", int36 == 32);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 32 + "'", int40 == 32);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\n32.0" + "'", str49, "\n32.0");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "\n32.0");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "\n32.0");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[\n, 3, 2, ., 0]");
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strBuilder55);
        org.junit.Assert.assertNotNull(objEnumeration57);
        org.junit.Assert.assertNotNull(strBuilder61);
        org.junit.Assert.assertNotNull(strBuilder64);
        org.junit.Assert.assertNotNull(reader65);
        org.junit.Assert.assertNotNull(strBuilder68);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strBuilder72);
        org.junit.Assert.assertNotNull(strBuilder75);
        org.junit.Assert.assertNotNull(intStream76);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNotNull(strBuilder81);
        org.junit.Assert.assertNotNull(strBuilder83);
        org.junit.Assert.assertNotNull(strBuilder87);
        org.junit.Assert.assertNotNull(strBuilder89);
        org.junit.Assert.assertNotNull(charArray90);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray90), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray90), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray90), "[#, \n]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(strBuilder92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "\n32.0a#\n" + "'", str93, "\n32.0a#\n");
    }

    @Test
    public void test04774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04774");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.deleteAll('4');
        int int7 = strBuilder5.indexOf('a');
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder5.replaceFirst("java.io.IOException: hi!", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder5.deleteFirst("true");
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.appendln('t');
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder14.appendln(" #\n");
        int int19 = strBuilder14.indexOf(' ', 44);
        int int22 = strBuilder14.lastIndexOf("java.io.IOException: java.io.IOException: \n32.0", 44);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test04775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04775");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray5 = strTokenizer4.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder0.appendAll((java.lang.Object[]) strArray5);
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder0.replaceFirst('a', 'a');
        char[] charArray14 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = new org.apache.commons.lang3.text.StrTokenizer(charArray14, ' ');
        int int17 = strTokenizer16.size();
        boolean boolean18 = strTokenizer16.hasNext();
        java.util.List<java.lang.String> strList19 = strTokenizer16.getTokenList();
        java.lang.String[] strArray23 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        boolean boolean26 = strList19.addAll((java.util.Collection<java.lang.String>) strList24);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder0.appendAll((java.lang.Iterable<java.lang.String>) strList24);
        org.apache.commons.lang3.text.StrSubstitutor strSubstitutor28 = new org.apache.commons.lang3.text.StrSubstitutor();
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = new org.apache.commons.lang3.text.StrBuilder();
        int int30 = strBuilder29.capacity();
        java.lang.StringBuffer stringBuffer31 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder29.appendln(stringBuffer31, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder29.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder36.appendln(true);
        boolean boolean41 = strSubstitutor28.replaceIn(strBuilder38, (int) '$', 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder0.append((java.lang.CharSequence) strBuilder38);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer43 = strBuilder38.asTokenizer();
        java.lang.String str44 = strTokenizer43.nextToken();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer46 = strTokenizer43.reset("100.0[4#4]\n4#4116");
        int int47 = strTokenizer43.previousIndex();
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 32 + "'", int30 == 32);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertNotNull(strTokenizer43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "true" + "'", str44, "true");
        org.junit.Assert.assertNotNull(strTokenizer46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
    }

    @Test
    public void test04776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04776");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance("10.0");
        int int2 = strTokenizer1.size();
        // The following exception was thrown during execution in test generation
        try {
            strTokenizer1.add("10.0StrTokenizer[ 4#4]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: add() is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strTokenizer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test04777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04777");
        org.apache.commons.lang3.text.StrLookup<?> wildcardStrLookup0 = org.apache.commons.lang3.text.StrLookup.noneLookup();
        org.junit.Assert.assertNotNull(wildcardStrLookup0);
    }

    @Test
    public void test04778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04778");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        java.lang.String str10 = strBuilder0.rightString((int) ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder0.replaceAll("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder14.replaceFirst("", "");
        char[] charArray18 = strBuilder14.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer20 = new org.apache.commons.lang3.text.StrTokenizer(charArray18, "");
        boolean boolean21 = strTokenizer20.hasNext();
        boolean boolean22 = strTokenizer20.hasPrevious();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder13.appendAll((java.util.Iterator<java.lang.String>) strTokenizer20);
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder23.append(' ');
        java.lang.String str27 = strBuilder25.leftString(5);
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder25.insert(4, 0);
        java.lang.String str33 = strBuilder25.midString((int) (byte) 10, 26);
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder25.deleteAll('\n');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder35.insert(37, false);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 37");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\n32.0" + "'", str10, "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\n32.0" + "'", str27, "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(strBuilder35);
    }

    @Test
    public void test04779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04779");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder2.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.appendSeparator("hi!", "4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder6.deleteAll("tue");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder8.append('g');
        boolean boolean11 = strBuilder8.isEmpty();
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04780");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("true\n");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer3 = strTokenizer1.setDelimiterString("100.0\000\000\000\000\000");
        java.lang.String str4 = strTokenizer3.next();
        org.junit.Assert.assertNotNull(strTokenizer1);
        org.junit.Assert.assertNotNull(strTokenizer3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "true" + "'", str4, "true");
    }

    @Test
    public void test04781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04781");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = new org.apache.commons.lang3.text.StrTokenizer("#");
        boolean boolean2 = strTokenizer1.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            strTokenizer1.add("not tokenized yet]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: add() is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test04782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04782");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer2 = new org.apache.commons.lang3.text.StrTokenizer("\n32.0", '#');
        boolean boolean3 = strTokenizer2.hasNext();
        java.util.List<java.lang.String> strList4 = strTokenizer2.getTokenList();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = strList4.remove((int) '1');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 49, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test04783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04783");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        int int4 = strBuilder0.indexOf("");
        int int7 = strBuilder0.lastIndexOf('#', (int) (byte) 0);
        boolean boolean9 = strBuilder0.startsWith("4#4");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer10 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder0.appendAll((java.util.Iterator<java.lang.String>) strTokenizer10);
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder0.appendSeparator("{}");
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder0.append((double) 0.0f);
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder16.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer20 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray21 = strTokenizer20.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder16.appendAll((java.lang.Object[]) strArray21);
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder16.replaceFirst('a', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder26.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer30 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray31 = strTokenizer30.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder26.appendAll((java.lang.Object[]) strArray31);
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder16.appendln(strBuilder32);
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder32.appendln((long) 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder32.appendSeparator("hi!", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder39.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = strBuilder42.replaceFirst('a', '4');
        java.io.Writer writer46 = strBuilder45.asWriter();
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = strBuilder47.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder50.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder57 = strBuilder54.replaceFirst("", "");
        char[] charArray58 = strBuilder54.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = strBuilder53.appendln(charArray58);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer60 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray58);
        writer46.write(charArray58);
        org.apache.commons.lang3.text.StrBuilder strBuilder62 = strBuilder38.append(charArray58);
        org.apache.commons.lang3.text.StrMatcher strMatcher63 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray58);
        org.apache.commons.lang3.text.StrBuilder strBuilder65 = strBuilder15.replaceFirst(strMatcher63, "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder68 = strBuilder15.replaceFirst("\n\0002.0java.io.IOException: hi!", "java.io.IOException: java.io.IOException: \n32.0");
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strTokenizer10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertNotNull(strBuilder45);
        org.junit.Assert.assertNotNull(writer46);
        org.junit.Assert.assertNotNull(strBuilder50);
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertNotNull(strBuilder57);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[]");
        org.junit.Assert.assertNotNull(strBuilder59);
        org.junit.Assert.assertNotNull(strTokenizer60);
        org.junit.Assert.assertNotNull(strBuilder62);
        org.junit.Assert.assertNotNull(strMatcher63);
        org.junit.Assert.assertNotNull(strBuilder65);
        org.junit.Assert.assertNotNull(strBuilder68);
    }

    @Test
    public void test04784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04784");
        java.io.IOException iOException1 = new java.io.IOException("#\n4#4");
    }

    @Test
    public void test04785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04785");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer5 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray6 = strTokenizer5.getTokenArray();
        java.lang.String[] strArray7 = strTokenizer5.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder3.appendWithSeparators((java.lang.Object[]) strArray7, "4#4");
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties10.keys();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder12.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder15.appendSeparator('#', (int) (byte) 100);
        java.io.Reader reader19 = strBuilder15.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder20.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer24 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray25 = strTokenizer24.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder20.appendAll((java.lang.Object[]) strArray25);
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder20.replaceFirst('a', 'a');
        java.util.stream.IntStream intStream30 = strBuilder20.codePoints();
        java.lang.Object obj31 = properties10.replace((java.lang.Object) reader19, (java.lang.Object) intStream30);
        long long33 = reader19.skip(0L);
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder34.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer38 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray39 = strTokenizer38.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder34.appendAll((java.lang.Object[]) strArray39);
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder34.replaceFirst('a', 'a');
        java.util.stream.IntStream intStream44 = strBuilder34.codePoints();
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder45.replaceFirst("", "");
        char[] charArray49 = strBuilder45.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer51 = new org.apache.commons.lang3.text.StrTokenizer(charArray49, "");
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder34.appendln(charArray49);
        int int53 = reader19.read(charArray49);
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder3.append(charArray49);
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = strBuilder3.append((long) 4);
        int int59 = strBuilder56.lastIndexOf("true\n###################################", (-1));
        java.util.stream.IntStream intStream60 = strBuilder56.chars();
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(reader19);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(intStream30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNotNull(strBuilder43);
        org.junit.Assert.assertNotNull(intStream44);
        org.junit.Assert.assertNotNull(strBuilder48);
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[]");
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertNotNull(strBuilder56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(intStream60);
    }

    @Test
    public void test04786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04786");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer2 = new org.apache.commons.lang3.text.StrTokenizer("hi!", "");
        // The following exception was thrown during execution in test generation
        try {
            strTokenizer2.add("java.io.IOException: hi!false");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: add() is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04787");
        java.util.Properties properties0 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray7 = strTokenizer6.getTokenArray();
        java.lang.String[] strArray8 = strTokenizer6.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder4.appendWithSeparators((java.lang.Object[]) strArray8, "4#4");
        char[] charArray13 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray13);
        java.lang.Object obj15 = properties0.getOrDefault((java.lang.Object) strBuilder4, (java.lang.Object) strTokenizer14);
        java.util.Collection<java.lang.Object> objCollection16 = properties0.values();
        boolean boolean17 = properties0.isEmpty();
        java.util.Properties properties18 = new java.util.Properties();
        int int19 = properties18.size();
        boolean boolean21 = properties18.containsKey((java.lang.Object) (-1.0f));
        java.lang.Object obj22 = properties18.clone();
        java.lang.Object obj23 = properties18.clone();
        java.util.Enumeration<?> wildcardEnumeration24 = properties18.propertyNames();
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder25.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder27.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder28.setNullText("");
        java.lang.Object obj31 = properties18.remove((java.lang.Object) strBuilder30);
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder32.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder35.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder38.appendSeparator(' ', (int) '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder38.replaceFirst('a', ' ');
        java.lang.String str45 = strBuilder38.getNullText();
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder38.appendln(' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = strBuilder38.insert((int) (short) 1, (int) '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder38.appendln((long) 3);
        java.lang.Object obj53 = properties0.put((java.lang.Object) properties18, (java.lang.Object) strBuilder52);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer56 = new org.apache.commons.lang3.text.StrTokenizer(" 4#4", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer58 = strTokenizer56.reset("{\ntrue\n=1.0}");
        org.apache.commons.lang3.text.StrMatcher strMatcher59 = strTokenizer58.getTrimmerMatcher();
        java.lang.Object obj60 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj61 = properties0.replace((java.lang.Object) strTokenizer58, obj60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{}");
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{}");
        org.junit.Assert.assertNotNull(wildcardEnumeration24);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(strBuilder50);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(strTokenizer58);
        org.junit.Assert.assertNotNull(strMatcher59);
    }

    @Test
    public void test04788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04788");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer3 = new org.apache.commons.lang3.text.StrTokenizer("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$1", 'g', '\n');
    }

    @Test
    public void test04789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04789");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder0.appendPadding(10, ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder7.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer12 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher13 = strTokenizer12.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder7.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer12, "h");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer17 = strTokenizer12.reset("\n32.0");
        org.apache.commons.lang3.text.StrMatcher strMatcher18 = strTokenizer12.getIgnoredMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder6.appendFixedWidthPadRight((java.lang.Object) strTokenizer12, 4, '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder21.appendSeparator(' ', 3);
        java.io.Writer writer25 = strBuilder21.asWriter();
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder26.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder29.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder31.appendPadding((int) '#', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder35.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder37.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder38.appendln((double) '#');
        boolean boolean41 = strBuilder31.equals(strBuilder40);
        java.util.stream.IntStream intStream42 = strBuilder31.codePoints();
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder31.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder31.minimizeCapacity();
        java.lang.String str45 = strBuilder44.getNewLineText();
        boolean boolean46 = strBuilder44.isEmpty();
        java.io.Writer writer47 = writer25.append((java.lang.CharSequence) strBuilder44);
        java.io.Writer writer48 = strBuilder44.asWriter();
        writer48.write((int) 't');
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strMatcher13);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strTokenizer17);
        org.junit.Assert.assertNotNull(strMatcher18);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(writer25);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intStream42);
        org.junit.Assert.assertNotNull(strBuilder43);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(writer47);
        org.junit.Assert.assertNotNull(writer48);
    }

    @Test
    public void test04790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04790");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer5 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray6 = strTokenizer5.getTokenArray();
        java.lang.String[] strArray7 = strTokenizer5.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder3.appendWithSeparators((java.lang.Object[]) strArray7, "4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder3.delete(0, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder3.deleteFirst("StrTokenizer[not");
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder3.replaceFirst('e', 'o');
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder17);
    }

    @Test
    public void test04791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04791");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        java.lang.String str10 = strBuilder0.rightString((int) ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder0.insert(1, '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder13.setCharAt(1, 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder16.append((float) '9');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\n32.0" + "'", str10, "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder18);
    }

    @Test
    public void test04792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04792");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Set<java.lang.Object> objSet9 = properties4.keySet();
        java.util.Collection<java.lang.Object> objCollection10 = properties4.values();
        java.util.Properties properties11 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder12.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer17 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray18 = strTokenizer17.getTokenArray();
        java.lang.String[] strArray19 = strTokenizer17.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder15.appendWithSeparators((java.lang.Object[]) strArray19, "4#4");
        char[] charArray24 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer25 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray24);
        java.lang.Object obj26 = properties11.getOrDefault((java.lang.Object) strBuilder15, (java.lang.Object) strTokenizer25);
        properties11.clear();
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.Object obj29 = properties11.remove((java.lang.Object) properties28);
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder30.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder34.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder36.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder37.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder30.appendFixedWidthPadRight((java.lang.Object) strBuilder39, (int) (byte) -1, '#');
        org.apache.commons.lang3.text.StrMatcher strMatcher43 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int44 = strBuilder30.lastIndexOf(strMatcher43);
        char[] charArray49 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer51 = new org.apache.commons.lang3.text.StrTokenizer(charArray49, ' ');
        int int52 = strTokenizer51.size();
        boolean boolean53 = strTokenizer51.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher54 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer55 = strTokenizer51.setIgnoredMatcher(strMatcher54);
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = strBuilder30.deleteFirst(strMatcher54);
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder56.deleteAll("1");
        boolean boolean59 = properties11.containsKey((java.lang.Object) strBuilder58);
        properties4.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objSet9);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertNotNull(strMatcher43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strMatcher54);
        org.junit.Assert.assertNotNull(strTokenizer55);
        org.junit.Assert.assertNotNull(strBuilder56);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test04793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04793");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.lang.String str10 = properties4.getProperty("h");
        java.util.Enumeration<?> wildcardEnumeration11 = properties4.propertyNames();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet12 = properties4.entrySet();
        java.io.IOException iOException13 = new java.io.IOException();
        java.lang.Throwable[] throwableArray14 = iOException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = iOException13.getSuppressed();
        java.io.IOException iOException16 = new java.io.IOException((java.lang.Throwable) iOException13);
        boolean boolean17 = properties4.containsValue((java.lang.Object) iOException16);
        char[] charArray23 = new char[] { ' ', '4', '#', '#', ' ' };
        org.apache.commons.lang3.text.StrMatcher strMatcher24 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray23);
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = new org.apache.commons.lang3.text.StrBuilder(3);
        char[] charArray27 = strBuilder26.toCharArray();
        org.apache.commons.lang3.text.StrMatcher strMatcher28 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray27);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer29 = new org.apache.commons.lang3.text.StrTokenizer(charArray23, strMatcher28);
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder30.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer34 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray35 = strTokenizer34.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder30.appendAll((java.lang.Object[]) strArray35);
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder30.replaceFirst('a', 'a');
        java.lang.String str41 = strBuilder39.rightString((int) '$');
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder39.ensureCapacity(0);
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = strBuilder39.deleteFirst('$');
        java.lang.Object obj46 = properties4.put((java.lang.Object) strTokenizer29, (java.lang.Object) strBuilder45);
        java.lang.String str47 = properties4.toString();
        int int48 = properties4.size();
        java.lang.String str49 = properties4.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(wildcardEnumeration11);
        org.junit.Assert.assertNotNull(objEntrySet12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), " 4## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), " 4## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[ , 4, #, #,  ]");
        org.junit.Assert.assertNotNull(strMatcher24);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[]");
        org.junit.Assert.assertNotNull(strMatcher28);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strBuilder43);
        org.junit.Assert.assertNotNull(strBuilder45);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "{StrTokenizer[not tokenized yet]=}" + "'", str47, "{StrTokenizer[not tokenized yet]=}");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{StrTokenizer[not tokenized yet]=}" + "'", str49, "{StrTokenizer[not tokenized yet]=}");
    }

    @Test
    public void test04794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04794");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.setLength(32);
        java.io.Writer writer11 = strBuilder10.asWriter();
        writer11.write(" 4#4", (int) (byte) 0, (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = new org.apache.commons.lang3.text.StrBuilder();
        int int17 = strBuilder16.capacity();
        java.lang.StringBuffer stringBuffer18 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder16.appendln(stringBuffer18, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder16.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder23.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder25.append((float) '4');
        java.io.Writer writer28 = writer11.append((java.lang.CharSequence) strBuilder25);
        writer11.close();
        java.io.Writer writer31 = writer11.append(' ');
        char[] charArray32 = null;
        writer11.write(charArray32, 11, 0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(writer11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 32 + "'", int17 == 32);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(writer28);
        org.junit.Assert.assertNotNull(writer31);
    }

    @Test
    public void test04795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04795");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder2.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder5.appendln('#');
        java.lang.StringBuffer stringBuffer8 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder5.append(stringBuffer8, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder5.deleteFirst("hi!");
        char[] charArray14 = strBuilder5.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = strTokenizer1.reset(charArray14);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = strTokenizer15.reset();
        int int17 = strTokenizer16.previousIndex();
        org.apache.commons.lang3.text.StrMatcher strMatcher18 = strTokenizer16.getIgnoredMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = strTokenizer16.reset();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer21 = strTokenizer19.setDelimiterChar('a');
        org.apache.commons.lang3.text.StrMatcher strMatcher22 = strTokenizer21.getQuoteMatcher();
        boolean boolean23 = strTokenizer21.isIgnoreEmptyTokens();
        org.junit.Assert.assertNotNull(strTokenizer1);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, \n]");
        org.junit.Assert.assertNotNull(strTokenizer15);
        org.junit.Assert.assertNotNull(strTokenizer16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(strMatcher18);
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertNotNull(strTokenizer21);
        org.junit.Assert.assertNotNull(strMatcher22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test04796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04796");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray5 = strTokenizer4.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder0.appendAll((java.lang.Object[]) strArray5);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder6.append((double) (short) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder9.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.appendln('#');
        java.lang.StringBuffer stringBuffer15 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder12.append(stringBuffer15, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder12.deleteFirst("hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder12.appendSeparator("4#4", "\n32.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder12.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder6.append((java.lang.CharSequence) strBuilder25);
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder6.replaceFirst("#", "[4#4]");
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder6.append((long) 't');
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder31.insert(0, ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder31.insert(132, (double) 74);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 132");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(strBuilder34);
    }

    @Test
    public void test04797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04797");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        boolean boolean8 = strTokenizer6.hasNext();
        java.util.List<java.lang.String> strList9 = strTokenizer6.getTokenList();
        java.lang.String[] strArray13 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        boolean boolean16 = strList9.addAll((java.util.Collection<java.lang.String>) strList14);
        char[] charArray21 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer23 = new org.apache.commons.lang3.text.StrTokenizer(charArray21, ' ');
        int int24 = strTokenizer23.size();
        boolean boolean25 = strTokenizer23.hasNext();
        java.util.List<java.lang.String> strList26 = strTokenizer23.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder27.replaceFirst("", "");
        char[] charArray31 = strBuilder27.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer33 = new org.apache.commons.lang3.text.StrTokenizer(charArray31, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer34 = new org.apache.commons.lang3.text.StrTokenizer(charArray31);
        boolean boolean35 = strList26.equals((java.lang.Object) charArray31);
        char[] charArray40 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer42 = new org.apache.commons.lang3.text.StrTokenizer(charArray40, ' ');
        int int43 = strTokenizer42.size();
        boolean boolean44 = strTokenizer42.hasNext();
        java.util.List<java.lang.String> strList45 = strTokenizer42.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = new org.apache.commons.lang3.text.StrBuilder();
        int int47 = strBuilder46.capacity();
        java.lang.StringBuffer stringBuffer48 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder46.appendln(stringBuffer48, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder46.insert(1, (double) 32);
        java.lang.String str56 = strBuilder46.rightString((int) ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = strBuilder46.insert(1, '#');
        boolean boolean60 = strList45.equals((java.lang.Object) strBuilder46);
        boolean boolean61 = strList26.containsAll((java.util.Collection<java.lang.String>) strList45);
        boolean boolean62 = strList9.addAll((java.util.Collection<java.lang.String>) strList45);
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder65 = strBuilder63.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer67 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray68 = strTokenizer67.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder69 = strBuilder63.appendAll((java.lang.Object[]) strArray68);
        org.apache.commons.lang3.text.StrBuilder strBuilder71 = strBuilder69.append((double) (short) 100);
        char[] charArray72 = strBuilder69.toCharArray();
        boolean boolean73 = strList45.contains((java.lang.Object) charArray72);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList76 = strList45.subList(101, 158);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 158");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 32 + "'", int47 == 32);
        org.junit.Assert.assertNotNull(strBuilder51);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\n32.0" + "'", str56, "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strBuilder65);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strBuilder69);
        org.junit.Assert.assertNotNull(strBuilder71);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "100.0");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "100.0");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[1, 0, 0, ., 0]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test04798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04798");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        java.lang.Object obj2 = properties0.clone();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder9.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder3.appendFixedWidthPadRight((java.lang.Object) strBuilder12, (int) (byte) -1, '#');
        java.lang.Object obj16 = properties0.get((java.lang.Object) strBuilder3);
        java.util.Properties properties17 = new java.util.Properties();
        int int18 = properties17.size();
        boolean boolean20 = properties17.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties21 = new java.util.Properties();
        int int22 = properties21.size();
        boolean boolean24 = properties21.containsKey((java.lang.Object) (-1.0f));
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        char[] charArray30 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer32 = new org.apache.commons.lang3.text.StrTokenizer(charArray30, ' ');
        int int33 = strTokenizer32.size();
        boolean boolean34 = strTokenizer32.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher35 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer36 = strTokenizer32.setIgnoredMatcher(strMatcher35);
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder37.replaceFirst("", "");
        java.lang.Object obj41 = properties17.putIfAbsent((java.lang.Object) strMatcher35, (java.lang.Object) strBuilder37);
        boolean boolean42 = strBuilder3.equals(obj41);
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder3.appendln((long) (short) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder44.replaceFirst('4', ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder44.appendln((float) (byte) -1);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer51 = new org.apache.commons.lang3.text.StrTokenizer("{}");
        boolean boolean52 = strTokenizer51.hasNext();
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder44.appendAll((java.util.Iterator<java.lang.String>) strTokenizer51);
        boolean boolean54 = strTokenizer51.hasPrevious();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strMatcher35);
        org.junit.Assert.assertNotNull(strTokenizer36);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test04799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04799");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray5 = strTokenizer4.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder0.appendAll((java.lang.Object[]) strArray5);
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder0.replaceFirst('a', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray15 = strTokenizer14.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder10.appendAll((java.lang.Object[]) strArray15);
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder0.appendln(strBuilder16);
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder16.appendln((long) 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder16.appendSeparator("hi!", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = new org.apache.commons.lang3.text.StrBuilder();
        int int24 = strBuilder23.capacity();
        java.lang.StringBuffer stringBuffer25 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder23.appendln(stringBuffer25, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder23.insert(1, (double) 32);
        java.lang.String str33 = strBuilder23.rightString((int) ' ');
        boolean boolean35 = strBuilder23.startsWith("");
        char[] charArray36 = strBuilder23.toCharArray();
        org.apache.commons.lang3.text.StrMatcher strMatcher37 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray36);
        boolean boolean38 = strBuilder22.contains(strMatcher37);
        int int41 = strBuilder22.indexOf('t', (int) (short) -1);
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder22.appendSeparator('$');
        java.io.Reader reader44 = strBuilder22.asReader();
        int int47 = strBuilder22.lastIndexOf('$', (int) (short) 10);
        boolean boolean49 = strBuilder22.startsWith("\n32.032");
        boolean boolean50 = strBuilder22.isEmpty();
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 32 + "'", int24 == 32);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\n32.0" + "'", str33, "\n32.0");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "\n32.0");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "\n32.0");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[\n, 3, 2, ., 0]");
        org.junit.Assert.assertNotNull(strMatcher37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(strBuilder43);
        org.junit.Assert.assertNotNull(reader44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test04800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04800");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder5.appendPadding((int) '#', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder11.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.appendln((double) '#');
        boolean boolean15 = strBuilder5.equals(strBuilder14);
        java.util.stream.IntStream intStream16 = strBuilder5.codePoints();
        java.util.Iterator<java.lang.String> strItor17 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder5.appendWithSeparators(strItor17, " 4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder19.replaceFirst(' ', ' ');
        int int24 = strBuilder22.lastIndexOf(' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder25.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder28.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder32.replaceFirst("", "");
        char[] charArray36 = strBuilder32.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder31.appendln(charArray36);
        java.lang.String str38 = strBuilder37.getNewLineText();
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder37.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder41.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder45.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder47.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = strBuilder48.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder41.appendFixedWidthPadRight((java.lang.Object) strBuilder50, (int) (byte) -1, '#');
        org.apache.commons.lang3.text.StrMatcher strMatcher54 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int55 = strBuilder41.lastIndexOf(strMatcher54);
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = strBuilder40.append(strBuilder41);
        char[] charArray61 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer63 = new org.apache.commons.lang3.text.StrTokenizer(charArray61, ' ');
        int int64 = strTokenizer63.size();
        boolean boolean65 = strTokenizer63.hasNext();
        java.util.List<java.lang.String> strList66 = strTokenizer63.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder67 = new org.apache.commons.lang3.text.StrBuilder();
        int int68 = strBuilder67.capacity();
        java.lang.StringBuffer stringBuffer69 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder72 = strBuilder67.appendln(stringBuffer69, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder75 = strBuilder67.insert(1, (double) 32);
        java.lang.String str77 = strBuilder67.rightString((int) ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder80 = strBuilder67.insert(1, '#');
        boolean boolean81 = strList66.equals((java.lang.Object) strBuilder67);
        org.apache.commons.lang3.text.StrBuilder strBuilder82 = strBuilder40.appendln((java.lang.Object) strBuilder67);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder85 = strBuilder22.append((java.lang.CharSequence) strBuilder82, (int) '\n', 116);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: length must be valid");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intStream16);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[]");
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(strBuilder48);
        org.junit.Assert.assertNotNull(strBuilder50);
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertNotNull(strMatcher54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(strBuilder56);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 32 + "'", int68 == 32);
        org.junit.Assert.assertNotNull(strBuilder72);
        org.junit.Assert.assertNotNull(strBuilder75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\n32.0" + "'", str77, "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strBuilder82);
    }

    @Test
    public void test04801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04801");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        char[] charArray13 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = new org.apache.commons.lang3.text.StrTokenizer(charArray13, ' ');
        int int16 = strTokenizer15.size();
        boolean boolean17 = strTokenizer15.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher18 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = strTokenizer15.setIgnoredMatcher(strMatcher18);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.replaceFirst("", "");
        java.lang.Object obj24 = properties0.putIfAbsent((java.lang.Object) strMatcher18, (java.lang.Object) strBuilder20);
        boolean boolean25 = properties0.isEmpty();
        java.util.Set<java.lang.String> strSet26 = properties0.stringPropertyNames();
        java.lang.String str28 = properties0.getProperty("#\nStrTokenizer[not tokenized yet]ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt#");
        java.util.Properties properties29 = new java.util.Properties(properties0);
        boolean boolean30 = properties0.isEmpty();
        java.util.Set<java.lang.Object> objSet31 = properties0.keySet();
        java.io.InputStream inputStream32 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.loadFromXML(inputStream32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strMatcher18);
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objSet31);
    }

    @Test
    public void test04802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04802");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("StrTokenizer[]");
        java.lang.String str2 = strTokenizer1.next();
        boolean boolean3 = strTokenizer1.hasPrevious();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer("\n32.0", '#');
        org.apache.commons.lang3.text.StrMatcher strMatcher7 = strTokenizer6.getDelimiterMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer8 = strTokenizer1.setIgnoredMatcher(strMatcher7);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer9 = strTokenizer8.reset();
        java.lang.String str10 = strTokenizer8.getContent();
        org.junit.Assert.assertNotNull(strTokenizer1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "StrTokenizer[]" + "'", str2, "StrTokenizer[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strMatcher7);
        org.junit.Assert.assertNotNull(strTokenizer8);
        org.junit.Assert.assertNotNull(strTokenizer9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "StrTokenizer[]" + "'", str10, "StrTokenizer[]");
    }

    @Test
    public void test04803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04803");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer5 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray6 = strTokenizer5.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder0.appendAll((java.lang.Object[]) strArray6);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder8.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder10.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder11.ensureCapacity((int) (short) 10);
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder14.replaceFirst("", "");
        java.lang.String str18 = strBuilder14.getNewLineText();
        java.util.stream.IntStream intStream19 = strBuilder14.chars();
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder11.append((java.lang.CharSequence) strBuilder14);
        char[] charArray23 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer24 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray23);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer26 = strTokenizer24.setDelimiterString("hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = new org.apache.commons.lang3.text.StrBuilder();
        int int28 = strBuilder27.capacity();
        java.lang.StringBuffer stringBuffer29 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder27.appendln(stringBuffer29, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder27.insert(1, (double) 32);
        java.lang.String str37 = strBuilder27.rightString((int) ' ');
        boolean boolean39 = strBuilder27.startsWith("");
        char[] charArray40 = strBuilder27.toCharArray();
        org.apache.commons.lang3.text.StrMatcher strMatcher41 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray40);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer42 = strTokenizer26.setDelimiterMatcher(strMatcher41);
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder11.deleteFirst(strMatcher41);
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder0.appendln((java.lang.Object) strBuilder11);
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder11.replaceFirst("a", "\n2.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = strBuilder11.replaceAll('o', 's');
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(intStream19);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer24);
        org.junit.Assert.assertNotNull(strTokenizer26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 32 + "'", int28 == 32);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\n32.0" + "'", str37, "\n32.0");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "\n32.0");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "\n32.0");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[\n, 3, 2, ., 0]");
        org.junit.Assert.assertNotNull(strMatcher41);
        org.junit.Assert.assertNotNull(strTokenizer42);
        org.junit.Assert.assertNotNull(strBuilder43);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(strBuilder50);
    }

    @Test
    public void test04804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04804");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher2 = strTokenizer1.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = strTokenizer1.reset("");
        java.lang.String str5 = strTokenizer4.nextToken();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer7 = strTokenizer4.setIgnoreEmptyTokens(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder8.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder10.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder11.appendSeparator("hi!", "4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = new org.apache.commons.lang3.text.StrBuilder();
        int int16 = strBuilder15.capacity();
        java.lang.StringBuffer stringBuffer17 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder15.appendln(stringBuffer17, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher21 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int22 = strBuilder20.lastIndexOf(strMatcher21);
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder11.replaceFirst(strMatcher21, "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer25 = strTokenizer4.setIgnoredMatcher(strMatcher21);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer27 = strTokenizer25.setIgnoredChar('4');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer29 = strTokenizer25.setQuoteChar('a');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = strTokenizer25.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMatcher2);
        org.junit.Assert.assertNotNull(strTokenizer4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strTokenizer7);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 32 + "'", int16 == 32);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertNotNull(strMatcher21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strTokenizer25);
        org.junit.Assert.assertNotNull(strTokenizer27);
        org.junit.Assert.assertNotNull(strTokenizer29);
    }

    @Test
    public void test04805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04805");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.setLength(32);
        java.io.Writer writer11 = strBuilder10.asWriter();
        writer11.write(" 4#4", (int) (byte) 0, (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = new org.apache.commons.lang3.text.StrBuilder();
        int int17 = strBuilder16.capacity();
        java.lang.StringBuffer stringBuffer18 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder16.appendln(stringBuffer18, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder16.insert(1, (double) 32);
        java.lang.String str26 = strBuilder16.rightString((int) ' ');
        boolean boolean28 = strBuilder16.startsWith("");
        char[] charArray29 = strBuilder16.toCharArray();
        org.apache.commons.lang3.text.StrMatcher strMatcher30 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray29);
        writer11.write(charArray29);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer33 = new org.apache.commons.lang3.text.StrTokenizer(charArray29, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer35 = new org.apache.commons.lang3.text.StrTokenizer(charArray29, "java.io.IOException: \n");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer36 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray29);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(writer11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 32 + "'", int17 == 32);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\n32.0" + "'", str26, "\n32.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "\n32.0");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "\n32.0");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[\n, 3, 2, ., 0]");
        org.junit.Assert.assertNotNull(strMatcher30);
        org.junit.Assert.assertNotNull(strTokenizer36);
    }

    @Test
    public void test04806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04806");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        java.lang.Object obj2 = properties0.clone();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder9.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder3.appendFixedWidthPadRight((java.lang.Object) strBuilder12, (int) (byte) -1, '#');
        java.lang.Object obj16 = properties0.get((java.lang.Object) strBuilder3);
        java.util.Properties properties17 = new java.util.Properties();
        int int18 = properties17.size();
        boolean boolean20 = properties17.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties21 = new java.util.Properties();
        int int22 = properties21.size();
        boolean boolean24 = properties21.containsKey((java.lang.Object) (-1.0f));
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        char[] charArray30 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer32 = new org.apache.commons.lang3.text.StrTokenizer(charArray30, ' ');
        int int33 = strTokenizer32.size();
        boolean boolean34 = strTokenizer32.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher35 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer36 = strTokenizer32.setIgnoredMatcher(strMatcher35);
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder37.replaceFirst("", "");
        java.lang.Object obj41 = properties17.putIfAbsent((java.lang.Object) strMatcher35, (java.lang.Object) strBuilder37);
        boolean boolean42 = strBuilder3.equals(obj41);
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder3.appendln((long) (short) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = strBuilder3.clear();
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = strBuilder3.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder46.appendln((long) 74);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder48.insert(112, 'o');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 112");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strMatcher35);
        org.junit.Assert.assertNotNull(strTokenizer36);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strBuilder45);
        org.junit.Assert.assertNotNull(strBuilder46);
        org.junit.Assert.assertNotNull(strBuilder48);
    }

    @Test
    public void test04807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04807");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.appendln('#');
        int int7 = strBuilder3.lastIndexOf(" 4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder3.replace((int) (byte) 0, (int) (byte) 100, "a4");
        java.util.stream.IntStream intStream12 = strBuilder3.codePoints();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder3.appendln((int) '\000');
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(intStream12);
        org.junit.Assert.assertNotNull(strBuilder14);
    }

    @Test
    public void test04808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04808");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst('a', '4');
        char[] charArray7 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder3.appendln(charArray7, (int) (short) 1, 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder10.insert(0, (int) (short) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder13.appendPadding((int) (byte) 0, '$');
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder16.appendPadding((int) (byte) 0, ' ');
        char[] charArray24 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer26 = new org.apache.commons.lang3.text.StrTokenizer(charArray24, ' ');
        int int27 = strTokenizer26.size();
        boolean boolean28 = strTokenizer26.hasNext();
        java.util.List<java.lang.String> strList29 = strTokenizer26.getTokenList();
        java.lang.String[] strArray33 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        boolean boolean36 = strList29.addAll((java.util.Collection<java.lang.String>) strList34);
        char[] charArray41 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer43 = new org.apache.commons.lang3.text.StrTokenizer(charArray41, ' ');
        int int44 = strTokenizer43.size();
        boolean boolean45 = strTokenizer43.hasNext();
        java.util.List<java.lang.String> strList46 = strTokenizer43.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = strBuilder47.replaceFirst("", "");
        char[] charArray51 = strBuilder47.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer53 = new org.apache.commons.lang3.text.StrTokenizer(charArray51, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer54 = new org.apache.commons.lang3.text.StrTokenizer(charArray51);
        boolean boolean55 = strList46.equals((java.lang.Object) charArray51);
        char[] charArray60 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer62 = new org.apache.commons.lang3.text.StrTokenizer(charArray60, ' ');
        int int63 = strTokenizer62.size();
        boolean boolean64 = strTokenizer62.hasNext();
        java.util.List<java.lang.String> strList65 = strTokenizer62.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder66 = new org.apache.commons.lang3.text.StrBuilder();
        int int67 = strBuilder66.capacity();
        java.lang.StringBuffer stringBuffer68 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder71 = strBuilder66.appendln(stringBuffer68, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder74 = strBuilder66.insert(1, (double) 32);
        java.lang.String str76 = strBuilder66.rightString((int) ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder79 = strBuilder66.insert(1, '#');
        boolean boolean80 = strList65.equals((java.lang.Object) strBuilder66);
        boolean boolean81 = strList46.containsAll((java.util.Collection<java.lang.String>) strList65);
        boolean boolean82 = strList29.addAll((java.util.Collection<java.lang.String>) strList65);
        org.apache.commons.lang3.text.StrBuilder strBuilder83 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder86 = strBuilder83.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder88 = strBuilder86.appendln('#');
        java.lang.StringBuffer stringBuffer89 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder92 = strBuilder86.append(stringBuffer89, (int) (byte) -1, (int) (byte) 100);
        int int93 = strList29.lastIndexOf((java.lang.Object) stringBuffer89);
        java.util.ListIterator<java.lang.String> strItor95 = strList29.listIterator((int) (short) 0);
        boolean boolean96 = strList29.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder97 = strBuilder19.appendAll((java.lang.Iterable<java.lang.String>) strList29);
        org.apache.commons.lang3.text.StrBuilder strBuilder99 = strBuilder19.deleteAll("StrTokenizer[#]");
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(strBuilder50);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 32 + "'", int67 == 32);
        org.junit.Assert.assertNotNull(strBuilder71);
        org.junit.Assert.assertNotNull(strBuilder74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\n32.0" + "'", str76, "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(strBuilder86);
        org.junit.Assert.assertNotNull(strBuilder88);
        org.junit.Assert.assertNotNull(strBuilder92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNotNull(strItor95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(strBuilder97);
        org.junit.Assert.assertNotNull(strBuilder99);
    }

    @Test
    public void test04809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04809");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet9 = properties4.entrySet();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray15 = strTokenizer14.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder10.appendAll((java.lang.Object[]) strArray15);
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder10.replaceFirst('a', 'a');
        java.lang.StringBuffer stringBuffer20 = strBuilder19.toStringBuffer();
        char[] charArray25 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer27 = new org.apache.commons.lang3.text.StrTokenizer(charArray25, ' ');
        int int28 = strTokenizer27.size();
        boolean boolean29 = strTokenizer27.hasNext();
        java.util.List<java.lang.String> strList30 = strTokenizer27.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder31.replaceFirst("", "");
        char[] charArray35 = strBuilder31.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer37 = new org.apache.commons.lang3.text.StrTokenizer(charArray35, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer38 = new org.apache.commons.lang3.text.StrTokenizer(charArray35);
        boolean boolean39 = strList30.equals((java.lang.Object) charArray35);
        char[] charArray44 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer46 = new org.apache.commons.lang3.text.StrTokenizer(charArray44, ' ');
        int int47 = strTokenizer46.size();
        boolean boolean48 = strTokenizer46.hasNext();
        java.util.List<java.lang.String> strList49 = strTokenizer46.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = new org.apache.commons.lang3.text.StrBuilder();
        int int51 = strBuilder50.capacity();
        java.lang.StringBuffer stringBuffer52 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = strBuilder50.appendln(stringBuffer52, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder50.insert(1, (double) 32);
        java.lang.String str60 = strBuilder50.rightString((int) ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = strBuilder50.insert(1, '#');
        boolean boolean64 = strList49.equals((java.lang.Object) strBuilder50);
        boolean boolean65 = strList30.containsAll((java.util.Collection<java.lang.String>) strList49);
        org.apache.commons.lang3.text.StrBuilder strBuilder66 = strBuilder19.appendAll((java.lang.Iterable<java.lang.String>) strList49);
        org.apache.commons.lang3.text.StrBuilder strBuilder67 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder70 = strBuilder67.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder72 = strBuilder67.deleteAll('4');
        int int74 = strBuilder72.indexOf('a');
        java.lang.String str77 = strBuilder72.midString((int) (byte) 10, 32);
        java.lang.Object obj78 = properties4.getOrDefault((java.lang.Object) strBuilder19, (java.lang.Object) str77);
        org.apache.commons.lang3.text.StrBuilder strBuilder80 = strBuilder19.appendln(false);
        org.apache.commons.lang3.text.StrBuilder strBuilder81 = strBuilder80.appendNewLine();
        java.lang.String str83 = strBuilder81.leftString(0);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer84 = strBuilder81.asTokenizer();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objEntrySet9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(stringBuffer20);
        org.junit.Assert.assertEquals(stringBuffer20.toString(), "");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 32 + "'", int51 == 32);
        org.junit.Assert.assertNotNull(strBuilder55);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\n32.0" + "'", str60, "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strBuilder66);
        org.junit.Assert.assertNotNull(strBuilder70);
        org.junit.Assert.assertNotNull(strBuilder72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + obj78 + "' != '" + "" + "'", obj78, "");
        org.junit.Assert.assertNotNull(strBuilder80);
        org.junit.Assert.assertNotNull(strBuilder81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(strTokenizer84);
    }

    @Test
    public void test04810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04810");
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder((int) (byte) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst('$', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder1.append('a');
        boolean boolean8 = strBuilder6.endsWith("100.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder6.append('4');
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder6.append((double) 3);
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder12.append(false);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder16.appendFixedWidthPadRight((int) (short) 10, 1, '#');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence23 = strBuilder16.subSequence(13, 200);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 200");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder20);
    }

    @Test
    public void test04811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04811");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder2.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.append((double) 10L);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder3.replaceAll("4#4", "\n32.0");
        java.util.stream.IntStream intStream9 = strBuilder8.chars();
        boolean boolean11 = strBuilder8.contains("\n#32.0");
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(intStream9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04812");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        boolean boolean8 = strTokenizer6.hasNext();
        java.util.List<java.lang.String> strList9 = strTokenizer6.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        int int11 = strBuilder10.capacity();
        java.lang.StringBuffer stringBuffer12 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder10.appendln(stringBuffer12, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder10.insert(1, (double) 32);
        java.lang.String str20 = strBuilder10.rightString((int) ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder10.insert(1, '#');
        boolean boolean24 = strList9.equals((java.lang.Object) strBuilder10);
        java.lang.Throwable throwable26 = null;
        java.io.IOException iOException27 = new java.io.IOException("{}", throwable26);
        java.lang.Throwable[] throwableArray28 = iOException27.getSuppressed();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder10.appendWithSeparators((java.lang.Object[]) throwableArray28, "10.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder10.appendNewLine();
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder10.insert(0, 4);
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder34.replaceFirst("false", "java.io.IOException: java.io.IOException: StrTokenizer[]");
        java.lang.String str38 = strBuilder34.toString();
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\n32.0" + "'", str20, "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "4\n#32.0\n" + "'", str38, "4\n#32.0\n");
    }

    @Test
    public void test04813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04813");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder4.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder6.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder0.appendFixedWidthPadRight((java.lang.Object) strBuilder9, (int) (byte) -1, '#');
        org.apache.commons.lang3.text.StrMatcher strMatcher13 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int14 = strBuilder0.lastIndexOf(strMatcher13);
        char[] charArray19 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer21 = new org.apache.commons.lang3.text.StrTokenizer(charArray19, ' ');
        int int22 = strTokenizer21.size();
        boolean boolean23 = strTokenizer21.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher24 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer25 = strTokenizer21.setIgnoredMatcher(strMatcher24);
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder0.deleteFirst(strMatcher24);
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder0.appendln(0.0d);
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder28.appendln((double) 45);
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder28.appendSeparator("#\ntrue\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder28.replaceAll('o', '4');
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strMatcher13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strMatcher24);
        org.junit.Assert.assertNotNull(strTokenizer25);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strBuilder35);
    }

    @Test
    public void test04814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04814");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        boolean boolean8 = strTokenizer6.hasNext();
        java.util.List<java.lang.String> strList9 = strTokenizer6.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        int int11 = strBuilder10.capacity();
        java.lang.StringBuffer stringBuffer12 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder10.appendln(stringBuffer12, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder10.insert(1, (double) 32);
        java.lang.String str20 = strBuilder10.rightString((int) ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder10.insert(1, '#');
        boolean boolean24 = strList9.equals((java.lang.Object) strBuilder10);
        java.lang.Throwable throwable26 = null;
        java.io.IOException iOException27 = new java.io.IOException("{}", throwable26);
        java.lang.Throwable[] throwableArray28 = iOException27.getSuppressed();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder10.appendWithSeparators((java.lang.Object[]) throwableArray28, "10.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder30.appendNull();
        java.lang.Class<?> wildcardClass32 = strBuilder30.getClass();
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\n32.0" + "'", str20, "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test04815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04815");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray5 = strTokenizer4.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder0.appendAll((java.lang.Object[]) strArray5);
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder0.replaceFirst('a', 'a');
        java.lang.String str11 = strBuilder9.rightString((int) '$');
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder9.ensureCapacity(0);
        boolean boolean15 = strBuilder9.endsWith("\n32");
        int int18 = strBuilder9.lastIndexOf('#', 6);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder9.append((long) 57);
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(strBuilder20);
    }

    @Test
    public void test04816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04816");
        java.io.IOException iOException1 = new java.io.IOException("\n32.0a");
    }

    @Test
    public void test04817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04817");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        char[] charArray13 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = new org.apache.commons.lang3.text.StrTokenizer(charArray13, ' ');
        int int16 = strTokenizer15.size();
        boolean boolean17 = strTokenizer15.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher18 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = strTokenizer15.setIgnoredMatcher(strMatcher18);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.replaceFirst("", "");
        java.lang.Object obj24 = properties0.putIfAbsent((java.lang.Object) strMatcher18, (java.lang.Object) strBuilder20);
        java.util.Properties properties25 = new java.util.Properties();
        java.util.Properties properties26 = new java.util.Properties(properties25);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder27.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder30.replaceFirst('a', '4');
        java.io.Writer writer34 = strBuilder33.asWriter();
        properties26.store(writer34, "");
        java.util.Properties properties37 = new java.util.Properties();
        int int38 = properties37.size();
        boolean boolean40 = properties37.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties41 = new java.util.Properties();
        int int42 = properties41.size();
        boolean boolean44 = properties41.containsKey((java.lang.Object) (-1.0f));
        properties37.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties41.keys();
        boolean boolean47 = properties26.containsValue((java.lang.Object) objEnumeration46);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet49 = properties0.entrySet();
        java.util.Properties properties50 = new java.util.Properties(properties0);
        java.util.Properties properties51 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = strBuilder52.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer57 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray58 = strTokenizer57.getTokenArray();
        java.lang.String[] strArray59 = strTokenizer57.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = strBuilder55.appendWithSeparators((java.lang.Object[]) strArray59, "4#4");
        char[] charArray64 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer65 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray64);
        java.lang.Object obj66 = properties51.getOrDefault((java.lang.Object) strBuilder55, (java.lang.Object) strTokenizer65);
        int int67 = properties51.size();
        int int68 = properties51.size();
        java.util.Set<java.lang.String> strSet69 = properties51.stringPropertyNames();
        org.apache.commons.lang3.text.StrBuilder strBuilder70 = new org.apache.commons.lang3.text.StrBuilder();
        int int71 = strBuilder70.capacity();
        java.lang.StringBuffer stringBuffer72 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder75 = strBuilder70.appendln(stringBuffer72, (int) '#', (int) (byte) 0);
        java.util.stream.IntStream intStream76 = strBuilder70.codePoints();
        boolean boolean77 = properties51.containsKey((java.lang.Object) strBuilder70);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties51);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strMatcher18);
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(writer34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objEnumeration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objEntrySet49);
        org.junit.Assert.assertNotNull(strBuilder55);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strBuilder61);
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 32 + "'", int71 == 32);
        org.junit.Assert.assertNotNull(strBuilder75);
        org.junit.Assert.assertNotNull(intStream76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test04818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04818");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        java.lang.Object obj2 = properties0.clone();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder9.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder3.appendFixedWidthPadRight((java.lang.Object) strBuilder12, (int) (byte) -1, '#');
        java.lang.Object obj16 = properties0.get((java.lang.Object) strBuilder3);
        java.util.Properties properties17 = new java.util.Properties();
        int int18 = properties17.size();
        boolean boolean20 = properties17.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties21 = new java.util.Properties();
        int int22 = properties21.size();
        boolean boolean24 = properties21.containsKey((java.lang.Object) (-1.0f));
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        char[] charArray30 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer32 = new org.apache.commons.lang3.text.StrTokenizer(charArray30, ' ');
        int int33 = strTokenizer32.size();
        boolean boolean34 = strTokenizer32.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher35 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer36 = strTokenizer32.setIgnoredMatcher(strMatcher35);
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder37.replaceFirst("", "");
        java.lang.Object obj41 = properties17.putIfAbsent((java.lang.Object) strMatcher35, (java.lang.Object) strBuilder37);
        boolean boolean42 = strBuilder3.equals(obj41);
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder3.appendln((double) 100L);
        java.util.stream.IntStream intStream45 = strBuilder3.chars();
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder3.append((double) '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder3.ensureCapacity((int) (short) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder50.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = strBuilder53.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder55.appendPadding((int) '#', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = strBuilder59.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder62 = strBuilder61.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = strBuilder62.appendln((double) '#');
        boolean boolean65 = strBuilder55.equals(strBuilder64);
        java.util.stream.IntStream intStream66 = strBuilder55.codePoints();
        java.util.Iterator<java.lang.String> strItor67 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder69 = strBuilder55.appendWithSeparators(strItor67, " 4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder72 = strBuilder69.replaceFirst(' ', ' ');
        java.io.Writer writer73 = strBuilder72.asWriter();
        org.apache.commons.lang3.text.StrBuilder strBuilder74 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder77 = strBuilder74.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer79 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher80 = strTokenizer79.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder82 = strBuilder74.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer79, "h");
        org.apache.commons.lang3.text.StrBuilder strBuilder84 = strBuilder74.setLength((int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder87 = strBuilder84.insert((int) '4', (double) (byte) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder90 = strBuilder72.append(strBuilder87, 32, (int) (byte) 10);
        char[] charArray91 = strBuilder87.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder93 = strBuilder87.appendln("");
        org.apache.commons.lang3.text.StrBuilder strBuilder94 = strBuilder49.append((java.lang.Object) strBuilder87);
        org.apache.commons.lang3.text.StrBuilder strBuilder96 = strBuilder87.appendln("########");
        org.apache.commons.lang3.text.StrBuilder strBuilder97 = strBuilder87.reverse();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strMatcher35);
        org.junit.Assert.assertNotNull(strTokenizer36);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(intStream45);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertNotNull(strBuilder55);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertNotNull(strBuilder61);
        org.junit.Assert.assertNotNull(strBuilder62);
        org.junit.Assert.assertNotNull(strBuilder64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intStream66);
        org.junit.Assert.assertNotNull(strBuilder69);
        org.junit.Assert.assertNotNull(strBuilder72);
        org.junit.Assert.assertNotNull(writer73);
        org.junit.Assert.assertNotNull(strBuilder77);
        org.junit.Assert.assertNotNull(strMatcher80);
        org.junit.Assert.assertNotNull(strBuilder82);
        org.junit.Assert.assertNotNull(strBuilder84);
        org.junit.Assert.assertNotNull(strBuilder87);
        org.junit.Assert.assertNotNull(strBuilder90);
        org.junit.Assert.assertNotNull(charArray91);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray91), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001.0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray91), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001.0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray91), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, 1, ., 0, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(strBuilder93);
        org.junit.Assert.assertNotNull(strBuilder94);
        org.junit.Assert.assertNotNull(strBuilder96);
        org.junit.Assert.assertNotNull(strBuilder97);
    }

    @Test
    public void test04819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04819");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder7.replaceFirst("", "");
        char[] charArray11 = strBuilder7.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder6.appendln(charArray11);
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder6.appendln((double) '$');
        char[] charArray19 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer21 = new org.apache.commons.lang3.text.StrTokenizer(charArray19, ' ');
        int int22 = strTokenizer21.size();
        boolean boolean23 = strTokenizer21.hasNext();
        java.util.List<java.lang.String> strList24 = strTokenizer21.getTokenList();
        java.lang.String[] strArray28 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        boolean boolean31 = strList24.addAll((java.util.Collection<java.lang.String>) strList29);
        java.lang.String str33 = strList29.remove(0);
        char[] charArray38 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer40 = new org.apache.commons.lang3.text.StrTokenizer(charArray38, ' ');
        int int41 = strTokenizer40.size();
        boolean boolean42 = strTokenizer40.hasNext();
        java.util.List<java.lang.String> strList43 = strTokenizer40.getTokenList();
        java.lang.String[] strArray47 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        boolean boolean50 = strList43.addAll((java.util.Collection<java.lang.String>) strList48);
        boolean boolean51 = strList29.addAll((java.util.Collection<java.lang.String>) strList48);
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder6.appendAll((java.lang.Iterable<java.lang.String>) strList29);
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = strBuilder53.deleteFirst("");
        int int57 = strBuilder53.indexOf("");
        int int60 = strBuilder53.lastIndexOf('#', (int) (byte) 0);
        boolean boolean62 = strBuilder53.startsWith("4#4");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer63 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance();
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = strBuilder53.appendAll((java.util.Iterator<java.lang.String>) strTokenizer63);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer66 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray67 = strTokenizer66.getTokenArray();
        java.lang.String[] strArray68 = strTokenizer66.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder70 = strBuilder53.appendWithSeparators((java.lang.Object[]) strArray68, "");
        org.apache.commons.lang3.text.StrBuilder strBuilder71 = strBuilder52.appendln((java.lang.Object) "");
        org.apache.commons.lang3.text.StrBuilder strBuilder74 = strBuilder71.insert(4, false);
        char[] charArray75 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder78 = strBuilder71.append(charArray75, 3, 43);
        org.apache.commons.lang3.text.StrBuilder strBuilder81 = strBuilder71.replaceAll("{h={}}", "true");
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray84 = strBuilder71.toCharArray((int) '2', 43);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: end < start");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\n32.0" + "'", str33, "\n32.0");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(strBuilder55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strTokenizer63);
        org.junit.Assert.assertNotNull(strBuilder64);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strBuilder70);
        org.junit.Assert.assertNotNull(strBuilder71);
        org.junit.Assert.assertNotNull(strBuilder74);
        org.junit.Assert.assertNotNull(strBuilder78);
        org.junit.Assert.assertNotNull(strBuilder81);
    }

    @Test
    public void test04820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04820");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer2 = new org.apache.commons.lang3.text.StrTokenizer("StrTokenizer[not tokenized yet]", ' ');
        boolean boolean3 = strTokenizer2.hasNext();
        boolean boolean4 = strTokenizer2.hasNext();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = strTokenizer2.setQuoteChar('4');
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder7.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder12.appendPadding((int) '#', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder16.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder18.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder19.appendln((double) '#');
        boolean boolean22 = strBuilder12.equals(strBuilder21);
        java.util.stream.IntStream intStream23 = strBuilder12.codePoints();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder12.minimizeCapacity();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer26 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance("");
        boolean boolean27 = strTokenizer26.hasNext();
        char[] charArray32 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer34 = new org.apache.commons.lang3.text.StrTokenizer(charArray32, ' ');
        int int35 = strTokenizer34.size();
        boolean boolean36 = strTokenizer34.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher37 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer38 = strTokenizer34.setIgnoredMatcher(strMatcher37);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer39 = strTokenizer26.setDelimiterMatcher(strMatcher37);
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder12.deleteAll(strMatcher37);
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder41.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder44.replaceFirst("", "");
        char[] charArray48 = strBuilder44.toCharArray();
        char[] charArray49 = strBuilder41.getChars(charArray48);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer50 = new org.apache.commons.lang3.text.StrTokenizer(charArray48);
        boolean boolean51 = strTokenizer50.hasPrevious();
        org.apache.commons.lang3.text.StrMatcher strMatcher53 = org.apache.commons.lang3.text.StrMatcher.stringMatcher("");
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder57 = strBuilder54.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder60 = strBuilder57.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = strBuilder61.replaceFirst("", "");
        char[] charArray65 = strBuilder61.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder66 = strBuilder60.appendln(charArray65);
        int int70 = strMatcher53.isMatch(charArray65, (-1), (int) ' ', (int) (byte) -1);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer71 = new org.apache.commons.lang3.text.StrTokenizer(charArray65);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer72 = strTokenizer50.reset(charArray65);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer73 = new org.apache.commons.lang3.text.StrTokenizer(charArray65);
        org.apache.commons.lang3.text.StrBuilder strBuilder74 = strBuilder40.appendAll((java.util.Iterator<java.lang.String>) strTokenizer73);
        org.apache.commons.lang3.text.StrBuilder strBuilder75 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder77 = strBuilder75.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder78 = strBuilder77.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder80 = strBuilder78.setNullText("");
        char[] charArray81 = strBuilder80.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder84 = strBuilder80.insert(0, true);
        char[] charArray85 = strBuilder80.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder88 = strBuilder40.appendFixedWidthPadLeft((java.lang.Object) charArray85, 118, 't');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer89 = strTokenizer6.reset(charArray85);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strTokenizer6);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intStream23);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strTokenizer26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strMatcher37);
        org.junit.Assert.assertNotNull(strTokenizer38);
        org.junit.Assert.assertNotNull(strTokenizer39);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNotNull(strBuilder43);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[]");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strMatcher53);
        org.junit.Assert.assertNotNull(strBuilder57);
        org.junit.Assert.assertNotNull(strBuilder60);
        org.junit.Assert.assertNotNull(strBuilder64);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[]");
        org.junit.Assert.assertNotNull(strBuilder66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(strTokenizer72);
        org.junit.Assert.assertNotNull(strBuilder74);
        org.junit.Assert.assertNotNull(strBuilder77);
        org.junit.Assert.assertNotNull(strBuilder78);
        org.junit.Assert.assertNotNull(strBuilder80);
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[]");
        org.junit.Assert.assertNotNull(strBuilder84);
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray85), "true");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray85), "true");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray85), "[t, r, u, e]");
        org.junit.Assert.assertNotNull(strBuilder88);
        org.junit.Assert.assertNotNull(strTokenizer89);
    }

    @Test
    public void test04821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04821");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet9 = properties4.entrySet();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray15 = strTokenizer14.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder10.appendAll((java.lang.Object[]) strArray15);
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder10.replaceFirst('a', 'a');
        java.lang.StringBuffer stringBuffer20 = strBuilder19.toStringBuffer();
        char[] charArray25 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer27 = new org.apache.commons.lang3.text.StrTokenizer(charArray25, ' ');
        int int28 = strTokenizer27.size();
        boolean boolean29 = strTokenizer27.hasNext();
        java.util.List<java.lang.String> strList30 = strTokenizer27.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder31.replaceFirst("", "");
        char[] charArray35 = strBuilder31.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer37 = new org.apache.commons.lang3.text.StrTokenizer(charArray35, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer38 = new org.apache.commons.lang3.text.StrTokenizer(charArray35);
        boolean boolean39 = strList30.equals((java.lang.Object) charArray35);
        char[] charArray44 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer46 = new org.apache.commons.lang3.text.StrTokenizer(charArray44, ' ');
        int int47 = strTokenizer46.size();
        boolean boolean48 = strTokenizer46.hasNext();
        java.util.List<java.lang.String> strList49 = strTokenizer46.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = new org.apache.commons.lang3.text.StrBuilder();
        int int51 = strBuilder50.capacity();
        java.lang.StringBuffer stringBuffer52 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = strBuilder50.appendln(stringBuffer52, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder50.insert(1, (double) 32);
        java.lang.String str60 = strBuilder50.rightString((int) ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = strBuilder50.insert(1, '#');
        boolean boolean64 = strList49.equals((java.lang.Object) strBuilder50);
        boolean boolean65 = strList30.containsAll((java.util.Collection<java.lang.String>) strList49);
        org.apache.commons.lang3.text.StrBuilder strBuilder66 = strBuilder19.appendAll((java.lang.Iterable<java.lang.String>) strList49);
        org.apache.commons.lang3.text.StrBuilder strBuilder67 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder70 = strBuilder67.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder72 = strBuilder67.deleteAll('4');
        int int74 = strBuilder72.indexOf('a');
        java.lang.String str77 = strBuilder72.midString((int) (byte) 10, 32);
        java.lang.Object obj78 = properties4.getOrDefault((java.lang.Object) strBuilder19, (java.lang.Object) str77);
        org.apache.commons.lang3.text.StrBuilder strBuilder79 = strBuilder19.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder82 = strBuilder79.insert(1, 22);
        org.apache.commons.lang3.text.StrBuilder strBuilder84 = strBuilder79.append((long) 'o');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objEntrySet9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(stringBuffer20);
        org.junit.Assert.assertEquals(stringBuffer20.toString(), "");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 32 + "'", int51 == 32);
        org.junit.Assert.assertNotNull(strBuilder55);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\n32.0" + "'", str60, "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strBuilder66);
        org.junit.Assert.assertNotNull(strBuilder70);
        org.junit.Assert.assertNotNull(strBuilder72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + obj78 + "' != '" + "" + "'", obj78, "");
        org.junit.Assert.assertNotNull(strBuilder79);
        org.junit.Assert.assertNotNull(strBuilder82);
        org.junit.Assert.assertNotNull(strBuilder84);
    }

    @Test
    public void test04822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04822");
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder("100.0\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder2.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder4.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder5.setNullText("");
        char[] charArray8 = strBuilder7.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer10 = new org.apache.commons.lang3.text.StrTokenizer(charArray8, "true\n###################################3\n");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer12 = new org.apache.commons.lang3.text.StrTokenizer(charArray8, "StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder1.append(charArray8);
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder1.append((double) 75);
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder15);
    }

    @Test
    public void test04823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04823");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray5 = strTokenizer4.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder0.appendAll((java.lang.Object[]) strArray5);
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder0.replaceFirst('a', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray15 = strTokenizer14.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder10.appendAll((java.lang.Object[]) strArray15);
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder0.appendln(strBuilder16);
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder18.deleteFirst("");
        int int22 = strBuilder18.indexOf("");
        int int25 = strBuilder18.lastIndexOf('#', (int) (byte) 0);
        boolean boolean27 = strBuilder18.startsWith("4#4");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer28 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance();
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder18.appendAll((java.util.Iterator<java.lang.String>) strTokenizer28);
        boolean boolean30 = strTokenizer28.isIgnoreEmptyTokens();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer32 = strTokenizer28.setIgnoreEmptyTokens(false);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer34 = strTokenizer32.setIgnoreEmptyTokens(false);
        boolean boolean35 = strBuilder0.equals((java.lang.Object) strTokenizer32);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer37 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher38 = strTokenizer37.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer40 = strTokenizer37.reset("");
        org.apache.commons.lang3.text.StrMatcher strMatcher41 = strTokenizer37.getIgnoredMatcher();
        java.lang.String[] strArray42 = strTokenizer37.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder0.appendAll((java.lang.Object[]) strArray42);
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder43.appendNull();
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder44.appendFixedWidthPadRight(119, 39, 'a');
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strTokenizer28);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strTokenizer32);
        org.junit.Assert.assertNotNull(strTokenizer34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strMatcher38);
        org.junit.Assert.assertNotNull(strTokenizer40);
        org.junit.Assert.assertNotNull(strMatcher41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strBuilder43);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strBuilder48);
    }

    @Test
    public void test04824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04824");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder0.appendPadding(10, ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder7.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer12 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher13 = strTokenizer12.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder7.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer12, "h");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer17 = strTokenizer12.reset("\n32.0");
        org.apache.commons.lang3.text.StrMatcher strMatcher18 = strTokenizer12.getIgnoredMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder6.appendFixedWidthPadRight((java.lang.Object) strTokenizer12, 4, '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = new org.apache.commons.lang3.text.StrBuilder();
        int int23 = strBuilder22.capacity();
        java.lang.StringBuffer stringBuffer24 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder22.appendln(stringBuffer24, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder22.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder22.setLength(32);
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder32.trim();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder32.append((int) (short) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder35.append('#');
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder38.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer43 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray44 = strTokenizer43.getTokenArray();
        java.lang.String[] strArray45 = strTokenizer43.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder41.appendWithSeparators((java.lang.Object[]) strArray45, "4#4");
        org.apache.commons.lang3.text.StrMatcher strMatcher48 = org.apache.commons.lang3.text.StrMatcher.tabMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder47.deleteAll(strMatcher48);
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = strBuilder47.trim();
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder47.append(false);
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = strBuilder53.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder53.deleteAll('4');
        int int60 = strBuilder58.indexOf('a');
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = strBuilder61.replaceFirst("", "");
        char[] charArray65 = strBuilder61.toCharArray();
        char[] charArray66 = strBuilder58.getChars(charArray65);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer67 = new org.apache.commons.lang3.text.StrTokenizer(charArray65);
        char[] charArray68 = strBuilder52.getChars(charArray65);
        char[] charArray69 = strBuilder35.getChars(charArray68);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer70 = strTokenizer12.reset(charArray68);
        java.lang.String str71 = strTokenizer70.getContent();
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strMatcher13);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strTokenizer17);
        org.junit.Assert.assertNotNull(strMatcher18);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 32 + "'", int23 == 32);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(strMatcher48);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(strBuilder50);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(strBuilder56);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(strBuilder64);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[]");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[]");
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "false");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "false");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[f, a, l, s, e]");
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "32.01#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "32.01#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[3, 2, ., 0, 1, #]");
        org.junit.Assert.assertNotNull(strTokenizer70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "false" + "'", str71, "false");
    }

    @Test
    public void test04825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04825");
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder(3);
        char[] charArray2 = strBuilder1.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.appendln(true);
        org.apache.commons.lang3.text.StrMatcher strMatcher7 = org.apache.commons.lang3.text.StrMatcher.stringMatcher("");
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder8.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder11.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder15.replaceFirst("", "");
        char[] charArray19 = strBuilder15.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder14.appendln(charArray19);
        int int24 = strMatcher7.isMatch(charArray19, (-1), (int) ' ', (int) (byte) -1);
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder25.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer29 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray30 = strTokenizer29.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder25.appendAll((java.lang.Object[]) strArray30);
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder25.replaceFirst('a', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder35.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer39 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray40 = strTokenizer39.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder35.appendAll((java.lang.Object[]) strArray40);
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder25.appendln(strBuilder41);
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder41.appendln((long) 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder41.appendSeparator("hi!", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder48.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder51.replaceFirst('a', '4');
        java.io.Writer writer55 = strBuilder54.asWriter();
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = strBuilder56.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder62 = strBuilder59.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder66 = strBuilder63.replaceFirst("", "");
        char[] charArray67 = strBuilder63.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder68 = strBuilder62.appendln(charArray67);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer69 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray67);
        writer55.write(charArray67);
        org.apache.commons.lang3.text.StrBuilder strBuilder71 = strBuilder47.append(charArray67);
        org.apache.commons.lang3.text.StrMatcher strMatcher72 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray67);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer73 = new org.apache.commons.lang3.text.StrTokenizer("java.io.IOException", strMatcher7, strMatcher72);
        int int75 = strBuilder1.indexOf(strMatcher72, 5);
        org.apache.commons.lang3.text.StrBuilder strBuilder77 = strBuilder1.appendln('$');
        org.apache.commons.lang3.text.StrBuilder strBuilder80 = strBuilder1.appendSeparator("", 4);
        int int83 = strBuilder1.lastIndexOf("StrTokenizer[not", 42);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strMatcher7);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(strBuilder51);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertNotNull(writer55);
        org.junit.Assert.assertNotNull(strBuilder59);
        org.junit.Assert.assertNotNull(strBuilder62);
        org.junit.Assert.assertNotNull(strBuilder66);
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[]");
        org.junit.Assert.assertNotNull(strBuilder68);
        org.junit.Assert.assertNotNull(strTokenizer69);
        org.junit.Assert.assertNotNull(strBuilder71);
        org.junit.Assert.assertNotNull(strMatcher72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(strBuilder77);
        org.junit.Assert.assertNotNull(strBuilder80);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
    }

    @Test
    public void test04826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04826");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet4 = properties0.entrySet();
        boolean boolean6 = properties0.equals((java.lang.Object) "StrTokenizer[not tokenized yet]");
        int int7 = properties0.size();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objEntrySet4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test04827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04827");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer0 = new org.apache.commons.lang3.text.StrTokenizer();
        boolean boolean1 = strTokenizer0.isIgnoreEmptyTokens();
        java.lang.Object obj2 = strTokenizer0.clone();
        // The following exception was thrown during execution in test generation
        try {
            strTokenizer0.set("\naaaa100");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: set() is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "StrTokenizer[not tokenized yet]");
    }

    @Test
    public void test04828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04828");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder7.replaceFirst("", "");
        char[] charArray11 = strBuilder7.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder6.appendln(charArray11);
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.setNewLineText("\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder12.appendln((float) (short) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder16.append((int) '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder18.setNullText("{h={}}");
        java.io.IOException iOException23 = new java.io.IOException("{\ntrue\n=1.0}");
        java.io.IOException iOException24 = new java.io.IOException("0.0true", (java.lang.Throwable) iOException23);
        java.lang.Throwable[] throwableArray25 = iOException24.getSuppressed();
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder20.appendAll((java.lang.Object[]) throwableArray25);
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder26.appendPadding(32, 'e');
        int int32 = strBuilder29.indexOf('7', 80);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test04829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04829");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder7.replaceFirst("", "");
        char[] charArray11 = strBuilder7.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder6.appendln(charArray11);
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.setNewLineText("\n");
        java.io.Reader reader15 = strBuilder14.asReader();
        java.io.Writer writer16 = strBuilder14.asWriter();
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = new org.apache.commons.lang3.text.StrBuilder();
        int int18 = strBuilder17.capacity();
        java.lang.StringBuffer stringBuffer19 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder17.appendln(stringBuffer19, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder17.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder17.setLength(32);
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder27.trim();
        boolean boolean30 = strBuilder27.contains("4#4");
        java.io.IOException iOException33 = new java.io.IOException("hi!");
        java.io.IOException iOException35 = new java.io.IOException("hi!");
        iOException33.addSuppressed((java.lang.Throwable) iOException35);
        java.io.IOException iOException38 = new java.io.IOException("hi!");
        java.io.IOException iOException40 = new java.io.IOException("hi!");
        iOException38.addSuppressed((java.lang.Throwable) iOException40);
        iOException35.addSuppressed((java.lang.Throwable) iOException40);
        java.io.IOException iOException43 = new java.io.IOException("hi!", (java.lang.Throwable) iOException40);
        java.lang.Throwable[] throwableArray44 = iOException40.getSuppressed();
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = strBuilder27.appendAll((java.lang.Object[]) throwableArray44);
        int int48 = strBuilder27.indexOf("100.0\000\000\000\000\000", 3);
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder49.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder52.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder57 = strBuilder54.appendPadding((int) '#', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder60 = strBuilder58.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = strBuilder60.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = strBuilder61.appendln((double) '#');
        boolean boolean64 = strBuilder54.equals(strBuilder63);
        java.util.stream.IntStream intStream65 = strBuilder54.codePoints();
        java.util.Iterator<java.lang.String> strItor66 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder68 = strBuilder54.appendWithSeparators(strItor66, " 4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder71 = strBuilder68.replaceFirst(' ', ' ');
        java.io.Writer writer72 = strBuilder71.asWriter();
        org.apache.commons.lang3.text.StrBuilder strBuilder73 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder76 = strBuilder73.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer78 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher79 = strTokenizer78.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder81 = strBuilder73.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer78, "h");
        org.apache.commons.lang3.text.StrBuilder strBuilder83 = strBuilder73.setLength((int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder86 = strBuilder83.insert((int) '4', (double) (byte) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder89 = strBuilder71.append(strBuilder86, 32, (int) (byte) 10);
        char[] charArray90 = strBuilder86.toCharArray();
        boolean boolean91 = strBuilder27.equals((java.lang.Object) strBuilder86);
        org.apache.commons.lang3.text.StrBuilder strBuilder94 = strBuilder27.insert((int) (byte) 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder97 = strBuilder14.appendln(strBuilder94, (int) '9', 52);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: startIndex must be valid");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(reader15);
        org.junit.Assert.assertNotNull(writer16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(strBuilder45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertNotNull(strBuilder57);
        org.junit.Assert.assertNotNull(strBuilder60);
        org.junit.Assert.assertNotNull(strBuilder61);
        org.junit.Assert.assertNotNull(strBuilder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intStream65);
        org.junit.Assert.assertNotNull(strBuilder68);
        org.junit.Assert.assertNotNull(strBuilder71);
        org.junit.Assert.assertNotNull(writer72);
        org.junit.Assert.assertNotNull(strBuilder76);
        org.junit.Assert.assertNotNull(strMatcher79);
        org.junit.Assert.assertNotNull(strBuilder81);
        org.junit.Assert.assertNotNull(strBuilder83);
        org.junit.Assert.assertNotNull(strBuilder86);
        org.junit.Assert.assertNotNull(strBuilder89);
        org.junit.Assert.assertNotNull(charArray90);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray90), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001.0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray90), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001.0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(strBuilder94);
    }

    @Test
    public void test04830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04830");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        java.util.Properties properties9 = new java.util.Properties();
        int int10 = properties9.size();
        boolean boolean12 = properties9.containsKey((java.lang.Object) (-1.0f));
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder13.replaceFirst("", "");
        char[] charArray17 = strBuilder13.toCharArray();
        boolean boolean18 = properties9.containsValue((java.lang.Object) charArray17);
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder0.append(charArray17, (int) (byte) 0, 0);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer24 = new org.apache.commons.lang3.text.StrTokenizer(charArray17, '4', 'a');
        org.apache.commons.lang3.text.StrMatcher strMatcher27 = org.apache.commons.lang3.text.StrMatcher.stringMatcher("java.io.IOException: ########");
        org.apache.commons.lang3.text.StrMatcher strMatcher29 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher("StrTokenizer[]");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer30 = new org.apache.commons.lang3.text.StrTokenizer("\n032.0", strMatcher27, strMatcher29);
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder31.deleteFirst("");
        int int35 = strBuilder31.indexOf("");
        int int38 = strBuilder31.lastIndexOf('#', (int) (byte) 0);
        boolean boolean40 = strBuilder31.startsWith("4#4");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer41 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance();
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder31.appendAll((java.util.Iterator<java.lang.String>) strTokenizer41);
        boolean boolean43 = strTokenizer41.isIgnoreEmptyTokens();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer45 = strTokenizer41.setIgnoreEmptyTokens(false);
        org.apache.commons.lang3.text.StrMatcher strMatcher47 = org.apache.commons.lang3.text.StrMatcher.stringMatcher("");
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder48.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder51.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder55.replaceFirst("", "");
        char[] charArray59 = strBuilder55.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder60 = strBuilder54.appendln(charArray59);
        int int64 = strMatcher47.isMatch(charArray59, (-1), (int) ' ', (int) (byte) -1);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer65 = strTokenizer45.setTrimmerMatcher(strMatcher47);
        boolean boolean66 = strTokenizer65.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher67 = strTokenizer65.getIgnoredMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer68 = new org.apache.commons.lang3.text.StrTokenizer(charArray17, strMatcher29, strMatcher67);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str69 = strTokenizer68.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strMatcher27);
        org.junit.Assert.assertNotNull(strMatcher29);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strTokenizer41);
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strTokenizer45);
        org.junit.Assert.assertNotNull(strMatcher47);
        org.junit.Assert.assertNotNull(strBuilder51);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[]");
        org.junit.Assert.assertNotNull(strBuilder60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(strTokenizer65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strMatcher67);
    }

    @Test
    public void test04831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04831");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = new org.apache.commons.lang3.text.StrTokenizer("true\n###################################\n");
        int int2 = strTokenizer1.nextIndex();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test04832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04832");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.lang.String str10 = properties4.getProperty("h");
        java.util.Enumeration<?> wildcardEnumeration11 = properties4.propertyNames();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet12 = properties4.entrySet();
        java.io.IOException iOException13 = new java.io.IOException();
        java.lang.Throwable[] throwableArray14 = iOException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = iOException13.getSuppressed();
        java.io.IOException iOException16 = new java.io.IOException((java.lang.Throwable) iOException13);
        boolean boolean17 = properties4.containsValue((java.lang.Object) iOException16);
        char[] charArray23 = new char[] { ' ', '4', '#', '#', ' ' };
        org.apache.commons.lang3.text.StrMatcher strMatcher24 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray23);
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = new org.apache.commons.lang3.text.StrBuilder(3);
        char[] charArray27 = strBuilder26.toCharArray();
        org.apache.commons.lang3.text.StrMatcher strMatcher28 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray27);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer29 = new org.apache.commons.lang3.text.StrTokenizer(charArray23, strMatcher28);
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder30.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer34 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray35 = strTokenizer34.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder30.appendAll((java.lang.Object[]) strArray35);
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder30.replaceFirst('a', 'a');
        java.lang.String str41 = strBuilder39.rightString((int) '$');
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder39.ensureCapacity(0);
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = strBuilder39.deleteFirst('$');
        java.lang.Object obj46 = properties4.put((java.lang.Object) strTokenizer29, (java.lang.Object) strBuilder45);
        char[] charArray49 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer50 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray49);
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = new org.apache.commons.lang3.text.StrBuilder();
        int int52 = strBuilder51.capacity();
        java.lang.StringBuffer stringBuffer53 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = strBuilder51.appendln(stringBuffer53, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder51.appendln((int) (byte) 0);
        java.io.Writer writer59 = strBuilder58.asWriter();
        java.io.IOException iOException60 = new java.io.IOException();
        java.lang.Throwable[] throwableArray61 = iOException60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = iOException60.getSuppressed();
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = strBuilder58.appendWithSeparators((java.lang.Object[]) throwableArray62, "1");
        java.lang.Object obj65 = properties4.getOrDefault((java.lang.Object) charArray49, (java.lang.Object) throwableArray62);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer66 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray49);
        int int67 = strTokenizer66.nextIndex();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(wildcardEnumeration11);
        org.junit.Assert.assertNotNull(objEntrySet12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), " 4## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), " 4## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[ , 4, #, #,  ]");
        org.junit.Assert.assertNotNull(strMatcher24);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[]");
        org.junit.Assert.assertNotNull(strMatcher28);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strBuilder43);
        org.junit.Assert.assertNotNull(strBuilder45);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 32 + "'", int52 == 32);
        org.junit.Assert.assertNotNull(strBuilder56);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertNotNull(writer59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(strBuilder64);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertNotNull(strTokenizer66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test04833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04833");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer5 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray6 = strTokenizer5.getTokenArray();
        java.lang.String[] strArray7 = strTokenizer5.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder3.appendWithSeparators((java.lang.Object[]) strArray7, "4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder3.delete(0, (int) (byte) 100);
        int int13 = strBuilder3.size();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder16.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer21 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray22 = strTokenizer21.getTokenArray();
        java.lang.String[] strArray23 = strTokenizer21.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder19.appendWithSeparators((java.lang.Object[]) strArray23, "4#4");
        java.util.Properties properties26 = new java.util.Properties();
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties26.keys();
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder28.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder31.appendSeparator('#', (int) (byte) 100);
        java.io.Reader reader35 = strBuilder31.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder36.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer40 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray41 = strTokenizer40.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder36.appendAll((java.lang.Object[]) strArray41);
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = strBuilder36.replaceFirst('a', 'a');
        java.util.stream.IntStream intStream46 = strBuilder36.codePoints();
        java.lang.Object obj47 = properties26.replace((java.lang.Object) reader35, (java.lang.Object) intStream46);
        long long49 = reader35.skip(0L);
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder50.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer54 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray55 = strTokenizer54.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = strBuilder50.appendAll((java.lang.Object[]) strArray55);
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = strBuilder50.replaceFirst('a', 'a');
        java.util.stream.IntStream intStream60 = strBuilder50.codePoints();
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = strBuilder61.replaceFirst("", "");
        char[] charArray65 = strBuilder61.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer67 = new org.apache.commons.lang3.text.StrTokenizer(charArray65, "");
        org.apache.commons.lang3.text.StrBuilder strBuilder68 = strBuilder50.appendln(charArray65);
        int int69 = reader35.read(charArray65);
        org.apache.commons.lang3.text.StrBuilder strBuilder70 = strBuilder19.append(charArray65);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer72 = new org.apache.commons.lang3.text.StrTokenizer(charArray65, "java.io.IOException: hi!");
        // The following exception was thrown during execution in test generation
        try {
            strBuilder3.getChars(13, 1, charArray65, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(reader35);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertNotNull(strBuilder45);
        org.junit.Assert.assertNotNull(intStream46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strBuilder56);
        org.junit.Assert.assertNotNull(strBuilder59);
        org.junit.Assert.assertNotNull(intStream60);
        org.junit.Assert.assertNotNull(strBuilder64);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[]");
        org.junit.Assert.assertNotNull(strBuilder68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(strBuilder70);
    }

    @Test
    public void test04834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04834");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder2.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.setNullText("");
        char[] charArray6 = strBuilder5.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder5.insert(0, true);
        java.io.Writer writer10 = strBuilder5.asWriter();
        java.lang.String str12 = strBuilder5.rightString((int) (byte) 10);
        char[] charArray15 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray15);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer17 = new org.apache.commons.lang3.text.StrTokenizer(charArray15);
        java.lang.String str18 = org.apache.commons.lang3.text.StrSubstitutor.replaceSystemProperties((java.lang.Object) charArray15);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer20 = new org.apache.commons.lang3.text.StrTokenizer(charArray15, "\n32.0");
        char[] charArray21 = strBuilder5.getChars(charArray15);
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder5.append((int) 'g');
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = new org.apache.commons.lang3.text.StrBuilder();
        int int25 = strBuilder24.capacity();
        java.lang.StringBuffer stringBuffer26 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder24.appendln(stringBuffer26, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder24.insert(1, (double) 32);
        boolean boolean33 = strBuilder24.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder24.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder24.append((long) (byte) -1);
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder36.appendln("100.0\000\000\000\000\000");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder5.append(strBuilder36, (int) 'o', 74);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: startIndex must be valid");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(writer10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "true" + "'", str12, "true");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer16);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "true");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "true");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[t, r, u, e]");
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder38);
    }

    @Test
    public void test04835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04835");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.appendSeparator('#', (int) (byte) 100);
        java.io.Reader reader7 = strBuilder3.asReader();
        reader7.mark((int) (short) 100);
        boolean boolean10 = reader7.markSupported();
        reader7.close();
        long long13 = reader7.skip((long) 'a');
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(reader7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
    }

    @Test
    public void test04836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04836");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        char[] charArray13 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = new org.apache.commons.lang3.text.StrTokenizer(charArray13, ' ');
        int int16 = strTokenizer15.size();
        boolean boolean17 = strTokenizer15.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher18 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = strTokenizer15.setIgnoredMatcher(strMatcher18);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.replaceFirst("", "");
        java.lang.Object obj24 = properties0.putIfAbsent((java.lang.Object) strMatcher18, (java.lang.Object) strBuilder20);
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder25.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder28.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = new org.apache.commons.lang3.text.StrBuilder();
        int int32 = strBuilder31.capacity();
        java.lang.StringBuffer stringBuffer33 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder31.appendln(stringBuffer33, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder31.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder31.setLength(32);
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder41.trim();
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder41.append((int) (short) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = strBuilder44.append('#');
        java.lang.Object obj47 = properties0.putIfAbsent((java.lang.Object) strBuilder30, (java.lang.Object) '#');
        java.lang.Object obj50 = properties0.setProperty("10.0StrTokenizer[ 4#4]\n10.0\n", "true\n###################################\n32.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = new org.apache.commons.lang3.text.StrBuilder();
        int int52 = strBuilder51.capacity();
        java.lang.StringBuffer stringBuffer53 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = strBuilder51.appendln(stringBuffer53, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder51.appendln((int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = strBuilder51.trim();
        org.apache.commons.lang3.text.StrMatcher strMatcher61 = org.apache.commons.lang3.text.StrMatcher.charMatcher('t');
        int int62 = strBuilder59.lastIndexOf(strMatcher61);
        boolean boolean63 = properties0.containsKey((java.lang.Object) int62);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strMatcher18);
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 32 + "'", int32 == 32);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strBuilder46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 32 + "'", int52 == 32);
        org.junit.Assert.assertNotNull(strBuilder56);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertNotNull(strBuilder59);
        org.junit.Assert.assertNotNull(strMatcher61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test04837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04837");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer3 = new org.apache.commons.lang3.text.StrTokenizer(" ", '\000', 't');
        boolean boolean4 = strTokenizer3.hasNext();
        java.lang.String str5 = strTokenizer3.next();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " ");
    }

    @Test
    public void test04838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04838");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.appendln('#');
        java.lang.StringBuffer stringBuffer6 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder3.append(stringBuffer6, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder3.deleteFirst("hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder3.appendSeparator("4#4", "\n32.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder3.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder16.appendSeparator("false", (int) (short) 10);
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder16.replaceFirst('e', 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer23 = strBuilder16.asTokenizer();
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder16.replaceFirst('9', 'e');
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(strTokenizer23);
        org.junit.Assert.assertNotNull(strBuilder26);
    }

    @Test
    public void test04839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04839");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray2 = strTokenizer1.getTokenArray();
        java.lang.String[] strArray3 = strTokenizer1.getTokenArray();
        org.apache.commons.lang3.text.StrMatcher strMatcher4 = strTokenizer1.getQuoteMatcher();
        java.lang.String str5 = strTokenizer1.previousToken();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strMatcher4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test04840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04840");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder4.replaceFirst("", "");
        boolean boolean9 = strBuilder7.endsWith("StrTokenizer[]");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer11 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder12.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder15.appendln('#');
        java.lang.StringBuffer stringBuffer18 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder15.append(stringBuffer18, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder15.deleteFirst("hi!");
        char[] charArray24 = strBuilder15.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer25 = strTokenizer11.reset(charArray24);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer26 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray24);
        char[] charArray27 = strBuilder7.getChars(charArray24);
        java.lang.Object obj28 = properties0.remove((java.lang.Object) charArray27);
        java.lang.String str30 = properties0.getProperty("\n32.0");
        java.lang.String str31 = properties0.toString();
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = new org.apache.commons.lang3.text.StrBuilder();
        int int33 = strBuilder32.capacity();
        java.lang.StringBuffer stringBuffer34 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder32.appendln(stringBuffer34, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder32.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder32.setLength(32);
        java.io.Writer writer43 = strBuilder42.asWriter();
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = new org.apache.commons.lang3.text.StrBuilder();
        int int45 = strBuilder44.capacity();
        java.lang.StringBuffer stringBuffer46 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder44.appendln(stringBuffer46, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder44.insert(1, (double) 32);
        java.lang.String str54 = strBuilder44.rightString((int) ' ');
        boolean boolean56 = strBuilder44.startsWith("");
        char[] charArray57 = strBuilder44.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = strBuilder58.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer63 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray64 = strTokenizer63.getTokenArray();
        java.lang.String[] strArray65 = strTokenizer63.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder67 = strBuilder61.appendWithSeparators((java.lang.Object[]) strArray65, "4#4");
        org.apache.commons.lang3.text.StrMatcher strMatcher68 = org.apache.commons.lang3.text.StrMatcher.tabMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder69 = strBuilder67.deleteAll(strMatcher68);
        int int70 = strBuilder44.lastIndexOf(strMatcher68);
        boolean boolean72 = strBuilder44.startsWith("StrTokenizer[not tokenized yet]");
        java.io.Writer writer73 = writer43.append((java.lang.CharSequence) "StrTokenizer[not tokenized yet]");
        org.apache.commons.lang3.text.StrBuilder strBuilder74 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder77 = strBuilder74.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder80 = strBuilder77.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder81 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder84 = strBuilder81.replaceFirst("", "");
        char[] charArray85 = strBuilder81.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder86 = strBuilder80.appendln(charArray85);
        org.apache.commons.lang3.text.StrBuilder strBuilder88 = strBuilder86.setNewLineText("\n");
        java.lang.Object obj89 = properties0.replace((java.lang.Object) writer43, (java.lang.Object) strBuilder88);
        java.util.Collection<java.lang.Object> objCollection90 = properties0.values();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strTokenizer11);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#, \n]");
        org.junit.Assert.assertNotNull(strTokenizer25);
        org.junit.Assert.assertNotNull(strTokenizer26);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#, \n]");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{}" + "'", str31, "{}");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 32 + "'", int33 == 32);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertNotNull(writer43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 32 + "'", int45 == 32);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\n32.0" + "'", str54, "\n32.0");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "\n32.0");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "\n32.0");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[\n, 3, 2, ., 0]");
        org.junit.Assert.assertNotNull(strBuilder61);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strBuilder67);
        org.junit.Assert.assertNotNull(strMatcher68);
        org.junit.Assert.assertNotNull(strBuilder69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(writer73);
        org.junit.Assert.assertNotNull(strBuilder77);
        org.junit.Assert.assertNotNull(strBuilder80);
        org.junit.Assert.assertNotNull(strBuilder84);
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray85), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray85), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray85), "[]");
        org.junit.Assert.assertNotNull(strBuilder86);
        org.junit.Assert.assertNotNull(strBuilder88);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNotNull(objCollection90);
    }

    @Test
    public void test04841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04841");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer2 = new org.apache.commons.lang3.text.StrTokenizer("not tokenized yet]", "StrTokenizer[32.0]");
        boolean boolean3 = strTokenizer2.hasNext();
        boolean boolean4 = strTokenizer2.isIgnoreEmptyTokens();
        java.lang.String str5 = strTokenizer2.nextToken();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "not tokenized yet]" + "'", str5, "not tokenized yet]");
    }

    @Test
    public void test04842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04842");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder0.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.append((float) '4');
        int int14 = strBuilder9.indexOf("", (int) (short) 10);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance("");
        boolean boolean17 = strTokenizer16.hasNext();
        java.lang.String[] strArray18 = strTokenizer16.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder9.appendWithSeparators((java.lang.Object[]) strArray18, "4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder20.ensureCapacity((int) (short) 10);
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder20.replaceFirst("true", "####\000\000\000\000\000\000\000\000\000\000");
        java.lang.Object[] objArray26 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder20.appendAll(objArray26);
        java.util.stream.IntStream intStream28 = strBuilder20.codePoints();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder20.deleteAll('9');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder30.setCharAt(50, 's');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 50");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(strTokenizer16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(intStream28);
        org.junit.Assert.assertNotNull(strBuilder30);
    }

    @Test
    public void test04843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04843");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        int int4 = strBuilder0.indexOf("");
        int int7 = strBuilder0.lastIndexOf('#', (int) (byte) 0);
        java.io.Reader reader8 = strBuilder0.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.append((int) (short) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.append(5);
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder13.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer17 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray18 = strTokenizer17.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder13.appendAll((java.lang.Object[]) strArray18);
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder13.replaceFirst('a', 'a');
        char[] charArray27 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer29 = new org.apache.commons.lang3.text.StrTokenizer(charArray27, ' ');
        int int30 = strTokenizer29.size();
        boolean boolean31 = strTokenizer29.hasNext();
        java.util.List<java.lang.String> strList32 = strTokenizer29.getTokenList();
        java.lang.String[] strArray36 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        boolean boolean39 = strList32.addAll((java.util.Collection<java.lang.String>) strList37);
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder13.appendAll((java.lang.Iterable<java.lang.String>) strList37);
        org.apache.commons.lang3.text.StrMatcher strMatcher41 = org.apache.commons.lang3.text.StrSubstitutor.DEFAULT_SUFFIX;
        boolean boolean42 = strBuilder13.contains(strMatcher41);
        boolean boolean43 = strBuilder12.contains(strMatcher41);
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(reader8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNotNull(strMatcher41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test04844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04844");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer5 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray6 = strTokenizer5.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder0.appendAll((java.lang.Object[]) strArray6);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder8.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder11.replaceFirst("", "");
        char[] charArray15 = strBuilder11.toCharArray();
        char[] charArray16 = strBuilder8.getChars(charArray15);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer17 = new org.apache.commons.lang3.text.StrTokenizer(charArray15);
        char[] charArray18 = strBuilder0.getChars(charArray15);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer20 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher21 = strTokenizer20.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer23 = strTokenizer20.reset("");
        org.apache.commons.lang3.text.StrMatcher strMatcher24 = strTokenizer20.getIgnoredMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer25 = new org.apache.commons.lang3.text.StrTokenizer(charArray15, strMatcher24);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer26 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray15);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer28 = strTokenizer26.reset("4#4#\n");
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[]");
        org.junit.Assert.assertNotNull(strMatcher21);
        org.junit.Assert.assertNotNull(strTokenizer23);
        org.junit.Assert.assertNotNull(strMatcher24);
        org.junit.Assert.assertNotNull(strTokenizer26);
        org.junit.Assert.assertNotNull(strTokenizer28);
    }

    @Test
    public void test04845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04845");
        org.apache.commons.lang3.text.StrLookup<?> wildcardStrLookup0 = org.apache.commons.lang3.text.StrLookup.noneLookup();
        org.junit.Assert.assertNotNull(wildcardStrLookup0);
    }

    @Test
    public void test04846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04846");
        java.util.Properties properties0 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder4.appendln('#');
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder9.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = new org.apache.commons.lang3.text.StrBuilder();
        int int12 = strBuilder11.capacity();
        java.lang.StringBuffer stringBuffer13 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder11.appendln(stringBuffer13, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher17 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int18 = strBuilder16.lastIndexOf(strMatcher17);
        boolean boolean19 = strBuilder9.equalsIgnoreCase(strBuilder16);
        char[] charArray22 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer23 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray22);
        boolean boolean24 = properties0.replace((java.lang.Object) strBuilder6, (java.lang.Object) strBuilder9, (java.lang.Object) strTokenizer23);
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder9.deleteAll("StrTokenizer[]");
        int int28 = strBuilder26.lastIndexOf('#');
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder29.deleteFirst("");
        int int33 = strBuilder29.indexOf("");
        int int36 = strBuilder29.lastIndexOf('#', (int) (byte) 0);
        boolean boolean38 = strBuilder29.startsWith("4#4");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer39 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance();
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder29.appendAll((java.util.Iterator<java.lang.String>) strTokenizer39);
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder29.appendSeparator("{}");
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder29.append((double) 0.0f);
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder26.append(strBuilder44, 1, 0);
        java.lang.Iterable<java.lang.String> strIterable48 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder26.appendAll(strIterable48);
        java.lang.String str50 = strBuilder49.getNullText();
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder49.appendSeparator("\ntrue", "java.io.IOException: java.io.IOException: \n");
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strMatcher17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strTokenizer39);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(strBuilder53);
    }

    @Test
    public void test04847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04847");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        java.lang.String str10 = strBuilder0.rightString((int) ' ');
        boolean boolean12 = strBuilder0.startsWith("");
        char[] charArray13 = strBuilder0.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder0.insert(1, (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder0.append(53);
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder18.appendSeparator("#", 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder22.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder22.deleteAll('4');
        int int29 = strBuilder27.indexOf('a');
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder30.replaceFirst("", "");
        char[] charArray34 = strBuilder30.toCharArray();
        char[] charArray35 = strBuilder27.getChars(charArray34);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer36 = new org.apache.commons.lang3.text.StrTokenizer(charArray35);
        boolean boolean37 = strTokenizer36.isIgnoreEmptyTokens();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer39 = strTokenizer36.setIgnoredChar('#');
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder21.appendAll((java.util.Iterator<java.lang.String>) strTokenizer36);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\n32.0" + "'", str10, "\n32.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "\n32.0");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "\n32.0");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[\n, 3, 2, ., 0]");
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strTokenizer39);
        org.junit.Assert.assertNotNull(strBuilder40);
    }

    @Test
    public void test04848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04848");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray2 = strTokenizer1.getTokenArray();
        java.lang.String[] strArray3 = strTokenizer1.getTokenArray();
        boolean boolean4 = strTokenizer1.hasNext();
        int int5 = strTokenizer1.size();
        org.apache.commons.lang3.text.StrMatcher strMatcher6 = strTokenizer1.getQuoteMatcher();
        org.apache.commons.lang3.text.StrMatcher strMatcher8 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher("true\n###################################org.apache.co");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer9 = strTokenizer1.setTrimmerMatcher(strMatcher8);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(strMatcher6);
        org.junit.Assert.assertNotNull(strMatcher8);
        org.junit.Assert.assertNotNull(strTokenizer9);
    }

    @Test
    public void test04849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04849");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.deleteAll('4');
        int int7 = strBuilder5.indexOf('a');
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder8.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder8.deleteAll('4');
        int int15 = strBuilder13.indexOf('a');
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder16.replaceFirst("", "");
        char[] charArray20 = strBuilder16.toCharArray();
        char[] charArray21 = strBuilder13.getChars(charArray20);
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder5.appendln(charArray21);
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder5.appendln("100.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder24.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder24.appendNull();
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder24.appendSeparator('e');
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[]");
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder28);
    }

    @Test
    public void test04850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04850");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        char[] charArray13 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = new org.apache.commons.lang3.text.StrTokenizer(charArray13, ' ');
        int int16 = strTokenizer15.size();
        boolean boolean17 = strTokenizer15.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher18 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = strTokenizer15.setIgnoredMatcher(strMatcher18);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.replaceFirst("", "");
        java.lang.Object obj24 = properties0.putIfAbsent((java.lang.Object) strMatcher18, (java.lang.Object) strBuilder20);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer26 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance("");
        boolean boolean27 = strTokenizer26.hasNext();
        java.lang.String[] strArray28 = strTokenizer26.getTokenArray();
        java.lang.String str29 = strTokenizer26.toString();
        boolean boolean30 = properties0.equals((java.lang.Object) strTokenizer26);
        properties0.clear();
        boolean boolean32 = properties0.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = new org.apache.commons.lang3.text.StrBuilder("#\n\n32.032.05.0");
        java.lang.String str37 = strBuilder34.midString((int) ' ', (int) 't');
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Properties properties39 = new java.util.Properties(properties38);
        boolean boolean40 = properties38.isEmpty();
        java.util.Set<java.lang.Object> objSet41 = properties38.keySet();
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder42.deleteFirst("");
        int int46 = strBuilder42.indexOf("");
        int int49 = strBuilder42.lastIndexOf('#', (int) (byte) 0);
        boolean boolean51 = strBuilder42.startsWith("4#4");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer52 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance();
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder42.appendAll((java.util.Iterator<java.lang.String>) strTokenizer52);
        boolean boolean54 = strTokenizer52.hasPrevious();
        org.apache.commons.lang3.text.StrMatcher strMatcher55 = strTokenizer52.getIgnoredMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer57 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance("{}");
        java.lang.Object obj58 = properties38.replace((java.lang.Object) strTokenizer52, (java.lang.Object) "{}");
        java.util.Set<java.lang.Object> objSet59 = properties38.keySet();
        boolean boolean60 = properties0.remove((java.lang.Object) str37, (java.lang.Object) properties38);
        java.io.OutputStream outputStream61 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(outputStream61, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strMatcher18);
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(strTokenizer26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "StrTokenizer[]" + "'", str29, "StrTokenizer[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objSet41);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strTokenizer52);
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strMatcher55);
        org.junit.Assert.assertNotNull(strTokenizer57);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(objSet59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test04851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04851");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("0\n");
        boolean boolean2 = strTokenizer1.hasNext();
        org.junit.Assert.assertNotNull(strTokenizer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test04852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04852");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.appendln('#');
        java.lang.StringBuffer stringBuffer6 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder3.append(stringBuffer6, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.append("true\n");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder11.append(".0", 14, 40);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: startIndex must be valid");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder11);
    }

    @Test
    public void test04853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04853");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.deleteAll('4');
        boolean boolean7 = strBuilder0.contains(' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.clear();
        java.lang.Iterable<java.lang.String> strIterable9 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder8.appendWithSeparators(strIterable9, "35.0");
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder11);
    }

    @Test
    public void test04854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04854");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer5 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher6 = strTokenizer5.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer5, "h");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.setLength((int) (byte) 100);
        char char12 = strBuilder10.charAt(74);
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder10.replaceFirst("java.io.IOException: StrTokenizer[]", "36.0\n");
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strMatcher6);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + '\000' + "'", char12 == '\000');
        org.junit.Assert.assertNotNull(strBuilder15);
    }

    @Test
    public void test04855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04855");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        boolean boolean9 = strBuilder0.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder0.clear();
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder0.append('a');
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder13.insert(1, (int) (byte) 10);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder13.appendFixedWidthPadRight(32, (int) (short) 10, 's');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder20);
    }

    @Test
    public void test04856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04856");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.deleteAll('4');
        int int7 = strBuilder5.indexOf('a');
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder5.replaceFirst("java.io.IOException: hi!", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder5.deleteFirst("true");
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.appendln('t');
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder14.appendln(" #\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder14.append((float) 32);
        java.lang.Throwable throwable22 = null;
        java.io.IOException iOException23 = new java.io.IOException("{}", throwable22);
        java.lang.Throwable[] throwableArray24 = iOException23.getSuppressed();
        java.io.IOException iOException25 = new java.io.IOException("\n", (java.lang.Throwable) iOException23);
        java.io.IOException iOException26 = new java.io.IOException("hi!", (java.lang.Throwable) iOException25);
        java.util.Properties properties27 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder28.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer33 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray34 = strTokenizer33.getTokenArray();
        java.lang.String[] strArray35 = strTokenizer33.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder31.appendWithSeparators((java.lang.Object[]) strArray35, "4#4");
        char[] charArray40 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer41 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray40);
        java.lang.Object obj42 = properties27.getOrDefault((java.lang.Object) strBuilder31, (java.lang.Object) strTokenizer41);
        int int43 = properties27.size();
        int int44 = properties27.size();
        java.io.IOException iOException45 = new java.io.IOException();
        java.lang.Throwable[] throwableArray46 = iOException45.getSuppressed();
        boolean boolean47 = properties27.equals((java.lang.Object) iOException45);
        java.io.IOException iOException48 = new java.io.IOException((java.lang.Throwable) iOException45);
        java.io.IOException iOException49 = new java.io.IOException((java.lang.Throwable) iOException45);
        iOException25.addSuppressed((java.lang.Throwable) iOException45);
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder14.appendFixedWidthPadRight((java.lang.Object) iOException45, 93, '$');
        java.lang.String str55 = strBuilder53.leftString((int) (short) 10);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "t\n #\n\n32.0" + "'", str55, "t\n #\n\n32.0");
    }

    @Test
    public void test04857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04857");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet9 = properties4.entrySet();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties4.keys();
        java.util.Properties properties11 = new java.util.Properties();
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties11.keys();
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder13.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder16.appendSeparator('#', (int) (byte) 100);
        java.io.Reader reader20 = strBuilder16.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder21.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer25 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray26 = strTokenizer25.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder21.appendAll((java.lang.Object[]) strArray26);
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder21.replaceFirst('a', 'a');
        java.util.stream.IntStream intStream31 = strBuilder21.codePoints();
        java.lang.Object obj32 = properties11.replace((java.lang.Object) reader20, (java.lang.Object) intStream31);
        boolean boolean33 = reader20.ready();
        boolean boolean34 = properties4.containsValue((java.lang.Object) reader20);
        reader20.mark(4);
        long long38 = reader20.skip((long) '4');
        java.nio.CharBuffer charBuffer39 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int40 = reader20.read(charBuffer39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objEntrySet9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(reader20);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(intStream31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
    }

    @Test
    public void test04858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04858");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        int int4 = strBuilder0.indexOf("");
        int int7 = strBuilder0.lastIndexOf('#', (int) (byte) 0);
        boolean boolean9 = strBuilder0.startsWith("4#4");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer10 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder0.appendAll((java.util.Iterator<java.lang.String>) strTokenizer10);
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder0.appendSeparator("{}");
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder0.append((double) 0.0f);
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder0.appendln((int) (byte) 100);
        char[] charArray18 = strBuilder0.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer20 = new org.apache.commons.lang3.text.StrTokenizer(charArray18, 'e');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = strTokenizer20.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strTokenizer10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "0.0100\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "0.0100\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[0, ., 0, 1, 0, 0, \n]");
    }

    @Test
    public void test04859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04859");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst("", "");
        char[] charArray7 = strBuilder3.toCharArray();
        char[] charArray8 = strBuilder0.getChars(charArray7);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer9 = new org.apache.commons.lang3.text.StrTokenizer(charArray7);
        boolean boolean10 = strTokenizer9.hasPrevious();
        java.util.List<java.lang.String> strList11 = strTokenizer9.getTokenList();
        org.apache.commons.lang3.text.StrMatcher strMatcher12 = strTokenizer9.getDelimiterMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder13.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder13.deleteAll('4');
        int int20 = strBuilder18.indexOf('a');
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder21.replaceFirst("", "");
        char[] charArray25 = strBuilder21.toCharArray();
        char[] charArray26 = strBuilder18.getChars(charArray25);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer27 = new org.apache.commons.lang3.text.StrTokenizer(charArray26);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer30 = new org.apache.commons.lang3.text.StrTokenizer(charArray26, '#', '#');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer31 = strTokenizer9.reset(charArray26);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer32 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray26);
        org.apache.commons.lang3.text.StrMatcher strMatcher33 = strTokenizer32.getTrimmerMatcher();
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strMatcher12);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[]");
        org.junit.Assert.assertNotNull(strTokenizer31);
        org.junit.Assert.assertNotNull(strTokenizer32);
        org.junit.Assert.assertNotNull(strMatcher33);
    }

    @Test
    public void test04860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04860");
        char[] charArray2 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer3 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray2);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = new org.apache.commons.lang3.text.StrTokenizer(charArray2);
        char[] charArray5 = null;
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = strTokenizer4.reset(charArray5);
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder10.replaceFirst("", "");
        char[] charArray14 = strBuilder10.toCharArray();
        char[] charArray15 = strBuilder7.getChars(charArray14);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = new org.apache.commons.lang3.text.StrTokenizer(charArray14);
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder17.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer22 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray23 = strTokenizer22.getTokenArray();
        java.lang.String[] strArray24 = strTokenizer22.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder20.appendWithSeparators((java.lang.Object[]) strArray24, "4#4");
        org.apache.commons.lang3.text.StrMatcher strMatcher27 = org.apache.commons.lang3.text.StrMatcher.tabMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder26.deleteAll(strMatcher27);
        org.apache.commons.lang3.text.StrMatcher strMatcher29 = org.apache.commons.lang3.text.StrMatcher.doubleQuoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer30 = new org.apache.commons.lang3.text.StrTokenizer(charArray14, strMatcher27, strMatcher29);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer31 = strTokenizer6.setIgnoredMatcher(strMatcher27);
        java.lang.String[] strArray32 = strTokenizer31.getTokenArray();
        // The following exception was thrown during execution in test generation
        try {
            strTokenizer31.add("0.0true");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: add() is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer3);
        org.junit.Assert.assertNotNull(strTokenizer6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[]");
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strMatcher27);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(strMatcher29);
        org.junit.Assert.assertNotNull(strTokenizer31);
        org.junit.Assert.assertNotNull(strArray32);
    }

    @Test
    public void test04861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04861");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        boolean boolean5 = strBuilder3.startsWith("10.0StrTokenizer[ 4#4]");
        java.lang.String str7 = strBuilder3.rightString((int) (byte) -1);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test04862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04862");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder0.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.appendln(true);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer11 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher12 = strTokenizer11.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrMatcher strMatcher13 = strTokenizer11.getIgnoredMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder7.replaceFirst(strMatcher13, "h");
        java.lang.String str18 = strBuilder15.substring((int) (byte) 1, 13);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder15.insert((int) 'e', (long) '\n');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 101");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strMatcher12);
        org.junit.Assert.assertNotNull(strMatcher13);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "true\n" + "'", str18, "true\n");
    }

    @Test
    public void test04863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04863");
        org.apache.commons.lang3.text.StrSubstitutor strSubstitutor0 = new org.apache.commons.lang3.text.StrSubstitutor();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        int int2 = strBuilder1.capacity();
        java.lang.StringBuffer stringBuffer3 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder1.appendln(stringBuffer3, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder1.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder8.appendln(true);
        boolean boolean13 = strSubstitutor0.replaceIn(strBuilder10, (int) '$', 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = new org.apache.commons.lang3.text.StrBuilder();
        int int15 = strBuilder14.capacity();
        java.lang.StringBuffer stringBuffer16 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder14.appendln(stringBuffer16, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder14.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder14.appendSeparator("java.io.IOException: hi!");
        java.lang.Throwable throwable26 = null;
        java.io.IOException iOException27 = new java.io.IOException("{}", throwable26);
        java.lang.Throwable[] throwableArray28 = iOException27.getSuppressed();
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder24.appendAll((java.lang.Object[]) throwableArray28);
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder24.appendln("StrTokenizer[4#4]");
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder24.appendln(true);
        java.lang.String str34 = strSubstitutor0.replace(strBuilder24);
        strSubstitutor0.setEnableSubstitutionInVariables(true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\n32.0java.io.IOException: hi!StrTokenizer[4#4]\ntrue\n" + "'", str34, "\n32.0java.io.IOException: hi!StrTokenizer[4#4]\ntrue\n");
    }

    @Test
    public void test04864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04864");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder2.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder5.appendln('#');
        java.lang.StringBuffer stringBuffer8 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder5.append(stringBuffer8, (int) (byte) -1, (int) (byte) 100);
        char[] charArray16 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer18 = new org.apache.commons.lang3.text.StrTokenizer(charArray16, ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder5.append(charArray16);
        boolean boolean20 = properties0.equals((java.lang.Object) strBuilder5);
        java.util.Properties properties21 = new java.util.Properties();
        int int22 = properties21.size();
        boolean boolean24 = properties21.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties25 = new java.util.Properties();
        int int26 = properties25.size();
        boolean boolean28 = properties25.containsKey((java.lang.Object) (-1.0f));
        properties21.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        java.util.Collection<java.lang.Object> objCollection30 = properties21.values();
        java.util.Set<java.lang.Object> objSet31 = properties21.keySet();
        boolean boolean32 = properties0.containsValue((java.lang.Object) objSet31);
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = new org.apache.commons.lang3.text.StrBuilder();
        int int34 = strBuilder33.capacity();
        java.lang.StringBuffer stringBuffer35 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder33.appendln(stringBuffer35, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder33.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder33.setLength(32);
        java.io.Writer writer44 = strBuilder43.asWriter();
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = new org.apache.commons.lang3.text.StrBuilder();
        int int46 = strBuilder45.capacity();
        java.lang.StringBuffer stringBuffer47 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = strBuilder45.appendln(stringBuffer47, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder45.insert(1, (double) 32);
        java.lang.String str55 = strBuilder45.rightString((int) ' ');
        boolean boolean57 = strBuilder45.startsWith("");
        char[] charArray58 = strBuilder45.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder62 = strBuilder59.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer64 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray65 = strTokenizer64.getTokenArray();
        java.lang.String[] strArray66 = strTokenizer64.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder68 = strBuilder62.appendWithSeparators((java.lang.Object[]) strArray66, "4#4");
        org.apache.commons.lang3.text.StrMatcher strMatcher69 = org.apache.commons.lang3.text.StrMatcher.tabMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder70 = strBuilder68.deleteAll(strMatcher69);
        int int71 = strBuilder45.lastIndexOf(strMatcher69);
        boolean boolean73 = strBuilder45.startsWith("StrTokenizer[not tokenized yet]");
        java.io.Writer writer74 = writer44.append((java.lang.CharSequence) "StrTokenizer[not tokenized yet]");
        writer44.flush();
        writer44.write((int) (byte) -1);
        properties0.store(writer44, "[4#4]");
        org.apache.commons.lang3.text.StrBuilder strBuilder80 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder83 = strBuilder80.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer85 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray86 = strTokenizer85.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder87 = strBuilder80.appendAll((java.lang.Object[]) strArray86);
        int int89 = strBuilder80.indexOf("java.io.IOException");
        org.apache.commons.lang3.text.StrBuilder strBuilder91 = strBuilder80.appendln((float) 100L);
        org.apache.commons.lang3.text.StrBuilder strBuilder94 = strBuilder80.appendSeparator('3', (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Writer writer97 = writer44.append((java.lang.CharSequence) strBuilder80, 100, 45);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 45");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[ , 4, #, 4]");
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertNotNull(objSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 32 + "'", int34 == 32);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertNotNull(strBuilder43);
        org.junit.Assert.assertNotNull(writer44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 32 + "'", int46 == 32);
        org.junit.Assert.assertNotNull(strBuilder50);
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\n32.0" + "'", str55, "\n32.0");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "\n32.0");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "\n32.0");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[\n, 3, 2, ., 0]");
        org.junit.Assert.assertNotNull(strBuilder62);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strBuilder68);
        org.junit.Assert.assertNotNull(strMatcher69);
        org.junit.Assert.assertNotNull(strBuilder70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(writer74);
        org.junit.Assert.assertNotNull(strBuilder83);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(strBuilder87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(strBuilder91);
        org.junit.Assert.assertNotNull(strBuilder94);
    }

    @Test
    public void test04865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04865");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder5.appendPadding((int) '#', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder11.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.appendln((double) '#');
        boolean boolean15 = strBuilder5.equals(strBuilder14);
        java.util.stream.IntStream intStream16 = strBuilder5.codePoints();
        java.util.Iterator<java.lang.String> strItor17 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder5.appendWithSeparators(strItor17, " 4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder19.replaceFirst(' ', ' ');
        java.util.Properties properties23 = new java.util.Properties();
        int int24 = properties23.size();
        java.lang.Object obj25 = properties23.clone();
        java.util.Set<java.lang.String> strSet26 = properties23.stringPropertyNames();
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder19.appendFixedWidthPadLeft((java.lang.Object) properties23, (int) '$', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder19.insert(2, 10.0f);
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder33.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder35.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder36.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder36.appendSeparator(' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder19.appendln(strBuilder40);
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder19.delete(1, 79);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intStream16);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertNotNull(strBuilder44);
    }

    @Test
    public void test04866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04866");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder2.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = new org.apache.commons.lang3.text.StrBuilder();
        int int5 = strBuilder4.capacity();
        java.lang.StringBuffer stringBuffer6 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder4.appendln(stringBuffer6, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher10 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int11 = strBuilder9.lastIndexOf(strMatcher10);
        boolean boolean12 = strBuilder2.equalsIgnoreCase(strBuilder9);
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder13.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer17 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray18 = strTokenizer17.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder13.appendAll((java.lang.Object[]) strArray18);
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder13.replaceFirst('a', 'a');
        java.lang.StringBuffer stringBuffer23 = strBuilder22.toStringBuffer();
        char[] charArray28 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer30 = new org.apache.commons.lang3.text.StrTokenizer(charArray28, ' ');
        int int31 = strTokenizer30.size();
        boolean boolean32 = strTokenizer30.hasNext();
        java.util.List<java.lang.String> strList33 = strTokenizer30.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder34.replaceFirst("", "");
        char[] charArray38 = strBuilder34.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer40 = new org.apache.commons.lang3.text.StrTokenizer(charArray38, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer41 = new org.apache.commons.lang3.text.StrTokenizer(charArray38);
        boolean boolean42 = strList33.equals((java.lang.Object) charArray38);
        char[] charArray47 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer49 = new org.apache.commons.lang3.text.StrTokenizer(charArray47, ' ');
        int int50 = strTokenizer49.size();
        boolean boolean51 = strTokenizer49.hasNext();
        java.util.List<java.lang.String> strList52 = strTokenizer49.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = new org.apache.commons.lang3.text.StrBuilder();
        int int54 = strBuilder53.capacity();
        java.lang.StringBuffer stringBuffer55 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder53.appendln(stringBuffer55, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = strBuilder53.insert(1, (double) 32);
        java.lang.String str63 = strBuilder53.rightString((int) ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder66 = strBuilder53.insert(1, '#');
        boolean boolean67 = strList52.equals((java.lang.Object) strBuilder53);
        boolean boolean68 = strList33.containsAll((java.util.Collection<java.lang.String>) strList52);
        org.apache.commons.lang3.text.StrBuilder strBuilder69 = strBuilder22.appendAll((java.lang.Iterable<java.lang.String>) strList52);
        org.apache.commons.lang3.text.StrMatcher strMatcher71 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher("hi!");
        int int72 = strList52.lastIndexOf((java.lang.Object) "hi!");
        java.util.Iterator<java.lang.String> strItor73 = strList52.iterator();
        org.apache.commons.lang3.text.StrBuilder strBuilder74 = strBuilder2.appendAll((java.lang.Iterable<java.lang.String>) strList52);
        java.lang.Object obj75 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder78 = strBuilder74.appendFixedWidthPadLeft(obj75, 0, ' ');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer80 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder81 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder84 = strBuilder81.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder86 = strBuilder84.appendln('#');
        java.lang.StringBuffer stringBuffer87 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder90 = strBuilder84.append(stringBuffer87, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder92 = strBuilder84.deleteFirst("hi!");
        char[] charArray93 = strBuilder84.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer94 = strTokenizer80.reset(charArray93);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer95 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray93);
        org.apache.commons.lang3.text.StrBuilder strBuilder96 = strBuilder78.append(charArray93);
        java.lang.String str98 = strBuilder78.rightString(37);
        org.apache.commons.lang3.text.StrBuilder strBuilder99 = strBuilder78.reverse();
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strMatcher10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(stringBuffer23);
        org.junit.Assert.assertEquals(stringBuffer23.toString(), "");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 32 + "'", int54 == 32);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertNotNull(strBuilder61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\n32.0" + "'", str63, "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strBuilder69);
        org.junit.Assert.assertNotNull(strMatcher71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(strItor73);
        org.junit.Assert.assertNotNull(strBuilder74);
        org.junit.Assert.assertNotNull(strBuilder78);
        org.junit.Assert.assertNotNull(strTokenizer80);
        org.junit.Assert.assertNotNull(strBuilder84);
        org.junit.Assert.assertNotNull(strBuilder86);
        org.junit.Assert.assertNotNull(strBuilder90);
        org.junit.Assert.assertNotNull(strBuilder92);
        org.junit.Assert.assertNotNull(charArray93);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray93), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray93), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray93), "[#, \n]");
        org.junit.Assert.assertNotNull(strTokenizer94);
        org.junit.Assert.assertNotNull(strTokenizer95);
        org.junit.Assert.assertNotNull(strBuilder96);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "4#4#\n" + "'", str98, "4#4#\n");
        org.junit.Assert.assertNotNull(strBuilder99);
    }

    @Test
    public void test04867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04867");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        java.lang.String str10 = strBuilder0.rightString((int) ' ');
        boolean boolean12 = strBuilder0.startsWith("");
        char[] charArray13 = strBuilder0.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder0.insert(1, (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder0.append(53);
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder18.appendSeparator("#", 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder18.minimizeCapacity();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray25 = strBuilder22.toCharArray(11, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: end < start");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\n32.0" + "'", str10, "\n32.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "\n32.0");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "\n32.0");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[\n, 3, 2, ., 0]");
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder22);
    }

    @Test
    public void test04868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04868");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst("", "");
        char[] charArray7 = strBuilder3.toCharArray();
        char[] charArray8 = strBuilder0.getChars(charArray7);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer9 = new org.apache.commons.lang3.text.StrTokenizer(charArray7);
        boolean boolean10 = strTokenizer9.hasPrevious();
        java.util.List<java.lang.String> strList11 = strTokenizer9.getTokenList();
        boolean boolean12 = strTokenizer9.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher13 = strTokenizer9.getDelimiterMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = strTokenizer9.setDelimiterString("1001\n");
        int int16 = strTokenizer15.previousIndex();
        java.lang.String[] strArray17 = strTokenizer15.getTokenArray();
        boolean boolean18 = strTokenizer15.hasNext();
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMatcher13);
        org.junit.Assert.assertNotNull(strTokenizer15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test04869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04869");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray5 = strTokenizer4.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder0.appendAll((java.lang.Object[]) strArray5);
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder0.replaceFirst('a', 'a');
        java.lang.StringBuffer stringBuffer10 = strBuilder9.toStringBuffer();
        char[] charArray15 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer17 = new org.apache.commons.lang3.text.StrTokenizer(charArray15, ' ');
        int int18 = strTokenizer17.size();
        boolean boolean19 = strTokenizer17.hasNext();
        java.util.List<java.lang.String> strList20 = strTokenizer17.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder21.replaceFirst("", "");
        char[] charArray25 = strBuilder21.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer27 = new org.apache.commons.lang3.text.StrTokenizer(charArray25, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer28 = new org.apache.commons.lang3.text.StrTokenizer(charArray25);
        boolean boolean29 = strList20.equals((java.lang.Object) charArray25);
        char[] charArray34 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer36 = new org.apache.commons.lang3.text.StrTokenizer(charArray34, ' ');
        int int37 = strTokenizer36.size();
        boolean boolean38 = strTokenizer36.hasNext();
        java.util.List<java.lang.String> strList39 = strTokenizer36.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = new org.apache.commons.lang3.text.StrBuilder();
        int int41 = strBuilder40.capacity();
        java.lang.StringBuffer stringBuffer42 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = strBuilder40.appendln(stringBuffer42, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder40.insert(1, (double) 32);
        java.lang.String str50 = strBuilder40.rightString((int) ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder40.insert(1, '#');
        boolean boolean54 = strList39.equals((java.lang.Object) strBuilder40);
        boolean boolean55 = strList20.containsAll((java.util.Collection<java.lang.String>) strList39);
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = strBuilder9.appendAll((java.lang.Iterable<java.lang.String>) strList39);
        org.apache.commons.lang3.text.StrMatcher strMatcher58 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher("hi!");
        int int59 = strList39.lastIndexOf((java.lang.Object) "hi!");
        char[] charArray64 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer66 = new org.apache.commons.lang3.text.StrTokenizer(charArray64, ' ');
        int int67 = strTokenizer66.size();
        boolean boolean68 = strTokenizer66.hasNext();
        java.util.List<java.lang.String> strList69 = strTokenizer66.getTokenList();
        java.lang.String[] strArray73 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        boolean boolean76 = strList69.addAll((java.util.Collection<java.lang.String>) strList74);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer78 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray79 = strTokenizer78.getTokenArray();
        java.lang.String[] strArray80 = strTokenizer78.getTokenArray();
        boolean boolean81 = strTokenizer78.hasNext();
        int int82 = strTokenizer78.size();
        org.apache.commons.lang3.text.StrMatcher strMatcher83 = strTokenizer78.getQuoteMatcher();
        java.util.List<java.lang.String> strList84 = strTokenizer78.getTokenList();
        boolean boolean85 = strList69.retainAll((java.util.Collection<java.lang.String>) strList84);
        boolean boolean86 = strList39.removeAll((java.util.Collection<java.lang.String>) strList84);
        java.lang.Object[] objArray87 = strList39.toArray();
        java.util.Collection<java.lang.String> strCollection88 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean89 = strList39.removeAll(strCollection88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(stringBuffer10);
        org.junit.Assert.assertEquals(stringBuffer10.toString(), "");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 32 + "'", int41 == 32);
        org.junit.Assert.assertNotNull(strBuilder45);
        org.junit.Assert.assertNotNull(strBuilder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\n32.0" + "'", str50, "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strBuilder56);
        org.junit.Assert.assertNotNull(strMatcher58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(strMatcher83);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[4#4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[4#4]");
    }

    @Test
    public void test04870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04870");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        java.lang.String str10 = strBuilder0.rightString((int) ' ');
        boolean boolean12 = strBuilder0.startsWith("");
        char[] charArray13 = strBuilder0.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder0.ensureCapacity((int) (short) 0);
        java.lang.StringBuffer stringBuffer16 = strBuilder0.toStringBuffer();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder0.setCharAt(4, '\000');
        java.lang.String str22 = strBuilder19.midString(40, 14);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\n32.0" + "'", str10, "\n32.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "\n32.0");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "\n32.0");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[\n, 3, 2, ., 0]");
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(stringBuffer16);
        org.junit.Assert.assertEquals(stringBuffer16.toString(), "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test04871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04871");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder2.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder3.replaceFirst('4', 'a');
        char[] charArray9 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder3.append(charArray9, 10, (int) '$');
        int int13 = strBuilder12.size();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence16 = strBuilder12.subSequence((int) '#', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test04872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04872");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.deleteFirst('a');
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder3.trim();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.clear();
        boolean boolean7 = strBuilder3.endsWith("\n\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder3.replaceFirst("\naaaa100", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer13 = new org.apache.commons.lang3.text.StrTokenizer("java.io.IOException", "h");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = strTokenizer13.setIgnoreEmptyTokens(true);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer17 = strTokenizer15.setEmptyTokenAsNull(false);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = strTokenizer15.reset("\n-1.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder3.appendFixedWidthPadRight((java.lang.Object) strTokenizer19, 37, '\n');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strTokenizer15);
        org.junit.Assert.assertNotNull(strTokenizer17);
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertNotNull(strBuilder22);
    }

    @Test
    public void test04873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04873");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.appendSeparator('#', (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder6.append((float) '$');
        char char10 = strBuilder8.charAt(0);
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder8.setNewLineText("\n32.0java.io.IOException: hi!");
        char[] charArray13 = strBuilder12.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher16 = strTokenizer15.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer17 = strTokenizer15.reset();
        int int18 = strTokenizer17.previousIndex();
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder12.appendFixedWidthPadLeft((java.lang.Object) strTokenizer17, 0, 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder22.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder24.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder25.appendSeparator("hi!", "4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = new org.apache.commons.lang3.text.StrBuilder();
        int int30 = strBuilder29.capacity();
        java.lang.StringBuffer stringBuffer31 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder29.appendln(stringBuffer31, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher35 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int36 = strBuilder34.lastIndexOf(strMatcher35);
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder25.replaceFirst(strMatcher35, "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder12.append((java.lang.Object) strMatcher35);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray42 = strBuilder39.toCharArray(80, (int) 'o');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: end < start");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + '#' + "'", char10 == '#');
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "#36.0");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "#36.0");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, 3, 6, ., 0]");
        org.junit.Assert.assertNotNull(strMatcher16);
        org.junit.Assert.assertNotNull(strTokenizer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 32 + "'", int30 == 32);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strMatcher35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(strBuilder39);
    }

    @Test
    public void test04874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04874");
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder(53);
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder1.appendFixedWidthPadLeft((java.lang.Object) "\naaaa100", 103, 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder6.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder9.replaceFirst("", "");
        char[] charArray13 = strBuilder9.toCharArray();
        char[] charArray14 = strBuilder6.getChars(charArray13);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = new org.apache.commons.lang3.text.StrTokenizer(charArray13);
        boolean boolean16 = strTokenizer15.hasPrevious();
        java.util.List<java.lang.String> strList17 = strTokenizer15.getTokenList();
        java.lang.Object[] objArray18 = strList17.toArray();
        java.util.ListIterator<java.lang.String> strItor19 = strList17.listIterator();
        boolean boolean21 = strList17.add("97\nhi!101.0\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder5.appendWithSeparators((java.lang.Iterable<java.lang.String>) strList17, "\ntrue\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder23.reverse();
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strBuilder24);
    }

    @Test
    public void test04875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04875");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder4.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder6.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder0.appendFixedWidthPadRight((java.lang.Object) strBuilder9, (int) (byte) -1, '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.append("\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder12.replaceFirst("StrTokenizer[not tokenized yet]", "{}");
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder17.insert((int) (short) 1, (float) (-1));
        java.lang.StringBuffer stringBuffer21 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder17.append(stringBuffer21, (-1), 10);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder24.appendSeparator("{}3.0", "1001\n");
        java.io.Reader reader28 = strBuilder27.asReader();
        boolean boolean29 = reader28.ready();
        reader28.close();
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(reader28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test04876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04876");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst('a', '4');
        java.io.Writer writer7 = strBuilder6.asWriter();
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder8.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder11.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder15.replaceFirst("", "");
        char[] charArray19 = strBuilder15.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder14.appendln(charArray19);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer21 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray19);
        writer7.write(charArray19);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer23 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray19);
        boolean boolean24 = strTokenizer23.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = strTokenizer23.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(writer7);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertNotNull(strTokenizer21);
        org.junit.Assert.assertNotNull(strTokenizer23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test04877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04877");
        java.util.Properties properties0 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder4.appendln('#');
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder9.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = new org.apache.commons.lang3.text.StrBuilder();
        int int12 = strBuilder11.capacity();
        java.lang.StringBuffer stringBuffer13 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder11.appendln(stringBuffer13, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher17 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int18 = strBuilder16.lastIndexOf(strMatcher17);
        boolean boolean19 = strBuilder9.equalsIgnoreCase(strBuilder16);
        char[] charArray22 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer23 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray22);
        boolean boolean24 = properties0.replace((java.lang.Object) strBuilder6, (java.lang.Object) strBuilder9, (java.lang.Object) strTokenizer23);
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder9.deleteAll("StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder9.deleteAll("1");
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder9.append((float) (byte) -1);
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder9.appendPadding(8, 't');
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder9.appendSeparator("#", (int) 'e');
        boolean boolean38 = strBuilder36.contains("\n#32.0");
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strMatcher17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test04878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04878");
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray7 = strTokenizer6.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder1.appendAll((java.lang.Object[]) strArray7);
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder12.replaceFirst("", "");
        char[] charArray16 = strBuilder12.toCharArray();
        char[] charArray17 = strBuilder9.getChars(charArray16);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer18 = new org.apache.commons.lang3.text.StrTokenizer(charArray16);
        char[] charArray19 = strBuilder1.getChars(charArray16);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer21 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher22 = strTokenizer21.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer24 = strTokenizer21.reset("");
        org.apache.commons.lang3.text.StrMatcher strMatcher25 = strTokenizer21.getIgnoredMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer26 = new org.apache.commons.lang3.text.StrTokenizer(charArray16, strMatcher25);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer27 = new org.apache.commons.lang3.text.StrTokenizer("10.0", strMatcher25);
        java.lang.String str28 = strTokenizer27.next();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer30 = strTokenizer27.setEmptyTokenAsNull(false);
        java.lang.String str31 = strTokenizer30.nextToken();
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
        org.junit.Assert.assertNotNull(strMatcher22);
        org.junit.Assert.assertNotNull(strTokenizer24);
        org.junit.Assert.assertNotNull(strMatcher25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "10.0" + "'", str28, "10.0");
        org.junit.Assert.assertNotNull(strTokenizer30);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test04879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04879");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder2.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.setNullText("");
        char[] charArray6 = strBuilder5.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer8 = new org.apache.commons.lang3.text.StrTokenizer(charArray6, "true\n###################################3\n");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer11 = new org.apache.commons.lang3.text.StrTokenizer(charArray6, ' ', ' ');
        boolean boolean12 = strTokenizer11.hasPrevious();
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04880");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer2 = new org.apache.commons.lang3.text.StrTokenizer("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000", "java.io.IOException: \n");
        java.lang.String[] strArray3 = strTokenizer2.getTokenArray();
        org.junit.Assert.assertNotNull(strArray3);
    }

    @Test
    public void test04881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04881");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        char[] charArray13 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = new org.apache.commons.lang3.text.StrTokenizer(charArray13, ' ');
        int int16 = strTokenizer15.size();
        boolean boolean17 = strTokenizer15.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher18 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = strTokenizer15.setIgnoredMatcher(strMatcher18);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.replaceFirst("", "");
        java.lang.Object obj24 = properties0.putIfAbsent((java.lang.Object) strMatcher18, (java.lang.Object) strBuilder20);
        java.lang.Object obj27 = properties0.setProperty(" 4#4", "\n32.0");
        java.lang.Object obj30 = properties0.setProperty("hi!", "hi!");
        java.lang.String str32 = properties0.getProperty("{}");
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder33.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder35.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder36.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder36.replaceFirst('4', 'a');
        boolean boolean42 = properties0.containsKey((java.lang.Object) 'a');
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties0.elements();
        boolean boolean44 = properties0.isEmpty();
        properties0.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strMatcher18);
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objEnumeration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test04882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04882");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder4.replaceFirst("", "");
        boolean boolean9 = strBuilder7.endsWith("StrTokenizer[]");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer11 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder12.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder15.appendln('#');
        java.lang.StringBuffer stringBuffer18 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder15.append(stringBuffer18, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder15.deleteFirst("hi!");
        char[] charArray24 = strBuilder15.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer25 = strTokenizer11.reset(charArray24);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer26 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray24);
        char[] charArray27 = strBuilder7.getChars(charArray24);
        java.lang.Object obj28 = properties0.remove((java.lang.Object) charArray27);
        java.lang.String str30 = properties0.getProperty("\n32.0");
        java.lang.String str31 = properties0.toString();
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = new org.apache.commons.lang3.text.StrBuilder();
        int int33 = strBuilder32.capacity();
        java.lang.StringBuffer stringBuffer34 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder32.appendln(stringBuffer34, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder32.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder32.setLength(32);
        java.io.Writer writer43 = strBuilder42.asWriter();
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = new org.apache.commons.lang3.text.StrBuilder();
        int int45 = strBuilder44.capacity();
        java.lang.StringBuffer stringBuffer46 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder44.appendln(stringBuffer46, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder44.insert(1, (double) 32);
        java.lang.String str54 = strBuilder44.rightString((int) ' ');
        boolean boolean56 = strBuilder44.startsWith("");
        char[] charArray57 = strBuilder44.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = strBuilder58.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer63 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray64 = strTokenizer63.getTokenArray();
        java.lang.String[] strArray65 = strTokenizer63.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder67 = strBuilder61.appendWithSeparators((java.lang.Object[]) strArray65, "4#4");
        org.apache.commons.lang3.text.StrMatcher strMatcher68 = org.apache.commons.lang3.text.StrMatcher.tabMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder69 = strBuilder67.deleteAll(strMatcher68);
        int int70 = strBuilder44.lastIndexOf(strMatcher68);
        boolean boolean72 = strBuilder44.startsWith("StrTokenizer[not tokenized yet]");
        java.io.Writer writer73 = writer43.append((java.lang.CharSequence) "StrTokenizer[not tokenized yet]");
        org.apache.commons.lang3.text.StrBuilder strBuilder74 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder77 = strBuilder74.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder80 = strBuilder77.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder81 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder84 = strBuilder81.replaceFirst("", "");
        char[] charArray85 = strBuilder81.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder86 = strBuilder80.appendln(charArray85);
        org.apache.commons.lang3.text.StrBuilder strBuilder88 = strBuilder86.setNewLineText("\n");
        java.lang.Object obj89 = properties0.replace((java.lang.Object) writer43, (java.lang.Object) strBuilder88);
        java.io.OutputStream outputStream90 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(outputStream90, "false");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strTokenizer11);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#, \n]");
        org.junit.Assert.assertNotNull(strTokenizer25);
        org.junit.Assert.assertNotNull(strTokenizer26);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#, \n]");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{}" + "'", str31, "{}");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 32 + "'", int33 == 32);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertNotNull(writer43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 32 + "'", int45 == 32);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\n32.0" + "'", str54, "\n32.0");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "\n32.0");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "\n32.0");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[\n, 3, 2, ., 0]");
        org.junit.Assert.assertNotNull(strBuilder61);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strBuilder67);
        org.junit.Assert.assertNotNull(strMatcher68);
        org.junit.Assert.assertNotNull(strBuilder69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(writer73);
        org.junit.Assert.assertNotNull(strBuilder77);
        org.junit.Assert.assertNotNull(strBuilder80);
        org.junit.Assert.assertNotNull(strBuilder84);
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray85), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray85), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray85), "[]");
        org.junit.Assert.assertNotNull(strBuilder86);
        org.junit.Assert.assertNotNull(strBuilder88);
        org.junit.Assert.assertNull(obj89);
    }

    @Test
    public void test04883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04883");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder4.replaceFirst("", "");
        char[] charArray8 = strBuilder4.toCharArray();
        boolean boolean9 = properties0.containsValue((java.lang.Object) charArray8);
        boolean boolean10 = properties0.isEmpty();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test04884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04884");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer5 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher6 = strTokenizer5.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer5, "h");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer10 = strTokenizer5.reset("\n32.0");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer12 = strTokenizer10.setEmptyTokenAsNull(true);
        boolean boolean13 = strTokenizer10.hasNext();
        java.lang.String str14 = strTokenizer10.next();
        java.lang.String str15 = strTokenizer10.nextToken();
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strMatcher6);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strTokenizer10);
        org.junit.Assert.assertNotNull(strTokenizer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "32.0" + "'", str14, "32.0");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test04885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04885");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        boolean boolean8 = strTokenizer6.hasNext();
        java.util.List<java.lang.String> strList9 = strTokenizer6.getTokenList();
        java.lang.String[] strArray13 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        boolean boolean16 = strList9.addAll((java.util.Collection<java.lang.String>) strList14);
        java.util.Spliterator<java.lang.String> strSpliterator17 = strList14.spliterator();
        int int18 = strList14.size();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer21 = new org.apache.commons.lang3.text.StrTokenizer(" 4#4", "");
        int int22 = strList14.lastIndexOf((java.lang.Object) strTokenizer21);
        strList14.clear();
        java.util.ListIterator<java.lang.String> strItor24 = strList14.listIterator();
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder25.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder28.replaceFirst("", "");
        char[] charArray32 = strBuilder28.toCharArray();
        char[] charArray33 = strBuilder25.getChars(charArray32);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer34 = new org.apache.commons.lang3.text.StrTokenizer(charArray32);
        boolean boolean35 = strTokenizer34.hasPrevious();
        java.util.List<java.lang.String> strList36 = strTokenizer34.getTokenList();
        strList36.clear();
        boolean boolean38 = strList14.retainAll((java.util.Collection<java.lang.String>) strList36);
        java.lang.Object obj39 = null;
        boolean boolean40 = strList36.remove(obj39);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strSpliterator17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test04886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04886");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet9 = properties4.entrySet();
        properties4.clear();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder11.replaceFirst("", "");
        java.io.Reader reader15 = strBuilder11.asReader();
        properties4.load(reader15);
        int int17 = reader15.read();
        reader15.reset();
        boolean boolean19 = reader15.markSupported();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objEntrySet9);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(reader15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test04887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04887");
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder("true");
        org.apache.commons.lang3.text.StrMatcher strMatcher2 = null;
        int int4 = strBuilder1.indexOf(strMatcher2, 43);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test04888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04888");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        boolean boolean8 = strTokenizer6.hasNext();
        java.util.List<java.lang.String> strList9 = strTokenizer6.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder10.replaceFirst("", "");
        char[] charArray14 = strBuilder10.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = new org.apache.commons.lang3.text.StrTokenizer(charArray14, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer17 = new org.apache.commons.lang3.text.StrTokenizer(charArray14);
        boolean boolean18 = strList9.equals((java.lang.Object) charArray14);
        char[] charArray23 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer25 = new org.apache.commons.lang3.text.StrTokenizer(charArray23, ' ');
        int int26 = strTokenizer25.size();
        boolean boolean27 = strTokenizer25.hasNext();
        java.util.List<java.lang.String> strList28 = strTokenizer25.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = new org.apache.commons.lang3.text.StrBuilder();
        int int30 = strBuilder29.capacity();
        java.lang.StringBuffer stringBuffer31 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder29.appendln(stringBuffer31, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder29.insert(1, (double) 32);
        java.lang.String str39 = strBuilder29.rightString((int) ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder29.insert(1, '#');
        boolean boolean43 = strList28.equals((java.lang.Object) strBuilder29);
        boolean boolean44 = strList9.containsAll((java.util.Collection<java.lang.String>) strList28);
        java.lang.String str46 = strList9.remove((int) (short) 0);
        java.util.Iterator<java.lang.String> strItor47 = strList9.iterator();
        java.util.ListIterator<java.lang.String> strItor48 = strList9.listIterator();
        java.util.stream.Stream<java.lang.String> strStream49 = strList9.parallelStream();
        boolean boolean50 = strList9.isEmpty();
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 32 + "'", int30 == 32);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\n32.0" + "'", str39, "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "4#4" + "'", str46, "4#4");
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertNotNull(strItor48);
        org.junit.Assert.assertNotNull(strStream49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test04889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04889");
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder("10.0StrTokenizer[ 4#4]\n");
    }

    @Test
    public void test04890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04890");
        java.util.Properties properties0 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder4.appendln('#');
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder9.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = new org.apache.commons.lang3.text.StrBuilder();
        int int12 = strBuilder11.capacity();
        java.lang.StringBuffer stringBuffer13 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder11.appendln(stringBuffer13, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher17 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int18 = strBuilder16.lastIndexOf(strMatcher17);
        boolean boolean19 = strBuilder9.equalsIgnoreCase(strBuilder16);
        char[] charArray22 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer23 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray22);
        boolean boolean24 = properties0.replace((java.lang.Object) strBuilder6, (java.lang.Object) strBuilder9, (java.lang.Object) strTokenizer23);
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = new org.apache.commons.lang3.text.StrBuilder();
        int int26 = strBuilder25.capacity();
        java.lang.StringBuffer stringBuffer27 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder25.appendln(stringBuffer27, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder25.setNullText("");
        java.lang.Object obj33 = properties0.get((java.lang.Object) strBuilder32);
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder32.append((long) (byte) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder35.deleteAll('#');
        int int40 = strBuilder35.indexOf(' ', 43);
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder35.append("########a4\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = strBuilder43.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder46.replaceFirst('a', '4');
        char[] charArray54 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer56 = new org.apache.commons.lang3.text.StrTokenizer(charArray54, ' ');
        int int57 = strTokenizer56.size();
        boolean boolean58 = strTokenizer56.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher59 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer60 = strTokenizer56.setIgnoredMatcher(strMatcher59);
        int int62 = strBuilder46.indexOf(strMatcher59, (int) (short) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = strBuilder46.deleteFirst("StrTokenizer[32.0]");
        char[] charArray69 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer71 = new org.apache.commons.lang3.text.StrTokenizer(charArray69, ' ');
        int int72 = strTokenizer71.size();
        boolean boolean73 = strTokenizer71.hasNext();
        java.util.List<java.lang.String> strList74 = strTokenizer71.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder75 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder78 = strBuilder75.replaceFirst("", "");
        char[] charArray79 = strBuilder75.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer81 = new org.apache.commons.lang3.text.StrTokenizer(charArray79, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer82 = new org.apache.commons.lang3.text.StrTokenizer(charArray79);
        boolean boolean83 = strList74.equals((java.lang.Object) charArray79);
        boolean boolean85 = strList74.add("\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder87 = strBuilder64.appendWithSeparators((java.lang.Iterable<java.lang.String>) strList74, "StrTokenizer[not tokenized yet]");
        org.apache.commons.lang3.text.StrBuilder strBuilder88 = strBuilder42.appendAll((java.lang.Iterable<java.lang.String>) strList74);
        java.lang.String str91 = strBuilder88.midString(22, 57);
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strMatcher17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertNotNull(strBuilder46);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strMatcher59);
        org.junit.Assert.assertNotNull(strTokenizer60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(strBuilder64);
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertNotNull(strBuilder78);
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(strBuilder87);
        org.junit.Assert.assertNotNull(strBuilder88);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
    }

    @Test
    public void test04891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04891");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        char[] charArray13 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = new org.apache.commons.lang3.text.StrTokenizer(charArray13, ' ');
        int int16 = strTokenizer15.size();
        boolean boolean17 = strTokenizer15.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher18 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = strTokenizer15.setIgnoredMatcher(strMatcher18);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.replaceFirst("", "");
        java.lang.Object obj24 = properties0.putIfAbsent((java.lang.Object) strMatcher18, (java.lang.Object) strBuilder20);
        java.lang.Object obj27 = properties0.setProperty(" 4#4", "\n32.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = new org.apache.commons.lang3.text.StrBuilder();
        int int29 = strBuilder28.capacity();
        java.lang.StringBuffer stringBuffer30 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder28.appendln(stringBuffer30, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher34 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int35 = strBuilder33.lastIndexOf(strMatcher34);
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder33.insert((int) (short) 1, 32);
        java.util.Properties properties39 = new java.util.Properties();
        int int40 = properties39.size();
        boolean boolean42 = properties39.containsKey((java.lang.Object) (-1.0f));
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet43 = properties39.entrySet();
        java.lang.Object obj44 = properties0.putIfAbsent((java.lang.Object) strBuilder38, (java.lang.Object) objEntrySet43);
        boolean boolean46 = strBuilder38.startsWith("4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder38.setNullText("java.io.IOException");
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = strBuilder38.appendln((float) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray53 = strBuilder38.toCharArray(35, 39);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: end < start");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strMatcher18);
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 32 + "'", int29 == 32);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strMatcher34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objEntrySet43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strBuilder48);
        org.junit.Assert.assertNotNull(strBuilder50);
    }

    @Test
    public void test04892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04892");
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder(" 4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder1.appendSeparator('$');
        int int6 = strBuilder1.indexOf("\n0", 11);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test04893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04893");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer2 = new org.apache.commons.lang3.text.StrTokenizer("", '$');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = strTokenizer2.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04894");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        java.util.Properties properties9 = new java.util.Properties();
        int int10 = properties9.size();
        boolean boolean12 = properties9.containsKey((java.lang.Object) (-1.0f));
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder13.replaceFirst("", "");
        char[] charArray17 = strBuilder13.toCharArray();
        boolean boolean18 = properties9.containsValue((java.lang.Object) charArray17);
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder0.append(charArray17, (int) (byte) 0, 0);
        java.lang.String str22 = strBuilder21.toString();
        char[] charArray27 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer29 = new org.apache.commons.lang3.text.StrTokenizer(charArray27, ' ');
        java.lang.String str30 = strTokenizer29.next();
        int int31 = strTokenizer29.previousIndex();
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder21.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer29, "\n32.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder21.deleteCharAt((int) (short) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder21.appendln('\n');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder21.insert((int) '2', (double) 169);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 50");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\n32.0" + "'", str22, "\n32.0");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ , 4, #, 4]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "4#4" + "'", str30, "4#4");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(strBuilder37);
    }

    @Test
    public void test04895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04895");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder2.minimizeCapacity();
        java.lang.StringBuffer stringBuffer4 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder3.appendln(stringBuffer4, (int) (byte) 1, 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder3.clear();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder8.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder8.appendln((long) (-1));
        org.apache.commons.lang3.text.StrTokenizer strTokenizer12 = strBuilder8.asTokenizer();
        // The following exception was thrown during execution in test generation
        try {
            strTokenizer12.add("\n2.0");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: add() is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strTokenizer12);
    }

    @Test
    public void test04896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04896");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.setLength(32);
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder10.trim();
        boolean boolean13 = strBuilder10.contains("4#4");
        java.io.IOException iOException16 = new java.io.IOException("hi!");
        java.io.IOException iOException18 = new java.io.IOException("hi!");
        iOException16.addSuppressed((java.lang.Throwable) iOException18);
        java.io.IOException iOException21 = new java.io.IOException("hi!");
        java.io.IOException iOException23 = new java.io.IOException("hi!");
        iOException21.addSuppressed((java.lang.Throwable) iOException23);
        iOException18.addSuppressed((java.lang.Throwable) iOException23);
        java.io.IOException iOException26 = new java.io.IOException("hi!", (java.lang.Throwable) iOException23);
        java.lang.Throwable[] throwableArray27 = iOException23.getSuppressed();
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder10.appendAll((java.lang.Object[]) throwableArray27);
        int int31 = strBuilder10.indexOf("100.0\000\000\000\000\000", 3);
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder32.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder35.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder37.appendPadding((int) '#', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder41.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder43.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = strBuilder44.appendln((double) '#');
        boolean boolean47 = strBuilder37.equals(strBuilder46);
        java.util.stream.IntStream intStream48 = strBuilder37.codePoints();
        java.util.Iterator<java.lang.String> strItor49 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder37.appendWithSeparators(strItor49, " 4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder51.replaceFirst(' ', ' ');
        java.io.Writer writer55 = strBuilder54.asWriter();
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = strBuilder56.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer61 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher62 = strTokenizer61.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = strBuilder56.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer61, "h");
        org.apache.commons.lang3.text.StrBuilder strBuilder66 = strBuilder56.setLength((int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder69 = strBuilder66.insert((int) '4', (double) (byte) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder72 = strBuilder54.append(strBuilder69, 32, (int) (byte) 10);
        char[] charArray73 = strBuilder69.toCharArray();
        boolean boolean74 = strBuilder10.equals((java.lang.Object) strBuilder69);
        org.apache.commons.lang3.text.StrBuilder strBuilder75 = strBuilder10.minimizeCapacity();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNotNull(strBuilder43);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strBuilder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intStream48);
        org.junit.Assert.assertNotNull(strBuilder51);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertNotNull(writer55);
        org.junit.Assert.assertNotNull(strBuilder59);
        org.junit.Assert.assertNotNull(strMatcher62);
        org.junit.Assert.assertNotNull(strBuilder64);
        org.junit.Assert.assertNotNull(strBuilder66);
        org.junit.Assert.assertNotNull(strBuilder69);
        org.junit.Assert.assertNotNull(strBuilder72);
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001.0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001.0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strBuilder75);
    }

    @Test
    public void test04897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04897");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        int int4 = strBuilder0.indexOf("");
        int int7 = strBuilder0.lastIndexOf('#', (int) (byte) 0);
        boolean boolean9 = strBuilder0.startsWith("4#4");
        char[] charArray14 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = new org.apache.commons.lang3.text.StrTokenizer(charArray14, ' ');
        int int17 = strTokenizer16.size();
        boolean boolean18 = strTokenizer16.hasNext();
        java.util.List<java.lang.String> strList19 = strTokenizer16.getTokenList();
        java.lang.String[] strArray23 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        boolean boolean26 = strList19.addAll((java.util.Collection<java.lang.String>) strList24);
        java.util.Spliterator<java.lang.String> strSpliterator27 = strList24.spliterator();
        int int28 = strList24.size();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer31 = new org.apache.commons.lang3.text.StrTokenizer(" 4#4", "");
        int int32 = strList24.lastIndexOf((java.lang.Object) strTokenizer31);
        strList24.clear();
        java.util.ListIterator<java.lang.String> strItor34 = strList24.listIterator();
        java.lang.Object obj35 = null;
        boolean boolean36 = strList24.contains(obj35);
        java.util.ListIterator<java.lang.String> strItor37 = strList24.listIterator();
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder0.appendAll((java.lang.Iterable<java.lang.String>) strList24);
        char[] charArray43 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer45 = new org.apache.commons.lang3.text.StrTokenizer(charArray43, ' ');
        int int46 = strTokenizer45.size();
        boolean boolean47 = strTokenizer45.hasNext();
        java.util.List<java.lang.String> strList48 = strTokenizer45.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder49.replaceFirst("", "");
        char[] charArray53 = strBuilder49.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer55 = new org.apache.commons.lang3.text.StrTokenizer(charArray53, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer56 = new org.apache.commons.lang3.text.StrTokenizer(charArray53);
        boolean boolean57 = strList48.equals((java.lang.Object) charArray53);
        char[] charArray62 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer64 = new org.apache.commons.lang3.text.StrTokenizer(charArray62, ' ');
        int int65 = strTokenizer64.size();
        boolean boolean66 = strTokenizer64.hasNext();
        java.util.List<java.lang.String> strList67 = strTokenizer64.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder68 = new org.apache.commons.lang3.text.StrBuilder();
        int int69 = strBuilder68.capacity();
        java.lang.StringBuffer stringBuffer70 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder73 = strBuilder68.appendln(stringBuffer70, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder76 = strBuilder68.insert(1, (double) 32);
        java.lang.String str78 = strBuilder68.rightString((int) ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder81 = strBuilder68.insert(1, '#');
        boolean boolean82 = strList67.equals((java.lang.Object) strBuilder68);
        boolean boolean83 = strList48.containsAll((java.util.Collection<java.lang.String>) strList67);
        java.lang.String str85 = strList48.remove((int) (short) 0);
        java.util.Iterator<java.lang.String> strItor86 = strList48.iterator();
        java.util.ListIterator<java.lang.String> strItor87 = strList48.listIterator();
        java.lang.String[] strArray89 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList90 = new java.util.ArrayList<java.lang.String>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList90, strArray89);
        java.lang.Object obj92 = null;
        boolean boolean93 = strList90.contains(obj92);
        java.util.stream.Stream<java.lang.String> strStream94 = strList90.stream();
        boolean boolean95 = strList48.retainAll((java.util.Collection<java.lang.String>) strList90);
        boolean boolean96 = strList90.isEmpty();
        boolean boolean97 = strList24.retainAll((java.util.Collection<java.lang.String>) strList90);
        int int98 = strList24.size();
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strSpliterator27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 32 + "'", int69 == 32);
        org.junit.Assert.assertNotNull(strBuilder73);
        org.junit.Assert.assertNotNull(strBuilder76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\n32.0" + "'", str78, "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "4#4" + "'", str85, "4#4");
        org.junit.Assert.assertNotNull(strItor86);
        org.junit.Assert.assertNotNull(strItor87);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(strStream94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test04898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04898");
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder((int) (byte) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst('$', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder1.append('a');
        int int8 = strBuilder1.lastIndexOf("\n32.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = new org.apache.commons.lang3.text.StrBuilder();
        int int10 = strBuilder9.capacity();
        java.lang.StringBuffer stringBuffer11 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder9.appendln(stringBuffer11, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder9.insert(1, (double) 32);
        boolean boolean18 = strBuilder9.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder9.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder9.clear();
        int int21 = strBuilder20.capacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder1.append(strBuilder20);
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = new org.apache.commons.lang3.text.StrBuilder();
        int int25 = strBuilder24.capacity();
        java.lang.StringBuffer stringBuffer26 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder24.appendln(stringBuffer26, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder24.insert(1, (double) 32);
        java.lang.String str34 = strBuilder24.rightString((int) ' ');
        boolean boolean36 = strBuilder24.startsWith("");
        char[] charArray37 = strBuilder24.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder22.insert((int) (short) 0, charArray37);
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder22.appendSeparator('$');
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder41.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder44.replaceFirst("", "");
        char[] charArray48 = strBuilder44.toCharArray();
        char[] charArray49 = strBuilder41.getChars(charArray48);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer50 = new org.apache.commons.lang3.text.StrTokenizer(charArray48);
        boolean boolean51 = strTokenizer50.hasPrevious();
        java.util.List<java.lang.String> strList52 = strTokenizer50.getTokenList();
        strList52.clear();
        strList52.clear();
        java.util.List[] listArray56 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String>[] strListArray57 = (java.util.List<java.lang.String>[]) listArray56;
        java.util.List<java.lang.String>[] strListArray58 = strList52.toArray(strListArray57);
        org.apache.commons.lang3.text.StrBuilder strBuilder60 = strBuilder22.appendWithSeparators((java.lang.Object[]) strListArray57, "java.io.IOException: StrTokenizer[not tokenized yet]");
        org.apache.commons.lang3.text.StrBuilder strBuilder62 = strBuilder60.appendln((long) 4);
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder66 = strBuilder63.replaceFirst("", "");
        char[] charArray67 = strBuilder63.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer69 = new org.apache.commons.lang3.text.StrTokenizer(charArray67, 'a');
        java.lang.String[] strArray70 = strTokenizer69.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder72 = strBuilder60.appendWithSeparators((java.lang.Object[]) strArray70, "StrTokenizer[]");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder75 = strBuilder72.insert(15, false);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 15");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 32 + "'", int21 == 32);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\n32.0" + "'", str34, "\n32.0");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "\n32.0");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "\n32.0");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[\n, 3, 2, ., 0]");
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNotNull(strBuilder43);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[]");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(listArray56);
        org.junit.Assert.assertNotNull(strListArray57);
        org.junit.Assert.assertNotNull(strListArray58);
        org.junit.Assert.assertNotNull(strBuilder60);
        org.junit.Assert.assertNotNull(strBuilder62);
        org.junit.Assert.assertNotNull(strBuilder66);
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[]");
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strBuilder72);
    }

    @Test
    public void test04899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04899");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.setLength(32);
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder10.trim();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder12.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder15.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder18.appendSeparator(' ', (int) '4');
        org.apache.commons.lang3.text.StrMatcher strMatcher22 = org.apache.commons.lang3.text.StrSubstitutor.DEFAULT_SUFFIX;
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder18.deleteAll(strMatcher22);
        boolean boolean24 = strBuilder10.equalsIgnoreCase(strBuilder18);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder18.replaceFirst('#', '#');
        boolean boolean29 = strBuilder18.endsWith("\n36.0\n\n32.0");
        java.io.Reader reader30 = strBuilder18.asReader();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strMatcher22);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(reader30);
    }

    @Test
    public void test04900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04900");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray5 = strTokenizer4.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder0.appendAll((java.lang.Object[]) strArray5);
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder6.replaceAll("", "java.io.IOException: hi!");
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties10.keys();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder12.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder15.appendSeparator('#', (int) (byte) 100);
        java.io.Reader reader19 = strBuilder15.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder20.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer24 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray25 = strTokenizer24.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder20.appendAll((java.lang.Object[]) strArray25);
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder20.replaceFirst('a', 'a');
        java.util.stream.IntStream intStream30 = strBuilder20.codePoints();
        java.lang.Object obj31 = properties10.replace((java.lang.Object) reader19, (java.lang.Object) intStream30);
        long long33 = reader19.skip(0L);
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder34.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder37.replaceFirst('a', '4');
        java.io.Writer writer41 = strBuilder40.asWriter();
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = strBuilder42.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder45.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder49.replaceFirst("", "");
        char[] charArray53 = strBuilder49.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder48.appendln(charArray53);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer55 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray53);
        writer41.write(charArray53);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer59 = new org.apache.commons.lang3.text.StrTokenizer(charArray53, '4', '$');
        int int60 = reader19.read(charArray53);
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = strBuilder61.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder67 = strBuilder64.replaceFirst("", "");
        char[] charArray68 = strBuilder64.toCharArray();
        char[] charArray69 = strBuilder61.getChars(charArray68);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer70 = new org.apache.commons.lang3.text.StrTokenizer(charArray68);
        boolean boolean71 = strTokenizer70.hasPrevious();
        org.apache.commons.lang3.text.StrMatcher strMatcher73 = org.apache.commons.lang3.text.StrMatcher.stringMatcher("");
        org.apache.commons.lang3.text.StrBuilder strBuilder74 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder77 = strBuilder74.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder80 = strBuilder77.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder81 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder84 = strBuilder81.replaceFirst("", "");
        char[] charArray85 = strBuilder81.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder86 = strBuilder80.appendln(charArray85);
        int int90 = strMatcher73.isMatch(charArray85, (-1), (int) ' ', (int) (byte) -1);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer91 = new org.apache.commons.lang3.text.StrTokenizer(charArray85);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer92 = strTokenizer70.reset(charArray85);
        org.apache.commons.lang3.text.StrMatcher strMatcher93 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray85);
        org.apache.commons.lang3.text.StrMatcher strMatcher94 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray85);
        int int95 = reader19.read(charArray85);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer97 = new org.apache.commons.lang3.text.StrTokenizer(charArray85, '$');
        char[] charArray98 = strBuilder9.getChars(charArray85);
        org.apache.commons.lang3.text.StrMatcher strMatcher99 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray85);
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(reader19);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(intStream30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNotNull(writer41);
        org.junit.Assert.assertNotNull(strBuilder45);
        org.junit.Assert.assertNotNull(strBuilder48);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[]");
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertNotNull(strTokenizer55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(strBuilder63);
        org.junit.Assert.assertNotNull(strBuilder67);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[]");
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strMatcher73);
        org.junit.Assert.assertNotNull(strBuilder77);
        org.junit.Assert.assertNotNull(strBuilder80);
        org.junit.Assert.assertNotNull(strBuilder84);
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray85), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray85), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray85), "[]");
        org.junit.Assert.assertNotNull(strBuilder86);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(strTokenizer92);
        org.junit.Assert.assertNotNull(strMatcher93);
        org.junit.Assert.assertNotNull(strMatcher94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(charArray98);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray98), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray98), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray98), "[]");
        org.junit.Assert.assertNotNull(strMatcher99);
    }

    @Test
    public void test04901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04901");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder0.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.append((float) '4');
        int int14 = strBuilder9.indexOf("", (int) (short) 10);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance("");
        boolean boolean17 = strTokenizer16.hasNext();
        java.lang.String[] strArray18 = strTokenizer16.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder9.appendWithSeparators((java.lang.Object[]) strArray18, "4#4");
        int int23 = strBuilder9.indexOf('g', 62);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(strTokenizer16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test04902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04902");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        boolean boolean8 = strTokenizer6.hasNext();
        java.util.List<java.lang.String> strList9 = strTokenizer6.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder10.replaceFirst("", "");
        char[] charArray14 = strBuilder10.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = new org.apache.commons.lang3.text.StrTokenizer(charArray14, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer17 = new org.apache.commons.lang3.text.StrTokenizer(charArray14);
        boolean boolean18 = strList9.equals((java.lang.Object) charArray14);
        boolean boolean20 = strList9.add("\n");
        boolean boolean22 = strList9.add("\n2.0");
        java.util.ListIterator<java.lang.String> strItor23 = strList9.listIterator();
        char[] charArray28 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer30 = new org.apache.commons.lang3.text.StrTokenizer(charArray28, ' ');
        int int31 = strTokenizer30.size();
        boolean boolean32 = strTokenizer30.hasNext();
        java.util.List<java.lang.String> strList33 = strTokenizer30.getTokenList();
        java.lang.String[] strArray37 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        boolean boolean40 = strList33.addAll((java.util.Collection<java.lang.String>) strList38);
        java.lang.String str42 = strList38.remove(0);
        java.util.stream.Stream<java.lang.String> strStream43 = strList38.stream();
        java.util.Iterator<java.lang.String> strItor44 = strList38.iterator();
        java.lang.Object obj45 = null;
        boolean boolean46 = strList38.contains(obj45);
        int int47 = strList38.size();
        boolean boolean48 = strList9.retainAll((java.util.Collection<java.lang.String>) strList38);
        java.util.ListIterator<java.lang.String> strItor49 = strList38.listIterator();
        int int50 = strItor49.previousIndex();
        strItor49.add("tue");
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\n32.0" + "'", str42, "\n32.0");
        org.junit.Assert.assertNotNull(strStream43);
        org.junit.Assert.assertNotNull(strItor44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strItor49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test04903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04903");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("\n32.0 100.0");
        org.junit.Assert.assertNotNull(strTokenizer1);
    }

    @Test
    public void test04904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04904");
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder("\naaaa100");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = strBuilder1.substring((int) (byte) -1, 24);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04905");
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder((int) (byte) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst('$', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder1.append('a');
        int int8 = strBuilder1.lastIndexOf("\n32.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = new org.apache.commons.lang3.text.StrBuilder();
        int int10 = strBuilder9.capacity();
        java.lang.StringBuffer stringBuffer11 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder9.appendln(stringBuffer11, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder9.insert(1, (double) 32);
        boolean boolean18 = strBuilder9.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder9.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder9.clear();
        int int21 = strBuilder20.capacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder1.append(strBuilder20);
        java.io.Writer writer23 = strBuilder20.asWriter();
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder20.append("\n #\n");
        java.util.Properties properties27 = new java.util.Properties();
        int int28 = properties27.size();
        boolean boolean30 = properties27.containsKey((java.lang.Object) (-1.0f));
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder31.replaceFirst("", "");
        boolean boolean36 = strBuilder34.endsWith("StrTokenizer[]");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer38 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder39.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder42.appendln('#');
        java.lang.StringBuffer stringBuffer45 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder42.append(stringBuffer45, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = strBuilder42.deleteFirst("hi!");
        char[] charArray51 = strBuilder42.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer52 = strTokenizer38.reset(charArray51);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer53 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray51);
        char[] charArray54 = strBuilder34.getChars(charArray51);
        java.lang.Object obj55 = properties27.remove((java.lang.Object) charArray54);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder25.insert(100, charArray54, 39, 26);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 100");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 32 + "'", int21 == 32);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(writer23);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strTokenizer38);
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strBuilder48);
        org.junit.Assert.assertNotNull(strBuilder50);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[#, \n]");
        org.junit.Assert.assertNotNull(strTokenizer52);
        org.junit.Assert.assertNotNull(strTokenizer53);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[#, \n]");
        org.junit.Assert.assertNull(obj55);
    }

    @Test
    public void test04906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04906");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder5.appendPadding((int) '#', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder11.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.appendln((double) '#');
        boolean boolean15 = strBuilder5.equals(strBuilder14);
        java.util.stream.IntStream intStream16 = strBuilder5.codePoints();
        java.util.Iterator<java.lang.String> strItor17 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder5.appendWithSeparators(strItor17, " 4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder19.replaceFirst(' ', ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder23.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder26.replaceFirst("", "");
        char[] charArray30 = strBuilder26.toCharArray();
        char[] charArray31 = strBuilder23.getChars(charArray30);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer32 = new org.apache.commons.lang3.text.StrTokenizer(charArray30);
        boolean boolean33 = strTokenizer32.hasPrevious();
        java.util.List<java.lang.String> strList34 = strTokenizer32.getTokenList();
        boolean boolean35 = strTokenizer32.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher36 = strTokenizer32.getDelimiterMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder19.replaceAll(strMatcher36, "\n32.0java.io.IOException: hi!");
        java.util.Properties properties39 = new java.util.Properties();
        int int40 = properties39.size();
        boolean boolean42 = properties39.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties43 = new java.util.Properties();
        int int44 = properties43.size();
        boolean boolean46 = properties43.containsKey((java.lang.Object) (-1.0f));
        properties39.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = strBuilder48.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder51.replaceFirst("", "");
        char[] charArray55 = strBuilder51.toCharArray();
        char[] charArray56 = strBuilder48.getChars(charArray55);
        java.io.Reader reader57 = strBuilder48.asReader();
        java.lang.Object obj58 = properties39.remove((java.lang.Object) strBuilder48);
        java.io.Writer writer59 = strBuilder48.asWriter();
        java.io.Writer writer61 = writer59.append('$');
        writer61.flush();
        writer61.write("java.io.IOException: hi!false");
        org.apache.commons.lang3.text.StrBuilder strBuilder65 = strBuilder19.appendln((java.lang.Object) "java.io.IOException: hi!false");
        org.apache.commons.lang3.text.StrMatcher strMatcher66 = null;
        int int67 = strBuilder65.indexOf(strMatcher66);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intStream16);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strMatcher36);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strBuilder50);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[]");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[]");
        org.junit.Assert.assertNotNull(reader57);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(writer59);
        org.junit.Assert.assertNotNull(writer61);
        org.junit.Assert.assertNotNull(strBuilder65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
    }

    @Test
    public void test04907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04907");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.deleteAll('4');
        int int7 = strBuilder5.indexOf('a');
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder8.replaceFirst("", "");
        char[] charArray12 = strBuilder8.toCharArray();
        char[] charArray13 = strBuilder5.getChars(charArray12);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = new org.apache.commons.lang3.text.StrTokenizer(charArray13);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer17 = new org.apache.commons.lang3.text.StrTokenizer(charArray13, '#', '#');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer18 = strTokenizer17.reset();
        // The following exception was thrown during execution in test generation
        try {
            strTokenizer17.add("java.io.IOException: StrTokenizer[not tokenized yet]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: add() is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertNotNull(strTokenizer18);
    }

    @Test
    public void test04908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04908");
        org.apache.commons.lang3.text.StrSubstitutor strSubstitutor0 = new org.apache.commons.lang3.text.StrSubstitutor();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        int int2 = strBuilder1.capacity();
        java.lang.StringBuffer stringBuffer3 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder1.appendln(stringBuffer3, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder1.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder8.appendln(true);
        boolean boolean13 = strSubstitutor0.replaceIn(strBuilder10, (int) '$', 0);
        strSubstitutor0.setEscapeChar('a');
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder16.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder19.appendln('#');
        java.lang.StringBuffer stringBuffer22 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder19.append(stringBuffer22, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder19.deleteFirst("hi!");
        char[] charArray28 = strBuilder19.toCharArray();
        org.apache.commons.lang3.text.StrMatcher strMatcher29 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray28);
        org.apache.commons.lang3.text.StrSubstitutor strSubstitutor30 = strSubstitutor0.setVariablePrefixMatcher(strMatcher29);
        java.lang.String str34 = strSubstitutor30.replace("{\n36.0\n=StrTokenizer[not tokenized yet]}", (int) '#', 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher35 = org.apache.commons.lang3.text.StrMatcher.noneMatcher();
        org.apache.commons.lang3.text.StrSubstitutor strSubstitutor36 = strSubstitutor30.setVariableSuffixMatcher(strMatcher35);
        org.apache.commons.lang3.text.StrSubstitutor strSubstitutor38 = strSubstitutor36.setVariablePrefix('1');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[#, \n]");
        org.junit.Assert.assertNotNull(strMatcher29);
        org.junit.Assert.assertNotNull(strSubstitutor30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strMatcher35);
        org.junit.Assert.assertNotNull(strSubstitutor36);
        org.junit.Assert.assertNotNull(strSubstitutor38);
    }

    @Test
    public void test04909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04909");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        boolean boolean9 = strBuilder0.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder0.clear();
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder0.append('a');
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder13.insert(1, (int) (byte) 10);
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder17.replaceFirst("", "");
        char[] charArray21 = strBuilder17.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer23 = new org.apache.commons.lang3.text.StrTokenizer(charArray21, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer24 = new org.apache.commons.lang3.text.StrTokenizer(charArray21);
        java.lang.String str25 = strTokenizer24.toString();
        java.lang.Object obj26 = strTokenizer24.clone();
        java.lang.String[] strArray27 = strTokenizer24.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder16.appendAll((java.lang.Object[]) strArray27);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder16.delete(74, 37);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: end < start");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "StrTokenizer[not tokenized yet]" + "'", str25, "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strBuilder28);
    }

    @Test
    public void test04910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04910");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder2.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder5.appendln('#');
        java.lang.StringBuffer stringBuffer8 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder5.append(stringBuffer8, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder5.deleteFirst("hi!");
        char[] charArray14 = strBuilder5.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = strTokenizer1.reset(charArray14);
        java.lang.String str16 = strTokenizer1.next();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = strTokenizer1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strTokenizer1);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, \n]");
        org.junit.Assert.assertNotNull(strTokenizer15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "#" + "'", str16, "#");
    }

    @Test
    public void test04911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04911");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer2 = new org.apache.commons.lang3.text.StrTokenizer("StrTokenizer[not tokenized yet]", ' ');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = strTokenizer2.setDelimiterString("{}");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder5.deleteFirst("");
        int int9 = strBuilder5.indexOf("");
        int int12 = strBuilder5.lastIndexOf('#', (int) (byte) 0);
        boolean boolean14 = strBuilder5.startsWith("4#4");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder5.appendAll((java.util.Iterator<java.lang.String>) strTokenizer15);
        boolean boolean17 = strTokenizer15.hasPrevious();
        org.apache.commons.lang3.text.StrMatcher strMatcher18 = strTokenizer15.getIgnoredMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = strTokenizer2.setIgnoredMatcher(strMatcher18);
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties20.keys();
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder22.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder25.appendSeparator('#', (int) (byte) 100);
        java.io.Reader reader29 = strBuilder25.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder30.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer34 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray35 = strTokenizer34.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder30.appendAll((java.lang.Object[]) strArray35);
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder30.replaceFirst('a', 'a');
        java.util.stream.IntStream intStream40 = strBuilder30.codePoints();
        java.lang.Object obj41 = properties20.replace((java.lang.Object) reader29, (java.lang.Object) intStream40);
        long long43 = reader29.skip(0L);
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = strBuilder44.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer48 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray49 = strTokenizer48.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = strBuilder44.appendAll((java.lang.Object[]) strArray49);
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder44.replaceFirst('a', 'a');
        java.util.stream.IntStream intStream54 = strBuilder44.codePoints();
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder55.replaceFirst("", "");
        char[] charArray59 = strBuilder55.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer61 = new org.apache.commons.lang3.text.StrTokenizer(charArray59, "");
        org.apache.commons.lang3.text.StrBuilder strBuilder62 = strBuilder44.appendln(charArray59);
        int int63 = reader29.read(charArray59);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer64 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray59);
        org.apache.commons.lang3.text.StrMatcher strMatcher65 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray59);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer66 = strTokenizer19.setIgnoredMatcher(strMatcher65);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer68 = strTokenizer19.setEmptyTokenAsNull(true);
        org.junit.Assert.assertNotNull(strTokenizer4);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strTokenizer15);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strMatcher18);
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(reader29);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNotNull(intStream40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(strBuilder46);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strBuilder50);
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertNotNull(intStream54);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[]");
        org.junit.Assert.assertNotNull(strBuilder62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(strTokenizer64);
        org.junit.Assert.assertNotNull(strMatcher65);
        org.junit.Assert.assertNotNull(strTokenizer66);
        org.junit.Assert.assertNotNull(strTokenizer68);
    }

    @Test
    public void test04912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04912");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        java.lang.Object obj2 = properties0.clone();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder9.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder3.appendFixedWidthPadRight((java.lang.Object) strBuilder12, (int) (byte) -1, '#');
        java.lang.Object obj16 = properties0.get((java.lang.Object) strBuilder3);
        java.util.Properties properties17 = new java.util.Properties();
        int int18 = properties17.size();
        boolean boolean20 = properties17.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties21 = new java.util.Properties();
        int int22 = properties21.size();
        boolean boolean24 = properties21.containsKey((java.lang.Object) (-1.0f));
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        char[] charArray30 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer32 = new org.apache.commons.lang3.text.StrTokenizer(charArray30, ' ');
        int int33 = strTokenizer32.size();
        boolean boolean34 = strTokenizer32.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher35 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer36 = strTokenizer32.setIgnoredMatcher(strMatcher35);
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder37.replaceFirst("", "");
        java.lang.Object obj41 = properties17.putIfAbsent((java.lang.Object) strMatcher35, (java.lang.Object) strBuilder37);
        boolean boolean42 = strBuilder3.equals(obj41);
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder3.appendln((long) (short) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = strBuilder3.appendNewLine();
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder3.appendln((int) (short) 10);
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder3.reverse();
        int int50 = strBuilder3.lastIndexOf("#\nStrTokenizer[not tokenized yet]ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt#");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strMatcher35);
        org.junit.Assert.assertNotNull(strTokenizer36);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strBuilder45);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(strBuilder48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test04913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04913");
        org.apache.commons.lang3.text.StrMatcher strMatcher1 = org.apache.commons.lang3.text.StrMatcher.stringMatcher("");
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder2.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder5.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder9.replaceFirst("", "");
        char[] charArray13 = strBuilder9.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder8.appendln(charArray13);
        int int18 = strMatcher1.isMatch(charArray13, (-1), (int) ' ', (int) (byte) -1);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = new org.apache.commons.lang3.text.StrTokenizer(charArray13);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer20 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray13);
        java.util.Properties properties21 = new java.util.Properties();
        int int22 = properties21.size();
        boolean boolean24 = properties21.containsKey((java.lang.Object) (-1.0f));
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder25.replaceFirst("", "");
        boolean boolean30 = strBuilder28.endsWith("StrTokenizer[]");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer32 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder33.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder36.appendln('#');
        java.lang.StringBuffer stringBuffer39 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder36.append(stringBuffer39, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder36.deleteFirst("hi!");
        char[] charArray45 = strBuilder36.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer46 = strTokenizer32.reset(charArray45);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer47 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray45);
        char[] charArray48 = strBuilder28.getChars(charArray45);
        java.lang.Object obj49 = properties21.remove((java.lang.Object) charArray48);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer50 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray48);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer51 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray48);
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = strBuilder53.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = strBuilder56.replaceFirst('a', '4');
        java.io.Writer writer60 = strBuilder59.asWriter();
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = strBuilder61.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder67 = strBuilder64.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder68 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder71 = strBuilder68.replaceFirst("", "");
        char[] charArray72 = strBuilder68.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder73 = strBuilder67.appendln(charArray72);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer74 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray72);
        writer60.write(charArray72);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer78 = new org.apache.commons.lang3.text.StrTokenizer(charArray72, '4', '$');
        int int79 = strTokenizer78.size();
        org.apache.commons.lang3.text.StrMatcher strMatcher80 = strTokenizer78.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer82 = strTokenizer78.reset("StrTokenizer[]");
        org.apache.commons.lang3.text.StrMatcher strMatcher83 = strTokenizer78.getIgnoredMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer84 = new org.apache.commons.lang3.text.StrTokenizer("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000", strMatcher83);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer85 = new org.apache.commons.lang3.text.StrTokenizer(charArray48, strMatcher83);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer86 = new org.apache.commons.lang3.text.StrTokenizer(charArray13, strMatcher83);
        org.junit.Assert.assertNotNull(strMatcher1);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(strTokenizer20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strTokenizer32);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[#, \n]");
        org.junit.Assert.assertNotNull(strTokenizer46);
        org.junit.Assert.assertNotNull(strTokenizer47);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[#, \n]");
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(strTokenizer50);
        org.junit.Assert.assertNotNull(strTokenizer51);
        org.junit.Assert.assertNotNull(strBuilder56);
        org.junit.Assert.assertNotNull(strBuilder59);
        org.junit.Assert.assertNotNull(writer60);
        org.junit.Assert.assertNotNull(strBuilder64);
        org.junit.Assert.assertNotNull(strBuilder67);
        org.junit.Assert.assertNotNull(strBuilder71);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[]");
        org.junit.Assert.assertNotNull(strBuilder73);
        org.junit.Assert.assertNotNull(strTokenizer74);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(strMatcher80);
        org.junit.Assert.assertNotNull(strTokenizer82);
        org.junit.Assert.assertNotNull(strMatcher83);
    }

    @Test
    public void test04914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04914");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder7.replaceFirst("", "");
        char[] charArray11 = strBuilder7.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder6.appendln(charArray11);
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder13.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer18 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray19 = strTokenizer18.getTokenArray();
        java.lang.String[] strArray20 = strTokenizer18.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder16.appendWithSeparators((java.lang.Object[]) strArray20, "4#4");
        org.apache.commons.lang3.text.StrMatcher strMatcher23 = org.apache.commons.lang3.text.StrMatcher.tabMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder22.deleteAll(strMatcher23);
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder22.trim();
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder22.append(false);
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder12.appendFixedWidthPadRight((java.lang.Object) strBuilder27, 0, '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder27.append((double) '#');
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(strMatcher23);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder32);
    }

    @Test
    public void test04915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04915");
        java.util.Properties properties0 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray7 = strTokenizer6.getTokenArray();
        java.lang.String[] strArray8 = strTokenizer6.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder4.appendWithSeparators((java.lang.Object[]) strArray8, "4#4");
        char[] charArray13 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray13);
        java.lang.Object obj15 = properties0.getOrDefault((java.lang.Object) strBuilder4, (java.lang.Object) strTokenizer14);
        int int16 = properties0.size();
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder17.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer21 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray22 = strTokenizer21.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder17.appendAll((java.lang.Object[]) strArray22);
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder17.replaceFirst('a', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder27.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer31 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray32 = strTokenizer31.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder27.appendAll((java.lang.Object[]) strArray32);
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder17.appendln(strBuilder33);
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder33.appendln((long) 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder37.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder39.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder40.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = strBuilder40.replaceFirst('4', 'a');
        boolean boolean46 = properties0.remove((java.lang.Object) strBuilder33, (java.lang.Object) '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder33.appendPadding((int) (byte) 1, 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder33.setNullText("java.io.IOException: hi!false");
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertNotNull(strBuilder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(strBuilder51);
    }

    @Test
    public void test04916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04916");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        boolean boolean9 = strBuilder0.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder10.replaceAll("#", "true\n###################################3\n");
        char[] charArray18 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer20 = new org.apache.commons.lang3.text.StrTokenizer(charArray18, ' ');
        int int21 = strTokenizer20.size();
        boolean boolean22 = strTokenizer20.hasNext();
        java.util.List<java.lang.String> strList23 = strTokenizer20.getTokenList();
        java.lang.String[] strArray27 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.addAll((java.util.Collection<java.lang.String>) strList28);
        java.util.Spliterator<java.lang.String> strSpliterator31 = strList28.spliterator();
        int int32 = strList28.size();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer35 = new org.apache.commons.lang3.text.StrTokenizer(" 4#4", "");
        int int36 = strList28.lastIndexOf((java.lang.Object) strTokenizer35);
        strList28.clear();
        int int38 = strList28.size();
        java.lang.Object[] objArray39 = strList28.toArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder13.appendWithSeparators(objArray39, "[4#4]");
        java.io.Reader reader42 = strBuilder13.asReader();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray45 = strBuilder13.toCharArray((int) 's', (int) '9');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: end < start");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strSpliterator31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertNotNull(reader42);
    }

    @Test
    public void test04917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04917");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.deleteAll('4');
        int int7 = strBuilder5.indexOf('a');
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder8.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder8.deleteAll('4');
        int int15 = strBuilder13.indexOf('a');
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder16.replaceFirst("", "");
        char[] charArray20 = strBuilder16.toCharArray();
        char[] charArray21 = strBuilder13.getChars(charArray20);
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder5.appendln(charArray21);
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder23.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer28 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher29 = strTokenizer28.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder23.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer28, "h");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer33 = strTokenizer28.reset("\n32.0");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer35 = strTokenizer33.setEmptyTokenAsNull(true);
        org.apache.commons.lang3.text.StrMatcher strMatcher36 = strTokenizer35.getDelimiterMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder5.deleteFirst(strMatcher36);
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder37.setNewLineText("35.0\n");
        int int40 = strBuilder39.capacity();
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[]");
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strMatcher29);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(strTokenizer33);
        org.junit.Assert.assertNotNull(strTokenizer35);
        org.junit.Assert.assertNotNull(strMatcher36);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 32 + "'", int40 == 32);
    }

    @Test
    public void test04918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04918");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder0.appendPadding(10, ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder7.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer12 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher13 = strTokenizer12.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder7.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer12, "h");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer17 = strTokenizer12.reset("\n32.0");
        org.apache.commons.lang3.text.StrMatcher strMatcher18 = strTokenizer12.getIgnoredMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder6.appendFixedWidthPadRight((java.lang.Object) strTokenizer12, 4, '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = new org.apache.commons.lang3.text.StrBuilder();
        int int23 = strBuilder22.capacity();
        java.lang.StringBuffer stringBuffer24 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder22.appendln(stringBuffer24, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder22.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder22.setLength(32);
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder32.trim();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder32.append((int) (short) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder35.append('#');
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder38.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer43 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray44 = strTokenizer43.getTokenArray();
        java.lang.String[] strArray45 = strTokenizer43.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder41.appendWithSeparators((java.lang.Object[]) strArray45, "4#4");
        org.apache.commons.lang3.text.StrMatcher strMatcher48 = org.apache.commons.lang3.text.StrMatcher.tabMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder47.deleteAll(strMatcher48);
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = strBuilder47.trim();
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder47.append(false);
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = strBuilder53.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder53.deleteAll('4');
        int int60 = strBuilder58.indexOf('a');
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = strBuilder61.replaceFirst("", "");
        char[] charArray65 = strBuilder61.toCharArray();
        char[] charArray66 = strBuilder58.getChars(charArray65);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer67 = new org.apache.commons.lang3.text.StrTokenizer(charArray65);
        char[] charArray68 = strBuilder52.getChars(charArray65);
        char[] charArray69 = strBuilder35.getChars(charArray68);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer70 = strTokenizer12.reset(charArray68);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer72 = new org.apache.commons.lang3.text.StrTokenizer(charArray68, "##############################");
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strMatcher13);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strTokenizer17);
        org.junit.Assert.assertNotNull(strMatcher18);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 32 + "'", int23 == 32);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(strMatcher48);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(strBuilder50);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(strBuilder56);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(strBuilder64);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[]");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[]");
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "false");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "false");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[f, a, l, s, e]");
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "32.01#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "32.01#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[3, 2, ., 0, 1, #]");
        org.junit.Assert.assertNotNull(strTokenizer70);
    }

    @Test
    public void test04919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04919");
        java.util.Properties properties0 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray7 = strTokenizer6.getTokenArray();
        java.lang.String[] strArray8 = strTokenizer6.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder4.appendWithSeparators((java.lang.Object[]) strArray8, "4#4");
        char[] charArray13 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray13);
        java.lang.Object obj15 = properties0.getOrDefault((java.lang.Object) strBuilder4, (java.lang.Object) strTokenizer14);
        properties0.clear();
        java.io.OutputStream outputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream17, "#\n
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "StrTokenizer[not tokenized yet]");
    }

    @Test
    public void test04920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04920");
        org.apache.commons.lang3.text.StrSubstitutor strSubstitutor0 = new org.apache.commons.lang3.text.StrSubstitutor();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        int int2 = strBuilder1.capacity();
        java.lang.StringBuffer stringBuffer3 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder1.appendln(stringBuffer3, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder1.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder8.appendln(true);
        boolean boolean13 = strSubstitutor0.replaceIn(strBuilder10, (int) '$', 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder14.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder16.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder17.ensureCapacity((int) (short) 10);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.replaceFirst("", "");
        java.lang.String str24 = strBuilder20.getNewLineText();
        java.util.stream.IntStream intStream25 = strBuilder20.chars();
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder17.append((java.lang.CharSequence) strBuilder20);
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder17.setLength((int) (short) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder17.appendFixedWidthPadLeft((int) (byte) 1, 32, '$');
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder10.appendln(strBuilder17);
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder33.insert((int) 'g', "ed yet]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(intStream25);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strBuilder36);
    }

    @Test
    public void test04921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04921");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        boolean boolean9 = strBuilder0.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder0.appendSeparator('a', ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder13.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer17 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray18 = strTokenizer17.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder13.appendAll((java.lang.Object[]) strArray18);
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder13.replaceFirst('a', 'a');
        java.lang.StringBuffer stringBuffer23 = strBuilder22.toStringBuffer();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder0.append(stringBuffer23);
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder25.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder28.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder31.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder35.replaceFirst("", "");
        char[] charArray39 = strBuilder35.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder34.appendln(charArray39);
        org.apache.commons.lang3.text.StrMatcher strMatcher41 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray39);
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder25.replaceFirst(strMatcher41, "StrTokenizer[]");
        boolean boolean44 = strBuilder0.equalsIgnoreCase(strBuilder25);
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder25.appendFixedWidthPadLeft((int) ' ', 1, 'e');
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder49.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder49.deleteAll('4');
        int int56 = strBuilder54.indexOf('a');
        org.apache.commons.lang3.text.StrBuilder strBuilder57 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder60 = strBuilder57.replaceFirst("", "");
        char[] charArray61 = strBuilder57.toCharArray();
        char[] charArray62 = strBuilder54.getChars(charArray61);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer63 = new org.apache.commons.lang3.text.StrTokenizer(charArray61);
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = strBuilder48.appendln((java.lang.Object) strTokenizer63);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = strTokenizer63.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(stringBuffer23);
        org.junit.Assert.assertEquals(stringBuffer23.toString(), "");
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[]");
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNotNull(strMatcher41);
        org.junit.Assert.assertNotNull(strBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strBuilder48);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(strBuilder60);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[]");
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[]");
        org.junit.Assert.assertNotNull(strBuilder64);
    }

    @Test
    public void test04922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04922");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.appendln('#');
        java.lang.StringBuffer stringBuffer6 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder3.append(stringBuffer6, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder3.deleteFirst("hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder3.appendSeparator("4#4", "\n32.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder3.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder16.appendSeparator("false", (int) (short) 10);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer21 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray22 = strTokenizer21.getTokenArray();
        java.lang.String[] strArray23 = strTokenizer21.getTokenArray();
        boolean boolean24 = strTokenizer21.hasNext();
        int int25 = strTokenizer21.size();
        boolean boolean26 = strTokenizer21.hasPrevious();
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder27.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder30.replaceFirst("", "");
        char[] charArray34 = strBuilder30.toCharArray();
        char[] charArray35 = strBuilder27.getChars(charArray34);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer36 = new org.apache.commons.lang3.text.StrTokenizer(charArray34);
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder37.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer42 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray43 = strTokenizer42.getTokenArray();
        java.lang.String[] strArray44 = strTokenizer42.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = strBuilder40.appendWithSeparators((java.lang.Object[]) strArray44, "4#4");
        org.apache.commons.lang3.text.StrMatcher strMatcher47 = org.apache.commons.lang3.text.StrMatcher.tabMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder46.deleteAll(strMatcher47);
        org.apache.commons.lang3.text.StrMatcher strMatcher49 = org.apache.commons.lang3.text.StrMatcher.doubleQuoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer50 = new org.apache.commons.lang3.text.StrTokenizer(charArray34, strMatcher47, strMatcher49);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer51 = new org.apache.commons.lang3.text.StrTokenizer(charArray34);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer52 = strTokenizer21.reset(charArray34);
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder19.appendln(charArray34);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer54 = new org.apache.commons.lang3.text.StrTokenizer(charArray34);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[]");
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strBuilder46);
        org.junit.Assert.assertNotNull(strMatcher47);
        org.junit.Assert.assertNotNull(strBuilder48);
        org.junit.Assert.assertNotNull(strMatcher49);
        org.junit.Assert.assertNotNull(strTokenizer52);
        org.junit.Assert.assertNotNull(strBuilder53);
    }

    @Test
    public void test04923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04923");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet9 = properties4.entrySet();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray15 = strTokenizer14.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder10.appendAll((java.lang.Object[]) strArray15);
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder10.replaceFirst('a', 'a');
        java.lang.StringBuffer stringBuffer20 = strBuilder19.toStringBuffer();
        char[] charArray25 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer27 = new org.apache.commons.lang3.text.StrTokenizer(charArray25, ' ');
        int int28 = strTokenizer27.size();
        boolean boolean29 = strTokenizer27.hasNext();
        java.util.List<java.lang.String> strList30 = strTokenizer27.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder31.replaceFirst("", "");
        char[] charArray35 = strBuilder31.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer37 = new org.apache.commons.lang3.text.StrTokenizer(charArray35, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer38 = new org.apache.commons.lang3.text.StrTokenizer(charArray35);
        boolean boolean39 = strList30.equals((java.lang.Object) charArray35);
        char[] charArray44 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer46 = new org.apache.commons.lang3.text.StrTokenizer(charArray44, ' ');
        int int47 = strTokenizer46.size();
        boolean boolean48 = strTokenizer46.hasNext();
        java.util.List<java.lang.String> strList49 = strTokenizer46.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = new org.apache.commons.lang3.text.StrBuilder();
        int int51 = strBuilder50.capacity();
        java.lang.StringBuffer stringBuffer52 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = strBuilder50.appendln(stringBuffer52, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder50.insert(1, (double) 32);
        java.lang.String str60 = strBuilder50.rightString((int) ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = strBuilder50.insert(1, '#');
        boolean boolean64 = strList49.equals((java.lang.Object) strBuilder50);
        boolean boolean65 = strList30.containsAll((java.util.Collection<java.lang.String>) strList49);
        org.apache.commons.lang3.text.StrBuilder strBuilder66 = strBuilder19.appendAll((java.lang.Iterable<java.lang.String>) strList49);
        org.apache.commons.lang3.text.StrBuilder strBuilder67 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder70 = strBuilder67.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder72 = strBuilder67.deleteAll('4');
        int int74 = strBuilder72.indexOf('a');
        java.lang.String str77 = strBuilder72.midString((int) (byte) 10, 32);
        java.lang.Object obj78 = properties4.getOrDefault((java.lang.Object) strBuilder19, (java.lang.Object) str77);
        org.apache.commons.lang3.text.StrBuilder strBuilder79 = strBuilder19.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder82 = strBuilder79.insert(1, 22);
        int int84 = strBuilder82.indexOf('3');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objEntrySet9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(stringBuffer20);
        org.junit.Assert.assertEquals(stringBuffer20.toString(), "");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 32 + "'", int51 == 32);
        org.junit.Assert.assertNotNull(strBuilder55);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\n32.0" + "'", str60, "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strBuilder66);
        org.junit.Assert.assertNotNull(strBuilder70);
        org.junit.Assert.assertNotNull(strBuilder72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + obj78 + "' != '" + "" + "'", obj78, "");
        org.junit.Assert.assertNotNull(strBuilder79);
        org.junit.Assert.assertNotNull(strBuilder82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test04924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04924");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.appendSeparator('#', (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder6.append((float) '$');
        char char10 = strBuilder8.charAt(0);
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder11.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray17 = strTokenizer16.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder11.appendAll((java.lang.Object[]) strArray17);
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder19.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder22.replaceFirst("", "");
        char[] charArray26 = strBuilder22.toCharArray();
        char[] charArray27 = strBuilder19.getChars(charArray26);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer28 = new org.apache.commons.lang3.text.StrTokenizer(charArray26);
        char[] charArray29 = strBuilder11.getChars(charArray26);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer32 = new org.apache.commons.lang3.text.StrTokenizer(charArray29, ' ', '4');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer33 = strTokenizer32.reset();
        org.apache.commons.lang3.text.StrMatcher strMatcher34 = strTokenizer32.getQuoteMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder8.append((java.lang.Object) strTokenizer32);
        java.lang.String str36 = strBuilder8.getNewLineText();
        java.lang.String str38 = strBuilder8.leftString(112);
        int int41 = strBuilder8.lastIndexOf("tttt4", (int) (byte) 100);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + '#' + "'", char10 == '#');
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[]");
        org.junit.Assert.assertNotNull(strTokenizer33);
        org.junit.Assert.assertNotNull(strMatcher34);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "#36.0StrTokenizer[not tokenized yet]" + "'", str38, "#36.0StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
    }

    @Test
    public void test04925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04925");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder6.appendSeparator(' ', (int) '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.appendln('#');
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder9.appendPadding(4, 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder9.setLength(2);
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder9.appendSeparator("java.io.IOException: {\ntrue\n=1.0}", 57);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder9.minimizeCapacity();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = strBuilder9.substring(42);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: end < start");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder20);
    }

    @Test
    public void test04926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04926");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer5 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray6 = strTokenizer5.getTokenArray();
        java.lang.String[] strArray7 = strTokenizer5.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder3.appendWithSeparators((java.lang.Object[]) strArray7, "4#4");
        org.apache.commons.lang3.text.StrMatcher strMatcher10 = org.apache.commons.lang3.text.StrMatcher.tabMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.deleteAll(strMatcher10);
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder9.trim();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder12.replaceAll("{}3.0", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder12.appendFixedWidthPadRight(8, (int) 'e', '\000');
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strMatcher10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strBuilder19);
    }

    @Test
    public void test04927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04927");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.nextIndex();
        java.util.List<java.lang.String> strList8 = strTokenizer6.getTokenList();
        boolean boolean10 = strList8.add("#\n4#4");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList13 = strList8.subList((int) '2', 75);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 75");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test04928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04928");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        java.lang.String str4 = strBuilder0.getNewLineText();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder0.appendln((float) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder6.setNullText(" ");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder6.appendln(true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder10.insert(74, (float) 24);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 74");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
    }

    @Test
    public void test04929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04929");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        boolean boolean8 = strTokenizer6.hasNext();
        java.util.List<java.lang.String> strList9 = strTokenizer6.getTokenList();
        java.lang.String[] strArray13 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        boolean boolean16 = strList9.addAll((java.util.Collection<java.lang.String>) strList14);
        java.lang.Object[] objArray17 = strList14.toArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("StrTokenizer[ 4#4]");
        boolean boolean20 = strList14.equals((java.lang.Object) "StrTokenizer[ 4#4]");
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder21.replaceFirst("", "");
        char[] charArray25 = strBuilder21.toCharArray();
        int int26 = strBuilder21.capacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder21.append((int) (short) 0);
        boolean boolean30 = strBuilder21.contains("");
        java.lang.StringBuffer stringBuffer31 = strBuilder21.toStringBuffer();
        boolean boolean32 = strList14.equals((java.lang.Object) strBuilder21);
        boolean boolean34 = strBuilder21.endsWith("1001\n");
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[\n32.0, , ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[\n32.0, , ]");
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(stringBuffer31);
        org.junit.Assert.assertEquals(stringBuffer31.toString(), "0");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test04930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04930");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        boolean boolean8 = strTokenizer6.hasNext();
        java.util.List<java.lang.String> strList9 = strTokenizer6.getTokenList();
        java.lang.String[] strArray13 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        boolean boolean16 = strList9.addAll((java.util.Collection<java.lang.String>) strList14);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer18 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray19 = strTokenizer18.getTokenArray();
        java.lang.String[] strArray20 = strTokenizer18.getTokenArray();
        boolean boolean21 = strTokenizer18.hasNext();
        int int22 = strTokenizer18.size();
        org.apache.commons.lang3.text.StrMatcher strMatcher23 = strTokenizer18.getQuoteMatcher();
        java.util.List<java.lang.String> strList24 = strTokenizer18.getTokenList();
        boolean boolean25 = strList9.retainAll((java.util.Collection<java.lang.String>) strList24);
        char[] charArray30 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer32 = new org.apache.commons.lang3.text.StrTokenizer(charArray30, ' ');
        int int33 = strTokenizer32.size();
        boolean boolean34 = strTokenizer32.hasNext();
        java.util.List<java.lang.String> strList35 = strTokenizer32.getTokenList();
        java.lang.String[] strArray39 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        boolean boolean42 = strList35.addAll((java.util.Collection<java.lang.String>) strList40);
        java.util.Spliterator<java.lang.String> strSpliterator43 = strList40.spliterator();
        int int44 = strList40.size();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer47 = new org.apache.commons.lang3.text.StrTokenizer(" 4#4", "");
        int int48 = strList40.lastIndexOf((java.lang.Object) strTokenizer47);
        boolean boolean49 = strList9.removeAll((java.util.Collection<java.lang.String>) strList40);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList52 = strList9.subList(2, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 35");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(strMatcher23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strSpliterator43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test04931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04931");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        boolean boolean9 = strBuilder0.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder0.clear();
        int int12 = strBuilder11.capacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder13.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder16.appendSeparator('#', (int) (byte) 100);
        java.io.Reader reader20 = strBuilder16.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder11.appendln(strBuilder16);
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder11.replaceFirst("\n32.0", "StrTokenizer[not tokenized yet]");
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder11.appendSeparator("#\n4#44#443.0", "#");
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder11.appendln((float) 6);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(reader20);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strBuilder29);
    }

    @Test
    public void test04932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04932");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder2.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.setNullText("");
        char[] charArray6 = strBuilder5.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder5.insert(0, true);
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = new org.apache.commons.lang3.text.StrBuilder();
        int int12 = strBuilder11.capacity();
        java.lang.StringBuffer stringBuffer13 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder11.appendln(stringBuffer13, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher17 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int18 = strBuilder16.lastIndexOf(strMatcher17);
        org.apache.commons.lang3.text.StrMatcher strMatcher19 = org.apache.commons.lang3.text.StrMatcher.noneMatcher();
        boolean boolean20 = strBuilder16.contains(strMatcher19);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer21 = new org.apache.commons.lang3.text.StrTokenizer("hi!", strMatcher19);
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder5.replaceFirst(strMatcher19, "true\n###################################");
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder23.append(1L);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder25.deleteFirst("");
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strMatcher17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(strMatcher19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(strBuilder27);
    }

    @Test
    public void test04933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04933");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer2 = new org.apache.commons.lang3.text.StrTokenizer(" #\n", '#');
        org.apache.commons.lang3.text.StrMatcher strMatcher3 = strTokenizer2.getIgnoredMatcher();
        boolean boolean4 = strTokenizer2.hasPrevious();
        java.lang.String str5 = strTokenizer2.next();
        org.junit.Assert.assertNotNull(strMatcher3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " ");
    }

    @Test
    public void test04934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04934");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder6.appendSeparator(' ', (int) '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.appendln('#');
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder12.replaceFirst("", "");
        char[] charArray16 = strBuilder12.toCharArray();
        org.apache.commons.lang3.text.StrMatcher strMatcher17 = org.apache.commons.lang3.text.StrSubstitutor.DEFAULT_PREFIX;
        org.apache.commons.lang3.text.StrMatcher strMatcher19 = org.apache.commons.lang3.text.StrMatcher.stringMatcher("");
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder23.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder27.replaceFirst("", "");
        char[] charArray31 = strBuilder27.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder26.appendln(charArray31);
        int int36 = strMatcher19.isMatch(charArray31, (-1), (int) ' ', (int) (byte) -1);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer37 = new org.apache.commons.lang3.text.StrTokenizer(charArray16, strMatcher17, strMatcher19);
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder9.appendln(charArray16);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer39 = new org.apache.commons.lang3.text.StrTokenizer(charArray16);
        boolean boolean40 = strTokenizer39.hasNext();
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
        org.junit.Assert.assertNotNull(strMatcher17);
        org.junit.Assert.assertNotNull(strMatcher19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[]");
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test04935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04935");
        java.util.Properties properties2 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer8 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray9 = strTokenizer8.getTokenArray();
        java.lang.String[] strArray10 = strTokenizer8.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder6.appendWithSeparators((java.lang.Object[]) strArray10, "4#4");
        char[] charArray15 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray15);
        java.lang.Object obj17 = properties2.getOrDefault((java.lang.Object) strBuilder6, (java.lang.Object) strTokenizer16);
        int int18 = properties2.size();
        int int19 = properties2.size();
        java.io.IOException iOException20 = new java.io.IOException();
        java.lang.Throwable[] throwableArray21 = iOException20.getSuppressed();
        boolean boolean22 = properties2.equals((java.lang.Object) iOException20);
        java.io.IOException iOException23 = new java.io.IOException((java.lang.Throwable) iOException20);
        java.io.IOException iOException24 = new java.io.IOException("java.io.IOException: hi!", (java.lang.Throwable) iOException23);
        java.io.IOException iOException26 = new java.io.IOException();
        java.lang.Throwable[] throwableArray27 = iOException26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = iOException26.getSuppressed();
        java.io.IOException iOException29 = new java.io.IOException("########", (java.lang.Throwable) iOException26);
        iOException23.addSuppressed((java.lang.Throwable) iOException29);
        java.io.IOException iOException31 = new java.io.IOException("hi!", (java.lang.Throwable) iOException29);
        java.lang.String str32 = iOException29.toString();
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.io.IOException: ########" + "'", str32, "java.io.IOException: ########");
    }

    @Test
    public void test04936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04936");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet9 = properties4.entrySet();
        properties4.clear();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder11.replaceFirst("", "");
        java.io.Reader reader15 = strBuilder11.asReader();
        properties4.load(reader15);
        int int17 = reader15.read();
        reader15.reset();
        boolean boolean19 = reader15.ready();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objEntrySet9);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(reader15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test04937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04937");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        java.io.Reader reader4 = strBuilder0.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder5.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder8.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder12.replaceFirst("", "");
        char[] charArray16 = strBuilder12.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder11.appendln(charArray16);
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder11.appendln((double) '$');
        char[] charArray24 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer26 = new org.apache.commons.lang3.text.StrTokenizer(charArray24, ' ');
        int int27 = strTokenizer26.size();
        boolean boolean28 = strTokenizer26.hasNext();
        java.util.List<java.lang.String> strList29 = strTokenizer26.getTokenList();
        java.lang.String[] strArray33 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        boolean boolean36 = strList29.addAll((java.util.Collection<java.lang.String>) strList34);
        java.lang.String str38 = strList34.remove(0);
        char[] charArray43 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer45 = new org.apache.commons.lang3.text.StrTokenizer(charArray43, ' ');
        int int46 = strTokenizer45.size();
        boolean boolean47 = strTokenizer45.hasNext();
        java.util.List<java.lang.String> strList48 = strTokenizer45.getTokenList();
        java.lang.String[] strArray52 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        boolean boolean55 = strList48.addAll((java.util.Collection<java.lang.String>) strList53);
        boolean boolean56 = strList34.addAll((java.util.Collection<java.lang.String>) strList53);
        org.apache.commons.lang3.text.StrBuilder strBuilder57 = strBuilder11.appendAll((java.lang.Iterable<java.lang.String>) strList34);
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder0.append((java.lang.CharSequence) strBuilder57);
        java.io.Reader reader59 = strBuilder57.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder62 = strBuilder57.replaceAll('#', 'a');
        char[] charArray63 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder66 = strBuilder57.appendln(charArray63, (int) (short) 10, 3);
        org.apache.commons.lang3.text.StrBuilder strBuilder69 = strBuilder57.insert((int) (short) 1, 'g');
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(reader4);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\n32.0" + "'", str38, "\n32.0");
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strBuilder57);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertNotNull(reader59);
        org.junit.Assert.assertNotNull(strBuilder62);
        org.junit.Assert.assertNotNull(strBuilder66);
        org.junit.Assert.assertNotNull(strBuilder69);
    }

    @Test
    public void test04938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04938");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder4.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder6.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder0.appendFixedWidthPadRight((java.lang.Object) strBuilder9, (int) (byte) -1, '#');
        org.apache.commons.lang3.text.StrMatcher strMatcher13 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int14 = strBuilder0.lastIndexOf(strMatcher13);
        char[] charArray19 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer21 = new org.apache.commons.lang3.text.StrTokenizer(charArray19, ' ');
        int int22 = strTokenizer21.size();
        boolean boolean23 = strTokenizer21.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher24 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer25 = strTokenizer21.setIgnoredMatcher(strMatcher24);
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder0.deleteFirst(strMatcher24);
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder26.deleteAll("1");
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder26.setLength((int) '\n');
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder26.appendln("tue");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder32.deleteCharAt(37);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 37");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strMatcher13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strMatcher24);
        org.junit.Assert.assertNotNull(strTokenizer25);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder32);
    }

    @Test
    public void test04939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04939");
        org.apache.commons.lang3.text.StrMatcher strMatcher1 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher("true\n###################################");
        org.junit.Assert.assertNotNull(strMatcher1);
    }

    @Test
    public void test04940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04940");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Set<java.lang.Object> objSet9 = properties4.keySet();
        java.util.Set<java.lang.Object> objSet10 = properties4.keySet();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder11.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray17 = strTokenizer16.getTokenArray();
        java.lang.String[] strArray18 = strTokenizer16.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder14.appendWithSeparators((java.lang.Object[]) strArray18, "4#4");
        org.apache.commons.lang3.text.StrMatcher strMatcher21 = org.apache.commons.lang3.text.StrMatcher.tabMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder20.deleteAll(strMatcher21);
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.trim();
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder20.append(false);
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder26.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer30 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray31 = strTokenizer30.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder26.appendAll((java.lang.Object[]) strArray31);
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder26.replaceFirst('a', 'a');
        char[] charArray40 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer42 = new org.apache.commons.lang3.text.StrTokenizer(charArray40, ' ');
        int int43 = strTokenizer42.size();
        boolean boolean44 = strTokenizer42.hasNext();
        java.util.List<java.lang.String> strList45 = strTokenizer42.getTokenList();
        java.lang.String[] strArray49 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        boolean boolean52 = strList45.addAll((java.util.Collection<java.lang.String>) strList50);
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder26.appendAll((java.lang.Iterable<java.lang.String>) strList50);
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder20.appendAll((java.lang.Iterable<java.lang.String>) strList50);
        boolean boolean55 = properties4.containsValue((java.lang.Object) strList50);
        java.util.Collection<java.lang.Object> objCollection56 = properties4.values();
        java.util.Properties properties57 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration58 = properties57.keys();
        java.util.Set<java.lang.String> strSet59 = properties57.stringPropertyNames();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objSet9);
        org.junit.Assert.assertNotNull(objSet10);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertNotNull(strMatcher21);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objCollection56);
        org.junit.Assert.assertNotNull(objEnumeration58);
        org.junit.Assert.assertNotNull(strSet59);
    }

    @Test
    public void test04941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04941");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        boolean boolean9 = strBuilder0.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder10.replaceAll("#", "true\n###################################3\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder10.appendPadding((int) 'a', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder16.replaceAll('a', 'a');
        int int20 = strBuilder19.capacity();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 204 + "'", int20 == 204);
    }

    @Test
    public void test04942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04942");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst('a', '4');
        java.io.Writer writer7 = strBuilder6.asWriter();
        writer7.write(" 4#4");
        writer7.write(44);
        writer7.write("true\n###################################a4\n");
        // The following exception was thrown during execution in test generation
        try {
            writer7.write("#\n$", 104, 45);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: startIndex must be valid");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(writer7);
    }

    @Test
    public void test04943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04943");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder5.appendPadding((int) '#', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder11.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.appendln((double) '#');
        boolean boolean15 = strBuilder5.equals(strBuilder14);
        java.util.stream.IntStream intStream16 = strBuilder5.codePoints();
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder5.minimizeCapacity();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance("");
        boolean boolean20 = strTokenizer19.hasNext();
        char[] charArray25 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer27 = new org.apache.commons.lang3.text.StrTokenizer(charArray25, ' ');
        int int28 = strTokenizer27.size();
        boolean boolean29 = strTokenizer27.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher30 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer31 = strTokenizer27.setIgnoredMatcher(strMatcher30);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer32 = strTokenizer19.setDelimiterMatcher(strMatcher30);
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder5.deleteAll(strMatcher30);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer35 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance("");
        boolean boolean36 = strTokenizer35.hasNext();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer38 = strTokenizer35.setDelimiterChar('a');
        int int39 = strTokenizer35.size();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer41 = strTokenizer35.setIgnoreEmptyTokens(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder33.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer35, "4#44");
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder44.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder47.appendln('#');
        java.lang.StringBuffer stringBuffer50 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder47.append(stringBuffer50, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = strBuilder53.append("true\n");
        int int56 = strBuilder55.size();
        org.apache.commons.lang3.text.StrMatcher strMatcher58 = org.apache.commons.lang3.text.StrMatcher.stringMatcher("#\nfalse\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = strBuilder55.deleteAll(strMatcher58);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder62 = strBuilder43.append(strBuilder55, (int) '2', 169);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: startIndex must be valid");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intStream16);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strMatcher30);
        org.junit.Assert.assertNotNull(strTokenizer31);
        org.junit.Assert.assertNotNull(strTokenizer32);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strTokenizer35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strTokenizer38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(strTokenizer41);
        org.junit.Assert.assertNotNull(strBuilder43);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertNotNull(strBuilder55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 7 + "'", int56 == 7);
        org.junit.Assert.assertNotNull(strMatcher58);
        org.junit.Assert.assertNotNull(strBuilder59);
    }

    @Test
    public void test04944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04944");
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder((int) (byte) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst('$', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder1.append('a');
        int int8 = strBuilder1.lastIndexOf("\n32.0");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer9 = strBuilder1.asTokenizer();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer11 = strTokenizer9.setIgnoredChar('$');
        // The following exception was thrown during execution in test generation
        try {
            strTokenizer11.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove() is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(strTokenizer9);
        org.junit.Assert.assertNotNull(strTokenizer11);
    }

    @Test
    public void test04945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04945");
        org.apache.commons.lang3.text.StrSubstitutor strSubstitutor0 = new org.apache.commons.lang3.text.StrSubstitutor();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        int int2 = strBuilder1.capacity();
        java.lang.StringBuffer stringBuffer3 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder1.appendln(stringBuffer3, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder1.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder8.appendln(true);
        boolean boolean13 = strSubstitutor0.replaceIn(strBuilder10, (int) '$', 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = new org.apache.commons.lang3.text.StrBuilder();
        int int15 = strBuilder14.capacity();
        java.lang.StringBuffer stringBuffer16 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder14.appendln(stringBuffer16, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher20 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int21 = strBuilder19.lastIndexOf(strMatcher20);
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder19.insert((int) (short) 1, 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder24.deleteAll("java.io.IOException: hi!");
        boolean boolean27 = strSubstitutor0.replaceIn(strBuilder24);
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = new org.apache.commons.lang3.text.StrBuilder();
        int int29 = strBuilder28.capacity();
        java.lang.StringBuffer stringBuffer30 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder28.appendln(stringBuffer30, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder28.insert(1, (double) 32);
        boolean boolean37 = strBuilder28.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder28.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder28.clear();
        int int40 = strBuilder39.capacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder24.append(strBuilder39);
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder24.ensureCapacity(4);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strMatcher20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 32 + "'", int29 == 32);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 32 + "'", int40 == 32);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertNotNull(strBuilder43);
    }

    @Test
    public void test04946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04946");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        char[] charArray4 = strBuilder0.toCharArray();
        org.apache.commons.lang3.text.StrMatcher strMatcher5 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer7 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher8 = strTokenizer7.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer9 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, strMatcher5, strMatcher8);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer10 = strTokenizer9.reset();
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertNotNull(strMatcher5);
        org.junit.Assert.assertNotNull(strMatcher8);
        org.junit.Assert.assertNotNull(strTokenizer10);
    }

    @Test
    public void test04947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04947");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.deleteFirst('a');
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder6.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer10 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray11 = strTokenizer10.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder6.appendAll((java.lang.Object[]) strArray11);
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder6.replaceFirst('a', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder16.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer20 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray21 = strTokenizer20.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder16.appendAll((java.lang.Object[]) strArray21);
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder6.appendln(strBuilder22);
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder22.appendln((long) 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder22.appendSeparator("hi!", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder29.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder32.replaceFirst('a', '4');
        java.io.Writer writer36 = strBuilder35.asWriter();
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder37.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder40.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder44.replaceFirst("", "");
        char[] charArray48 = strBuilder44.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder43.appendln(charArray48);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer50 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray48);
        writer36.write(charArray48);
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder28.append(charArray48);
        org.apache.commons.lang3.text.StrMatcher strMatcher54 = org.apache.commons.lang3.text.StrMatcher.charMatcher('#');
        int int56 = strBuilder28.indexOf(strMatcher54, 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder57 = strBuilder3.deleteAll(strMatcher54);
        org.apache.commons.lang3.text.StrBuilder strBuilder60 = strBuilder57.insert(0, (long) 10);
        java.io.Writer writer61 = strBuilder57.asWriter();
        org.apache.commons.lang3.text.StrBuilder strBuilder62 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = strBuilder62.deleteFirst("");
        int int66 = strBuilder62.indexOf("");
        int int69 = strBuilder62.lastIndexOf('#', (int) (byte) 0);
        boolean boolean71 = strBuilder62.startsWith("4#4");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer72 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance();
        org.apache.commons.lang3.text.StrBuilder strBuilder73 = strBuilder62.appendAll((java.util.Iterator<java.lang.String>) strTokenizer72);
        org.apache.commons.lang3.text.StrBuilder strBuilder75 = strBuilder62.appendSeparator("{}");
        org.apache.commons.lang3.text.StrBuilder strBuilder77 = strBuilder62.append((double) 0.0f);
        org.apache.commons.lang3.text.StrBuilder strBuilder79 = strBuilder62.appendln((int) (byte) 100);
        char[] charArray80 = strBuilder62.toCharArray();
        // The following exception was thrown during execution in test generation
        try {
            writer61.write(charArray80, 47, 118);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: Invalid startIndex: 118");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(writer36);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNotNull(strBuilder43);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[]");
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(strTokenizer50);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(strMatcher54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(strBuilder57);
        org.junit.Assert.assertNotNull(strBuilder60);
        org.junit.Assert.assertNotNull(writer61);
        org.junit.Assert.assertNotNull(strBuilder64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strTokenizer72);
        org.junit.Assert.assertNotNull(strBuilder73);
        org.junit.Assert.assertNotNull(strBuilder75);
        org.junit.Assert.assertNotNull(strBuilder77);
        org.junit.Assert.assertNotNull(strBuilder79);
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "0.0100\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "0.0100\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[0, ., 0, 1, 0, 0, \n]");
    }

    @Test
    public void test04948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04948");
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder(3);
        char[] charArray2 = strBuilder1.toCharArray();
        org.apache.commons.lang3.text.StrMatcher strMatcher3 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray2);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer5 = new org.apache.commons.lang3.text.StrTokenizer(charArray2, "true\n###################################");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer7 = new org.apache.commons.lang3.text.StrTokenizer(charArray2, "true\n");
        java.lang.String[] strArray8 = strTokenizer7.getTokenArray();
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertNotNull(strMatcher3);
        org.junit.Assert.assertNotNull(strArray8);
    }

    @Test
    public void test04949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04949");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance("l");
        org.junit.Assert.assertNotNull(strTokenizer1);
    }

    @Test
    public void test04950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04950");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        java.io.Reader reader4 = strBuilder0.asReader();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance("");
        boolean boolean7 = strTokenizer6.hasNext();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer9 = strTokenizer6.setDelimiterChar('a');
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray15 = strTokenizer14.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder10.appendAll((java.lang.Object[]) strArray15);
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder10.replaceFirst('a', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder20.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer24 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray25 = strTokenizer24.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder20.appendAll((java.lang.Object[]) strArray25);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder10.appendln(strBuilder26);
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder26.appendln((long) 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder26.appendSeparator("hi!", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder33.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder36.replaceFirst('a', '4');
        java.io.Writer writer40 = strBuilder39.asWriter();
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder41.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder44.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder48.replaceFirst("", "");
        char[] charArray52 = strBuilder48.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder47.appendln(charArray52);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer54 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray52);
        writer40.write(charArray52);
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = strBuilder32.append(charArray52);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer57 = strTokenizer9.reset(charArray52);
        java.lang.String str58 = strTokenizer57.nextToken();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer59 = strTokenizer57.reset();
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = strBuilder0.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer59, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        boolean boolean63 = strBuilder0.contains("#######a4\n");
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(reader4);
        org.junit.Assert.assertNotNull(strTokenizer6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strTokenizer9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNotNull(writer40);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(strBuilder51);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[]");
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertNotNull(strTokenizer54);
        org.junit.Assert.assertNotNull(strBuilder56);
        org.junit.Assert.assertNotNull(strTokenizer57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(strTokenizer59);
        org.junit.Assert.assertNotNull(strBuilder61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test04951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04951");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder5.appendPadding((int) '#', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder11.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.appendln((double) '#');
        boolean boolean15 = strBuilder5.equals(strBuilder14);
        java.util.stream.IntStream intStream16 = strBuilder5.codePoints();
        java.util.Iterator<java.lang.String> strItor17 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder5.appendWithSeparators(strItor17, " 4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder19.replaceFirst(' ', ' ');
        int int24 = strBuilder22.lastIndexOf(' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder22.insert((int) '$', '$');
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder22.insert((int) (short) 0, 53);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder22.insert(169, true);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 169");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intStream16);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strBuilder30);
    }

    @Test
    public void test04952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04952");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder7.replaceFirst("", "");
        char[] charArray11 = strBuilder7.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder6.appendln(charArray11);
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder6.appendln((double) '$');
        char[] charArray19 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer21 = new org.apache.commons.lang3.text.StrTokenizer(charArray19, ' ');
        int int22 = strTokenizer21.size();
        boolean boolean23 = strTokenizer21.hasNext();
        java.util.List<java.lang.String> strList24 = strTokenizer21.getTokenList();
        java.lang.String[] strArray28 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        boolean boolean31 = strList24.addAll((java.util.Collection<java.lang.String>) strList29);
        java.lang.String str33 = strList29.remove(0);
        char[] charArray38 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer40 = new org.apache.commons.lang3.text.StrTokenizer(charArray38, ' ');
        int int41 = strTokenizer40.size();
        boolean boolean42 = strTokenizer40.hasNext();
        java.util.List<java.lang.String> strList43 = strTokenizer40.getTokenList();
        java.lang.String[] strArray47 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        boolean boolean50 = strList43.addAll((java.util.Collection<java.lang.String>) strList48);
        boolean boolean51 = strList29.addAll((java.util.Collection<java.lang.String>) strList48);
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder6.appendAll((java.lang.Iterable<java.lang.String>) strList29);
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = strBuilder53.deleteFirst("");
        int int57 = strBuilder53.indexOf("");
        int int60 = strBuilder53.lastIndexOf('#', (int) (byte) 0);
        boolean boolean62 = strBuilder53.startsWith("4#4");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer63 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance();
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = strBuilder53.appendAll((java.util.Iterator<java.lang.String>) strTokenizer63);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer66 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray67 = strTokenizer66.getTokenArray();
        java.lang.String[] strArray68 = strTokenizer66.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder70 = strBuilder53.appendWithSeparators((java.lang.Object[]) strArray68, "");
        org.apache.commons.lang3.text.StrBuilder strBuilder71 = strBuilder52.appendln((java.lang.Object) "");
        org.apache.commons.lang3.text.StrBuilder strBuilder74 = strBuilder52.replaceFirst("100.0", "java.io.IOException: \n");
        org.apache.commons.lang3.text.StrBuilder strBuilder77 = strBuilder52.replaceFirst('#', 't');
        org.apache.commons.lang3.text.StrBuilder strBuilder79 = strBuilder77.deleteCharAt(0);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\n32.0" + "'", str33, "\n32.0");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(strBuilder55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strTokenizer63);
        org.junit.Assert.assertNotNull(strBuilder64);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strBuilder70);
        org.junit.Assert.assertNotNull(strBuilder71);
        org.junit.Assert.assertNotNull(strBuilder74);
        org.junit.Assert.assertNotNull(strBuilder77);
        org.junit.Assert.assertNotNull(strBuilder79);
    }

    @Test
    public void test04953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04953");
        java.io.IOException iOException1 = new java.io.IOException("{}");
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.lang.String str4 = iOException3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.io.IOException: java.io.IOException: {}" + "'", str4, "java.io.IOException: java.io.IOException: {}");
    }

    @Test
    public void test04954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04954");
        java.util.Properties properties0 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray7 = strTokenizer6.getTokenArray();
        java.lang.String[] strArray8 = strTokenizer6.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder4.appendWithSeparators((java.lang.Object[]) strArray8, "4#4");
        char[] charArray13 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray13);
        java.lang.Object obj15 = properties0.getOrDefault((java.lang.Object) strBuilder4, (java.lang.Object) strTokenizer14);
        java.util.Collection<java.lang.Object> objCollection16 = properties0.values();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer18 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher19 = strTokenizer18.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer20 = strTokenizer18.reset();
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder21.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder25.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder27.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder28.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder21.appendFixedWidthPadRight((java.lang.Object) strBuilder30, (int) (byte) -1, '#');
        org.apache.commons.lang3.text.StrMatcher strMatcher34 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int35 = strBuilder21.lastIndexOf(strMatcher34);
        char[] charArray40 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer42 = new org.apache.commons.lang3.text.StrTokenizer(charArray40, ' ');
        int int43 = strTokenizer42.size();
        boolean boolean44 = strTokenizer42.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher45 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer46 = strTokenizer42.setIgnoredMatcher(strMatcher45);
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder21.deleteFirst(strMatcher45);
        java.lang.Object obj48 = properties0.getOrDefault((java.lang.Object) strTokenizer20, (java.lang.Object) strBuilder47);
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder49.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = strBuilder52.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = strBuilder56.replaceFirst("", "");
        char[] charArray60 = strBuilder56.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = strBuilder55.appendln(charArray60);
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = strBuilder55.appendln((double) '$');
        org.apache.commons.lang3.text.StrBuilder strBuilder65 = strBuilder63.deleteAll('a');
        char[] charArray68 = strBuilder63.toCharArray((int) (byte) 1, 53);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer69 = strTokenizer20.reset(charArray68);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer70 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray68);
        org.apache.commons.lang3.text.StrMatcher strMatcher71 = null;
        org.apache.commons.lang3.text.StrTokenizer strTokenizer72 = strTokenizer70.setTrimmerMatcher(strMatcher71);
        org.apache.commons.lang3.text.StrMatcher strMatcher73 = strTokenizer70.getDelimiterMatcher();
        java.lang.String str74 = strTokenizer70.next();
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNotNull(strMatcher19);
        org.junit.Assert.assertNotNull(strTokenizer20);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strMatcher34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strMatcher45);
        org.junit.Assert.assertNotNull(strTokenizer46);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "");
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(strBuilder55);
        org.junit.Assert.assertNotNull(strBuilder59);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[]");
        org.junit.Assert.assertNotNull(strBuilder61);
        org.junit.Assert.assertNotNull(strBuilder63);
        org.junit.Assert.assertNotNull(strBuilder65);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "36.0\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "36.0\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[3, 6, ., 0, \n]");
        org.junit.Assert.assertNotNull(strTokenizer69);
        org.junit.Assert.assertNotNull(strTokenizer70);
        org.junit.Assert.assertNotNull(strTokenizer72);
        org.junit.Assert.assertNotNull(strMatcher73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "36.0" + "'", str74, "36.0");
    }

    @Test
    public void test04955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04955");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher2 = strTokenizer1.getTrimmerMatcher();
        java.lang.Object obj3 = strTokenizer1.clone();
        java.lang.Object obj4 = strTokenizer1.clone();
        java.lang.String[] strArray5 = strTokenizer1.getTokenArray();
        // The following exception was thrown during execution in test generation
        try {
            strTokenizer1.set("\n36E");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: set() is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMatcher2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertNotNull(strArray5);
    }

    @Test
    public void test04956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04956");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        java.io.Reader reader4 = strBuilder0.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder0.appendSeparator('4');
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder10.replaceFirst("", "");
        char[] charArray14 = strBuilder10.toCharArray();
        char[] charArray15 = strBuilder7.getChars(charArray14);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = new org.apache.commons.lang3.text.StrTokenizer(charArray14);
        boolean boolean17 = strTokenizer16.hasPrevious();
        org.apache.commons.lang3.text.StrMatcher strMatcher19 = org.apache.commons.lang3.text.StrMatcher.stringMatcher("");
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder23.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder27.replaceFirst("", "");
        char[] charArray31 = strBuilder27.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder26.appendln(charArray31);
        int int36 = strMatcher19.isMatch(charArray31, (-1), (int) ' ', (int) (byte) -1);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer37 = new org.apache.commons.lang3.text.StrTokenizer(charArray31);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer38 = strTokenizer16.reset(charArray31);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer40 = strTokenizer38.setQuoteChar('#');
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder6.appendAll((java.util.Iterator<java.lang.String>) strTokenizer38);
        java.util.List<java.lang.String> strList42 = strTokenizer38.getTokenList();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList45 = strList42.subList(194, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 35");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(reader4);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strMatcher19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[]");
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(strTokenizer38);
        org.junit.Assert.assertNotNull(strTokenizer40);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertNotNull(strList42);
    }

    @Test
    public void test04957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04957");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        java.lang.Throwable throwable3 = null;
        java.io.IOException iOException4 = new java.io.IOException("\n32.0", throwable3);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        char[] charArray8 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer9 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray8);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer11 = strTokenizer9.setDelimiterString("hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer13 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder14.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder17.appendln('#');
        java.lang.StringBuffer stringBuffer20 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder17.append(stringBuffer20, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder17.deleteFirst("hi!");
        char[] charArray26 = strBuilder17.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer27 = strTokenizer13.reset(charArray26);
        boolean boolean28 = properties0.replace((java.lang.Object) iOException4, (java.lang.Object) "hi!", (java.lang.Object) strTokenizer13);
        java.util.Properties properties29 = new java.util.Properties(properties0);
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder30.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder32.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder33.ensureCapacity((int) (short) 10);
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder36.replaceFirst("", "");
        java.lang.String str40 = strBuilder36.getNewLineText();
        java.util.stream.IntStream intStream41 = strBuilder36.chars();
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder33.append((java.lang.CharSequence) strBuilder36);
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = strBuilder43.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder46.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder48.appendPadding((int) '#', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder52.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = strBuilder54.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder57 = strBuilder55.appendln((double) '#');
        boolean boolean58 = strBuilder48.equals(strBuilder57);
        java.util.stream.IntStream intStream59 = strBuilder48.codePoints();
        int int61 = strBuilder48.indexOf('#');
        java.lang.Object obj62 = properties0.putIfAbsent((java.lang.Object) strBuilder42, (java.lang.Object) int61);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer9);
        org.junit.Assert.assertNotNull(strTokenizer11);
        org.junit.Assert.assertNotNull(strTokenizer13);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, \n]");
        org.junit.Assert.assertNotNull(strTokenizer27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(intStream41);
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertNotNull(strBuilder46);
        org.junit.Assert.assertNotNull(strBuilder48);
        org.junit.Assert.assertNotNull(strBuilder51);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertNotNull(strBuilder55);
        org.junit.Assert.assertNotNull(strBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intStream59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNull(obj62);
    }

    @Test
    public void test04958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04958");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.appendln('#');
        java.lang.StringBuffer stringBuffer6 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder3.append(stringBuffer6, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder3.deleteFirst("hi!");
        char[] charArray12 = strBuilder3.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder3.setNewLineText("java.io.IOException: hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder3.appendln('\n');
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder3.appendFixedWidthPadRight(204, 24, 's');
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, \n]");
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder20);
    }

    @Test
    public void test04959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04959");
        java.util.Properties properties0 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray7 = strTokenizer6.getTokenArray();
        java.lang.String[] strArray8 = strTokenizer6.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder4.appendWithSeparators((java.lang.Object[]) strArray8, "4#4");
        char[] charArray13 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray13);
        java.lang.Object obj15 = properties0.getOrDefault((java.lang.Object) strBuilder4, (java.lang.Object) strTokenizer14);
        java.util.Enumeration<?> wildcardEnumeration16 = properties0.propertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties0.elements();
        java.util.Collection<java.lang.Object> objCollection18 = properties0.values();
        java.util.Properties properties19 = new java.util.Properties(properties0);
        java.lang.Object obj21 = properties19.remove((java.lang.Object) "\000\000\000\000\000\000#\n");
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertNotNull(wildcardEnumeration16);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertNull(obj21);
    }

    @Test
    public void test04960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04960");
        java.util.Properties properties0 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray7 = strTokenizer6.getTokenArray();
        java.lang.String[] strArray8 = strTokenizer6.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder4.appendWithSeparators((java.lang.Object[]) strArray8, "4#4");
        char[] charArray13 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray13);
        java.lang.Object obj15 = properties0.getOrDefault((java.lang.Object) strBuilder4, (java.lang.Object) strTokenizer14);
        java.util.Enumeration<?> wildcardEnumeration16 = properties0.propertyNames();
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = new org.apache.commons.lang3.text.StrBuilder();
        int int18 = strBuilder17.capacity();
        java.lang.StringBuffer stringBuffer19 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder17.appendln(stringBuffer19, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder17.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder17.setLength(32);
        java.io.Writer writer28 = strBuilder27.asWriter();
        writer28.write(" 4#4", (int) (byte) 0, (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = new org.apache.commons.lang3.text.StrBuilder();
        int int34 = strBuilder33.capacity();
        java.lang.StringBuffer stringBuffer35 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder33.appendln(stringBuffer35, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder33.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = strBuilder40.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder42.append((float) '4');
        java.io.Writer writer45 = writer28.append((java.lang.CharSequence) strBuilder42);
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder46.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder48.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder49.appendSeparator("hi!", "4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder52.deleteAll("");
        java.io.Writer writer55 = writer28.append((java.lang.CharSequence) strBuilder52);
        org.apache.commons.lang3.text.StrBuilder strBuilder57 = strBuilder52.deleteFirst(" #\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = new org.apache.commons.lang3.text.StrBuilder();
        int int59 = strBuilder58.capacity();
        java.lang.StringBuffer stringBuffer60 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = strBuilder58.appendln(stringBuffer60, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder66 = strBuilder58.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder68 = strBuilder58.setLength(32);
        java.io.Writer writer69 = strBuilder68.asWriter();
        writer69.write(" 4#4", (int) (byte) 0, (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder74 = new org.apache.commons.lang3.text.StrBuilder();
        int int75 = strBuilder74.capacity();
        java.lang.StringBuffer stringBuffer76 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder79 = strBuilder74.appendln(stringBuffer76, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder82 = strBuilder74.insert(1, (double) 32);
        java.lang.String str84 = strBuilder74.rightString((int) ' ');
        boolean boolean86 = strBuilder74.startsWith("");
        char[] charArray87 = strBuilder74.toCharArray();
        org.apache.commons.lang3.text.StrMatcher strMatcher88 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(charArray87);
        writer69.write(charArray87);
        java.lang.Object obj90 = properties0.put((java.lang.Object) " #\n", (java.lang.Object) writer69);
        writer69.flush();
        writer69.write("a4");
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertNotNull(wildcardEnumeration16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(writer28);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 32 + "'", int34 == 32);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNotNull(strBuilder42);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(writer45);
        org.junit.Assert.assertNotNull(strBuilder48);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertNotNull(writer55);
        org.junit.Assert.assertNotNull(strBuilder57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 32 + "'", int59 == 32);
        org.junit.Assert.assertNotNull(strBuilder63);
        org.junit.Assert.assertNotNull(strBuilder66);
        org.junit.Assert.assertNotNull(strBuilder68);
        org.junit.Assert.assertNotNull(writer69);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 32 + "'", int75 == 32);
        org.junit.Assert.assertNotNull(strBuilder79);
        org.junit.Assert.assertNotNull(strBuilder82);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\n32.0" + "'", str84, "\n32.0");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(charArray87);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray87), "\n32.0");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray87), "\n32.0");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray87), "[\n, 3, 2, ., 0]");
        org.junit.Assert.assertNotNull(strMatcher88);
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test04961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04961");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder5.appendPadding((int) '#', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder9.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder11.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.appendln((double) '#');
        boolean boolean15 = strBuilder5.equals(strBuilder14);
        java.util.stream.IntStream intStream16 = strBuilder5.codePoints();
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder5.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder5.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder18.appendSeparator("", "0\n");
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intStream16);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(strBuilder21);
    }

    @Test
    public void test04962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04962");
        java.util.Properties properties0 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder4.appendln('#');
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder9.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = new org.apache.commons.lang3.text.StrBuilder();
        int int12 = strBuilder11.capacity();
        java.lang.StringBuffer stringBuffer13 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder11.appendln(stringBuffer13, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher17 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int18 = strBuilder16.lastIndexOf(strMatcher17);
        boolean boolean19 = strBuilder9.equalsIgnoreCase(strBuilder16);
        char[] charArray22 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer23 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray22);
        boolean boolean24 = properties0.replace((java.lang.Object) strBuilder6, (java.lang.Object) strBuilder9, (java.lang.Object) strTokenizer23);
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder9.deleteAll("StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder9.deleteAll("1");
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder9.append((float) (byte) -1);
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder9.appendPadding(8, 't');
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder9.appendln((double) '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder9.minimizeCapacity();
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strMatcher17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(strBuilder36);
    }

    @Test
    public void test04963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04963");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        boolean boolean8 = strTokenizer6.hasNext();
        java.util.List<java.lang.String> strList9 = strTokenizer6.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        int int11 = strBuilder10.capacity();
        java.lang.StringBuffer stringBuffer12 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder10.appendln(stringBuffer12, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder10.insert(1, (double) 32);
        java.lang.String str20 = strBuilder10.rightString((int) ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder10.insert(1, '#');
        boolean boolean24 = strList9.equals((java.lang.Object) strBuilder10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList27 = strList9.subList(169, (int) '$');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 36");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\n32.0" + "'", str20, "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test04964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04964");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher2 = strTokenizer1.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = strTokenizer1.reset("");
        java.lang.String str5 = strTokenizer4.nextToken();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer7 = strTokenizer4.setIgnoreEmptyTokens(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder8.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder10.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder11.appendSeparator("hi!", "4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = new org.apache.commons.lang3.text.StrBuilder();
        int int16 = strBuilder15.capacity();
        java.lang.StringBuffer stringBuffer17 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder15.appendln(stringBuffer17, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher21 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int22 = strBuilder20.lastIndexOf(strMatcher21);
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder11.replaceFirst(strMatcher21, "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer25 = strTokenizer4.setIgnoredMatcher(strMatcher21);
        java.util.Properties properties26 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder27.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer32 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray33 = strTokenizer32.getTokenArray();
        java.lang.String[] strArray34 = strTokenizer32.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder30.appendWithSeparators((java.lang.Object[]) strArray34, "4#4");
        char[] charArray39 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer40 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray39);
        java.lang.Object obj41 = properties26.getOrDefault((java.lang.Object) strBuilder30, (java.lang.Object) strTokenizer40);
        java.lang.Object obj44 = properties26.setProperty("[4#4]", "java.io.IOException: {}");
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder45.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer49 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray50 = strTokenizer49.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder45.appendAll((java.lang.Object[]) strArray50);
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder45.replaceFirst('a', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder57 = strBuilder55.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer59 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray60 = strTokenizer59.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = strBuilder55.appendAll((java.lang.Object[]) strArray60);
        org.apache.commons.lang3.text.StrBuilder strBuilder62 = strBuilder45.appendln(strBuilder61);
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = strBuilder61.appendln((long) 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder67 = strBuilder61.appendSeparator("hi!", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder68 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder71 = strBuilder68.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder74 = strBuilder71.replaceFirst('a', '4');
        java.io.Writer writer75 = strBuilder74.asWriter();
        org.apache.commons.lang3.text.StrBuilder strBuilder76 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder79 = strBuilder76.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder82 = strBuilder79.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder83 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder86 = strBuilder83.replaceFirst("", "");
        char[] charArray87 = strBuilder83.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder88 = strBuilder82.appendln(charArray87);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer89 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray87);
        writer75.write(charArray87);
        org.apache.commons.lang3.text.StrBuilder strBuilder91 = strBuilder67.append(charArray87);
        java.lang.Object obj92 = properties26.get((java.lang.Object) charArray87);
        java.util.Set<java.lang.Object> objSet93 = properties26.keySet();
        java.lang.Object obj96 = properties26.setProperty("\000\000\000\000\000\000\000\000\000\000\000\000\000", "java.io.IOException: \n32.0");
        java.lang.String str97 = org.apache.commons.lang3.text.StrSubstitutor.replace((java.lang.Object) strTokenizer4, properties26);
        org.junit.Assert.assertNotNull(strMatcher2);
        org.junit.Assert.assertNotNull(strTokenizer4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strTokenizer7);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 32 + "'", int16 == 32);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertNotNull(strMatcher21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strTokenizer25);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strBuilder51);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertNotNull(strBuilder57);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strBuilder61);
        org.junit.Assert.assertNotNull(strBuilder62);
        org.junit.Assert.assertNotNull(strBuilder64);
        org.junit.Assert.assertNotNull(strBuilder67);
        org.junit.Assert.assertNotNull(strBuilder71);
        org.junit.Assert.assertNotNull(strBuilder74);
        org.junit.Assert.assertNotNull(writer75);
        org.junit.Assert.assertNotNull(strBuilder79);
        org.junit.Assert.assertNotNull(strBuilder82);
        org.junit.Assert.assertNotNull(strBuilder86);
        org.junit.Assert.assertNotNull(charArray87);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray87), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray87), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray87), "[]");
        org.junit.Assert.assertNotNull(strBuilder88);
        org.junit.Assert.assertNotNull(strTokenizer89);
        org.junit.Assert.assertNotNull(strBuilder91);
        org.junit.Assert.assertNull(obj92);
        org.junit.Assert.assertNotNull(objSet93);
        org.junit.Assert.assertNull(obj96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "StrTokenizer[]" + "'", str97, "StrTokenizer[]");
    }

    @Test
    public void test04965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04965");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder2.minimizeCapacity();
        int int5 = strBuilder3.lastIndexOf('#');
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder3.append("");
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder3.setNullText("\n#\n\n");
        org.apache.commons.lang3.text.StrMatcher strMatcher11 = org.apache.commons.lang3.text.StrMatcher.charSetMatcher(" 4#4");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder3.replace(strMatcher11, "true\n##############################true#####4", (int) 't', 131, 101);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: end < start");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strMatcher11);
    }

    @Test
    public void test04966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04966");
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder((int) (byte) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst('$', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder1.append('a');
        int int8 = strBuilder1.lastIndexOf("\n32.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = new org.apache.commons.lang3.text.StrBuilder();
        int int10 = strBuilder9.capacity();
        java.lang.StringBuffer stringBuffer11 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder9.appendln(stringBuffer11, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder9.insert(1, (double) 32);
        boolean boolean18 = strBuilder9.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder9.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder9.clear();
        int int21 = strBuilder20.capacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder1.append(strBuilder20);
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = new org.apache.commons.lang3.text.StrBuilder();
        int int25 = strBuilder24.capacity();
        java.lang.StringBuffer stringBuffer26 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder24.appendln(stringBuffer26, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder24.insert(1, (double) 32);
        java.lang.String str34 = strBuilder24.rightString((int) ' ');
        boolean boolean36 = strBuilder24.startsWith("");
        char[] charArray37 = strBuilder24.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder22.insert((int) (short) 0, charArray37);
        java.util.Properties properties39 = new java.util.Properties();
        int int40 = properties39.size();
        java.util.Set<java.lang.Object> objSet41 = properties39.keySet();
        java.util.Properties properties42 = new java.util.Properties(properties39);
        java.lang.String str43 = org.apache.commons.lang3.text.StrSubstitutor.replace((java.lang.Object) strBuilder22, properties42);
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder22.appendNewLine();
        java.io.Writer writer45 = strBuilder22.asWriter();
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder22.append("\na32");
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = strBuilder47.appendSeparator('\n', 200);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer51 = strBuilder47.asTokenizer();
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 32 + "'", int21 == 32);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\n32.0" + "'", str34, "\n32.0");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "\n32.0");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "\n32.0");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[\n, 3, 2, ., 0]");
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objSet41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\n32.0a" + "'", str43, "\n32.0a");
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(writer45);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(strBuilder50);
        org.junit.Assert.assertNotNull(strTokenizer51);
    }

    @Test
    public void test04967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04967");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        char[] charArray13 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = new org.apache.commons.lang3.text.StrTokenizer(charArray13, ' ');
        int int16 = strTokenizer15.size();
        boolean boolean17 = strTokenizer15.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher18 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = strTokenizer15.setIgnoredMatcher(strMatcher18);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.replaceFirst("", "");
        java.lang.Object obj24 = properties0.putIfAbsent((java.lang.Object) strMatcher18, (java.lang.Object) strBuilder20);
        java.util.Properties properties25 = new java.util.Properties();
        java.util.Properties properties26 = new java.util.Properties(properties25);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder27.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder30.replaceFirst('a', '4');
        java.io.Writer writer34 = strBuilder33.asWriter();
        properties26.store(writer34, "");
        java.util.Properties properties37 = new java.util.Properties();
        int int38 = properties37.size();
        boolean boolean40 = properties37.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties41 = new java.util.Properties();
        int int42 = properties41.size();
        boolean boolean44 = properties41.containsKey((java.lang.Object) (-1.0f));
        properties37.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties41.keys();
        boolean boolean47 = properties26.containsValue((java.lang.Object) objEnumeration46);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.util.Collection<java.lang.Object> objCollection49 = properties26.values();
        java.util.Properties properties50 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder51.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer56 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray57 = strTokenizer56.getTokenArray();
        java.lang.String[] strArray58 = strTokenizer56.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder60 = strBuilder54.appendWithSeparators((java.lang.Object[]) strArray58, "4#4");
        char[] charArray63 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer64 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray63);
        java.lang.Object obj65 = properties50.getOrDefault((java.lang.Object) strBuilder54, (java.lang.Object) strTokenizer64);
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties50);
        java.lang.Object obj67 = null;
        java.lang.Object obj68 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj69 = properties26.replace(obj67, obj68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strMatcher18);
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(writer34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objEnumeration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objCollection49);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strBuilder60);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer64);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "StrTokenizer[not tokenized yet]");
    }

    @Test
    public void test04968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04968");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Enumeration<java.lang.Object> objEnumeration1 = properties0.keys();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder2.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder5.appendSeparator('#', (int) (byte) 100);
        java.io.Reader reader9 = strBuilder5.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray15 = strTokenizer14.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder10.appendAll((java.lang.Object[]) strArray15);
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder10.replaceFirst('a', 'a');
        java.util.stream.IntStream intStream20 = strBuilder10.codePoints();
        java.lang.Object obj21 = properties0.replace((java.lang.Object) reader9, (java.lang.Object) intStream20);
        long long23 = reader9.skip(0L);
        reader9.close();
        boolean boolean25 = reader9.markSupported();
        boolean boolean26 = reader9.markSupported();
        long long28 = reader9.skip((long) '$');
        reader9.reset();
        org.junit.Assert.assertNotNull(objEnumeration1);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(reader9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(intStream20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
    }

    @Test
    public void test04969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04969");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        java.lang.Throwable throwable3 = null;
        java.io.IOException iOException4 = new java.io.IOException("\n32.0", throwable3);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        char[] charArray8 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer9 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray8);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer11 = strTokenizer9.setDelimiterString("hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer13 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder14.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder17.appendln('#');
        java.lang.StringBuffer stringBuffer20 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder17.append(stringBuffer20, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = strBuilder17.deleteFirst("hi!");
        char[] charArray26 = strBuilder17.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer27 = strTokenizer13.reset(charArray26);
        boolean boolean28 = properties0.replace((java.lang.Object) iOException4, (java.lang.Object) "hi!", (java.lang.Object) strTokenizer13);
        int int29 = properties0.size();
        int int30 = properties0.size();
        java.util.Set<java.lang.Object> objSet31 = properties0.keySet();
        java.lang.String str32 = properties0.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties0.keys();
        boolean boolean34 = properties0.isEmpty();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer9);
        org.junit.Assert.assertNotNull(strTokenizer11);
        org.junit.Assert.assertNotNull(strTokenizer13);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNotNull(strBuilder25);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, \n]");
        org.junit.Assert.assertNotNull(strTokenizer27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{}" + "'", str32, "{}");
        org.junit.Assert.assertNotNull(objEnumeration33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test04970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04970");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer2 = new org.apache.commons.lang3.text.StrTokenizer("\ntrue", 'e');
        java.lang.String str3 = strTokenizer2.previousToken();
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test04971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04971");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder2.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder5.appendln('#');
        java.lang.StringBuffer stringBuffer8 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder5.append(stringBuffer8, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder5.deleteFirst("hi!");
        char[] charArray14 = strBuilder5.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = strTokenizer1.reset(charArray14);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray14);
        java.lang.String str17 = strTokenizer16.toString();
        org.junit.Assert.assertNotNull(strTokenizer1);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, \n]");
        org.junit.Assert.assertNotNull(strTokenizer15);
        org.junit.Assert.assertNotNull(strTokenizer16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "StrTokenizer[not tokenized yet]" + "'", str17, "StrTokenizer[not tokenized yet]");
    }

    @Test
    public void test04972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04972");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.deleteAll('4');
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.appendSeparator("StrTokenizer[]", "java.io.IOException: hi!");
        char[] charArray9 = strBuilder8.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer11 = new org.apache.commons.lang3.text.StrTokenizer(charArray9, '7');
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "java.io.IOException: hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "java.io.IOException: hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[j, a, v, a, ., i, o, ., I, O, E, x, c, e, p, t, i, o, n, :,  , h, i, !]");
    }

    @Test
    public void test04973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04973");
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder("0");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder1.setNewLineText("java.io.IOException: java.io.IOException: StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder4.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder7.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder10.appendSeparator(' ', (int) '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder13.appendln('#');
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder15.ensureCapacity((int) (short) 10);
        org.apache.commons.lang3.text.StrMatcher strMatcher18 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder17.replaceAll(strMatcher18, "");
        boolean boolean21 = strBuilder1.equals(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strMatcher18);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test04974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04974");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        int int4 = strBuilder0.indexOf("");
        int int7 = strBuilder0.lastIndexOf('#', (int) (byte) 0);
        boolean boolean9 = strBuilder0.startsWith("4#4");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer10 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder0.appendAll((java.util.Iterator<java.lang.String>) strTokenizer10);
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder0.appendSeparator("{}");
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder0.append((double) 0.0f);
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = new org.apache.commons.lang3.text.StrBuilder();
        int int17 = strBuilder16.capacity();
        java.lang.StringBuffer stringBuffer18 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder16.appendln(stringBuffer18, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder16.insert(1, (double) 32);
        java.util.Properties properties25 = new java.util.Properties();
        int int26 = properties25.size();
        boolean boolean28 = properties25.containsKey((java.lang.Object) (-1.0f));
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder29.replaceFirst("", "");
        char[] charArray33 = strBuilder29.toCharArray();
        boolean boolean34 = properties25.containsValue((java.lang.Object) charArray33);
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder16.append(charArray33, (int) (byte) 0, 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder16.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder0.append((java.lang.Object) true);
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder0.trim();
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder0.setLength((int) '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder44.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder47.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder49.appendPadding((int) '#', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = strBuilder53.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = strBuilder55.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder56.appendln((double) '#');
        boolean boolean59 = strBuilder49.equals(strBuilder58);
        java.util.stream.IntStream intStream60 = strBuilder49.codePoints();
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = strBuilder49.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = strBuilder49.ensureCapacity(53);
        org.apache.commons.lang3.text.StrBuilder strBuilder65 = strBuilder49.ensureCapacity((int) (byte) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder68 = strBuilder65.replaceFirst("############################################org.apac", "#\n4#44#443.0");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder71 = strBuilder43.append((java.lang.CharSequence) "#\n4#44#443.0", (int) '2', 194);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: startIndex must be valid");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strTokenizer10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 32 + "'", int17 == 32);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertNotNull(strBuilder43);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(strBuilder55);
        org.junit.Assert.assertNotNull(strBuilder56);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intStream60);
        org.junit.Assert.assertNotNull(strBuilder61);
        org.junit.Assert.assertNotNull(strBuilder63);
        org.junit.Assert.assertNotNull(strBuilder65);
        org.junit.Assert.assertNotNull(strBuilder68);
    }

    @Test
    public void test04975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04975");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.keys();
        char[] charArray7 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer9 = new org.apache.commons.lang3.text.StrTokenizer(charArray7, ' ');
        int int10 = strTokenizer9.size();
        boolean boolean11 = strTokenizer9.hasNext();
        java.util.List<java.lang.String> strList12 = strTokenizer9.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder13.replaceFirst("", "");
        char[] charArray17 = strBuilder13.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = new org.apache.commons.lang3.text.StrTokenizer(charArray17, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer20 = new org.apache.commons.lang3.text.StrTokenizer(charArray17);
        boolean boolean21 = strList12.equals((java.lang.Object) charArray17);
        char[] charArray26 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer28 = new org.apache.commons.lang3.text.StrTokenizer(charArray26, ' ');
        int int29 = strTokenizer28.size();
        boolean boolean30 = strTokenizer28.hasNext();
        java.util.List<java.lang.String> strList31 = strTokenizer28.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = new org.apache.commons.lang3.text.StrBuilder();
        int int33 = strBuilder32.capacity();
        java.lang.StringBuffer stringBuffer34 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = strBuilder32.appendln(stringBuffer34, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder32.insert(1, (double) 32);
        java.lang.String str42 = strBuilder32.rightString((int) ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = strBuilder32.insert(1, '#');
        boolean boolean46 = strList31.equals((java.lang.Object) strBuilder32);
        boolean boolean47 = strList12.containsAll((java.util.Collection<java.lang.String>) strList31);
        java.lang.String str49 = strList12.remove((int) (short) 0);
        boolean boolean50 = properties1.containsValue((java.lang.Object) str49);
        org.apache.commons.lang3.text.StrSubstitutor strSubstitutor51 = new org.apache.commons.lang3.text.StrSubstitutor();
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = new org.apache.commons.lang3.text.StrBuilder();
        int int53 = strBuilder52.capacity();
        java.lang.StringBuffer stringBuffer54 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder57 = strBuilder52.appendln(stringBuffer54, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder59 = strBuilder52.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = strBuilder59.appendln(true);
        boolean boolean64 = strSubstitutor51.replaceIn(strBuilder61, (int) '$', 0);
        int int67 = strBuilder61.indexOf(" #\n", (int) (short) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder70 = strBuilder61.insert(5, (float) (byte) 0);
        java.lang.Object obj71 = properties1.remove((java.lang.Object) strBuilder61);
        boolean boolean72 = strBuilder61.isEmpty();
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 32 + "'", int33 == 32);
        org.junit.Assert.assertNotNull(strBuilder37);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\n32.0" + "'", str42, "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "4#4" + "'", str49, "4#4");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 32 + "'", int53 == 32);
        org.junit.Assert.assertNotNull(strBuilder57);
        org.junit.Assert.assertNotNull(strBuilder59);
        org.junit.Assert.assertNotNull(strBuilder61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(strBuilder70);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test04976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04976");
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder(3);
        char[] charArray2 = strBuilder1.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.appendSeparator("32.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder1.append(10);
        char[] charArray8 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder6.insert(0, charArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder9.delete(106, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: end < start");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
    }

    @Test
    public void test04977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04977");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder2.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.appendSeparator("hi!", "4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        int int8 = strBuilder7.capacity();
        java.lang.StringBuffer stringBuffer9 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder7.appendln(stringBuffer9, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher13 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int14 = strBuilder12.lastIndexOf(strMatcher13);
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder3.replaceFirst(strMatcher13, "hi!");
        char[] charArray19 = strBuilder16.toCharArray(0, (int) (short) 10);
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder16.deleteAll("\n32.0java.io.IOException: hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder16.appendSeparator('4', ' ');
        char[] charArray25 = strBuilder16.toCharArray();
        java.io.Reader reader26 = strBuilder16.asReader();
        long long28 = reader26.skip((long) (byte) 0);
        java.nio.CharBuffer charBuffer29 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int30 = reader26.read(charBuffer29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strMatcher13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, 4]");
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "4#44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "4#44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[4, #, 4, 4]");
        org.junit.Assert.assertNotNull(reader26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test04978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04978");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder4.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder6.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder0.appendFixedWidthPadRight((java.lang.Object) strBuilder9, (int) (byte) -1, '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder12.append("\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder12.replaceFirst("StrTokenizer[not tokenized yet]", "{}");
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = strBuilder17.insert((int) (short) 1, (float) (-1));
        java.lang.StringBuffer stringBuffer21 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder17.append(stringBuffer21, (-1), 10);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer26 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance("StrTokenizer[]");
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder27.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder30.appendln('#');
        java.lang.StringBuffer stringBuffer33 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder30.append(stringBuffer33, (int) (byte) -1, (int) (byte) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder30.deleteFirst("hi!");
        char[] charArray39 = strBuilder30.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer40 = strTokenizer26.reset(charArray39);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer41 = strTokenizer40.reset();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer42 = strTokenizer41.reset();
        java.lang.String[] strArray43 = strTokenizer42.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = strBuilder24.appendWithSeparators((java.lang.Object[]) strArray43, "#");
        boolean boolean46 = strBuilder45.isEmpty();
        char[] charArray47 = strBuilder45.toCharArray();
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder20);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strTokenizer26);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "#\n");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "#\n");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[#, \n]");
        org.junit.Assert.assertNotNull(strTokenizer40);
        org.junit.Assert.assertNotNull(strTokenizer41);
        org.junit.Assert.assertNotNull(strTokenizer42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strBuilder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "\n-1.0#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "\n-1.0#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[\n, -, 1, ., 0, #]");
    }

    @Test
    public void test04979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04979");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        boolean boolean8 = strTokenizer6.hasNext();
        java.util.List<java.lang.String> strList9 = strTokenizer6.getTokenList();
        java.lang.String[] strArray13 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        boolean boolean16 = strList9.addAll((java.util.Collection<java.lang.String>) strList14);
        java.util.Spliterator<java.lang.String> strSpliterator17 = strList14.spliterator();
        int int18 = strList14.size();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer21 = new org.apache.commons.lang3.text.StrTokenizer(" 4#4", "");
        int int22 = strList14.lastIndexOf((java.lang.Object) strTokenizer21);
        java.util.List<java.lang.String> strList23 = strTokenizer21.getTokenList();
        char[] charArray28 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer30 = new org.apache.commons.lang3.text.StrTokenizer(charArray28, ' ');
        int int31 = strTokenizer30.size();
        boolean boolean32 = strTokenizer30.hasNext();
        java.util.List<java.lang.String> strList33 = strTokenizer30.getTokenList();
        java.lang.String[] strArray37 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        boolean boolean40 = strList33.addAll((java.util.Collection<java.lang.String>) strList38);
        char[] charArray45 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer47 = new org.apache.commons.lang3.text.StrTokenizer(charArray45, ' ');
        int int48 = strTokenizer47.size();
        boolean boolean49 = strTokenizer47.hasNext();
        java.util.List<java.lang.String> strList50 = strTokenizer47.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder51 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder51.replaceFirst("", "");
        char[] charArray55 = strBuilder51.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer57 = new org.apache.commons.lang3.text.StrTokenizer(charArray55, 'a');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer58 = new org.apache.commons.lang3.text.StrTokenizer(charArray55);
        boolean boolean59 = strList50.equals((java.lang.Object) charArray55);
        char[] charArray64 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer66 = new org.apache.commons.lang3.text.StrTokenizer(charArray64, ' ');
        int int67 = strTokenizer66.size();
        boolean boolean68 = strTokenizer66.hasNext();
        java.util.List<java.lang.String> strList69 = strTokenizer66.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder70 = new org.apache.commons.lang3.text.StrBuilder();
        int int71 = strBuilder70.capacity();
        java.lang.StringBuffer stringBuffer72 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder75 = strBuilder70.appendln(stringBuffer72, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder78 = strBuilder70.insert(1, (double) 32);
        java.lang.String str80 = strBuilder70.rightString((int) ' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder83 = strBuilder70.insert(1, '#');
        boolean boolean84 = strList69.equals((java.lang.Object) strBuilder70);
        boolean boolean85 = strList50.containsAll((java.util.Collection<java.lang.String>) strList69);
        boolean boolean86 = strList33.addAll((java.util.Collection<java.lang.String>) strList69);
        boolean boolean87 = strList23.removeAll((java.util.Collection<java.lang.String>) strList33);
        boolean boolean89 = strList23.add("StrTokenizer[]");
        boolean boolean90 = strList23.isEmpty();
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strSpliterator17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 32 + "'", int71 == 32);
        org.junit.Assert.assertNotNull(strBuilder75);
        org.junit.Assert.assertNotNull(strBuilder78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\n32.0" + "'", str80, "\n32.0");
        org.junit.Assert.assertNotNull(strBuilder83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test04980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04980");
        org.apache.commons.lang3.text.StrSubstitutor strSubstitutor0 = new org.apache.commons.lang3.text.StrSubstitutor();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        int int2 = strBuilder1.capacity();
        java.lang.StringBuffer stringBuffer3 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder1.appendln(stringBuffer3, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder1.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder8.appendln(true);
        boolean boolean13 = strSubstitutor0.replaceIn(strBuilder10, (int) '$', 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = strBuilder14.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder16.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder17.ensureCapacity((int) (short) 10);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.replaceFirst("", "");
        java.lang.String str24 = strBuilder20.getNewLineText();
        java.util.stream.IntStream intStream25 = strBuilder20.chars();
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder17.append((java.lang.CharSequence) strBuilder20);
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder17.setLength((int) (short) 100);
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder17.appendFixedWidthPadLeft((int) (byte) 1, 32, '$');
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder10.appendln(strBuilder17);
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder17.insert((int) (short) 0, 10);
        org.apache.commons.lang3.text.StrBuilder strBuilder39 = strBuilder17.appendSeparator(' ', '\n');
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder17.appendSeparator("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder17.appendSeparator('1', '#');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strBuilder16);
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(intStream25);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertNotNull(strBuilder39);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertNotNull(strBuilder44);
    }

    @Test
    public void test04981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04981");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder2.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder5.replaceFirst('a', '4');
        java.io.Writer writer9 = strBuilder8.asWriter();
        properties1.store(writer9, "");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder12.replaceFirst("", "");
        java.io.Reader reader16 = strBuilder12.asReader();
        properties1.load(reader16);
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder18.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder21.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder25.replaceFirst("", "");
        char[] charArray29 = strBuilder25.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder24.appendln(charArray29);
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder24.appendln((double) '$');
        org.apache.commons.lang3.text.StrBuilder strBuilder34 = strBuilder32.deleteAll('a');
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder35.replaceFirst("", "");
        char[] charArray39 = strBuilder35.toCharArray();
        org.apache.commons.lang3.text.StrMatcher strMatcher40 = org.apache.commons.lang3.text.StrSubstitutor.DEFAULT_PREFIX;
        org.apache.commons.lang3.text.StrMatcher strMatcher42 = org.apache.commons.lang3.text.StrMatcher.stringMatcher("");
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = strBuilder43.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = strBuilder46.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder50.replaceFirst("", "");
        char[] charArray54 = strBuilder50.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = strBuilder49.appendln(charArray54);
        int int59 = strMatcher42.isMatch(charArray54, (-1), (int) ' ', (int) (byte) -1);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer60 = new org.apache.commons.lang3.text.StrTokenizer(charArray39, strMatcher40, strMatcher42);
        java.lang.Object obj61 = properties1.put((java.lang.Object) strBuilder34, (java.lang.Object) strTokenizer60);
        java.util.Set<java.lang.Object> objSet62 = properties1.keySet();
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder66 = strBuilder63.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer68 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray69 = strTokenizer68.getTokenArray();
        java.lang.String[] strArray70 = strTokenizer68.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder72 = strBuilder66.appendWithSeparators((java.lang.Object[]) strArray70, "4#4");
        org.apache.commons.lang3.text.StrMatcher strMatcher73 = org.apache.commons.lang3.text.StrMatcher.tabMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder74 = strBuilder72.deleteAll(strMatcher73);
        java.lang.Object obj75 = properties1.get((java.lang.Object) strMatcher73);
        java.util.Set<java.lang.String> strSet76 = properties1.stringPropertyNames();
        java.util.Properties properties77 = new java.util.Properties(properties1);
        java.io.OutputStream outputStream78 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties77.save(outputStream78, "50\nttt");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(writer9);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(reader16);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[]");
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strBuilder34);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[]");
        org.junit.Assert.assertNotNull(strMatcher40);
        org.junit.Assert.assertNotNull(strMatcher42);
        org.junit.Assert.assertNotNull(strBuilder46);
        org.junit.Assert.assertNotNull(strBuilder49);
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[]");
        org.junit.Assert.assertNotNull(strBuilder55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNotNull(objSet62);
        org.junit.Assert.assertNotNull(strBuilder66);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strBuilder72);
        org.junit.Assert.assertNotNull(strMatcher73);
        org.junit.Assert.assertNotNull(strBuilder74);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNotNull(strSet76);
    }

    @Test
    public void test04982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04982");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
        java.io.Reader reader4 = strBuilder0.asReader();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder0.appendSeparator('4');
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder0.replaceFirst(' ', '4');
        java.lang.StringBuffer stringBuffer10 = strBuilder0.toStringBuffer();
        boolean boolean12 = strBuilder0.endsWith("false");
        char[] charArray13 = strBuilder0.toCharArray();
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(reader4);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(stringBuffer10);
        org.junit.Assert.assertEquals(stringBuffer10.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
    }

    @Test
    public void test04983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04983");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.setLength(32);
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder10.trim();
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder10.append((int) (short) 1);
        int int16 = strBuilder10.lastIndexOf("{}", 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder17 = strBuilder10.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder10.setNewLineText("\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder22 = strBuilder19.insert((int) (short) 1, (long) '$');
        java.lang.String str25 = strBuilder19.midString((int) (byte) 100, 39);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder19.setLength((int) '$');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(strBuilder17);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strBuilder27);
    }

    @Test
    public void test04984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04984");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder2.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder5.replaceFirst('a', '4');
        java.io.Writer writer9 = strBuilder8.asWriter();
        properties1.store(writer9, "");
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder12.replaceFirst("", "");
        java.io.Reader reader16 = strBuilder12.asReader();
        properties1.load(reader16);
        java.util.Collection<java.lang.Object> objCollection18 = properties1.values();
        org.apache.commons.lang3.text.StrMatcher strMatcher20 = org.apache.commons.lang3.text.StrMatcher.stringMatcher("");
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder21.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder24.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder28.replaceFirst("", "");
        char[] charArray32 = strBuilder28.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder27.appendln(charArray32);
        int int37 = strMatcher20.isMatch(charArray32, (-1), (int) ' ', (int) (byte) -1);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer38 = new org.apache.commons.lang3.text.StrTokenizer(charArray32);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer39 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray32);
        char[] charArray44 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer46 = new org.apache.commons.lang3.text.StrTokenizer(charArray44, ' ');
        int int47 = strTokenizer46.size();
        boolean boolean48 = strTokenizer46.hasNext();
        java.util.List<java.lang.String> strList49 = strTokenizer46.getTokenList();
        java.lang.String[] strArray53 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        boolean boolean56 = strList49.addAll((java.util.Collection<java.lang.String>) strList54);
        java.util.Spliterator<java.lang.String> strSpliterator57 = strList54.spliterator();
        int int58 = strList54.size();
        java.lang.String str60 = strList54.remove((int) (byte) 0);
        java.util.stream.Stream<java.lang.String> strStream61 = strList54.parallelStream();
        boolean boolean62 = properties1.remove((java.lang.Object) strTokenizer39, (java.lang.Object) strList54);
        java.io.InputStream inputStream63 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.loadFromXML(inputStream63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertNotNull(writer9);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(reader16);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertNotNull(strMatcher20);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[]");
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(strTokenizer39);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strSpliterator57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\n32.0" + "'", str60, "\n32.0");
        org.junit.Assert.assertNotNull(strStream61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test04985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04985");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.lang.Object obj4 = properties0.clone();
        java.lang.Object obj5 = properties0.clone();
        java.util.Enumeration<?> wildcardEnumeration6 = properties0.propertyNames();
        java.util.Properties properties7 = new java.util.Properties();
        int int8 = properties7.size();
        java.lang.Object obj9 = properties7.clone();
        java.util.Collection<java.lang.Object> objCollection10 = properties7.values();
        java.lang.Object obj11 = properties0.get((java.lang.Object) properties7);
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties0.elements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "{}");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertNotNull(wildcardEnumeration6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{}");
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(objEnumeration12);
    }

    @Test
    public void test04986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04986");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Enumeration<java.lang.Object> objEnumeration1 = properties0.keys();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = new org.apache.commons.lang3.text.StrBuilder();
        int int3 = strBuilder2.capacity();
        java.lang.StringBuffer stringBuffer4 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = strBuilder2.appendln(stringBuffer4, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder2.insert(1, (double) 32);
        java.util.Properties properties11 = new java.util.Properties();
        int int12 = properties11.size();
        boolean boolean14 = properties11.containsKey((java.lang.Object) (-1.0f));
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder15.replaceFirst("", "");
        char[] charArray19 = strBuilder15.toCharArray();
        boolean boolean20 = properties11.containsValue((java.lang.Object) charArray19);
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder2.append(charArray19, (int) (byte) 0, 0);
        boolean boolean24 = properties0.equals((java.lang.Object) 0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet25 = properties0.entrySet();
        java.util.Set<java.lang.Object> objSet26 = properties0.keySet();
        int int27 = properties0.size();
        org.junit.Assert.assertNotNull(objEnumeration1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertNotNull(strBuilder7);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objEntrySet25);
        org.junit.Assert.assertNotNull(objSet26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test04987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04987");
        org.apache.commons.lang3.text.StrMatcher strMatcher1 = null;
        org.apache.commons.lang3.text.StrTokenizer strTokenizer2 = new org.apache.commons.lang3.text.StrTokenizer("true\n", strMatcher1);
        java.lang.String str3 = strTokenizer2.nextToken();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true\n" + "'", str3, "true\n");
    }

    @Test
    public void test04988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04988");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        boolean boolean3 = properties0.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties4 = new java.util.Properties();
        int int5 = properties4.size();
        boolean boolean7 = properties4.containsKey((java.lang.Object) (-1.0f));
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        char[] charArray13 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer15 = new org.apache.commons.lang3.text.StrTokenizer(charArray13, ' ');
        int int16 = strTokenizer15.size();
        boolean boolean17 = strTokenizer15.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher18 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer19 = strTokenizer15.setIgnoredMatcher(strMatcher18);
        org.apache.commons.lang3.text.StrBuilder strBuilder20 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder23 = strBuilder20.replaceFirst("", "");
        java.lang.Object obj24 = properties0.putIfAbsent((java.lang.Object) strMatcher18, (java.lang.Object) strBuilder20);
        java.lang.Object obj27 = properties0.setProperty(" 4#4", "\n32.0");
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder31 = strBuilder28.replaceFirst("", "");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer33 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher34 = strTokenizer33.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrBuilder strBuilder36 = strBuilder28.appendWithSeparators((java.util.Iterator<java.lang.String>) strTokenizer33, "h");
        int int37 = strTokenizer33.nextIndex();
        boolean boolean38 = properties0.containsValue((java.lang.Object) strTokenizer33);
        char[] charArray43 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer45 = new org.apache.commons.lang3.text.StrTokenizer(charArray43, ' ');
        int int46 = strTokenizer45.size();
        boolean boolean47 = strTokenizer45.hasNext();
        java.util.List<java.lang.String> strList48 = strTokenizer45.getTokenList();
        java.lang.String[] strArray52 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        boolean boolean55 = strList48.addAll((java.util.Collection<java.lang.String>) strList53);
        java.lang.String str57 = strList53.remove(0);
        char[] charArray62 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer64 = new org.apache.commons.lang3.text.StrTokenizer(charArray62, ' ');
        int int65 = strTokenizer64.size();
        boolean boolean66 = strTokenizer64.hasNext();
        java.util.List<java.lang.String> strList67 = strTokenizer64.getTokenList();
        java.lang.String[] strArray71 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        boolean boolean74 = strList67.addAll((java.util.Collection<java.lang.String>) strList72);
        boolean boolean75 = strList53.addAll((java.util.Collection<java.lang.String>) strList72);
        java.lang.Object obj76 = properties0.remove((java.lang.Object) strList72);
        char[] charArray79 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer80 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray79);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer81 = new org.apache.commons.lang3.text.StrTokenizer(charArray79);
        boolean boolean82 = properties0.equals((java.lang.Object) charArray79);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer83 = new org.apache.commons.lang3.text.StrTokenizer(charArray79);
        boolean boolean84 = strTokenizer83.hasPrevious();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strMatcher18);
        org.junit.Assert.assertNotNull(strTokenizer19);
        org.junit.Assert.assertNotNull(strBuilder23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(strBuilder31);
        org.junit.Assert.assertNotNull(strMatcher34);
        org.junit.Assert.assertNotNull(strBuilder36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\n32.0" + "'", str57, "\n32.0");
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test04989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04989");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray5 = strTokenizer4.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder0.appendAll((java.lang.Object[]) strArray5);
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder0.replaceFirst('a', 'a');
        java.util.stream.IntStream intStream10 = strBuilder0.codePoints();
        java.lang.String str11 = strBuilder0.getNullText();
        java.util.stream.IntStream intStream12 = strBuilder0.codePoints();
        java.util.stream.IntStream intStream13 = strBuilder0.codePoints();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = strBuilder0.substring(45);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: end < start");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(intStream12);
        org.junit.Assert.assertNotNull(intStream13);
    }

    @Test
    public void test04990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04990");
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder("#\n");
    }

    @Test
    public void test04991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04991");
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder(" 4#4");
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst("-1", "100.0\n");
        java.util.Properties properties5 = new java.util.Properties();
        int int6 = properties5.size();
        boolean boolean8 = properties5.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties9 = new java.util.Properties();
        int int10 = properties9.size();
        boolean boolean12 = properties9.containsKey((java.lang.Object) (-1.0f));
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties9.keys();
        java.util.Set<java.lang.Object> objSet15 = properties9.keySet();
        java.lang.Object obj16 = properties9.clone();
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder4.appendFixedWidthPadRight(obj16, 11, '7');
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNotNull(objSet15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{}");
        org.junit.Assert.assertNotNull(strBuilder19);
    }

    @Test
    public void test04992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04992");
        char[] charArray3 = new char[] { 'a', '$', '$' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer5 = new org.apache.commons.lang3.text.StrTokenizer(charArray3, '$');
        java.util.List<java.lang.String> strList6 = strTokenizer5.getTokenList();
        char[] charArray11 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer13 = new org.apache.commons.lang3.text.StrTokenizer(charArray11, ' ');
        int int14 = strTokenizer13.size();
        boolean boolean15 = strTokenizer13.hasNext();
        java.util.List<java.lang.String> strList16 = strTokenizer13.getTokenList();
        java.lang.String[] strArray20 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        boolean boolean23 = strList16.addAll((java.util.Collection<java.lang.String>) strList21);
        char[] charArray28 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer30 = new org.apache.commons.lang3.text.StrTokenizer(charArray28, ' ');
        int int31 = strTokenizer30.size();
        boolean boolean32 = strTokenizer30.hasNext();
        java.util.List<java.lang.String> strList33 = strTokenizer30.getTokenList();
        java.lang.String[] strArray37 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        boolean boolean40 = strList33.addAll((java.util.Collection<java.lang.String>) strList38);
        java.util.Spliterator<java.lang.String> strSpliterator41 = strList38.spliterator();
        int int42 = strList38.size();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer45 = new org.apache.commons.lang3.text.StrTokenizer(" 4#4", "");
        int int46 = strList38.lastIndexOf((java.lang.Object) strTokenizer45);
        java.util.List<java.lang.String> strList47 = strTokenizer45.getTokenList();
        org.apache.commons.lang3.text.StrSubstitutor strSubstitutor48 = new org.apache.commons.lang3.text.StrSubstitutor();
        org.apache.commons.lang3.text.StrBuilder strBuilder49 = new org.apache.commons.lang3.text.StrBuilder();
        int int50 = strBuilder49.capacity();
        java.lang.StringBuffer stringBuffer51 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = strBuilder49.appendln(stringBuffer51, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = strBuilder49.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder58 = strBuilder56.appendln(true);
        boolean boolean61 = strSubstitutor48.replaceIn(strBuilder58, (int) '$', 0);
        boolean boolean62 = strList47.equals((java.lang.Object) '$');
        boolean boolean63 = strList16.retainAll((java.util.Collection<java.lang.String>) strList47);
        char[] charArray68 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer70 = new org.apache.commons.lang3.text.StrTokenizer(charArray68, ' ');
        int int71 = strTokenizer70.size();
        boolean boolean72 = strTokenizer70.hasNext();
        java.util.List<java.lang.String> strList73 = strTokenizer70.getTokenList();
        java.lang.String[] strArray77 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        boolean boolean80 = strList73.addAll((java.util.Collection<java.lang.String>) strList78);
        java.lang.String str82 = strList78.remove(0);
        java.util.stream.Stream<java.lang.String> strStream83 = strList78.stream();
        boolean boolean84 = strList47.addAll((java.util.Collection<java.lang.String>) strList78);
        boolean boolean85 = strList6.removeAll((java.util.Collection<java.lang.String>) strList47);
        java.util.Iterator<java.lang.String> strItor86 = strList6.iterator();
        int int87 = strList6.size();
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "a$$");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "a$$");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[a, $, $]");
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strSpliterator41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 32 + "'", int50 == 32);
        org.junit.Assert.assertNotNull(strBuilder54);
        org.junit.Assert.assertNotNull(strBuilder56);
        org.junit.Assert.assertNotNull(strBuilder58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\n32.0" + "'", str82, "\n32.0");
        org.junit.Assert.assertNotNull(strStream83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strItor86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
    }

    @Test
    public void test04993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04993");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer1 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance("java.io.IOException: hi!falsejava.io.IOException: hi!false");
        org.junit.Assert.assertNotNull(strTokenizer1);
    }

    @Test
    public void test04994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04994");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        java.lang.Object obj2 = properties0.clone();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder7.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder9.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder10.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder3.appendFixedWidthPadRight((java.lang.Object) strBuilder12, (int) (byte) -1, '#');
        java.lang.Object obj16 = properties0.get((java.lang.Object) strBuilder3);
        java.util.Properties properties17 = new java.util.Properties();
        int int18 = properties17.size();
        boolean boolean20 = properties17.containsKey((java.lang.Object) (-1.0f));
        java.util.Properties properties21 = new java.util.Properties();
        int int22 = properties21.size();
        boolean boolean24 = properties21.containsKey((java.lang.Object) (-1.0f));
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        char[] charArray30 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer32 = new org.apache.commons.lang3.text.StrTokenizer(charArray30, ' ');
        int int33 = strTokenizer32.size();
        boolean boolean34 = strTokenizer32.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher35 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer36 = strTokenizer32.setIgnoredMatcher(strMatcher35);
        org.apache.commons.lang3.text.StrBuilder strBuilder37 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder37.replaceFirst("", "");
        java.lang.Object obj41 = properties17.putIfAbsent((java.lang.Object) strMatcher35, (java.lang.Object) strBuilder37);
        boolean boolean42 = strBuilder3.equals(obj41);
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = strBuilder3.appendln((long) (short) 1);
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder45.replaceFirst("", "");
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = strBuilder45.deleteAll('4');
        boolean boolean51 = strBuilder3.equalsIgnoreCase(strBuilder50);
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder50.appendln("97\n                                                                                                 -1a");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strMatcher35);
        org.junit.Assert.assertNotNull(strTokenizer36);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strBuilder44);
        org.junit.Assert.assertNotNull(strBuilder48);
        org.junit.Assert.assertNotNull(strBuilder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strBuilder53);
    }

    @Test
    public void test04995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04995");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        int int1 = strBuilder0.capacity();
        java.lang.StringBuffer stringBuffer2 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder0.appendln(stringBuffer2, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder8 = strBuilder0.insert(1, (double) 32);
        boolean boolean9 = strBuilder0.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder0.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder11 = strBuilder0.clear();
        org.apache.commons.lang3.text.StrBuilder strBuilder13 = strBuilder0.append('a');
        org.apache.commons.lang3.text.StrBuilder strBuilder15 = strBuilder13.appendSeparator('#');
        org.apache.commons.lang3.text.StrBuilder strBuilder16 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder18 = strBuilder16.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder19 = strBuilder18.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = strBuilder19.setNullText("");
        char[] charArray22 = strBuilder21.toCharArray();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer24 = new org.apache.commons.lang3.text.StrTokenizer(charArray22, "true\n###################################3\n");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer27 = new org.apache.commons.lang3.text.StrTokenizer(charArray22, ' ', ' ');
        org.apache.commons.lang3.text.StrTokenizer strTokenizer28 = org.apache.commons.lang3.text.StrTokenizer.getTSVInstance(charArray22);
        char[] charArray29 = strBuilder15.getChars(charArray22);
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = new org.apache.commons.lang3.text.StrBuilder();
        int int31 = strBuilder30.capacity();
        java.lang.StringBuffer stringBuffer32 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder30.appendln(stringBuffer32, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder38 = strBuilder30.insert(1, (double) 32);
        boolean boolean39 = strBuilder30.isEmpty();
        org.apache.commons.lang3.text.StrBuilder strBuilder40 = strBuilder30.reverse();
        org.apache.commons.lang3.text.StrBuilder strBuilder41 = strBuilder30.clear();
        int int42 = strBuilder41.capacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder45 = strBuilder41.replaceAll("\n\n", "#\nfalse\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder45.appendSeparator('a');
        org.apache.commons.lang3.text.StrBuilder strBuilder48 = strBuilder15.append((java.lang.CharSequence) strBuilder47);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder51 = strBuilder48.insert((int) 's', (float) 24);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 115");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(strBuilder11);
        org.junit.Assert.assertNotNull(strBuilder13);
        org.junit.Assert.assertNotNull(strBuilder15);
        org.junit.Assert.assertNotNull(strBuilder18);
        org.junit.Assert.assertNotNull(strBuilder19);
        org.junit.Assert.assertNotNull(strBuilder21);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
        org.junit.Assert.assertNotNull(strTokenizer28);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[a, #]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 32 + "'", int31 == 32);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertNotNull(strBuilder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strBuilder40);
        org.junit.Assert.assertNotNull(strBuilder41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 32 + "'", int42 == 32);
        org.junit.Assert.assertNotNull(strBuilder45);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(strBuilder48);
    }

    @Test
    public void test04996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04996");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder2.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder5 = strBuilder3.append((double) 10L);
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder5.appendNull();
        java.lang.Object obj7 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder5.appendFixedWidthPadRight(obj7, (int) (short) 10, '$');
        char[] charArray15 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer17 = new org.apache.commons.lang3.text.StrTokenizer(charArray15, ' ');
        int int18 = strTokenizer17.size();
        boolean boolean19 = strTokenizer17.hasNext();
        java.util.List<java.lang.String> strList20 = strTokenizer17.getTokenList();
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder21.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder26 = strBuilder24.appendln(true);
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder26.appendPadding((int) '#', '#');
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder32 = strBuilder30.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder32.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder35 = strBuilder33.appendln((double) '#');
        boolean boolean36 = strBuilder26.equals(strBuilder35);
        java.util.stream.IntStream intStream37 = strBuilder26.codePoints();
        boolean boolean38 = strList20.contains((java.lang.Object) strBuilder26);
        java.util.stream.Stream<java.lang.String> strStream39 = strList20.stream();
        java.util.Spliterator<java.lang.String> strSpliterator40 = strList20.spliterator();
        org.apache.commons.lang3.text.StrBuilder strBuilder43 = strBuilder5.appendFixedWidthPadLeft((java.lang.Object) strSpliterator40, 22, '\n');
        org.apache.commons.lang3.text.StrBuilder strBuilder44 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder46 = strBuilder44.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer48 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray49 = strTokenizer48.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder50 = strBuilder44.appendAll((java.lang.Object[]) strArray49);
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = strBuilder44.replaceFirst('a', 'a');
        org.apache.commons.lang3.text.StrBuilder strBuilder54 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = strBuilder54.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer58 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray59 = strTokenizer58.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder60 = strBuilder54.appendAll((java.lang.Object[]) strArray59);
        org.apache.commons.lang3.text.StrBuilder strBuilder61 = strBuilder44.appendln(strBuilder60);
        org.apache.commons.lang3.text.StrBuilder strBuilder63 = strBuilder44.setNullText("########a4\n");
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder67 = strBuilder44.appendln(strBuilder64, 106, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.text.StrBuilder strBuilder70 = strBuilder43.append(strBuilder67, 5, 204);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: length must be valid");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder5);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder26);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertNotNull(strBuilder32);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strBuilder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intStream37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strStream39);
        org.junit.Assert.assertNotNull(strSpliterator40);
        org.junit.Assert.assertNotNull(strBuilder43);
        org.junit.Assert.assertNotNull(strBuilder46);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strBuilder50);
        org.junit.Assert.assertNotNull(strBuilder53);
        org.junit.Assert.assertNotNull(strBuilder56);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strBuilder60);
        org.junit.Assert.assertNotNull(strBuilder61);
        org.junit.Assert.assertNotNull(strBuilder63);
        org.junit.Assert.assertNotNull(strBuilder67);
    }

    @Test
    public void test04997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04997");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer4 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray5 = strTokenizer4.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder0.appendAll((java.lang.Object[]) strArray5);
        org.apache.commons.lang3.text.StrBuilder strBuilder9 = strBuilder0.replaceFirst('a', 'a');
        char[] charArray14 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer16 = new org.apache.commons.lang3.text.StrTokenizer(charArray14, ' ');
        int int17 = strTokenizer16.size();
        boolean boolean18 = strTokenizer16.hasNext();
        java.util.List<java.lang.String> strList19 = strTokenizer16.getTokenList();
        java.lang.String[] strArray23 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        boolean boolean26 = strList19.addAll((java.util.Collection<java.lang.String>) strList24);
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder0.appendAll((java.lang.Iterable<java.lang.String>) strList24);
        org.apache.commons.lang3.text.StrBuilder strBuilder29 = strBuilder27.append((double) (-1.0f));
        java.lang.String str31 = strBuilder29.substring((int) (short) 0);
        boolean boolean33 = strBuilder29.endsWith("63\n");
        org.junit.Assert.assertNotNull(strBuilder2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder9);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strBuilder29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\n32.0-1.0" + "'", str31, "\n32.0-1.0");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test04998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04998");
        char[] charArray4 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer(charArray4, ' ');
        int int7 = strTokenizer6.size();
        boolean boolean8 = strTokenizer6.hasNext();
        java.util.List<java.lang.String> strList9 = strTokenizer6.getTokenList();
        java.lang.String[] strArray13 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        boolean boolean16 = strList9.addAll((java.util.Collection<java.lang.String>) strList14);
        java.lang.String str18 = strList14.remove(0);
        char[] charArray23 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer25 = new org.apache.commons.lang3.text.StrTokenizer(charArray23, ' ');
        int int26 = strTokenizer25.size();
        boolean boolean27 = strTokenizer25.hasNext();
        java.util.List<java.lang.String> strList28 = strTokenizer25.getTokenList();
        java.lang.String[] strArray32 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        boolean boolean35 = strList28.addAll((java.util.Collection<java.lang.String>) strList33);
        boolean boolean36 = strList14.addAll((java.util.Collection<java.lang.String>) strList33);
        java.util.stream.Stream<java.lang.String> strStream37 = strList33.parallelStream();
        java.lang.Object[] objArray38 = strList33.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator39 = strList33.spliterator();
        java.lang.String str41 = strList33.get((int) (short) 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder42 = new org.apache.commons.lang3.text.StrBuilder();
        int int43 = strBuilder42.capacity();
        java.lang.StringBuffer stringBuffer44 = null;
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder42.appendln(stringBuffer44, (int) '#', (int) (byte) 0);
        org.apache.commons.lang3.text.StrMatcher strMatcher48 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int49 = strBuilder47.lastIndexOf(strMatcher48);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.Object obj54 = null;
        boolean boolean55 = strList52.contains(obj54);
        org.apache.commons.lang3.text.StrBuilder strBuilder56 = strBuilder47.appendAll((java.lang.Iterable<java.lang.String>) strList52);
        boolean boolean57 = strList33.retainAll((java.util.Collection<java.lang.String>) strList52);
        java.util.Properties properties58 = new java.util.Properties();
        int int59 = properties58.size();
        java.lang.Object obj60 = properties58.clone();
        boolean boolean61 = strList52.remove(obj60);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = strList52.get(112);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 112, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\n32.0" + "'", str18, "\n32.0");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strStream37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[\n32.0, , ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[\n32.0, , ]");
        org.junit.Assert.assertNotNull(strSpliterator39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\n32.0" + "'", str41, "\n32.0");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 32 + "'", int43 == 32);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(strMatcher48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strBuilder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "{}");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test04999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04999");
        java.util.Properties properties0 = new java.util.Properties();
        org.apache.commons.lang3.text.StrBuilder strBuilder1 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder4 = strBuilder1.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer6 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray7 = strTokenizer6.getTokenArray();
        java.lang.String[] strArray8 = strTokenizer6.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder4.appendWithSeparators((java.lang.Object[]) strArray8, "4#4");
        char[] charArray13 = new char[] { 'a', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer14 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance(charArray13);
        java.lang.Object obj15 = properties0.getOrDefault((java.lang.Object) strBuilder4, (java.lang.Object) strTokenizer14);
        java.util.Collection<java.lang.Object> objCollection16 = properties0.values();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer18 = new org.apache.commons.lang3.text.StrTokenizer("");
        org.apache.commons.lang3.text.StrMatcher strMatcher19 = strTokenizer18.getTrimmerMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer20 = strTokenizer18.reset();
        org.apache.commons.lang3.text.StrBuilder strBuilder21 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder24 = strBuilder21.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder25 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder27 = strBuilder25.deleteFirst("");
        org.apache.commons.lang3.text.StrBuilder strBuilder28 = strBuilder27.minimizeCapacity();
        org.apache.commons.lang3.text.StrBuilder strBuilder30 = strBuilder28.setNullText("");
        org.apache.commons.lang3.text.StrBuilder strBuilder33 = strBuilder21.appendFixedWidthPadRight((java.lang.Object) strBuilder30, (int) (byte) -1, '#');
        org.apache.commons.lang3.text.StrMatcher strMatcher34 = org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher();
        int int35 = strBuilder21.lastIndexOf(strMatcher34);
        char[] charArray40 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer42 = new org.apache.commons.lang3.text.StrTokenizer(charArray40, ' ');
        int int43 = strTokenizer42.size();
        boolean boolean44 = strTokenizer42.hasNext();
        org.apache.commons.lang3.text.StrMatcher strMatcher45 = org.apache.commons.lang3.text.StrMatcher.quoteMatcher();
        org.apache.commons.lang3.text.StrTokenizer strTokenizer46 = strTokenizer42.setIgnoredMatcher(strMatcher45);
        org.apache.commons.lang3.text.StrBuilder strBuilder47 = strBuilder21.deleteFirst(strMatcher45);
        java.lang.Object obj48 = properties0.getOrDefault((java.lang.Object) strTokenizer20, (java.lang.Object) strBuilder47);
        java.util.Collection<java.lang.Object> objCollection49 = properties0.values();
        java.lang.String str50 = properties0.toString();
        java.util.Collection<java.lang.Object> objCollection51 = properties0.values();
        java.io.PrintStream printStream52 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printStream52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strBuilder4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, 4]");
        org.junit.Assert.assertNotNull(strTokenizer14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "StrTokenizer[not tokenized yet]");
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNotNull(strMatcher19);
        org.junit.Assert.assertNotNull(strTokenizer20);
        org.junit.Assert.assertNotNull(strBuilder24);
        org.junit.Assert.assertNotNull(strBuilder27);
        org.junit.Assert.assertNotNull(strBuilder28);
        org.junit.Assert.assertNotNull(strBuilder30);
        org.junit.Assert.assertNotNull(strBuilder33);
        org.junit.Assert.assertNotNull(strMatcher34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strMatcher45);
        org.junit.Assert.assertNotNull(strTokenizer46);
        org.junit.Assert.assertNotNull(strBuilder47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "");
        org.junit.Assert.assertNotNull(objCollection49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "{}" + "'", str50, "{}");
        org.junit.Assert.assertNotNull(objCollection51);
    }

    @Test
    public void test05000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test05000");
        org.apache.commons.lang3.text.StrBuilder strBuilder0 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "hi!");
        org.apache.commons.lang3.text.StrBuilder strBuilder6 = strBuilder3.replaceFirst('a', '4');
        org.apache.commons.lang3.text.StrBuilder strBuilder7 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder10 = strBuilder7.replaceFirst("", "");
        char[] charArray11 = strBuilder7.toCharArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder12 = strBuilder6.appendln(charArray11);
        org.apache.commons.lang3.text.StrBuilder strBuilder14 = strBuilder6.appendln((double) '$');
        char[] charArray19 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer21 = new org.apache.commons.lang3.text.StrTokenizer(charArray19, ' ');
        int int22 = strTokenizer21.size();
        boolean boolean23 = strTokenizer21.hasNext();
        java.util.List<java.lang.String> strList24 = strTokenizer21.getTokenList();
        java.lang.String[] strArray28 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        boolean boolean31 = strList24.addAll((java.util.Collection<java.lang.String>) strList29);
        java.lang.String str33 = strList29.remove(0);
        char[] charArray38 = new char[] { ' ', '4', '#', '4' };
        org.apache.commons.lang3.text.StrTokenizer strTokenizer40 = new org.apache.commons.lang3.text.StrTokenizer(charArray38, ' ');
        int int41 = strTokenizer40.size();
        boolean boolean42 = strTokenizer40.hasNext();
        java.util.List<java.lang.String> strList43 = strTokenizer40.getTokenList();
        java.lang.String[] strArray47 = new java.lang.String[] { "\n32.0", "", "" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        boolean boolean50 = strList43.addAll((java.util.Collection<java.lang.String>) strList48);
        boolean boolean51 = strList29.addAll((java.util.Collection<java.lang.String>) strList48);
        org.apache.commons.lang3.text.StrBuilder strBuilder52 = strBuilder6.appendAll((java.lang.Iterable<java.lang.String>) strList29);
        org.apache.commons.lang3.text.StrBuilder strBuilder53 = new org.apache.commons.lang3.text.StrBuilder();
        org.apache.commons.lang3.text.StrBuilder strBuilder55 = strBuilder53.deleteFirst("");
        int int57 = strBuilder53.indexOf("");
        int int60 = strBuilder53.lastIndexOf('#', (int) (byte) 0);
        boolean boolean62 = strBuilder53.startsWith("4#4");
        org.apache.commons.lang3.text.StrTokenizer strTokenizer63 = org.apache.commons.lang3.text.StrTokenizer.getCSVInstance();
        org.apache.commons.lang3.text.StrBuilder strBuilder64 = strBuilder53.appendAll((java.util.Iterator<java.lang.String>) strTokenizer63);
        org.apache.commons.lang3.text.StrTokenizer strTokenizer66 = new org.apache.commons.lang3.text.StrTokenizer("");
        java.lang.String[] strArray67 = strTokenizer66.getTokenArray();
        java.lang.String[] strArray68 = strTokenizer66.getTokenArray();
        org.apache.commons.lang3.text.StrBuilder strBuilder70 = strBuilder53.appendWithSeparators((java.lang.Object[]) strArray68, "");
        org.apache.commons.lang3.text.StrBuilder strBuilder71 = strBuilder52.appendln((java.lang.Object) "");
        org.apache.commons.lang3.text.StrBuilder strBuilder74 = strBuilder52.replaceFirst("100.0", "java.io.IOException: \n");
        boolean boolean76 = strBuilder52.contains(' ');
        org.apache.commons.lang3.text.StrBuilder strBuilder78 = strBuilder52.setLength(10);
        org.apache.commons.lang3.text.StrBuilder strBuilder81 = strBuilder52.appendSeparator('a', 0);
        org.apache.commons.lang3.text.StrBuilder strBuilder82 = strBuilder52.clear();
        org.junit.Assert.assertNotNull(strBuilder3);
        org.junit.Assert.assertNotNull(strBuilder6);
        org.junit.Assert.assertNotNull(strBuilder10);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
        org.junit.Assert.assertNotNull(strBuilder12);
        org.junit.Assert.assertNotNull(strBuilder14);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\n32.0" + "'", str33, "\n32.0");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " 4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " 4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ , 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strBuilder52);
        org.junit.Assert.assertNotNull(strBuilder55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strTokenizer63);
        org.junit.Assert.assertNotNull(strBuilder64);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strBuilder70);
        org.junit.Assert.assertNotNull(strBuilder71);
        org.junit.Assert.assertNotNull(strBuilder74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strBuilder78);
        org.junit.Assert.assertNotNull(strBuilder81);
        org.junit.Assert.assertNotNull(strBuilder82);
    }
}


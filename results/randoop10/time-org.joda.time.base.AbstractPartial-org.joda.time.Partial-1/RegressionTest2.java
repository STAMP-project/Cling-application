import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test01001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01001");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronolgy();
        boolean boolean8 = dateTimeFormatter6.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = dateTimeFormatter6.parseMillis("Canada");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test01002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01002");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        boolean boolean30 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology31 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.secondOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.weekOfWeekyear();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        int int40 = partial37.compareTo((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = partial37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.Chronology chronology43 = chronology41.withZone(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 0, chronology41);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.minus(readableDuration45);
        org.joda.time.Chronology chronology47 = dateTime44.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str49 = dateTimeFieldType48.getName();
        int int50 = dateTime44.get(dateTimeFieldType48);
        org.joda.time.DateTime dateTime52 = dateTime44.minusMinutes(4);
        int int53 = dateTime44.getWeekyear();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.DateTime dateTime55 = dateTime44.plus(readableDuration54);
        org.joda.time.DateTime.Property property56 = dateTime44.millisOfSecond();
        java.util.Locale locale58 = new java.util.Locale("minuteOfHour");
        java.lang.String str59 = property56.getAsText(locale58);
        java.util.Locale locale61 = java.util.Locale.forLanguageTag("0120-01-01T00:00:00.000Z");
        java.lang.String str62 = property56.getAsText(locale61);
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        int int68 = partial65.compareTo((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology69 = partial65.getChronology();
        org.joda.time.DurationField durationField70 = durationFieldType63.getField(chronology69);
        org.joda.time.DateTimeField dateTimeField71 = chronology69.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField72 = chronology69.weekyearOfCentury();
        java.util.Locale locale74 = java.util.Locale.CANADA_FRENCH;
        boolean boolean75 = locale74.hasExtensions();
        java.util.Set<java.lang.Character> charSet76 = locale74.getExtensionKeys();
        java.lang.String str77 = dateTimeField72.getAsShortText(2000, locale74);
        java.lang.String str78 = locale61.getDisplayCountry(locale74);
        java.lang.String str79 = dateTimeField33.getAsText(255611376000052L, locale61);
        java.util.Locale locale81 = new java.util.Locale("CN");
        java.lang.String str82 = locale61.getDisplayScript(locale81);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str84 = locale61.getUnicodeLocaleType("\ufffd\ufffd\ufffd\ufffd");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "halfdayOfDay" + "'", str49, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1970 + "'", int53 == 1970);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertEquals(locale58.toString(), "minuteofhour");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0" + "'", str59, "0");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0" + "'", str62, "0");
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(charSet76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "2000" + "'", str77, "2000");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "1" + "'", str79, "1");
        org.junit.Assert.assertEquals(locale81.toString(), "cn");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
    }

    @Test
    public void test01003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01003");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes(1439);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime11.toMutableDateTime();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 0, chronology19);
        org.joda.time.DateTime dateTime24 = dateTime22.withHourOfDay(0);
        org.joda.time.DateTime dateTime26 = dateTime24.withYear((int) 'a');
        boolean boolean27 = dateTime24.isEqualNow();
        org.joda.time.DateMidnight dateMidnight28 = dateTime24.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone29 = dateMidnight28.getZone();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime11.toMutableDateTime(dateTimeZone29);
        org.joda.time.DateTime.Property property31 = dateTime11.centuryOfEra();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test01004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01004");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronolgy();
        boolean boolean8 = dateTimeFormatter6.isParser();
        boolean boolean9 = dateTimeFormatter6.isPrinter();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        int int16 = partial13.compareTo((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        boolean boolean19 = partial15.isAfter((org.joda.time.ReadablePartial) partial18);
        java.lang.String str20 = partial18.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int int25 = partial22.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = partial22.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean28 = partial22.isSupported(dateTimeFieldType27);
        org.joda.time.Chronology chronology29 = partial22.getChronology();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial22.plus(readablePeriod30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = partial34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 0, chronology38);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime43 = dateTime41.minus(readableDuration42);
        org.joda.time.DateTime.Property property44 = dateTime43.millisOfSecond();
        org.joda.time.DateTime dateTime46 = dateTime43.minus((long) (short) 10);
        org.joda.time.DateTime dateTime48 = dateTime43.withWeekOfWeekyear(19);
        org.joda.time.DateTime dateTime49 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean51 = partial10.isMatch((org.joda.time.ReadablePartial) partial18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) partial10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test01005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01005");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.centuryOfEra();
        long long18 = dateTimeField15.getDifferenceAsLong(0L, 283034304000000L);
        int int20 = dateTimeField15.get((long) 9);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-89L) + "'", long18 == (-89L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 19 + "'", int20 == 19);
    }

    @Test
    public void test01006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01006");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        int int13 = partial10.compareTo((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = partial10.getChronology();
        org.joda.time.DurationField durationField15 = durationFieldType8.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekyearOfCentury();
        org.joda.time.DurationField durationField18 = dateTimeField17.getLeapDurationField();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        int int29 = dateTimeField27.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        boolean boolean37 = partial33.isAfter((org.joda.time.ReadablePartial) partial36);
        java.lang.String str38 = partial36.toString();
        java.util.Locale locale40 = null;
        java.lang.String str41 = dateTimeField27.getAsShortText((org.joda.time.ReadablePartial) partial36, 53, locale40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        int int46 = partial43.compareTo((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology47 = partial43.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.era();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        int int53 = partial50.compareTo((org.joda.time.ReadablePartial) partial52);
        int[] intArray55 = new int[] { 2 };
        int int56 = dateTimeField48.getMinimumValue((org.joda.time.ReadablePartial) partial50, intArray55);
        int int57 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) partial36, intArray55);
        int[] intArray58 = partial36.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = partial36.getFormatter();
        int int60 = partial1.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial63 = partial1.withPeriodAdded(readablePeriod61, 22200);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str65 = dateTimeFieldType64.getName();
        java.lang.String str66 = dateTimeFieldType64.getName();
        org.joda.time.DurationFieldType durationFieldType67 = dateTimeFieldType64.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial69 = partial63.withFieldAdded(durationFieldType67, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'halfdays' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNull(durationField18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 53 + "'", int29 == 53);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "53" + "'", str41, "53");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[2]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 99 + "'", int57 == 99);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "halfdayOfDay" + "'", str65, "halfdayOfDay");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "halfdayOfDay" + "'", str66, "halfdayOfDay");
        org.junit.Assert.assertNotNull(durationFieldType67);
    }

    @Test
    public void test01007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01007");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        java.lang.String str15 = property14.getName();
        int int16 = property14.getMaximumValueOverall();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "dayOfYear" + "'", str15, "dayOfYear");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 366 + "'", int16 == 366);
    }

    @Test
    public void test01008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01008");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.centuryOfEra();
        long long18 = dateTimeField15.getDifferenceAsLong(0L, 283034304000000L);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = partial31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 0, chronology35);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.minus(readableDuration39);
        org.joda.time.Chronology chronology41 = dateTime38.getChronology();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        long long45 = chronology41.set((org.joda.time.ReadablePartial) partial43, (long) (byte) -1);
        int[] intArray47 = chronology25.get((org.joda.time.ReadablePartial) partial43, (long) ' ');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray48 = partial43.getFieldTypes();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        int[] intArray51 = partial50.getValues();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(dateTimeFieldTypeArray48, intArray51, chronology52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        int int58 = partial55.compareTo((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        boolean boolean61 = partial57.isAfter((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Partial partial62 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial57);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean64 = partial57.isSupported(dateTimeFieldType63);
        int int65 = partial57.size();
        int[] intArray66 = partial57.getValues();
        int int67 = dateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial53, intArray66);
        org.joda.time.DurationField durationField68 = dateTimeField15.getLeapDurationField();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-89L) + "'", long18 == (-89L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray48);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNull(durationField68);
    }

    @Test
    public void test01009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01009");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.months();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.monthOfYear();
        int int18 = dateTimeField15.getDifference((long) (byte) 1, (long) 120);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        int int28 = partial25.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = partial25.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean31 = partial25.isSupported(dateTimeFieldType30);
        boolean boolean32 = partial22.isEqual((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = partial34.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean40 = partial34.isSupported(dateTimeFieldType39);
        org.joda.time.Chronology chronology41 = partial34.getChronology();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial34.plus(readablePeriod42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean45 = partial34.isSupported(dateTimeFieldType44);
        int int46 = partial25.indexOf(dateTimeFieldType44);
        int int47 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) partial25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField49 = partial25.getField(35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 12 + "'", int47 == 12);
    }

    @Test
    public void test01010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01010");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 0, chronology19);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readableDuration23);
        org.joda.time.Chronology chronology25 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfMonth();
        org.joda.time.Chronology chronology27 = chronology25.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfYear();
        boolean boolean29 = dateTime9.equals((java.lang.Object) dateTimeField28);
        long long31 = dateTimeField28.remainder((long) (byte) 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 100L + "'", long31 == 100L);
    }

    @Test
    public void test01011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01011");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("jeudi", strMap1);
        java.util.Collection<java.lang.String> strCollection3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.parse("fr-CA");
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "hi!", "fran\347ais (Canada)" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.lang.String str18 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strList16);
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.lang.String str22 = locale19.toLanguageTag();
        java.lang.String str23 = locale19.getISO3Country();
        java.util.Locale locale24 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale25 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str26 = locale24.getDisplayName(locale25);
        java.lang.String str27 = locale24.toLanguageTag();
        java.lang.String str28 = locale24.toLanguageTag();
        java.util.Locale locale29 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str30 = locale29.getCountry();
        java.util.Locale locale31 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale32 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str33 = locale31.getDisplayName(locale32);
        java.lang.String str34 = locale31.toLanguageTag();
        java.util.Locale locale35 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale36 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str37 = locale35.getDisplayName(locale36);
        java.lang.String str38 = locale35.toLanguageTag();
        java.lang.String str39 = locale35.toLanguageTag();
        boolean boolean40 = locale35.hasExtensions();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        int int46 = partial43.compareTo((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology47 = partial43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 0, chronology47);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.minus(readableDuration51);
        org.joda.time.DateTime.Property property53 = dateTime52.millisOfSecond();
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        int int55 = property53.getMaximumTextLength(locale54);
        java.util.Locale locale56 = java.util.Locale.CANADA_FRENCH;
        boolean boolean57 = locale56.hasExtensions();
        java.util.Locale[] localeArray58 = new java.util.Locale[] { locale19, locale24, locale29, locale31, locale35, locale54, locale56 };
        java.util.ArrayList<java.util.Locale> localeList59 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList59, localeArray58);
        java.util.Locale.FilteringMode filteringMode61 = null;
        java.util.List<java.util.Locale> localeList62 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList59, filteringMode61);
        java.util.List<java.util.Locale> localeList63 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList62);
        java.util.Locale.LanguageRange[] languageRangeArray64 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList65 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList65, languageRangeArray64);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "hi!", "fran\347ais (Canada)" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        java.lang.String str73 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList65, (java.util.Collection<java.lang.String>) strList71);
        java.lang.String[] strArray75 = new java.lang.String[] { "fr-CA" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        java.util.Locale.FilteringMode filteringMode78 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList79 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList65, (java.util.Collection<java.lang.String>) strList76, filteringMode78);
        java.util.List<java.util.Locale> localeList80 = java.util.Locale.filter(languageRangeList5, (java.util.Collection<java.util.Locale>) localeList63, filteringMode78);
        java.util.Locale locale81 = java.util.Locale.ITALIAN;
        java.util.Locale locale82 = java.util.Locale.KOREAN;
        java.lang.String str83 = locale81.getDisplayScript(locale82);
        java.util.Set<java.lang.String> strSet84 = locale81.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode85 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList86 = java.util.Locale.filterTags(languageRangeList5, (java.util.Collection<java.lang.String>) strSet84, filteringMode85);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList87 = java.util.Locale.filterTags(languageRangeList2, strCollection3, filteringMode85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fran\347ais (Canada)" + "'", str21, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fr-CA" + "'", str22, "fr-CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "CAN" + "'", str23, "CAN");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fran\347ais (Canada)" + "'", str26, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "fr-CA" + "'", str27, "fr-CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fr-CA" + "'", str28, "fr-CA");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "CA" + "'", str30, "CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "fran\347ais (Canada)" + "'", str33, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "fr-CA" + "'", str34, "fr-CA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "fran\347ais (Canada)" + "'", str37, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "fr-CA" + "'", str38, "fr-CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "fr-CA" + "'", str39, "fr-CA");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(localeList62);
        org.junit.Assert.assertNotNull(localeList63);
        org.junit.Assert.assertNotNull(languageRangeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + filteringMode78 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode78.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertNotNull(localeList80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "it");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertTrue("'" + filteringMode85 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode85.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList86);
    }

    @Test
    public void test01012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01012");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekOfWeekyear();
        int int25 = dateTime15.get(dateTimeField24);
        java.lang.String str27 = dateTimeField24.getAsText((long) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = dateTimeField24.getType();
        int int31 = dateTimeField24.getDifference(191980800001L, 0L);
        int int34 = dateTimeField24.getDifference((long) 2, 100L);
        long long36 = dateTimeField24.roundHalfEven((long) 13);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 317 + "'", int31 == 317);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-259200000L) + "'", long36 == (-259200000L));
    }

    @Test
    public void test01013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01013");
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(0, 4, 12, 3, 0);
        org.joda.time.DateMidnight dateMidnight6 = dateTime5.toDateMidnight();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DurationField durationField14 = durationFieldType7.getField(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime20 = dateMidnight6.toMutableDateTime(chronology13);
        java.util.GregorianCalendar gregorianCalendar21 = dateMidnight6.toGregorianCalendar();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(gregorianCalendar21);
    }

    @Test
    public void test01014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01014");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DurationField durationField7 = durationFieldType0.getField(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        java.lang.String str10 = dateTimeField9.toString();
        java.lang.String str11 = dateTimeField9.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = partial14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 0, chronology18);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.minus(readableDuration22);
        org.joda.time.Chronology chronology24 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.dayOfMonth();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        int int30 = partial27.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        boolean boolean33 = partial29.isAfter((org.joda.time.ReadablePartial) partial32);
        java.lang.String str34 = partial32.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        org.joda.time.Partial partial36 = partial32.without(dateTimeFieldType35);
        java.util.Locale locale38 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale39 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str40 = locale38.getDisplayName(locale39);
        java.lang.String str41 = locale38.getDisplayVariant();
        java.util.Locale locale42 = locale38.stripExtensions();
        java.lang.String str43 = dateTimeField25.getAsText((org.joda.time.ReadablePartial) partial32, 53, locale42);
        int int44 = partial32.size();
        int[] intArray45 = partial32.getValues();
        java.util.Locale locale46 = java.util.Locale.ITALIAN;
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.lang.String str48 = locale46.getDisplayScript(locale47);
        java.util.Locale locale49 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str50 = locale49.getDisplayCountry();
        java.lang.String str51 = locale47.getDisplayName(locale49);
        java.util.Locale locale52 = java.util.Locale.getDefault();
        java.lang.String str53 = locale49.getDisplayScript(locale52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        int int59 = partial56.compareTo((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology60 = partial56.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.Chronology chronology62 = chronology60.withZone(dateTimeZone61);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) 0, chronology60);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.DateTime dateTime65 = dateTime63.minus(readableDuration64);
        org.joda.time.DateTime dateTime67 = dateTime63.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime69 = dateTime63.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime71 = dateTime69.minusWeeks(19);
        org.joda.time.DateTime dateTime73 = dateTime69.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType74 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = new org.joda.time.Partial(chronology75);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Partial partial78 = new org.joda.time.Partial(chronology77);
        int int79 = partial76.compareTo((org.joda.time.ReadablePartial) partial78);
        org.joda.time.Chronology chronology80 = partial76.getChronology();
        org.joda.time.DurationField durationField81 = durationFieldType74.getField(chronology80);
        org.joda.time.DateTimeField dateTimeField82 = chronology80.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField83 = chronology80.dayOfMonth();
        org.joda.time.DateTime dateTime84 = dateTime73.toDateTime(chronology80);
        org.joda.time.Chronology chronology85 = chronology80.withUTC();
        org.joda.time.DateTimeField dateTimeField86 = chronology80.hourOfDay();
        long long88 = dateTimeField86.roundHalfFloor(86399999L);
        java.util.Locale locale89 = java.util.Locale.CANADA_FRENCH;
        boolean boolean90 = locale89.hasExtensions();
        int int91 = dateTimeField86.getMaximumTextLength(locale89);
        java.util.Locale locale92 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str93 = locale89.getDisplayName(locale92);
        java.lang.String str94 = locale89.getDisplayScript();
        java.lang.String str95 = locale52.getDisplayScript(locale89);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) partial32, locale89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfMonth' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str10, "DateTimeField[dayOfMonth]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str11, "DateTimeField[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "fran\347ais (Canada)" + "'", str40, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "53" + "'", str43, "53");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\uce90\ub098\ub2e4" + "'", str50, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "cor\351en" + "'", str51, "cor\351en");
        org.junit.Assert.assertNotNull(locale52);
// flaky:         org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 86400000L + "'", long88 == 86400000L);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "fran\347ais (Canada)" + "'", str93, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
    }

    @Test
    public void test01015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01015");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder1.setLanguage("Canada");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder1.setVariant("\ud504\ub791\uc2a4\uc5b4\uce90\ub098\ub2e4)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: ????????? (??????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test01016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01016");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.era();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        int int14 = partial11.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = partial11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 0, chronology15);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.minus(readableDuration19);
        org.joda.time.Chronology chronology21 = dateTime18.getChronology();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        long long25 = chronology21.set((org.joda.time.ReadablePartial) partial23, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial23.getFieldTypes();
        java.util.Locale locale27 = java.util.Locale.PRC;
        boolean boolean28 = partial23.equals((java.lang.Object) locale27);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = partial31.getChronology();
        org.joda.time.DurationField durationField36 = durationFieldType29.getField(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.weekyearOfCentury();
        org.joda.time.DurationField durationField39 = dateTimeField38.getLeapDurationField();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        int int44 = partial41.compareTo((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = partial41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Chronology chronology47 = chronology45.withZone(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = chronology47.weekOfWeekyear();
        int int50 = dateTimeField48.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        int int55 = partial52.compareTo((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        boolean boolean58 = partial54.isAfter((org.joda.time.ReadablePartial) partial57);
        java.lang.String str59 = partial57.toString();
        java.util.Locale locale61 = null;
        java.lang.String str62 = dateTimeField48.getAsShortText((org.joda.time.ReadablePartial) partial57, 53, locale61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        int int67 = partial64.compareTo((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = partial64.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.era();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = new org.joda.time.Partial(chronology72);
        int int74 = partial71.compareTo((org.joda.time.ReadablePartial) partial73);
        int[] intArray76 = new int[] { 2 };
        int int77 = dateTimeField69.getMinimumValue((org.joda.time.ReadablePartial) partial71, intArray76);
        int int78 = dateTimeField38.getMaximumValue((org.joda.time.ReadablePartial) partial57, intArray76);
        int[] intArray79 = partial57.getValues();
        int int80 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) partial23, intArray79);
        // The following exception was thrown during execution in test generation
        try {
            int int82 = partial23.getValue(86399);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 86399");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNull(durationField39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 53 + "'", int50 == 53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[]" + "'", str59, "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "53" + "'", str62, "53");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[2]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 99 + "'", int78 == 99);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test01017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01017");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekOfWeekyear();
        int int10 = dateTimeField8.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        int int16 = partial13.compareTo((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = partial13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 0, chronology17);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.minus(readableDuration21);
        org.joda.time.Chronology chronology23 = dateTime20.getChronology();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        long long27 = chronology23.set((org.joda.time.ReadablePartial) partial25, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial25.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = partial25.getFormatter();
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("0120-01-01T00:00:00.000Z");
        java.lang.String str33 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) partial25, 10, locale32);
        long long35 = dateTimeField8.remainder((long) 0);
        boolean boolean36 = dateTimeField8.isLenient();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "10" + "'", str33, "10");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 259200000L + "'", long35 == 259200000L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test01018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01018");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder1.addUnicodeLocaleAttribute("coreano");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder1.setLanguage("2022-02-11T09:36:23.395Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2022-02-11T09:36:23.395Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test01019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01019");
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = null;
        org.joda.time.format.DateTimeParser dateTimeParser7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withOffsetParsed();
        boolean boolean10 = dateTimeFormatter9.isPrinter();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        int int16 = partial13.compareTo((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = partial13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 0, chronology17);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.minus(readableDuration31);
        org.joda.time.Chronology chronology33 = dateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.dayOfMonth();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        int int39 = partial36.compareTo((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        boolean boolean42 = partial38.isAfter((org.joda.time.ReadablePartial) partial41);
        java.lang.String str43 = partial41.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        org.joda.time.Partial partial45 = partial41.without(dateTimeFieldType44);
        java.util.Locale locale47 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale48 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str49 = locale47.getDisplayName(locale48);
        java.lang.String str50 = locale47.getDisplayVariant();
        java.util.Locale locale51 = locale47.stripExtensions();
        java.lang.String str52 = dateTimeField34.getAsText((org.joda.time.ReadablePartial) partial41, 53, locale51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        int int58 = partial55.compareTo((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology59 = partial55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.Chronology chronology61 = chronology59.withZone(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) 0, chronology59);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.DateTime dateTime64 = dateTime62.minus(readableDuration63);
        org.joda.time.DateTime dateTime66 = dateTime62.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime68 = dateTime62.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime70 = dateTime68.minusWeeks(19);
        boolean boolean71 = partial41.isMatch((org.joda.time.ReadableInstant) dateTime68);
        long long73 = chronology17.set((org.joda.time.ReadablePartial) partial41, (-62135596800000L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter9.withChronology(chronology17);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        long long78 = chronology17.add(readablePeriod75, (long) 9, 53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(9, 97, (int) 'a', (-694733), (-27409536), (int) (byte) 100, chronology17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -694733 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "fran\347ais (Canada)" + "'", str49, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "53" + "'", str52, "53");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-62135596800000L) + "'", long73 == (-62135596800000L));
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 9L + "'", long78 == 9L);
    }

    @Test
    public void test01020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01020");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.Object obj1 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "zh_CN");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "zh_CN");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "zh_CN");
    }

    @Test
    public void test01021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01021");
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(0, 4, 12, 3, 0);
        org.joda.time.DateMidnight dateMidnight6 = dateTime5.toDateMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = dateTime5.withMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight6);
    }

    @Test
    public void test01022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01022");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DurationField durationField7 = durationFieldType0.getField(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.dayOfWeek();
        java.util.Locale locale14 = new java.util.Locale("fr-CA", "1", "86399999");
        int int15 = dateTimeField10.getMaximumShortTextLength(locale14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean23 = partial17.isSupported(dateTimeFieldType22);
        org.joda.time.Chronology chronology24 = partial17.getChronology();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial17.plus(readablePeriod25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean28 = partial17.isSupported(dateTimeFieldType27);
        org.joda.time.Partial partial29 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        int int35 = partial32.compareTo((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology36 = partial32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.Chronology chronology38 = chronology36.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 0, chronology36);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.minus(readableDuration40);
        org.joda.time.Chronology chronology42 = dateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.centuryOfEra();
        long long48 = dateTimeField45.getDifferenceAsLong(0L, 283034304000000L);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        int int54 = partial51.compareTo((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = partial51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.Chronology chronology57 = chronology55.withZone(dateTimeZone56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 0, chronology55);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        int int64 = partial61.compareTo((org.joda.time.ReadablePartial) partial63);
        org.joda.time.Chronology chronology65 = partial61.getChronology();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.Chronology chronology67 = chronology65.withZone(dateTimeZone66);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) 0, chronology65);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.DateTime dateTime70 = dateTime68.minus(readableDuration69);
        org.joda.time.Chronology chronology71 = dateTime68.getChronology();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = new org.joda.time.Partial(chronology72);
        long long75 = chronology71.set((org.joda.time.ReadablePartial) partial73, (long) (byte) -1);
        int[] intArray77 = chronology55.get((org.joda.time.ReadablePartial) partial73, (long) ' ');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray78 = partial73.getFieldTypes();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Partial partial80 = new org.joda.time.Partial(chronology79);
        int[] intArray81 = partial80.getValues();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Partial partial83 = new org.joda.time.Partial(dateTimeFieldTypeArray78, intArray81, chronology82);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Partial partial85 = new org.joda.time.Partial(chronology84);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Partial partial87 = new org.joda.time.Partial(chronology86);
        int int88 = partial85.compareTo((org.joda.time.ReadablePartial) partial87);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.Partial partial90 = new org.joda.time.Partial(chronology89);
        boolean boolean91 = partial87.isAfter((org.joda.time.ReadablePartial) partial90);
        org.joda.time.Partial partial92 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial87);
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean94 = partial87.isSupported(dateTimeFieldType93);
        int int95 = partial87.size();
        int[] intArray96 = partial87.getValues();
        int int97 = dateTimeField45.getMinimumValue((org.joda.time.ReadablePartial) partial83, intArray96);
        int int98 = partial29.compareTo((org.joda.time.ReadablePartial) partial83);
        int int99 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) partial29);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals(locale14.toString(), "fr-ca_1_86399999");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-89L) + "'", long48 == (-89L));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1L) + "'", long75 == (-1L));
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test01023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01023");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(4, (-973006525), (int) (short) 100, 99, 31, 22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 99 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01024");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime17 = dateTime11.withDurationAdded(readableDuration15, 1);
        org.joda.time.DateTime.Property property18 = dateTime11.centuryOfEra();
        int int19 = property18.getMaximumValueOverall();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2922789 + "'", int19 == 2922789);
    }

    @Test
    public void test01025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01025");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime9.minus(readablePeriod14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = dateTime9.withSecondOfMinute(1405);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1405 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test01026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01026");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        org.joda.time.DateTime dateTime14 = dateTime11.minus((long) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime11.withWeekOfWeekyear(19);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        int int22 = partial19.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = partial19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 0, chronology23);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.minus(readableDuration27);
        org.joda.time.DateTime dateTime30 = dateTime26.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime32 = dateTime26.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime34 = dateTime32.minusWeeks(19);
        boolean boolean35 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        int int41 = partial38.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 0, chronology42);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.minus(readableDuration46);
        org.joda.time.DateTime dateTime49 = dateTime45.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime51 = dateTime45.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime53 = dateTime51.minusYears((int) 'a');
        org.joda.time.DateTime dateTime55 = dateTime53.plusHours(53);
        boolean boolean56 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime59 = dateTime11.withDurationAdded((long) '4', 292278993);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime61 = dateTime59.withEra(120);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime59);
    }

    @Test
    public void test01027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01027");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.minus(readableDuration11);
        org.joda.time.Chronology chronology13 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.dayOfWeek();
        org.joda.time.DurationField durationField16 = chronology13.seconds();
        org.joda.time.DurationField durationField17 = durationFieldType0.getField(chronology13);
        org.joda.time.DurationField durationField18 = chronology13.weekyears();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.Chronology chronology31 = dateTime28.getChronology();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        long long35 = chronology31.set((org.joda.time.ReadablePartial) partial33, (long) (byte) -1);
        long long37 = chronology13.set((org.joda.time.ReadablePartial) partial33, (long) 86399999);
        org.joda.time.DateTimeField[] dateTimeFieldArray38 = partial33.getFields();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial33.plus(readablePeriod39);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = partial33.getValue((-27409536));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -27409536");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 86399999L + "'", long37 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldArray38);
        org.junit.Assert.assertNotNull(partial40);
    }

    @Test
    public void test01028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01028");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = chronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfDay();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime.Property property16 = dateTime15.hourOfDay();
        org.joda.time.DateTime dateTime17 = property16.getDateTime();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.DateTime dateTime32 = dateTime28.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property33 = dateTime32.dayOfYear();
        org.joda.time.DateTime dateTime34 = property33.withMinimumValue();
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.DateTime.Property property36 = dateTime34.minuteOfDay();
        org.joda.time.format.DateTimePrinter dateTimePrinter37 = null;
        org.joda.time.format.DateTimeParser dateTimeParser38 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter37, dateTimeParser38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter39.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser41 = dateTimeFormatter39.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter42 = dateTimeFormatter39.getPrinter();
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        boolean boolean44 = locale43.hasExtensions();
        java.lang.String str45 = locale43.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter39.withLocale(locale43);
        java.lang.String str47 = property36.getAsShortText(locale43);
        java.lang.String str48 = locale43.getLanguage();
        java.util.Locale locale49 = java.util.Locale.KOREA;
        java.lang.String str50 = locale43.getDisplayLanguage(locale49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime51 = property16.setCopy("", locale43);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0120-01-01T00:00:00.000Z" + "'", str35, "0120-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNull(dateTimeParser41);
        org.junit.Assert.assertNull(dateTimePrinter42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0" + "'", str47, "0");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ko" + "'", str48, "ko");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str50, "\ud55c\uad6d\uc5b4");
    }

    @Test
    public void test01029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01029");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime15.minus(readablePeriod20);
        int int22 = dateTime15.getHourOfDay();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test01030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01030");
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = null;
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser9 = dateTimeFormatter7.getParser();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readableDuration20);
        org.joda.time.DateTime dateTime23 = dateTime19.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime25 = dateTime19.withSecondOfMinute(0);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime19.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter7.withZone(dateTimeZone26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(86340, 292278993, 31, (int) '#', 1439, dateTimeZone26);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimeParser9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
    }

    @Test
    public void test01031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01031");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("halfdayOfDay", (double) 12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=12.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01032");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        org.joda.time.DateTime dateTime14 = dateTime11.minusMillis((int) (byte) -1);
        int int15 = dateTime14.getMinuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DateTime.Property property17 = dateTime14.property(dateTimeFieldType16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = dateTime14.toString("French (Canada)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: F");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test01033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01033");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = partial8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology12);
        org.joda.time.DateTime dateTime17 = dateTime15.withHourOfDay(0);
        org.joda.time.DateTime dateTime19 = dateTime17.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime19.toMutableDateTime();
        org.joda.time.DateTime.Property property21 = dateTime19.weekyear();
        org.joda.time.DateTime dateTime22 = property21.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime22.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter2.withZone(dateTimeZone23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        int int30 = partial27.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = partial27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 0, chronology31);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.minus(readableDuration35);
        org.joda.time.Chronology chronology37 = dateTime34.getChronology();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        long long41 = chronology37.set((org.joda.time.ReadablePartial) partial39, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = partial39.getFieldTypes();
        java.util.Locale locale43 = java.util.Locale.PRC;
        boolean boolean44 = partial39.equals((java.lang.Object) locale43);
        int int45 = partial39.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int47 = partial39.indexOf(dateTimeFieldType46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial39);
        java.lang.String str50 = partial48.toString("days");
        org.joda.time.Partial partial51 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = dateTimeFormatter24.print((org.joda.time.ReadablePartial) partial51);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ufffd\ufffd\ufffd\ufffd" + "'", str50, "\ufffd\ufffd\ufffd\ufffd");
    }

    @Test
    public void test01034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01034");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readableDuration25);
        long long27 = dateTime26.getMillis();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int int32 = partial29.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        boolean boolean35 = partial31.isAfter((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        int int41 = partial38.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 0, chronology42);
        org.joda.time.DateTime dateTime47 = dateTime45.withHourOfDay(0);
        org.joda.time.DateTime dateTime49 = dateTime47.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime49.toMutableDateTime();
        org.joda.time.DateTime dateTime51 = partial31.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        int int57 = partial54.compareTo((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Chronology chronology58 = partial54.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 0, chronology58);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.DateTime dateTime63 = dateTime61.minus(readableDuration62);
        org.joda.time.DateTime dateTime65 = dateTime61.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime67 = dateTime61.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime69 = dateTime67.minusWeeks(19);
        org.joda.time.DateTime dateTime71 = dateTime67.plusMillis((int) '#');
        int int72 = dateTime71.getDayOfMonth();
        boolean boolean73 = partial31.equals((java.lang.Object) dateTime71);
        boolean boolean74 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime71);
        boolean boolean75 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime.Property property76 = dateTime71.era();
        org.joda.time.DateTime dateTime78 = dateTime71.plusMinutes(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime80 = dateTime78.withMinuteOfHour(292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test01035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01035");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology7.getZone();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readableDuration20);
        org.joda.time.Chronology chronology22 = dateTime19.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        long long26 = chronology22.set((org.joda.time.ReadablePartial) partial24, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial24.getFieldTypes();
        java.util.Locale locale28 = java.util.Locale.PRC;
        boolean boolean29 = partial24.equals((java.lang.Object) locale28);
        int int30 = partial24.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int32 = partial24.indexOf(dateTimeFieldType31);
        long long34 = chronology7.set((org.joda.time.ReadablePartial) partial24, (long) 86399999);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial24.minus(readablePeriod35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.DateTime dateTime48 = dateTime46.withHourOfDay(0);
        int int49 = dateTime48.getCenturyOfEra();
        boolean boolean51 = dateTime48.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime52 = dateTime48.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean54 = dateTime48.isSupported(dateTimeFieldType53);
        int int55 = partial36.indexOf(dateTimeFieldType53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField57 = partial36.getField(12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 12");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 86399999L + "'", long34 == 86399999L);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 19 + "'", int49 == 19);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test01036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01036");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-58380393600000L), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        int int8 = partial5.compareTo((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology9 = partial5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Chronology chronology11 = chronology9.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 0, chronology9);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.minus(readableDuration13);
        org.joda.time.Chronology chronology15 = dateTime12.getChronology();
        org.joda.time.DateTime dateTime17 = dateTime12.withWeekyear(23);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        int int31 = dateTime30.getCenturyOfEra();
        boolean boolean33 = dateTime30.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime34 = dateTime30.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime36 = dateTime34.withCenturyOfEra((int) '#');
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readableDuration47);
        org.joda.time.Chronology chronology49 = dateTime46.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.dayOfMonth();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        int int55 = partial52.compareTo((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        boolean boolean58 = partial54.isAfter((org.joda.time.ReadablePartial) partial57);
        java.lang.String str59 = partial57.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        org.joda.time.Partial partial61 = partial57.without(dateTimeFieldType60);
        java.util.Locale locale63 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale64 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str65 = locale63.getDisplayName(locale64);
        java.lang.String str66 = locale63.getDisplayVariant();
        java.util.Locale locale67 = locale63.stripExtensions();
        java.lang.String str68 = dateTimeField50.getAsText((org.joda.time.ReadablePartial) partial57, 53, locale67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(chronology71);
        int int73 = partial70.compareTo((org.joda.time.ReadablePartial) partial72);
        org.joda.time.Chronology chronology74 = partial70.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean76 = partial70.isSupported(dateTimeFieldType75);
        org.joda.time.Chronology chronology77 = partial70.getChronology();
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.Partial partial79 = partial70.plus(readablePeriod78);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean81 = partial70.isSupported(dateTimeFieldType80);
        boolean boolean82 = partial57.isSupported(dateTimeFieldType80);
        boolean boolean83 = dateTime34.isSupported(dateTimeFieldType80);
        boolean boolean84 = dateTime17.isSupported(dateTimeFieldType80);
        org.joda.time.DateTimeZone dateTimeZone85 = dateTime17.getZone();
        org.joda.time.DateTime dateTime86 = dateTime2.withZoneRetainFields(dateTimeZone85);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime88 = dateTime86.plusYears((-973006525));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -973006405 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0023-01-05T00:00:00.000Z" + "'", str18, "0023-01-05T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 19 + "'", int31 == 19);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[]" + "'", str59, "[]");
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "fran\347ais (Canada)" + "'", str65, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "53" + "'", str68, "53");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(dateTime86);
    }

    @Test
    public void test01037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01037");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        long long16 = chronology12.set((org.joda.time.ReadablePartial) partial14, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = partial14.getFieldTypes();
        java.util.Locale locale18 = java.util.Locale.PRC;
        boolean boolean19 = partial14.equals((java.lang.Object) locale18);
        int int20 = partial14.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.minus(readableDuration31);
        org.joda.time.DateTime dateTime34 = dateTime30.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime36 = dateTime30.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime38 = dateTime36.minusWeeks(19);
        org.joda.time.DateTime dateTime40 = dateTime36.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        int int46 = partial43.compareTo((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology47 = partial43.getChronology();
        org.joda.time.DurationField durationField48 = durationFieldType41.getField(chronology47);
        org.joda.time.DateTimeField dateTimeField49 = chronology47.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField50 = chronology47.dayOfMonth();
        org.joda.time.DateTime dateTime51 = dateTime40.toDateTime(chronology47);
        org.joda.time.Chronology chronology52 = chronology47.withUTC();
        org.joda.time.Partial partial53 = partial14.withChronologyRetainFields(chronology52);
        org.joda.time.Chronology chronology54 = partial53.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial53.getFormatter();
        org.joda.time.Partial partial56 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNull(dateTimeFormatter55);
    }

    @Test
    public void test01038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01038");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int int25 = partial22.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = partial22.getChronology();
        org.joda.time.DurationField durationField27 = durationFieldType20.getField(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfMonth();
        org.joda.time.DateTime dateTime30 = dateTime19.toDateTime(chronology26);
        org.joda.time.DateTime dateTime32 = dateTime19.plusMonths((int) 'u');
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = partial35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 0, chronology39);
        org.joda.time.DateTime dateTime44 = dateTime42.withHourOfDay(0);
        org.joda.time.DateTime dateTime46 = dateTime44.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime46.toMutableDateTime();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        int int53 = partial50.compareTo((org.joda.time.ReadablePartial) partial52);
        org.joda.time.Chronology chronology54 = partial50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.Chronology chronology56 = chronology54.withZone(dateTimeZone55);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 0, chronology54);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTime dateTime59 = dateTime57.minus(readableDuration58);
        org.joda.time.DateTime.Property property60 = dateTime59.millisOfSecond();
        boolean boolean61 = mutableDateTime47.isBefore((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime63 = dateTime59.withWeekyear(19);
        org.joda.time.DateTime dateTime65 = dateTime63.minusDays(0);
        int int66 = dateTime63.getEra();
        int int67 = dateTime63.getCenturyOfEra();
        org.joda.time.Instant instant68 = dateTime63.toInstant();
        boolean boolean69 = dateTime32.isBefore((org.joda.time.ReadableInstant) instant68);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test01039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01039");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        int int10 = partial7.compareTo((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime14.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime20 = dateTime14.withSecondOfMinute(0);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime14.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter2.withZone(dateTimeZone21);
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter25.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser27 = dateTimeFormatter25.getParser();
        int int28 = dateTimeFormatter25.getDefaultYear();
        org.joda.time.Chronology chronology29 = dateTimeFormatter25.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = null;
        org.joda.time.format.DateTimeParser dateTimeParser31 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter30, dateTimeParser31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = partial34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology40.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter32.withZone(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter25.withZone(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter22.withZone(dateTimeZone42);
        boolean boolean47 = dateTimeFormatter22.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime49 = dateTimeFormatter22.parseLocalTime("Italian");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(dateTimeParser27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2000 + "'", int28 == 2000);
        org.junit.Assert.assertNull(chronology29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test01040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01040");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        java.util.Locale locale5 = dateTimeFormatter4.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            long long7 = dateTimeFormatter4.parseMillis("32");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(locale5);
    }

    @Test
    public void test01041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01041");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        int int10 = partial7.compareTo((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime14.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime20 = dateTime14.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks(19);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        int int30 = partial27.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = partial27.getChronology();
        org.joda.time.DurationField durationField32 = durationFieldType25.getField(chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.dayOfMonth();
        org.joda.time.DateTime dateTime35 = dateTime24.toDateTime(chronology31);
        org.joda.time.Chronology chronology36 = chronology31.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(13, (int) 'a', 720, 366, 317, chronology31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 366 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
    }

    @Test
    public void test01042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01042");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        boolean boolean21 = partial17.isAfter((org.joda.time.ReadablePartial) partial20);
        java.lang.String str22 = partial20.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial20.without(dateTimeFieldType23);
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.lang.String str29 = locale26.getDisplayVariant();
        java.util.Locale locale30 = locale26.stripExtensions();
        java.lang.String str31 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) partial20, 53, locale30);
        int int32 = partial20.size();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = partial35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 0, chronology39);
        org.joda.time.DateTime dateTime44 = dateTime42.withHourOfDay(0);
        int int45 = dateTime44.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        int int51 = partial48.compareTo((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Chronology chronology52 = partial48.getChronology();
        org.joda.time.DurationField durationField53 = durationFieldType46.getField(chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.weekOfWeekyear();
        org.joda.time.DateTime dateTime55 = dateTime44.withChronology(chronology52);
        org.joda.time.DateTime dateTime58 = dateTime55.withDurationAdded(1L, 0);
        org.joda.time.DateTime dateTime60 = dateTime55.withMillisOfDay((int) (short) 1);
        org.joda.time.DateTime.Property property61 = dateTime60.secondOfDay();
        int int62 = dateTime60.getMillisOfSecond();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        int int68 = partial65.compareTo((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology69 = partial65.getChronology();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.Chronology chronology71 = chronology69.withZone(dateTimeZone70);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) 0, chronology69);
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.DateTime dateTime74 = dateTime72.minus(readableDuration73);
        org.joda.time.DateTime dateTime76 = dateTime72.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime78 = dateTime72.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime80 = dateTime78.minusWeeks(19);
        boolean boolean81 = dateTime60.isEqual((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTime dateTime83 = dateTime60.plusMillis(10);
        org.joda.time.DateTime dateTime84 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime86 = dateTime83.withMinuteOfHour(317);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 317 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fran\347ais (Canada)" + "'", str28, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "53" + "'", str31, "53");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 19 + "'", int45 == 19);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
    }

    @Test
    public void test01043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01043");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str14 = dateTimeFieldType13.getName();
        int int15 = dateTime9.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime17 = dateTime9.minusMinutes(4);
        int int18 = dateTime9.getWeekyear();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime9.plus(readableDuration19);
        org.joda.time.DateTime.Property property21 = dateTime9.millisOfSecond();
        org.joda.time.DateTime.Property property22 = dateTime9.minuteOfHour();
        org.joda.time.DurationField durationField23 = property22.getRangeDurationField();
        org.joda.time.DateTimeField dateTimeField24 = property22.getField();
        int int26 = dateTimeField24.getMinimumValue((long) 9);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "halfdayOfDay" + "'", str14, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test01044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01044");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        boolean boolean19 = dateTime17.isBefore((long) '4');
        int int20 = dateTime17.getMinuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime17.toMutableDateTime();
        org.joda.time.DateTime dateTime22 = dateTime17.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime22.secondOfDay();
        int int24 = property23.getMaximumValueOverall();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 86399 + "'", int24 == 86399);
    }

    @Test
    public void test01045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01045");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.Chronology chronology2 = partial0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray6 = chronology2.get(readablePeriod4, (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
    }

    @Test
    public void test01046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01046");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("fr-CA");
        java.util.Collection<java.lang.String> strCollection2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList3 = java.util.Locale.filterTags(languageRangeList1, strCollection2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList1);
    }

    @Test
    public void test01047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01047");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        long long16 = chronology12.set((org.joda.time.ReadablePartial) partial14, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = partial14.getFieldTypes();
        java.util.Locale locale18 = java.util.Locale.PRC;
        boolean boolean19 = partial14.equals((java.lang.Object) locale18);
        int int20 = partial14.size();
        org.joda.time.Chronology chronology21 = partial14.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.year();
        org.joda.time.DurationField durationField23 = chronology21.hours();
        // The following exception was thrown during execution in test generation
        try {
            long long28 = chronology21.getDateTimeMillis(1, 4, (int) ' ', (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test01048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01048");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        long long11 = chronology5.getDateTimeMillis((long) '4', 9, (int) (short) 10, 19, 52);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = chronology5.getDateTimeMillis((-694733), 35, (int) ' ', 0, 9, 19, 6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 33019052L + "'", long11 == 33019052L);
    }

    @Test
    public void test01049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01049");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        int int10 = partial7.compareTo((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime14.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime20 = dateTime14.withSecondOfMinute(0);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime14.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter2.withZone(dateTimeZone21);
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter25.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser27 = dateTimeFormatter25.getParser();
        int int28 = dateTimeFormatter25.getDefaultYear();
        org.joda.time.Chronology chronology29 = dateTimeFormatter25.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = null;
        org.joda.time.format.DateTimeParser dateTimeParser31 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter30, dateTimeParser31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = partial34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology40.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter32.withZone(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter25.withZone(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter22.withZone(dateTimeZone42);
        org.joda.time.Chronology chronology47 = dateTimeFormatter22.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter22.withPivotYear(10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        int int55 = partial52.compareTo((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Chronology chronology56 = partial52.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.Chronology chronology58 = chronology56.withZone(dateTimeZone57);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) 0, chronology56);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.DateTime dateTime61 = dateTime59.minus(readableDuration60);
        org.joda.time.DateTime dateTime63 = dateTime59.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime65 = dateTime59.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime67 = dateTime65.minusWeeks(19);
        org.joda.time.DateTime dateTime69 = dateTime65.plusMillis((int) '#');
        int int70 = dateTime69.getDayOfMonth();
        org.joda.time.DateTime dateTime72 = dateTime69.withWeekOfWeekyear(1);
        org.joda.time.DateTime dateTime74 = dateTime69.minusMillis((int) 'u');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = dateTimeFormatter22.print((org.joda.time.ReadableInstant) dateTime69);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(dateTimeParser27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2000 + "'", int28 == 2000);
        org.junit.Assert.assertNull(chronology29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
    }

    @Test
    public void test01050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01050");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.removeUnicodeLocaleAttribute("CAN");
        java.util.Locale locale4 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder0.setUnicodeLocaleKeyword("French", "Property[millisOfSecond]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: French [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
    }

    @Test
    public void test01051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01051");
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        int int13 = partial10.compareTo((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = partial10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Chronology chronology16 = chronology14.withZone(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 0, chronology14);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.minus(readableDuration18);
        org.joda.time.Chronology chronology20 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.dayOfWeek();
        org.joda.time.DurationField durationField23 = chronology20.seconds();
        org.joda.time.DurationField durationField24 = durationFieldType7.getField(chronology20);
        org.joda.time.DurationField durationField25 = chronology20.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(70, 86399999, (int) '4', 86340, 86399, 9, 7, chronology20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86340 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test01052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01052");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.lang.String str8 = locale6.getDisplayCountry(locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withLocale(locale7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = dateTimeFormatter2.parseDateTime("DateTimeField[weekOfWeekyear]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test01053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01053");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.era();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        int[] intArray13 = new int[] { 2 };
        int int14 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) partial8, intArray13);
        int int15 = partial8.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str17 = dateTimeFieldType16.getName();
        org.joda.time.Partial partial18 = partial8.without(dateTimeFieldType16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Partial partial21 = new org.joda.time.Partial(dateTimeFieldType19, 12);
        org.joda.time.Chronology chronology22 = partial21.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean24 = partial21.isSupported(dateTimeFieldType23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial26 = partial8.withField(dateTimeFieldType23, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfSecond' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[2]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "halfdayOfDay" + "'", str17, "halfdayOfDay");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test01054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01054");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.lang.String str2 = locale0.getDisplayName();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean15 = partial9.isSupported(dateTimeFieldType14);
        boolean boolean16 = partial6.isEqual((org.joda.time.ReadablePartial) partial9);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial9.plus(readablePeriod17);
        boolean boolean19 = locale0.equals((java.lang.Object) readablePeriod17);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Korean (South Korea)" + "'", str2, "Korean (South Korea)");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test01055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01055");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime15 = dateTime11.withEarlierOffsetAtOverlap();
        java.util.GregorianCalendar gregorianCalendar16 = dateTime15.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime15.withDayOfMonth((-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
    }

    @Test
    public void test01056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01056");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.minus(readableDuration17);
        org.joda.time.Chronology chronology19 = dateTime16.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.centuries();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 1970, chronology19);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(180100L, chronology19);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = chronology19.add(readablePeriod23, (-18L), 0);
        org.joda.time.DateTimeZone dateTimeZone27 = chronology19.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((int) (byte) 100, 366, 170, 5, 720, dateTimeZone27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 720 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-18L) + "'", long26 == (-18L));
        org.junit.Assert.assertNotNull(dateTimeZone27);
    }

    @Test
    public void test01057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01057");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.DateTime dateTime15 = property14.withMinimumValue();
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.DateTime.Property property17 = dateTime15.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime15.minus(readablePeriod18);
        org.joda.time.DateTime.Property property20 = dateTime15.monthOfYear();
        org.joda.time.DateTime dateTime22 = dateTime15.minusYears(86340);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        int int28 = partial25.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = partial25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Chronology chronology31 = chronology29.withZone(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 0, chronology29);
        org.joda.time.DateTime dateTime34 = dateTime32.withHourOfDay(0);
        int int35 = dateTime34.getCenturyOfEra();
        boolean boolean37 = dateTime34.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime38 = dateTime34.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime40 = dateTime38.withCenturyOfEra((int) '#');
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        int int42 = dateTime22.compareTo((org.joda.time.ReadableInstant) dateTime40);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = dateTime22.toString("minuteOfHour");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0120-01-01T00:00:00.000Z" + "'", str16, "0120-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 19 + "'", int35 == 19);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test01058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01058");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DurationField durationField20 = durationFieldType13.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime11.withChronology(chronology19);
        org.joda.time.DateTime dateTime24 = dateTime11.plusWeeks((int) (short) 1);
        org.joda.time.DateTime.Property property25 = dateTime11.yearOfEra();
        boolean boolean27 = dateTime11.isEqual((long) 2);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int int32 = partial29.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = partial29.getChronology();
        java.lang.String str34 = partial29.toStringList();
        org.joda.time.DateTime dateTime35 = dateTime11.withFields((org.joda.time.ReadablePartial) partial29);
        org.joda.time.DateTime.Property property36 = dateTime11.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = dateTime11.withYearOfCentury((-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test01059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01059");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        java.lang.Integer int5 = dateTimeFormatter4.getPivotYear();
        java.lang.StringBuffer stringBuffer6 = null;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DurationField durationField14 = durationFieldType7.getField(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.secondOfMinute();
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DurationField durationField26 = durationFieldType19.getField(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.weekyearOfCentury();
        org.joda.time.DurationField durationField29 = dateTimeField28.getLeapDurationField();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = partial31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.weekOfWeekyear();
        int int40 = dateTimeField38.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        int int45 = partial42.compareTo((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        boolean boolean48 = partial44.isAfter((org.joda.time.ReadablePartial) partial47);
        java.lang.String str49 = partial47.toString();
        java.util.Locale locale51 = null;
        java.lang.String str52 = dateTimeField38.getAsShortText((org.joda.time.ReadablePartial) partial47, 53, locale51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        int int57 = partial54.compareTo((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Chronology chronology58 = partial54.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.era();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        int int64 = partial61.compareTo((org.joda.time.ReadablePartial) partial63);
        int[] intArray66 = new int[] { 2 };
        int int67 = dateTimeField59.getMinimumValue((org.joda.time.ReadablePartial) partial61, intArray66);
        int int68 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) partial47, intArray66);
        java.util.Locale locale71 = java.util.Locale.forLanguageTag("secondOfDay");
        java.lang.String str72 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) partial47, 0, locale71);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter4.printTo(stringBuffer6, (org.joda.time.ReadablePartial) partial47);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNull(durationField29);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 53 + "'", int40 == 53);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "53" + "'", str52, "53");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[2]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 99 + "'", int68 == 99);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "0" + "'", str72, "0");
    }

    @Test
    public void test01060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01060");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = partial14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekOfWeekyear();
        int int23 = dateTimeField21.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        int int28 = partial25.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        boolean boolean31 = partial27.isAfter((org.joda.time.ReadablePartial) partial30);
        java.lang.String str32 = partial30.toString();
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeField21.getAsShortText((org.joda.time.ReadablePartial) partial30, 53, locale34);
        long long37 = chronology12.set((org.joda.time.ReadablePartial) partial30, (long) 0);
        org.joda.time.DateTimeField dateTimeField38 = chronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField39 = chronology12.hourOfHalfday();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        int int44 = partial41.compareTo((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = partial41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Chronology chronology47 = chronology45.withZone(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = chronology47.weekOfWeekyear();
        java.util.Locale locale49 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale50 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str51 = locale49.getDisplayName(locale50);
        int int52 = dateTimeField48.getMaximumTextLength(locale50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        int int58 = partial55.compareTo((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology59 = partial55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.Chronology chronology61 = chronology59.withZone(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) 0, chronology59);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.DateTime dateTime64 = dateTime62.minus(readableDuration63);
        org.joda.time.Chronology chronology65 = dateTime62.getChronology();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        long long69 = chronology65.set((org.joda.time.ReadablePartial) partial67, (long) (byte) -1);
        int int70 = dateTimeField48.getMinimumValue((org.joda.time.ReadablePartial) partial67);
        org.joda.time.DateTimeField[] dateTimeFieldArray71 = partial67.getFields();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = partial67.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial75 = partial67.withPeriodAdded(readablePeriod73, 1);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = new org.joda.time.Partial(chronology76);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = new org.joda.time.Partial(chronology78);
        int int80 = partial77.compareTo((org.joda.time.ReadablePartial) partial79);
        java.lang.String str81 = partial77.toString();
        boolean boolean82 = partial75.isEqual((org.joda.time.ReadablePartial) partial77);
        int[] intArray83 = partial77.getValues();
        java.util.Locale locale85 = java.util.Locale.ITALIAN;
        java.util.Locale locale86 = java.util.Locale.KOREAN;
        java.lang.String str87 = locale85.getDisplayScript(locale86);
        java.util.Locale locale88 = locale86.stripExtensions();
        java.lang.String str89 = dateTimeField39.getAsText((org.joda.time.ReadablePartial) partial77, 2000, locale88);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField91 = partial77.getField(86399999);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 86399999");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53 + "'", int23 == 53);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "53" + "'", str35, "53");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "fran\347ais (Canada)" + "'", str51, "fran\347ais (Canada)");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray71);
        org.junit.Assert.assertNull(dateTimeFormatter72);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[]" + "'", str81, "[]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "it");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "2000" + "'", str89, "2000");
    }

    @Test
    public void test01061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01061");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        org.joda.time.DurationField durationField15 = property12.getRangeDurationField();
        int int16 = property12.get();
        org.joda.time.DateTime dateTime18 = property12.addToCopy((long) 0);
        int int19 = property12.getLeapAmount();
        org.joda.time.DateTime dateTime20 = property12.withMaximumValue();
        long long21 = dateTime20.getMillis();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.plus(readablePeriod22);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 999L + "'", long21 == 999L);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test01062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01062");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        org.joda.time.Interval interval16 = property12.toInterval();
        org.joda.time.DateTime dateTime17 = property12.roundHalfFloorCopy();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.DateTime dateTime31 = dateTime27.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime33 = dateTime27.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime35 = dateTime33.minusWeeks(19);
        boolean boolean37 = dateTime35.isBefore((long) '4');
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.DateTime dateTime39 = dateTime35.minus(readablePeriod38);
        int int40 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateTime39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime42 = dateTime17.withDayOfMonth(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test01063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01063");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter3.getParser();
        int int6 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.Chronology chronology7 = dateTimeFormatter3.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology18.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter10.withZone(dateTimeZone20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter3.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-292275054), dateTimeZone20);
        org.joda.time.DateTime dateTime27 = dateTime25.minusHours(720);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime29 = dateTime27.withEra(12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 12 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test01064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01064");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.era();
        org.joda.time.DurationField durationField8 = chronology6.weeks();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType0.getField(chronology6);
        java.lang.String str11 = dateTimeField10.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DateTimeField[era]" + "'", str11, "DateTimeField[era]");
    }

    @Test
    public void test01065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01065");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readableDuration20);
        org.joda.time.Chronology chronology22 = dateTime19.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        long long26 = chronology22.set((org.joda.time.ReadablePartial) partial24, (long) (byte) -1);
        int[] intArray28 = chronology6.get((org.joda.time.ReadablePartial) partial24, (long) ' ');
        org.joda.time.DurationField durationField29 = chronology6.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology6.dayOfYear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = partial34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 0, chronology38);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime43 = dateTime41.minus(readableDuration42);
        org.joda.time.Chronology chronology44 = dateTime41.getChronology();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        long long48 = chronology44.set((org.joda.time.ReadablePartial) partial46, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = partial46.getFieldTypes();
        java.util.Locale locale50 = java.util.Locale.PRC;
        boolean boolean51 = partial46.equals((java.lang.Object) locale50);
        java.lang.String str52 = dateTimeField30.getAsShortText(86500L, locale50);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        int int59 = partial56.compareTo((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology60 = partial56.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.Chronology chronology62 = chronology60.withZone(dateTimeZone61);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) 0, chronology60);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.DateTime dateTime65 = dateTime63.minus(readableDuration64);
        org.joda.time.DateTime dateTime67 = dateTime63.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime69 = dateTime63.withSecondOfMinute(0);
        org.joda.time.DateTime.Property property70 = dateTime69.minuteOfHour();
        java.util.Locale locale71 = java.util.Locale.ITALIAN;
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.lang.String str73 = locale71.getDisplayScript(locale72);
        java.util.Set<java.lang.String> strSet74 = locale71.getUnicodeLocaleAttributes();
        boolean boolean75 = property70.equals((java.lang.Object) locale71);
        java.lang.String str76 = dateTimeField30.getAsText(1814400000L, locale71);
        int int78 = dateTimeField30.getLeapAmount(0L);
        long long80 = dateTimeField30.roundCeiling((long) 72);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1" + "'", str52, "1");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "it");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "22" + "'", str76, "22");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 86400000L + "'", long80 == 86400000L);
    }

    @Test
    public void test01066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01066");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        int int10 = partial7.compareTo((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readableDuration25);
        org.joda.time.Chronology chronology27 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfMonth();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        int int33 = partial30.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        boolean boolean36 = partial32.isAfter((org.joda.time.ReadablePartial) partial35);
        java.lang.String str37 = partial35.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        org.joda.time.Partial partial39 = partial35.without(dateTimeFieldType38);
        java.util.Locale locale41 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale42 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str43 = locale41.getDisplayName(locale42);
        java.lang.String str44 = locale41.getDisplayVariant();
        java.util.Locale locale45 = locale41.stripExtensions();
        java.lang.String str46 = dateTimeField28.getAsText((org.joda.time.ReadablePartial) partial35, 53, locale45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        int int52 = partial49.compareTo((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = partial49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 0, chronology53);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.minus(readableDuration57);
        org.joda.time.DateTime dateTime60 = dateTime56.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime62 = dateTime56.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime64 = dateTime62.minusWeeks(19);
        boolean boolean65 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime62);
        long long67 = chronology11.set((org.joda.time.ReadablePartial) partial35, (-62135596800000L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter3.withChronology(chronology11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter68.withDefaultYear(86340);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter70.withPivotYear(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str74 = dateTimeFormatter72.print(0L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "fran\347ais (Canada)" + "'", str43, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "53" + "'", str46, "53");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-62135596800000L) + "'", long67 == (-62135596800000L));
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
    }

    @Test
    public void test01067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01067");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder1.addUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder7 = builder1.setUnicodeLocaleKeyword("53", "");
        java.util.Locale.Builder builder8 = builder1.clearExtensions();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        int int14 = partial11.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = partial11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 0, chronology15);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.minus(readableDuration19);
        org.joda.time.Chronology chronology21 = dateTime18.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str23 = dateTimeFieldType22.getName();
        int int24 = dateTime18.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime26 = dateTime18.minusMinutes(4);
        int int27 = dateTime18.getWeekyear();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime18.plus(readableDuration28);
        org.joda.time.DateTime.Property property30 = dateTime18.millisOfSecond();
        java.util.Locale locale32 = new java.util.Locale("minuteOfHour");
        java.lang.String str33 = property30.getAsText(locale32);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder34 = builder1.setLocale(locale32);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: minuteofhour [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "halfdayOfDay" + "'", str23, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals(locale32.toString(), "minuteofhour");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0" + "'", str33, "0");
    }

    @Test
    public void test01068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01068");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter3.getParser();
        int int6 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.Chronology chronology7 = dateTimeFormatter3.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology18.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter10.withZone(dateTimeZone20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter3.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(73L, dateTimeZone20);
        int int26 = dateTime25.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 70 + "'", int26 == 70);
    }

    @Test
    public void test01069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01069");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 317);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime15 = dateTimeFormatter6.parseMutableDateTime("janvier");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
    }

    @Test
    public void test01070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01070");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(1970, (int) 'u', 120, 10, (int) 'u', 86399, 170);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 117 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01071");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        long long16 = chronology12.set((org.joda.time.ReadablePartial) partial14, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = partial14.getFieldTypes();
        java.util.Locale locale18 = java.util.Locale.PRC;
        boolean boolean19 = partial14.equals((java.lang.Object) locale18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField21 = partial14.getField(86340);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 86340");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test01072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01072");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        boolean boolean30 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime.Property property31 = dateTime29.secondOfMinute();
        boolean boolean32 = property31.isLeap();
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = locale34.getDisplayScript(locale35);
        java.util.Locale locale37 = locale35.stripExtensions();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        int int43 = partial40.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = partial40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology44.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) 0, chronology44);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.minus(readableDuration48);
        org.joda.time.DateTime.Property property50 = dateTime49.millisOfSecond();
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        int int52 = property50.getMaximumTextLength(locale51);
        java.util.Locale locale53 = java.util.Locale.ITALIAN;
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = locale53.getDisplayScript(locale54);
        java.lang.String str56 = locale51.getDisplayLanguage(locale53);
        java.util.Locale locale57 = java.util.Locale.ITALIAN;
        java.lang.String str58 = locale57.getScript();
        java.lang.String str59 = locale51.getDisplayLanguage(locale57);
        java.lang.String str60 = locale35.getDisplayName(locale51);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime61 = property31.setCopy("Canada", locale35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Canada\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "coreano" + "'", str56, "coreano");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "coreano" + "'", str59, "coreano");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str60, "\ud55c\uad6d\uc5b4");
    }

    @Test
    public void test01073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01073");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime18 = dateTime15.withTimeAtStartOfDay();
        int int19 = dateTime18.getYear();
        org.joda.time.DateTime.Property property20 = dateTime18.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = property20.setCopy(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test01074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01074");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 10);
        int int2 = dateTime1.getCenturyOfEra();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 19 + "'", int2 == 19);
    }

    @Test
    public void test01075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01075");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        int int10 = partial7.compareTo((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readableDuration25);
        org.joda.time.Chronology chronology27 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfMonth();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        int int33 = partial30.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        boolean boolean36 = partial32.isAfter((org.joda.time.ReadablePartial) partial35);
        java.lang.String str37 = partial35.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        org.joda.time.Partial partial39 = partial35.without(dateTimeFieldType38);
        java.util.Locale locale41 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale42 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str43 = locale41.getDisplayName(locale42);
        java.lang.String str44 = locale41.getDisplayVariant();
        java.util.Locale locale45 = locale41.stripExtensions();
        java.lang.String str46 = dateTimeField28.getAsText((org.joda.time.ReadablePartial) partial35, 53, locale45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        int int52 = partial49.compareTo((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = partial49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 0, chronology53);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.minus(readableDuration57);
        org.joda.time.DateTime dateTime60 = dateTime56.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime62 = dateTime56.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime64 = dateTime62.minusWeeks(19);
        boolean boolean65 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime62);
        long long67 = chronology11.set((org.joda.time.ReadablePartial) partial35, (-62135596800000L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter3.withChronology(chronology11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter68.withDefaultYear(86340);
        // The following exception was thrown during execution in test generation
        try {
            long long72 = dateTimeFormatter68.parseMillis("366");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "fran\347ais (Canada)" + "'", str43, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "53" + "'", str46, "53");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-62135596800000L) + "'", long67 == (-62135596800000L));
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
    }

    @Test
    public void test01076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01076");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = chronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfDay();
        org.joda.time.DurationField durationField15 = chronology12.millis();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField17 = chronology12.millisOfDay();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.Chronology chronology30 = dateTime27.getChronology();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        long long34 = chronology30.set((org.joda.time.ReadablePartial) partial32, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = partial32.getFieldTypes();
        java.util.Locale locale36 = java.util.Locale.PRC;
        boolean boolean37 = partial32.equals((java.lang.Object) locale36);
        int int38 = partial32.size();
        org.joda.time.Chronology chronology39 = partial32.getChronology();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        int int44 = partial41.compareTo((org.joda.time.ReadablePartial) partial43);
        java.lang.String str45 = partial41.toString();
        org.joda.time.ReadableInstant readableInstant46 = null;
        boolean boolean47 = partial41.isMatch(readableInstant46);
        org.joda.time.DateTimeField[] dateTimeFieldArray48 = partial41.getFields();
        boolean boolean49 = partial32.equals((java.lang.Object) partial41);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.days();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        int int57 = partial54.compareTo((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Chronology chronology58 = partial54.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 0, chronology58);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.DateTime dateTime63 = dateTime61.minus(readableDuration62);
        org.joda.time.Chronology chronology64 = dateTime61.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField66 = chronology64.dayOfWeek();
        org.joda.time.DurationField durationField67 = chronology64.seconds();
        org.joda.time.DurationField durationField68 = durationFieldType51.getField(chronology64);
        org.joda.time.DurationField durationField69 = chronology64.weekyears();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(chronology71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        int int75 = partial72.compareTo((org.joda.time.ReadablePartial) partial74);
        org.joda.time.Chronology chronology76 = partial72.getChronology();
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.Chronology chronology78 = chronology76.withZone(dateTimeZone77);
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((long) 0, chronology76);
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.DateTime dateTime81 = dateTime79.minus(readableDuration80);
        org.joda.time.Chronology chronology82 = dateTime79.getChronology();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Partial partial84 = new org.joda.time.Partial(chronology83);
        long long86 = chronology82.set((org.joda.time.ReadablePartial) partial84, (long) (byte) -1);
        long long88 = chronology64.set((org.joda.time.ReadablePartial) partial84, (long) 86399999);
        org.joda.time.DateTimeField[] dateTimeFieldArray89 = partial84.getFields();
        org.joda.time.ReadablePeriod readablePeriod90 = null;
        org.joda.time.Partial partial91 = partial84.plus(readablePeriod90);
        int[] intArray92 = partial91.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray94 = dateTimeField17.addWrapField((org.joda.time.ReadablePartial) partial32, 834, intArray92, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 834");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + (-1L) + "'", long86 == (-1L));
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 86399999L + "'", long88 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldArray89);
        org.junit.Assert.assertNotNull(partial91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
    }

    @Test
    public void test01077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01077");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        long long16 = chronology12.set((org.joda.time.ReadablePartial) partial14, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = partial14.getFieldTypes();
        java.util.Locale locale18 = java.util.Locale.PRC;
        boolean boolean19 = partial14.equals((java.lang.Object) locale18);
        int int20 = partial14.size();
        org.joda.time.Chronology chronology21 = partial14.getChronology();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        java.lang.String str27 = partial23.toString();
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = partial23.isMatch(readableInstant28);
        org.joda.time.DateTimeField[] dateTimeFieldArray30 = partial23.getFields();
        boolean boolean31 = partial14.equals((java.lang.Object) partial23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField33 = partial23.getField(366);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 366");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test01078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01078");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray15 = chronology7.get(readablePeriod12, 27820800120L, (long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test01079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01079");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        org.joda.time.Interval interval16 = property12.toInterval();
        org.joda.time.DateTime dateTime17 = property12.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(2);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.plus(readableDuration20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        int int27 = partial24.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = partial24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 0, chronology28);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.minus(readableDuration32);
        org.joda.time.Chronology chronology34 = dateTime31.getChronology();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        int int39 = partial36.compareTo((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = partial36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.Chronology chronology42 = chronology40.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = chronology42.weekOfWeekyear();
        int int45 = dateTimeField43.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        int int50 = partial47.compareTo((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        boolean boolean53 = partial49.isAfter((org.joda.time.ReadablePartial) partial52);
        java.lang.String str54 = partial52.toString();
        java.util.Locale locale56 = null;
        java.lang.String str57 = dateTimeField43.getAsShortText((org.joda.time.ReadablePartial) partial52, 53, locale56);
        long long59 = chronology34.set((org.joda.time.ReadablePartial) partial52, (long) 0);
        org.joda.time.DateTimeField dateTimeField60 = chronology34.weekOfWeekyear();
        int int62 = dateTimeField60.getLeapAmount((long) 53);
        org.joda.time.DurationField durationField63 = dateTimeField60.getLeapDurationField();
        long long65 = dateTimeField60.roundCeiling(36000032L);
        int int66 = dateTime19.get(dateTimeField60);
        long long69 = dateTimeField60.add((-86400000L), (int) 'u');
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 53 + "'", int45 == 53);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "53" + "'", str57, "53");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNull(durationField63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 345600000L + "'", long65 == 345600000L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 70675200000L + "'", long69 == 70675200000L);
    }

    @Test
    public void test01080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01080");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale6.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withLocale(locale6);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeFormatter9.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = dateTimeFormatter9.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter9.withPivotYear((java.lang.Integer) 292278993);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter13.withPivotYear((java.lang.Integer) 1405);
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = dateTimeFormatter15.getPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimeZone10);
        org.junit.Assert.assertNull(dateTimePrinter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(dateTimePrinter16);
    }

    @Test
    public void test01081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01081");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime15 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property16 = dateTime11.year();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        int int22 = partial19.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = partial19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 0, chronology23);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.minus(readableDuration27);
        org.joda.time.Chronology chronology29 = dateTime26.getChronology();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = partial31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.weekOfWeekyear();
        int int40 = dateTimeField38.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        int int45 = partial42.compareTo((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        boolean boolean48 = partial44.isAfter((org.joda.time.ReadablePartial) partial47);
        java.lang.String str49 = partial47.toString();
        java.util.Locale locale51 = null;
        java.lang.String str52 = dateTimeField38.getAsShortText((org.joda.time.ReadablePartial) partial47, 53, locale51);
        long long54 = chronology29.set((org.joda.time.ReadablePartial) partial47, (long) 0);
        org.joda.time.MutableDateTime mutableDateTime55 = dateTime11.toMutableDateTime(chronology29);
        org.joda.time.DateTimeField dateTimeField56 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField57 = chronology29.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            long long62 = chronology29.getDateTimeMillis((int) 'x', 5, 22200, 97);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22200 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 53 + "'", int40 == 53);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "53" + "'", str52, "53");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test01082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01082");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfHalfday();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test01083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01083");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("\uc11c\uae30", (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01084");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        int int10 = partial7.compareTo((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readableDuration15);
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfSecond();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        int int19 = property17.getMaximumTextLength(locale18);
        long long20 = property17.remainder();
        org.joda.time.Interval interval21 = property17.toInterval();
        org.joda.time.DateTime dateTime22 = property17.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime24 = dateTime22.withHourOfDay(2);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.plus(readableDuration25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.minus(readablePeriod27);
        org.joda.time.format.DateTimePrinter dateTimePrinter29 = null;
        org.joda.time.format.DateTimeParser dateTimeParser30 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter29, dateTimeParser30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        int int36 = partial33.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = partial33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology39.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter31.withZone(dateTimeZone41);
        int int43 = dateTimeFormatter42.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeFormatter42.getZone();
        org.joda.time.DateTime dateTime45 = dateTime28.withZone(dateTimeZone44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(8, 9, (int) (byte) 0, 72, 53, dateTimeZone44);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 72 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2000 + "'", int43 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test01085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01085");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        int int16 = property12.getLeapAmount();
        int int17 = property12.getMinimumValue();
        org.joda.time.Interval interval18 = property12.toInterval();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(interval18);
    }

    @Test
    public void test01086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01086");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekOfWeekyear();
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        int int12 = dateTimeField8.getMaximumTextLength(locale10);
        int int14 = dateTimeField8.getLeapAmount((-259200000L));
        java.lang.String str15 = dateTimeField8.toString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean23 = partial17.isSupported(dateTimeFieldType22);
        org.joda.time.Chronology chronology24 = partial17.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        int int31 = partial28.compareTo((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology32 = partial28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.monthOfYear();
        long long39 = dateTimeField36.getDifferenceAsLong((long) (short) 100, (-18L));
        java.util.Locale.Category category41 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale42 = java.util.Locale.getDefault(category41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        int int47 = partial44.compareTo((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology48 = partial44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.weekOfWeekyear();
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale53 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        int int55 = dateTimeField51.getMaximumTextLength(locale53);
        java.util.Locale.setDefault(category41, locale53);
        java.util.Locale locale57 = java.util.Locale.getDefault(category41);
        java.lang.String str58 = dateTimeField36.getAsText((-3600000L), locale57);
        java.lang.String str59 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) partial25, 292278993, locale57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        int int65 = partial62.compareTo((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Chronology chronology66 = partial62.getChronology();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.Chronology chronology68 = chronology66.withZone(dateTimeZone67);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) 0, chronology66);
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.DateTime dateTime71 = dateTime69.minus(readableDuration70);
        org.joda.time.Chronology chronology72 = dateTime69.getChronology();
        org.joda.time.Partial partial73 = partial25.withChronologyRetainFields(chronology72);
        // The following exception was thrown during execution in test generation
        try {
            long long78 = chronology72.getDateTimeMillis(100, 2000, 2000, 2);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2000 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fran\347ais (Canada)" + "'", str11, "fran\347ais (Canada)");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DateTimeField[weekOfWeekyear]" + "'", str15, "DateTimeField[weekOfWeekyear]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + category41 + "' != '" + java.util.Locale.Category.FORMAT + "'", category41.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "fran\347ais (Canada)" + "'", str54, "fran\347ais (Canada)");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "d\351cembre" + "'", str58, "d\351cembre");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "292278993" + "'", str59, "292278993");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(partial73);
    }

    @Test
    public void test01087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01087");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        long long12 = dateTime11.getMillis();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 0, chronology19);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readableDuration23);
        org.joda.time.DateTime dateTime26 = dateTime22.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime28 = dateTime22.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime30 = dateTime28.minusWeeks(19);
        int int31 = dateTime30.getSecondOfMinute();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = partial34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 0, chronology38);
        org.joda.time.DateTime dateTime43 = dateTime41.withHourOfDay(0);
        org.joda.time.DateTime dateTime45 = dateTime43.withYear((int) 'a');
        boolean boolean46 = dateTime43.isEqualNow();
        org.joda.time.DateMidnight dateMidnight47 = dateTime43.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone48 = dateMidnight47.getZone();
        org.joda.time.DateTime dateTime49 = dateTime30.withZoneRetainFields(dateTimeZone48);
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime11.toMutableDateTime(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime55 = dateTime51.withDate((int) (short) -1, 70, 53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test01088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01088");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray15 = chronology7.get(readablePeriod12, 998L, (long) 22200);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test01089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01089");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readableDuration20);
        org.joda.time.Chronology chronology22 = dateTime19.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        long long26 = chronology22.set((org.joda.time.ReadablePartial) partial24, (long) (byte) -1);
        int[] intArray28 = chronology6.get((org.joda.time.ReadablePartial) partial24, (long) ' ');
        org.joda.time.DurationField durationField29 = chronology6.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology6.dayOfYear();
        int int32 = dateTimeField30.getMinimumValue((-59106067200000L));
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean45 = partial39.isSupported(dateTimeFieldType44);
        boolean boolean46 = partial36.isEqual((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        int int51 = partial48.compareTo((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        boolean boolean54 = partial50.isAfter((org.joda.time.ReadablePartial) partial53);
        boolean boolean55 = partial39.isAfter((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        int int61 = partial58.compareTo((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        boolean boolean64 = partial60.isAfter((org.joda.time.ReadablePartial) partial63);
        java.lang.String str65 = partial63.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        org.joda.time.Partial partial67 = partial63.without(dateTimeFieldType66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial69 = partial63.plus(readablePeriod68);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = new org.joda.time.Partial(chronology72);
        int int74 = partial71.compareTo((org.joda.time.ReadablePartial) partial73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = new org.joda.time.Partial(chronology75);
        boolean boolean77 = partial73.isAfter((org.joda.time.ReadablePartial) partial76);
        org.joda.time.Partial partial78 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial73);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = partial73.getFormatter();
        int int80 = partial69.compareTo((org.joda.time.ReadablePartial) partial73);
        int[] intArray81 = partial69.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray83 = dateTimeField30.addWrapField((org.joda.time.ReadablePartial) partial39, 0, intArray81, 13);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[]" + "'", str65, "[]");
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(dateTimeFormatter79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
    }

    @Test
    public void test01090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01090");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Partial partial2 = new org.joda.time.Partial(dateTimeFieldType0, 12);
        java.lang.String str4 = partial2.toString("[]");
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial2.plus(readablePeriod5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        boolean boolean14 = partial10.isAfter((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.DateTime dateTime26 = dateTime24.withHourOfDay(0);
        org.joda.time.DateTime dateTime28 = dateTime26.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime28.toMutableDateTime();
        org.joda.time.DateTime dateTime30 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        int int36 = partial33.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = partial33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 0, chronology37);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.minus(readableDuration41);
        org.joda.time.DateTime dateTime44 = dateTime40.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime46 = dateTime40.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime48 = dateTime46.minusWeeks(19);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '#');
        int int51 = dateTime50.getDayOfMonth();
        boolean boolean52 = partial10.equals((java.lang.Object) dateTime50);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean53 = partial6.isBefore((org.joda.time.ReadablePartial) partial10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test01091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01091");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        java.util.Locale locale6 = dateTimeFormatter2.getLocale();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.minus(readableDuration17);
        org.joda.time.Chronology chronology19 = dateTime16.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.months();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.hourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.monthOfYear();
        int int25 = dateTimeField22.getDifference((long) (byte) 1, (long) 120);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        int int30 = partial27.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        int int35 = partial32.compareTo((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology36 = partial32.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean38 = partial32.isSupported(dateTimeFieldType37);
        boolean boolean39 = partial29.isEqual((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        int int44 = partial41.compareTo((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = partial41.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean47 = partial41.isSupported(dateTimeFieldType46);
        org.joda.time.Chronology chronology48 = partial41.getChronology();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial41.plus(readablePeriod49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean52 = partial41.isSupported(dateTimeFieldType51);
        int int53 = partial32.indexOf(dateTimeFieldType51);
        int int54 = dateTimeField22.getMaximumValue((org.joda.time.ReadablePartial) partial32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = dateTimeFormatter2.print((org.joda.time.ReadablePartial) partial32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 12 + "'", int54 == 12);
    }

    @Test
    public void test01092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01092");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime14 = dateTime9.withFieldAdded(durationFieldType12, 3);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        int int16 = dateTime9.get(dateTimeFieldType15);
        org.joda.time.DateTime dateTime18 = dateTime9.plusSeconds(3);
        org.joda.time.DateTime dateTime20 = dateTime9.withDayOfWeek(3);
        org.joda.time.DateTime dateTime22 = dateTime9.plusMillis((int) (short) 1);
        int int23 = dateTime22.getEra();
        int int24 = dateTime22.getYearOfEra();
        org.joda.time.DateTime dateTime26 = dateTime22.plusHours(170);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test01093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01093");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        long long16 = chronology12.set((org.joda.time.ReadablePartial) partial14, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = partial14.getFieldTypes();
        java.util.Locale locale18 = java.util.Locale.PRC;
        boolean boolean19 = partial14.equals((java.lang.Object) locale18);
        int int20 = partial14.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.minus(readableDuration31);
        org.joda.time.DateTime dateTime34 = dateTime30.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime36 = dateTime30.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime38 = dateTime36.minusWeeks(19);
        org.joda.time.DateTime dateTime40 = dateTime36.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        int int46 = partial43.compareTo((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology47 = partial43.getChronology();
        org.joda.time.DurationField durationField48 = durationFieldType41.getField(chronology47);
        org.joda.time.DateTimeField dateTimeField49 = chronology47.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField50 = chronology47.dayOfMonth();
        org.joda.time.DateTime dateTime51 = dateTime40.toDateTime(chronology47);
        org.joda.time.Chronology chronology52 = chronology47.withUTC();
        org.joda.time.Partial partial53 = partial14.withChronologyRetainFields(chronology52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType54.getDurationType();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        int int61 = partial58.compareTo((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology62 = partial58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.Chronology chronology64 = chronology62.withZone(dateTimeZone63);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) 0, chronology62);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.DateTime dateTime67 = dateTime65.minus(readableDuration66);
        org.joda.time.Chronology chronology68 = dateTime65.getChronology();
        boolean boolean69 = durationFieldType55.isSupported(chronology68);
        java.lang.String str70 = durationFieldType55.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial72 = partial14.withFieldAddWrapped(durationFieldType55, 317);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'centuries' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "centuries" + "'", str70, "centuries");
    }

    @Test
    public void test01094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01094");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) 'a');
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours(53);
        org.joda.time.DateTime dateTime21 = dateTime19.withMillisOfSecond(999);
        org.joda.time.DateTime.Property property22 = dateTime19.yearOfEra();
        org.joda.time.DateTime dateTime23 = property22.roundFloorCopy();
        java.util.Locale locale25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = property22.setCopy("millisOfSecond", locale25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"millisOfSecond\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test01095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01095");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekOfWeekyear();
        int int25 = dateTime15.get(dateTimeField24);
        org.joda.time.DateTime dateTime27 = dateTime15.withWeekyear(100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = dateTime27.withWeekOfWeekyear(2000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2000 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test01096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01096");
        java.util.Locale locale1 = new java.util.Locale("coreano");
        java.lang.String str2 = locale1.getDisplayName();
        java.lang.String str3 = locale1.getDisplayScript();
        org.junit.Assert.assertEquals(locale1.toString(), "coreano");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "coreano" + "'", str2, "coreano");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test01097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01097");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) 'a');
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours(53);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.minus(readablePeriod20);
        int int22 = dateTime21.getWeekOfWeekyear();
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter25.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser27 = dateTimeFormatter25.getParser();
        int int28 = dateTimeFormatter25.getDefaultYear();
        org.joda.time.Chronology chronology29 = dateTimeFormatter25.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = null;
        org.joda.time.format.DateTimeParser dateTimeParser31 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter30, dateTimeParser31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = partial34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology40.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter32.withZone(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter25.withZone(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime21.toMutableDateTime(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(dateTimeParser27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2000 + "'", int28 == 2000);
        org.junit.Assert.assertNull(chronology29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(mutableDateTime47);
    }

    @Test
    public void test01098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01098");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = partial0.getFieldTypes();
        java.lang.String str2 = partial0.toString();
        org.joda.time.Partial partial3 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        int int9 = partial6.compareTo((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = partial6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Chronology chronology12 = chronology10.withZone(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 0, chronology10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readableDuration14);
        org.joda.time.Chronology chronology16 = dateTime13.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime13.withWeekyear(23);
        org.joda.time.DateMidnight dateMidnight19 = dateTime13.toDateMidnight();
        org.joda.time.DateTime.Property property20 = dateTime13.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str22 = dateTimeFieldType21.getName();
        java.lang.String str23 = dateTimeFieldType21.getName();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType21.getDurationType();
        java.lang.String str25 = dateTimeFieldType21.getName();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType21.getRangeDurationType();
        int int27 = dateTime13.get(dateTimeFieldType21);
        // The following exception was thrown during execution in test generation
        try {
            int int28 = partial3.get(dateTimeFieldType21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'halfdayOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "halfdayOfDay" + "'", str22, "halfdayOfDay");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "halfdayOfDay" + "'", str23, "halfdayOfDay");
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "halfdayOfDay" + "'", str25, "halfdayOfDay");
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test01099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01099");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long12 = dateTimeField9.set((long) 5, "0120-01-01T00:00:00.000Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0120-01-01T00:00:00.000Z\" for hourOfHalfday is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test01100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01100");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(10);
        org.joda.time.Instant instant14 = dateTime13.toInstant();
        org.joda.time.DateTime dateTime16 = dateTime13.plusMillis(23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime16.withDate(366, 22, 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test01101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01101");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.Chronology chronology8 = partial1.getChronology();
        org.joda.time.Partial partial9 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        int int10 = partial1.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType12 = partial1.getFieldType((-973006525));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -973006525");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test01102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01102");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder1.addUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder5 = builder1.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder1.setVariant("DateTimeField[era]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: DateTimeField[era] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test01103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01103");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial2 = new org.joda.time.Partial(dateTimeFieldType0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01104");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        long long16 = chronology12.set((org.joda.time.ReadablePartial) partial14, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = partial14.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial14.getFormatter();
        int[] intArray19 = partial14.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = partial14.getValue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
    }

    @Test
    public void test01105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01105");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        org.joda.time.Interval interval16 = property12.toInterval();
        org.joda.time.DateTimeField dateTimeField17 = property12.getField();
        long long19 = dateTimeField17.roundHalfEven((-981L));
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int int25 = partial22.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = partial22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.Chronology chronology28 = chronology26.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 0, chronology26);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.minus(readableDuration30);
        org.joda.time.Chronology chronology32 = dateTime29.getChronology();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        long long36 = chronology32.set((org.joda.time.ReadablePartial) partial34, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = partial34.getFieldTypes();
        java.util.Locale locale38 = java.util.Locale.PRC;
        boolean boolean39 = partial34.equals((java.lang.Object) locale38);
        int int40 = partial34.size();
        java.util.Locale locale45 = new java.util.Locale("coreano", "dayOfYear", "italien");
        java.lang.String str46 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) partial34, 366, locale45);
        long long48 = dateTimeField17.roundHalfEven((long) '4');
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-981L) + "'", long19 == (-981L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals(locale45.toString(), "coreano_DAYOFYEAR_italien");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "366" + "'", str46, "366");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 52L + "'", long48 == 52L);
    }

    @Test
    public void test01106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01106");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        boolean boolean7 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial3.getFormatter();
        org.joda.time.Chronology chronology10 = partial3.getChronology();
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = partial3.getFields();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        int int16 = partial13.compareTo((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        boolean boolean19 = partial15.isAfter((org.joda.time.ReadablePartial) partial18);
        java.lang.String str20 = partial18.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        org.joda.time.Partial partial22 = partial18.without(dateTimeFieldType21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial18.plus(readablePeriod23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial24.withPeriodAdded(readablePeriod25, 2000);
        boolean boolean28 = partial3.isAfter((org.joda.time.ReadablePartial) partial27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField30 = partial3.getField(2922789);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2922789");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test01107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01107");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime15 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime17 = dateTime15.withCenturyOfEra(12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = dateTime15.toString("years");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: r");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test01108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01108");
        java.util.Locale locale2 = new java.util.Locale("French (Canada)", "eras");
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        java.lang.Object obj4 = locale2.clone();
        org.junit.Assert.assertEquals(locale2.toString(), "french (canada)_ERAS");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "french (canada)_ERAS");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "french (canada)_ERAS");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "french (canada)_ERAS");
    }

    @Test
    public void test01109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01109");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property15 = dateTime11.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = dateTime11.withDate(86340, 2022, 8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test01110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01110");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        org.joda.time.Interval interval16 = property12.toInterval();
        org.joda.time.DateTime dateTime17 = property12.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(2);
        org.joda.time.DateTime.Property property20 = dateTime19.minuteOfHour();
        org.joda.time.DurationField durationField21 = property20.getDurationField();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test01111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01111");
        java.util.Locale locale1 = new java.util.Locale("fran\347ais (Canada)");
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.getDefault(category2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        int int8 = partial5.compareTo((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology9 = partial5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Chronology chronology11 = chronology9.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.weekOfWeekyear();
        java.util.Locale locale13 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        int int16 = dateTimeField12.getMaximumTextLength(locale14);
        java.util.Locale.setDefault(category2, locale14);
        java.lang.String str18 = locale1.getDisplayVariant(locale14);
        java.util.Locale.setDefault(locale1);
        java.lang.String str20 = locale1.getDisplayCountry();
        org.junit.Assert.assertEquals(locale1.toString(), "fran\347ais (canada)");
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "fran\347ais (Canada)" + "'", str15, "fran\347ais (Canada)");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test01112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01112");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTime dateTime14 = dateTime9.withWeekyear(23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = dateTime14.withYearOfCentury((-27409536));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -27409536 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test01113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01113");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        boolean boolean30 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology31 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.clockhourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Partial partial36 = new org.joda.time.Partial(dateTimeFieldType34, 12);
        org.joda.time.Chronology chronology37 = partial36.getChronology();
        java.lang.String str39 = partial36.toString("days");
        java.util.Locale.Builder builder40 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder41 = builder40.clearExtensions();
        java.util.Locale.Builder builder42 = builder40.clear();
        java.util.Locale locale43 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str44 = locale43.getDisplayCountry();
        java.util.Locale.Builder builder45 = builder40.setLocale(locale43);
        java.lang.String str46 = locale43.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = dateTimeField33.getAsText((org.joda.time.ReadablePartial) partial36, locale43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'clockhourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\ufffd\ufffd\ufffd\ufffd" + "'", str39, "\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Canada" + "'", str44, "Canada");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "fr" + "'", str46, "fr");
    }

    @Test
    public void test01114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01114");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        int int16 = dateTime9.getMinuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime9.withMillisOfSecond((-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test01115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01115");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology8.getZone();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 5, dateTimeZone10);
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        long long14 = dateTime12.getMillis();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 5L + "'", long14 == 5L);
    }

    @Test
    public void test01116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01116");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime21.toMutableDateTime();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        int int28 = partial25.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = partial25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Chronology chronology31 = chronology29.withZone(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 0, chronology29);
        org.joda.time.DateTime dateTime34 = dateTime32.withHourOfDay(0);
        org.joda.time.DateTime dateTime36 = dateTime34.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime36.toMutableDateTime();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        int int43 = partial40.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = partial40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology44.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) 0, chronology44);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.minus(readableDuration48);
        org.joda.time.DateTime.Property property50 = dateTime49.millisOfSecond();
        boolean boolean51 = mutableDateTime37.isBefore((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime53 = dateTime49.withYear(0);
        int int54 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime56 = dateTime21.withWeekOfWeekyear(233);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 233 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
    }

    @Test
    public void test01117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01117");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale6.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withLocale(locale6);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(0);
        int int22 = dateTime21.getCenturyOfEra();
        boolean boolean24 = dateTime21.equals((java.lang.Object) '4');
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        int int30 = partial27.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = partial27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 0, chronology31);
        org.joda.time.DateTime dateTime36 = dateTime34.withHourOfDay(0);
        int int37 = dateTime36.getCenturyOfEra();
        boolean boolean39 = dateTime36.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime40 = dateTime36.withEarlierOffsetAtOverlap();
        boolean boolean41 = dateTime21.isAfter((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime43 = dateTime40.minus((long) 3);
        org.joda.time.DateTime.Property property44 = dateTime40.minuteOfHour();
        org.joda.time.DateTime.Property property45 = dateTime40.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = dateTimeFormatter2.print((org.joda.time.ReadableInstant) dateTime40);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 19 + "'", int22 == 19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 19 + "'", int37 == 19);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test01118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01118");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        java.lang.String str15 = property12.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        int int21 = partial18.compareTo((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = partial18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Chronology chronology24 = chronology22.withZone(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 0, chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.millisOfDay();
        int int27 = dateTimeField26.getMinimumValue();
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = dateTimeField26.getAsShortText((long) (byte) -1, locale29);
        int int31 = property12.getMaximumShortTextLength(locale29);
        java.lang.String str32 = property12.getAsShortText();
        java.util.Locale locale34 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale35 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str36 = locale34.getDisplayName(locale35);
        java.lang.String str37 = locale35.getCountry();
        java.lang.String str38 = locale35.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime39 = property12.setCopy("French (Canada)", locale35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"French (Canada)\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[millisOfSecond]" + "'", str15, "Property[millisOfSecond]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "86399999" + "'", str30, "86399999");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0" + "'", str32, "0");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "fran\347ais (Canada)" + "'", str36, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "CA" + "'", str37, "CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Canada" + "'", str38, "Canada");
    }

    @Test
    public void test01119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01119");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        int int10 = partial7.compareTo((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime14.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime20 = dateTime14.withSecondOfMinute(0);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime14.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter2.withZone(dateTimeZone21);
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter25.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser27 = dateTimeFormatter25.getParser();
        int int28 = dateTimeFormatter25.getDefaultYear();
        org.joda.time.Chronology chronology29 = dateTimeFormatter25.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = null;
        org.joda.time.format.DateTimeParser dateTimeParser31 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter30, dateTimeParser31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = partial34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology40.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter32.withZone(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter25.withZone(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter22.withZone(dateTimeZone42);
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("AD");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter22.withLocale(locale48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate51 = dateTimeFormatter49.parseLocalDate("PM");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(dateTimeParser27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2000 + "'", int28 == 2000);
        org.junit.Assert.assertNull(chronology29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ad");
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
    }

    @Test
    public void test01120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01120");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes(1439);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime11.toMutableDateTime();
        org.joda.time.DateTime.Property property13 = dateTime11.year();
        org.joda.time.Chronology chronology14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) property13, chronology14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.DateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test01121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01121");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        org.joda.time.Interval interval16 = property12.toInterval();
        org.joda.time.DateTime dateTime17 = property12.roundHalfFloorCopy();
        java.lang.Class<?> wildcardClass18 = dateTime17.getClass();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test01122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01122");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        long long16 = chronology12.set((org.joda.time.ReadablePartial) partial14, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = partial14.getFieldTypes();
        java.util.Locale locale18 = java.util.Locale.PRC;
        boolean boolean19 = partial14.equals((java.lang.Object) locale18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial14.getFieldTypes();
        java.lang.Object obj21 = null;
        boolean boolean22 = partial14.equals(obj21);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = partial14.getValue(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test01123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01123");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        int int19 = partial16.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = partial16.getChronology();
        org.joda.time.DurationField durationField21 = durationFieldType14.getField(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.weekOfWeekyear();
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = dateTimeField22.getAsText(19, locale24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter13.withLocale(locale24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter26.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeFormatter27.getZone();
        java.io.Writer writer29 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter27.printTo(writer29, 27820800120L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "19" + "'", str25, "19");
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
    }

    @Test
    public void test01124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01124");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DurationField durationField8 = chronology5.eras();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.clockhourOfDay();
        int int11 = dateTimeField9.getLeapAmount(21168052L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test01125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01125");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2022-02-11T09:36:04.246Z", (double) (-31464000000L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-3.1464E10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01126");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        boolean boolean7 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        int int13 = partial10.compareTo((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = partial10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Chronology chronology16 = chronology14.withZone(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 0, chronology14);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        org.joda.time.DateTime dateTime21 = dateTime19.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime21.toMutableDateTime();
        org.joda.time.DateTime dateTime23 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        int int29 = partial26.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = partial26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology30);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.minus(readableDuration34);
        org.joda.time.DateTime dateTime37 = dateTime33.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime39 = dateTime33.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime41 = dateTime39.minusWeeks(19);
        org.joda.time.DateTime dateTime43 = dateTime39.plusMillis((int) '#');
        int int44 = dateTime43.getDayOfMonth();
        boolean boolean45 = partial3.equals((java.lang.Object) dateTime43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        int int50 = partial47.compareTo((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = partial47.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean53 = partial47.isSupported(dateTimeFieldType52);
        int int54 = dateTime43.get(dateTimeFieldType52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        int int60 = partial57.compareTo((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology61 = partial57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.Chronology chronology63 = chronology61.withZone(dateTimeZone62);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) 0, chronology61);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.DateTime dateTime66 = dateTime64.minus(readableDuration65);
        org.joda.time.Chronology chronology67 = dateTime64.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str69 = dateTimeFieldType68.getName();
        int int70 = dateTime64.get(dateTimeFieldType68);
        org.joda.time.DateTime dateTime72 = dateTime64.minusMinutes(4);
        org.joda.time.Instant instant73 = dateTime72.toInstant();
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((java.lang.Object) dateTime72);
        boolean boolean75 = dateTime43.equals((java.lang.Object) dateTime74);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime77 = dateTime74.withHourOfDay(292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "halfdayOfDay" + "'", str69, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test01127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01127");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        boolean boolean7 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        java.lang.String str8 = partial6.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = partial6.getFieldTypes();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readableDuration20);
        org.joda.time.DateTime dateTime23 = dateTime19.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime25 = dateTime19.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime27 = dateTime25.minusWeeks(19);
        org.joda.time.DateTime dateTime29 = dateTime25.plusMillis((int) '#');
        int int30 = dateTime29.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str32 = dateTimeFieldType31.getName();
        boolean boolean33 = dateTime29.isSupported(dateTimeFieldType31);
        org.joda.time.DateTime dateTime34 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime36 = dateTime34.withMinuteOfHour(31);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readableDuration47);
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime51 = dateTime46.withFieldAdded(durationFieldType49, 3);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.era();
        int int53 = dateTime46.get(dateTimeFieldType52);
        org.joda.time.DateTime dateTime55 = dateTime46.plusSeconds(3);
        org.joda.time.DateTime dateTime57 = dateTime55.plusMillis((int) (short) 0);
        int int58 = dateTime57.getCenturyOfEra();
        int int59 = dateTime34.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime.Property property60 = dateTime57.dayOfMonth();
        org.joda.time.format.DateTimePrinter dateTimePrinter61 = null;
        org.joda.time.format.DateTimeParser dateTimeParser62 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter61, dateTimeParser62);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter63.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser65 = dateTimeFormatter63.getParser();
        int int66 = dateTimeFormatter63.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter63.withZoneUTC();
        java.util.Locale locale68 = java.util.Locale.CHINA;
        java.lang.String str69 = locale68.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter67.withLocale(locale68);
        java.lang.String str71 = locale68.getLanguage();
        java.util.Set<java.lang.String> strSet72 = locale68.getUnicodeLocaleAttributes();
        java.lang.String str73 = locale68.getLanguage();
        int int74 = property60.getMaximumShortTextLength(locale68);
        java.lang.String str75 = locale68.getISO3Country();
        java.lang.String str76 = locale68.getCountry();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "halfdayOfDay" + "'", str32, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 19 + "'", int58 == 19);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNull(dateTimeParser65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2000 + "'", int66 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "CN" + "'", str69, "CN");
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "zh" + "'", str71, "zh");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "zh" + "'", str73, "zh");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "CHN" + "'", str75, "CHN");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "CN" + "'", str76, "CN");
    }

    @Test
    public void test01128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01128");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        long long16 = chronology12.set((org.joda.time.ReadablePartial) partial14, (long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int18 = partial14.get(dateTimeFieldType17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }

    @Test
    public void test01129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01129");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = partial8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology12);
        org.joda.time.DateTime dateTime17 = dateTime15.withHourOfDay(0);
        org.joda.time.DateTime dateTime18 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Instant instant19 = dateTime17.toInstant();
        org.joda.time.DateTime.Property property20 = dateTime17.yearOfEra();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int int25 = partial22.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        boolean boolean28 = partial24.isAfter((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = partial31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 0, chronology35);
        org.joda.time.DateTime dateTime40 = dateTime38.withHourOfDay(0);
        org.joda.time.DateTime dateTime42 = dateTime40.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime42.toMutableDateTime();
        org.joda.time.DateTime dateTime44 = partial24.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        int int50 = partial47.compareTo((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = partial47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.Chronology chronology53 = chronology51.withZone(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) 0, chronology51);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.minus(readableDuration55);
        org.joda.time.DateTime dateTime58 = dateTime54.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime60 = dateTime54.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime62 = dateTime60.minusWeeks(19);
        org.joda.time.DateTime dateTime64 = dateTime60.plusMillis((int) '#');
        int int65 = dateTime64.getDayOfMonth();
        boolean boolean66 = partial24.equals((java.lang.Object) dateTime64);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        int int71 = partial68.compareTo((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = partial68.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean74 = partial68.isSupported(dateTimeFieldType73);
        int int75 = dateTime64.get(dateTimeFieldType73);
        int int76 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime78 = dateTime64.plusWeeks(100);
        org.joda.time.DateTime dateTime80 = dateTime64.minusMillis((-52));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
    }

    @Test
    public void test01130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01130");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = chronology12.getDateTimeMillis(946684800000L, 0, 999, 72, 19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 999 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test01131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01131");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        int int10 = partial7.compareTo((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime14.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime20 = dateTime14.withSecondOfMinute(0);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime14.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter2.withZone(dateTimeZone21);
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter25.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser27 = dateTimeFormatter25.getParser();
        int int28 = dateTimeFormatter25.getDefaultYear();
        org.joda.time.Chronology chronology29 = dateTimeFormatter25.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = null;
        org.joda.time.format.DateTimeParser dateTimeParser31 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter30, dateTimeParser31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = partial34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology40.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter32.withZone(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter25.withZone(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter22.withZone(dateTimeZone42);
        java.lang.Appendable appendable47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = partial48.getFormatter();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        int int54 = partial51.compareTo((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        boolean boolean57 = partial53.isAfter((org.joda.time.ReadablePartial) partial56);
        java.lang.String str58 = partial56.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        org.joda.time.Partial partial60 = partial56.without(dateTimeFieldType59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        int int66 = partial63.compareTo((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology67 = partial63.getChronology();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.Chronology chronology69 = chronology67.withZone(dateTimeZone68);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) 0, chronology67);
        org.joda.time.DateTimeField dateTimeField71 = chronology67.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField72 = chronology67.yearOfCentury();
        org.joda.time.Partial partial73 = partial60.withChronologyRetainFields(chronology67);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = new org.joda.time.Partial(chronology76);
        int int78 = partial75.compareTo((org.joda.time.ReadablePartial) partial77);
        org.joda.time.Chronology chronology79 = partial75.getChronology();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Partial partial82 = new org.joda.time.Partial(chronology81);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Partial partial84 = new org.joda.time.Partial(chronology83);
        int int85 = partial82.compareTo((org.joda.time.ReadablePartial) partial84);
        org.joda.time.Chronology chronology86 = partial82.getChronology();
        org.joda.time.DateTimeZone dateTimeZone87 = null;
        org.joda.time.Chronology chronology88 = chronology86.withZone(dateTimeZone87);
        org.joda.time.DateTime dateTime89 = new org.joda.time.DateTime((long) 0, chronology86);
        org.joda.time.DateTime dateTime91 = dateTime89.withHourOfDay(0);
        org.joda.time.DateTime dateTime92 = partial75.toDateTime((org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.DateMidnight dateMidnight93 = dateTime92.toDateMidnight();
        boolean boolean94 = partial73.isMatch((org.joda.time.ReadableInstant) dateTime92);
        int[] intArray95 = partial73.getValues();
        boolean boolean96 = partial48.isAfter((org.joda.time.ReadablePartial) partial73);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter46.printTo(appendable47, (org.joda.time.ReadablePartial) partial48);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(dateTimeParser27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2000 + "'", int28 == 2000);
        org.junit.Assert.assertNull(chronology29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNull(dateTimeFormatter49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[]" + "'", str58, "[]");
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateMidnight93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test01132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01132");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        java.lang.String str1 = partial0.toStringList();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = partial0.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[]" + "'", str1, "[]");
    }

    @Test
    public void test01133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01133");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str1 = dateTimeFieldType0.getName();
        java.lang.String str2 = dateTimeFieldType0.getName();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType0.getDurationType();
        java.lang.String str4 = dateTimeFieldType0.getName();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = partial8.getChronology();
        org.joda.time.DurationField durationField13 = durationFieldType6.getField(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) dateTimeFieldType0, chronology12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "halfdayOfDay" + "'", str1, "halfdayOfDay");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "halfdayOfDay" + "'", str2, "halfdayOfDay");
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "halfdayOfDay" + "'", str4, "halfdayOfDay");
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test01134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01134");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(86399, 13, 366, 43200, 999, (int) 'u');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 43200 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01135");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        int int16 = property12.getLeapAmount();
        org.joda.time.DateTime dateTime17 = property12.withMinimumValue();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.Chronology chronology30 = dateTime27.getChronology();
        org.joda.time.DateTime dateTime32 = dateTime27.withWeekyear(23);
        long long33 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime35 = property12.addToCopy((int) (byte) 100);
        int int36 = property12.getMinimumValue();
        java.lang.String str37 = property12.getAsText();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0" + "'", str37, "0");
    }

    @Test
    public void test01136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01136");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime15 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime17 = dateTime15.withCenturyOfEra((int) '#');
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.Chronology chronology30 = dateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfMonth();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        int int36 = partial33.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        boolean boolean39 = partial35.isAfter((org.joda.time.ReadablePartial) partial38);
        java.lang.String str40 = partial38.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        org.joda.time.Partial partial42 = partial38.without(dateTimeFieldType41);
        java.util.Locale locale44 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale45 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str46 = locale44.getDisplayName(locale45);
        java.lang.String str47 = locale44.getDisplayVariant();
        java.util.Locale locale48 = locale44.stripExtensions();
        java.lang.String str49 = dateTimeField31.getAsText((org.joda.time.ReadablePartial) partial38, 53, locale48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        int int54 = partial51.compareTo((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = partial51.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean57 = partial51.isSupported(dateTimeFieldType56);
        org.joda.time.Chronology chronology58 = partial51.getChronology();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial51.plus(readablePeriod59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean62 = partial51.isSupported(dateTimeFieldType61);
        boolean boolean63 = partial38.isSupported(dateTimeFieldType61);
        boolean boolean64 = dateTime15.isSupported(dateTimeFieldType61);
        boolean boolean66 = dateTime15.isEqual(86399999L);
        long long67 = dateTime15.getMillis();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "fran\347ais (Canada)" + "'", str46, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "53" + "'", str49, "53");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
    }

    @Test
    public void test01137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01137");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.minus(readableDuration11);
        long long13 = dateTime12.getMillis();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        int int19 = partial16.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = partial16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Chronology chronology22 = chronology20.withZone(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 0, chronology20);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.minus(readableDuration24);
        org.joda.time.DateTime dateTime27 = dateTime23.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime29 = dateTime23.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime31 = dateTime29.minusWeeks(19);
        int int32 = dateTime31.getSecondOfMinute();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = partial35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 0, chronology39);
        org.joda.time.DateTime dateTime44 = dateTime42.withHourOfDay(0);
        org.joda.time.DateTime dateTime46 = dateTime44.withYear((int) 'a');
        boolean boolean47 = dateTime44.isEqualNow();
        org.joda.time.DateMidnight dateMidnight48 = dateTime44.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone49 = dateMidnight48.getZone();
        org.joda.time.DateTime dateTime50 = dateTime31.withZoneRetainFields(dateTimeZone49);
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime12.toMutableDateTime(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) '4', dateTimeZone49);
        java.util.Locale.Builder builder53 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder54 = builder53.clearExtensions();
        java.util.Locale.Builder builder55 = builder54.clearExtensions();
        java.util.Locale.Builder builder57 = builder54.setVariant("");
        java.util.Locale.Builder builder58 = builder54.clearExtensions();
        java.util.Locale.Builder builder59 = builder54.clear();
        boolean boolean60 = dateTime52.equals((java.lang.Object) builder54);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder63 = builder54.setExtension(' ', "mardi");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test01138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01138");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.DateTime dateTime15 = property14.withMinimumValue();
        boolean boolean16 = dateTime15.isAfterNow();
        java.util.GregorianCalendar gregorianCalendar17 = dateTime15.toGregorianCalendar();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.Chronology chronology30 = dateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfMonth();
        org.joda.time.Chronology chronology32 = chronology30.withUTC();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.dayOfYear();
        int int34 = dateTime15.get(dateTimeField33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        int int40 = partial37.compareTo((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = partial37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.Chronology chronology43 = chronology41.withZone(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 0, chronology41);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.minus(readableDuration45);
        org.joda.time.Chronology chronology47 = dateTime44.getChronology();
        org.joda.time.DateTime.Property property48 = dateTime44.weekyear();
        org.joda.time.DateTime dateTime49 = property48.roundHalfEvenCopy();
        boolean boolean50 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime52 = dateTime49.withHourOfDay((-52));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -52 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test01139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01139");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DurationField durationField7 = durationFieldType0.getField(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        java.lang.String str10 = dateTimeField9.toString();
        java.util.Locale locale15 = new java.util.Locale("fr-CA", "1", "86399999");
        java.lang.String str16 = dateTimeField9.getAsShortText(19, locale15);
        java.lang.String str17 = locale15.getDisplayScript();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str10, "DateTimeField[dayOfMonth]");
        org.junit.Assert.assertEquals(locale15.toString(), "fr-ca_1_86399999");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "19" + "'", str16, "19");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test01140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01140");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readableDuration25);
        long long27 = dateTime26.getMillis();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int int32 = partial29.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        boolean boolean35 = partial31.isAfter((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        int int41 = partial38.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 0, chronology42);
        org.joda.time.DateTime dateTime47 = dateTime45.withHourOfDay(0);
        org.joda.time.DateTime dateTime49 = dateTime47.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime49.toMutableDateTime();
        org.joda.time.DateTime dateTime51 = partial31.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        int int57 = partial54.compareTo((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Chronology chronology58 = partial54.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 0, chronology58);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.DateTime dateTime63 = dateTime61.minus(readableDuration62);
        org.joda.time.DateTime dateTime65 = dateTime61.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime67 = dateTime61.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime69 = dateTime67.minusWeeks(19);
        org.joda.time.DateTime dateTime71 = dateTime67.plusMillis((int) '#');
        int int72 = dateTime71.getDayOfMonth();
        boolean boolean73 = partial31.equals((java.lang.Object) dateTime71);
        boolean boolean74 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime71);
        boolean boolean75 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime71);
        java.lang.Class<?> wildcardClass76 = dateTime71.getClass();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test01141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01141");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str14 = dateTimeFieldType13.getName();
        int int15 = dateTime9.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime17 = dateTime9.minusMinutes(4);
        org.joda.time.Instant instant18 = dateTime17.toInstant();
        org.joda.time.DateTime.Property property19 = dateTime17.weekyear();
        org.joda.time.DateTime dateTime20 = property19.roundHalfCeilingCopy();
        java.util.Date date21 = dateTime20.toDate();
        org.joda.time.Chronology chronology22 = dateTime20.getChronology();
        java.util.Date date23 = dateTime20.toDate();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "halfdayOfDay" + "'", str14, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Mon Dec 29 00:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Dec 29 00:00:00 UTC 1969");
    }

    @Test
    public void test01142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01142");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readableDuration20);
        org.joda.time.Chronology chronology22 = dateTime19.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        long long26 = chronology22.set((org.joda.time.ReadablePartial) partial24, (long) (byte) -1);
        int[] intArray28 = chronology6.get((org.joda.time.ReadablePartial) partial24, (long) ' ');
        org.joda.time.DurationField durationField29 = chronology6.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology6.dayOfYear();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        int int35 = partial32.compareTo((org.joda.time.ReadablePartial) partial34);
        java.lang.String str36 = partial32.toString();
        org.joda.time.Partial partial37 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial32);
        java.util.Locale.Category category39 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale40 = java.util.Locale.getDefault(category39);
        java.util.Locale locale41 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale42 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str43 = locale41.getDisplayName(locale42);
        java.lang.String str44 = locale41.toLanguageTag();
        java.lang.String str45 = locale41.getScript();
        java.lang.String str46 = locale40.getDisplayCountry(locale41);
        java.lang.String str47 = dateTimeField30.getAsText((org.joda.time.ReadablePartial) partial32, 52, locale40);
        int int48 = dateTimeField30.getMaximumValue();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.FORMAT + "'", category39.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale40);
// flaky:         org.junit.Assert.assertEquals(locale40.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "fran\347ais (Canada)" + "'", str43, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fr-CA" + "'", str44, "fr-CA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Canada" + "'", str46, "Canada");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "52" + "'", str47, "52");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 366 + "'", int48 == 366);
    }

    @Test
    public void test01143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01143");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder1.setVariant("");
        java.util.Locale locale5 = builder1.build();
        java.util.Locale locale6 = builder1.build();
        java.lang.String str7 = locale6.toLanguageTag();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        int int13 = partial10.compareTo((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = partial10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Chronology chronology16 = chronology14.withZone(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 0, chronology14);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.minus(readableDuration18);
        org.joda.time.DateTime dateTime21 = dateTime17.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfYear();
        java.lang.String str23 = property22.getName();
        int int24 = property22.get();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = property22.getAsText(locale25);
        java.lang.String str27 = locale6.getDisplayLanguage(locale25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = locale6.getUnicodeLocaleType("CAN");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: CAN");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "und" + "'", str7, "und");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "dayOfYear" + "'", str23, "dayOfYear");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test01144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01144");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        long long12 = dateTime11.getMillis();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        boolean boolean20 = partial16.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.DateTime dateTime32 = dateTime30.withHourOfDay(0);
        org.joda.time.DateTime dateTime34 = dateTime32.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime34.toMutableDateTime();
        org.joda.time.DateTime dateTime36 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readableDuration47);
        org.joda.time.DateTime dateTime50 = dateTime46.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime52 = dateTime46.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime54 = dateTime52.minusWeeks(19);
        org.joda.time.DateTime dateTime56 = dateTime52.plusMillis((int) '#');
        int int57 = dateTime56.getDayOfMonth();
        boolean boolean58 = partial16.equals((java.lang.Object) dateTime56);
        boolean boolean59 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime61 = dateTime56.plusSeconds(2);
        org.joda.time.DateTime.Property property62 = dateTime56.secondOfDay();
        java.util.Locale locale65 = new java.util.Locale("[]", "[]");
        int int66 = property62.getMaximumShortTextLength(locale65);
        java.lang.String str67 = property62.getAsText();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertEquals(locale65.toString(), "[]_[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0" + "'", str67, "0");
    }

    @Test
    public void test01145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01145");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("fra");
        java.util.Locale.Builder builder6 = builder0.setVariant("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.removeUnicodeLocaleAttribute("weekyearOfCentury");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: weekyearOfCentury [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test01146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01146");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        org.joda.time.DateTime dateTime14 = dateTime11.minus((long) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear(70);
        int int17 = dateTime16.getDayOfMonth();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        boolean boolean20 = locale19.hasExtensions();
        java.lang.String str21 = locale19.getDisplayCountry();
        java.lang.String str22 = locale19.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = dateTime16.toString("centuryOfEra", locale19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: c");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cor\351en" + "'", str22, "cor\351en");
    }

    @Test
    public void test01147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01147");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter3.getParser();
        boolean boolean6 = dateTimeFormatter3.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.parse("weekyear", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
    }

    @Test
    public void test01148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01148");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology21.getZone();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeFormatter2.getZone();
        java.io.Writer writer27 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer27, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNull(dateTimeZone26);
    }

    @Test
    public void test01149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01149");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 0, chronology8);
        org.joda.time.DateTimeField dateTimeField12 = chronology8.millisOfDay();
        int int13 = dateTimeField12.getMinimumValue();
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = dateTimeField12.getAsShortText((long) (byte) -1, locale15);
        java.lang.String str17 = locale1.getDisplayCountry(locale15);
        java.lang.String str18 = locale1.getCountry();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "86399999" + "'", str16, "86399999");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test01150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01150");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        boolean boolean7 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        java.lang.String str8 = partial6.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = partial6.getFieldTypes();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readableDuration20);
        org.joda.time.DateTime dateTime23 = dateTime19.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime25 = dateTime19.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime27 = dateTime25.minusWeeks(19);
        org.joda.time.DateTime dateTime29 = dateTime25.plusMillis((int) '#');
        int int30 = dateTime29.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str32 = dateTimeFieldType31.getName();
        boolean boolean33 = dateTime29.isSupported(dateTimeFieldType31);
        org.joda.time.DateTime dateTime34 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime36 = dateTime34.withMinuteOfHour(31);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readableDuration47);
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime51 = dateTime46.withFieldAdded(durationFieldType49, 3);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.era();
        int int53 = dateTime46.get(dateTimeFieldType52);
        org.joda.time.DateTime dateTime55 = dateTime46.plusSeconds(3);
        org.joda.time.DateTime dateTime57 = dateTime55.plusMillis((int) (short) 0);
        int int58 = dateTime57.getCenturyOfEra();
        int int59 = dateTime34.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime.Property property60 = dateTime57.dayOfMonth();
        org.joda.time.format.DateTimePrinter dateTimePrinter61 = null;
        org.joda.time.format.DateTimeParser dateTimeParser62 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter61, dateTimeParser62);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter63.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser65 = dateTimeFormatter63.getParser();
        int int66 = dateTimeFormatter63.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter63.withZoneUTC();
        java.util.Locale locale68 = java.util.Locale.CHINA;
        java.lang.String str69 = locale68.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter67.withLocale(locale68);
        java.lang.String str71 = locale68.getLanguage();
        java.util.Set<java.lang.String> strSet72 = locale68.getUnicodeLocaleAttributes();
        java.lang.String str73 = locale68.getLanguage();
        int int74 = property60.getMaximumShortTextLength(locale68);
        java.lang.String str75 = locale68.getISO3Country();
        java.util.Locale.setDefault(locale68);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "halfdayOfDay" + "'", str32, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 19 + "'", int58 == 19);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNull(dateTimeParser65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2000 + "'", int66 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "CN" + "'", str69, "CN");
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "zh" + "'", str71, "zh");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "zh" + "'", str73, "zh");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "CHN" + "'", str75, "CHN");
    }

    @Test
    public void test01151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01151");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime21.toMutableDateTime();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        int int28 = partial25.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = partial25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Chronology chronology31 = chronology29.withZone(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 0, chronology29);
        org.joda.time.DateTime dateTime34 = dateTime32.withHourOfDay(0);
        org.joda.time.DateTime dateTime36 = dateTime34.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime36.toMutableDateTime();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        int int43 = partial40.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = partial40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology44.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) 0, chronology44);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.minus(readableDuration48);
        org.joda.time.DateTime.Property property50 = dateTime49.millisOfSecond();
        boolean boolean51 = mutableDateTime37.isBefore((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime53 = dateTime49.withYear(0);
        int int54 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime49);
        int int55 = dateTime21.getDayOfWeek();
        org.joda.time.DateTime dateTime57 = dateTime21.minusYears(8);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test01152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01152");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-11T09:36:04.246Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:36:04.246z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01153");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTime.Property property13 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime15 = dateTime9.withMillisOfDay((int) 'a');
        org.joda.time.DateTime.Property property16 = dateTime9.monthOfYear();
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = locale17.toLanguageTag();
        java.lang.String str21 = locale17.toLanguageTag();
        java.lang.String str22 = locale17.getDisplayScript();
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayScript(locale24);
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str27 = locale26.getDisplayCountry();
        java.lang.String str28 = locale24.getDisplayName(locale26);
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.lang.String str30 = locale26.getDisplayScript(locale29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        int int36 = partial33.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = partial33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 0, chronology37);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.minus(readableDuration41);
        org.joda.time.DateTime dateTime44 = dateTime40.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime46 = dateTime40.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime48 = dateTime46.minusWeeks(19);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        int int56 = partial53.compareTo((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Chronology chronology57 = partial53.getChronology();
        org.joda.time.DurationField durationField58 = durationFieldType51.getField(chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.dayOfMonth();
        org.joda.time.DateTime dateTime61 = dateTime50.toDateTime(chronology57);
        org.joda.time.Chronology chronology62 = chronology57.withUTC();
        org.joda.time.DateTimeField dateTimeField63 = chronology57.hourOfDay();
        long long65 = dateTimeField63.roundHalfFloor(86399999L);
        java.util.Locale locale66 = java.util.Locale.CANADA_FRENCH;
        boolean boolean67 = locale66.hasExtensions();
        int int68 = dateTimeField63.getMaximumTextLength(locale66);
        java.util.Locale locale69 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str70 = locale66.getDisplayName(locale69);
        java.lang.String str71 = locale66.getDisplayScript();
        java.lang.String str72 = locale29.getDisplayScript(locale66);
        boolean boolean73 = locale66.hasExtensions();
        java.lang.String str74 = locale17.getDisplayScript(locale66);
        int int75 = property16.getMaximumShortTextLength(locale17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime77 = property16.setCopy((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "fran\347ais (Canada)" + "'", str19, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fr-CA" + "'", str20, "fr-CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fr-CA" + "'", str21, "fr-CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u52a0\u62ff\u5927" + "'", str27, "\u52a0\u62ff\u5927");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "cor\351en" + "'", str28, "cor\351en");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 86400000L + "'", long65 == 86400000L);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "fran\347ais (Canada)" + "'", str70, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 5 + "'", int75 == 5);
    }

    @Test
    public void test01154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01154");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.months();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfDay();
        long long16 = dateTimeField14.roundHalfFloor((long) 2000);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        int int22 = partial19.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = partial19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 0, chronology23);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.minus(readableDuration27);
        org.joda.time.Chronology chronology29 = dateTime26.getChronology();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        long long33 = chronology29.set((org.joda.time.ReadablePartial) partial31, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = partial31.getFieldTypes();
        java.util.Locale locale35 = java.util.Locale.PRC;
        boolean boolean36 = partial31.equals((java.lang.Object) locale35);
        int int37 = partial31.size();
        org.joda.time.Chronology chronology38 = partial31.getChronology();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial31.minus(readablePeriod39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        int int45 = partial42.compareTo((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = partial42.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean48 = partial42.isSupported(dateTimeFieldType47);
        org.joda.time.Chronology chronology49 = partial42.getChronology();
        org.joda.time.Partial partial50 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial42);
        int int51 = partial40.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = partial53.getFormatter();
        org.joda.time.Chronology chronology55 = partial53.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = partial53.getFieldTypes();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        int int61 = partial58.compareTo((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        boolean boolean64 = partial60.isAfter((org.joda.time.ReadablePartial) partial63);
        java.lang.String str65 = partial63.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        org.joda.time.Partial partial67 = partial63.without(dateTimeFieldType66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial69 = partial63.plus(readablePeriod68);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = new org.joda.time.Partial(chronology72);
        int int74 = partial71.compareTo((org.joda.time.ReadablePartial) partial73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = new org.joda.time.Partial(chronology75);
        boolean boolean77 = partial73.isAfter((org.joda.time.ReadablePartial) partial76);
        org.joda.time.Partial partial78 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial73);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = partial73.getFormatter();
        int int80 = partial69.compareTo((org.joda.time.ReadablePartial) partial73);
        int[] intArray81 = partial69.getValues();
        org.joda.time.Partial partial82 = new org.joda.time.Partial(dateTimeFieldTypeArray56, intArray81);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray84 = dateTimeField14.addWrapPartial((org.joda.time.ReadablePartial) partial42, 292278993, intArray81, (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 292278993");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[]" + "'", str65, "[]");
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(dateTimeFormatter79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
    }

    @Test
    public void test01155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01155");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial6.withPeriodAdded(readablePeriod7, 2);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readableDuration20);
        org.joda.time.Chronology chronology22 = dateTime19.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        long long26 = chronology22.set((org.joda.time.ReadablePartial) partial24, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial24.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = partial24.getFormatter();
        boolean boolean29 = partial9.isMatch((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        int int35 = partial32.compareTo((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology36 = partial32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.Chronology chronology38 = chronology36.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 0, chronology36);
        org.joda.time.DateTime dateTime41 = dateTime39.withHourOfDay(0);
        int int42 = dateTime41.getCenturyOfEra();
        boolean boolean44 = dateTime41.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property45 = dateTime41.era();
        int int46 = property45.getMaximumValue();
        org.joda.time.DateTime dateTime47 = property45.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property45.getFieldType();
        org.joda.time.DurationFieldType durationFieldType49 = dateTimeFieldType48.getDurationType();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        int int54 = partial51.compareTo((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = partial51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.Chronology chronology57 = chronology55.withZone(dateTimeZone56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField61 = chronology57.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField62 = chronology57.year();
        org.joda.time.DurationField durationField63 = durationFieldType49.getField(chronology57);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial65 = partial24.withFieldAddWrapped(durationFieldType49, (-694733));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'eras' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNull(dateTimeFormatter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 19 + "'", int42 == 19);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
    }

    @Test
    public void test01156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01156");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology21.getZone();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = dateTimeFormatter2.parseLocalDateTime("Property[millisOfSecond]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
    }

    @Test
    public void test01157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01157");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toString();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        int int14 = partial11.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = partial11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 0, chronology15);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.minus(readableDuration19);
        org.joda.time.Chronology chronology21 = dateTime18.getChronology();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.weekOfWeekyear();
        int int32 = dateTimeField30.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        boolean boolean40 = partial36.isAfter((org.joda.time.ReadablePartial) partial39);
        java.lang.String str41 = partial39.toString();
        java.util.Locale locale43 = null;
        java.lang.String str44 = dateTimeField30.getAsShortText((org.joda.time.ReadablePartial) partial39, 53, locale43);
        long long46 = chronology21.set((org.joda.time.ReadablePartial) partial39, (long) 0);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        int int52 = partial49.compareTo((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = partial49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 0, chronology53);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.minus(readableDuration57);
        org.joda.time.Chronology chronology59 = dateTime56.getChronology();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        long long63 = chronology59.set((org.joda.time.ReadablePartial) partial61, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray64 = partial61.getFieldTypes();
        java.util.Locale locale65 = java.util.Locale.PRC;
        boolean boolean66 = partial61.equals((java.lang.Object) locale65);
        int int67 = partial61.size();
        boolean boolean68 = partial39.isMatch((org.joda.time.ReadablePartial) partial61);
        boolean boolean69 = partial1.isAfter((org.joda.time.ReadablePartial) partial39);
        java.util.Locale.Builder builder70 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder71 = builder70.clearExtensions();
        java.util.Locale.Builder builder72 = builder71.clearExtensions();
        boolean boolean73 = partial39.equals((java.lang.Object) builder71);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = new org.joda.time.Partial(chronology75);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Partial partial78 = new org.joda.time.Partial(chronology77);
        int int79 = partial76.compareTo((org.joda.time.ReadablePartial) partial78);
        org.joda.time.Chronology chronology80 = partial76.getChronology();
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.Chronology chronology82 = chronology80.withZone(dateTimeZone81);
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime((long) 0, chronology80);
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.DateTime dateTime85 = dateTime83.minus(readableDuration84);
        org.joda.time.Chronology chronology86 = dateTime83.getChronology();
        org.joda.time.DateTimeField dateTimeField87 = chronology86.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = dateTimeField87.getType();
        org.joda.time.DurationFieldType durationFieldType89 = dateTimeFieldType88.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial91 = partial39.withFieldAdded(durationFieldType89, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'years' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 53 + "'", int32 == 53);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "53" + "'", str44, "53");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertNotNull(durationFieldType89);
    }

    @Test
    public void test01158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01158");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DurationField durationField7 = durationFieldType0.getField(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekyearOfCentury();
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        boolean boolean12 = locale11.hasExtensions();
        java.util.Set<java.lang.Character> charSet13 = locale11.getExtensionKeys();
        java.lang.String str14 = dateTimeField9.getAsShortText(2000, locale11);
        long long16 = dateTimeField9.roundHalfEven((long) 12);
        boolean boolean17 = dateTimeField9.isSupported();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        int int22 = partial19.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = partial19.getChronology();
        java.lang.String str24 = partial19.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        int int30 = partial27.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = partial27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 0, chronology31);
        org.joda.time.DateTime dateTime36 = dateTime34.withHourOfDay(0);
        int int37 = dateTime36.getCenturyOfEra();
        boolean boolean39 = dateTime36.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property40 = dateTime36.era();
        org.joda.time.DateTime dateTime42 = dateTime36.withHourOfDay(12);
        org.joda.time.DateTime dateTime43 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = partial19.toString(dateTimeFormatter44);
        int[] intArray46 = partial19.getValues();
        int[] intArray47 = partial19.getValues();
        org.joda.time.Chronology chronology48 = partial19.getChronology();
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.days();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        int int56 = partial53.compareTo((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Chronology chronology57 = partial53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.Chronology chronology59 = chronology57.withZone(dateTimeZone58);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 0, chronology57);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.DateTime dateTime62 = dateTime60.minus(readableDuration61);
        org.joda.time.Chronology chronology63 = dateTime60.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField65 = chronology63.dayOfWeek();
        org.joda.time.DurationField durationField66 = chronology63.seconds();
        org.joda.time.DurationField durationField67 = durationFieldType50.getField(chronology63);
        org.joda.time.DurationField durationField68 = chronology63.weekyears();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = new org.joda.time.Partial(chronology72);
        int int74 = partial71.compareTo((org.joda.time.ReadablePartial) partial73);
        org.joda.time.Chronology chronology75 = partial71.getChronology();
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.Chronology chronology77 = chronology75.withZone(dateTimeZone76);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) 0, chronology75);
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.DateTime dateTime80 = dateTime78.minus(readableDuration79);
        org.joda.time.Chronology chronology81 = dateTime78.getChronology();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Partial partial83 = new org.joda.time.Partial(chronology82);
        long long85 = chronology81.set((org.joda.time.ReadablePartial) partial83, (long) (byte) -1);
        long long87 = chronology63.set((org.joda.time.ReadablePartial) partial83, (long) 86399999);
        org.joda.time.DateTimeField[] dateTimeFieldArray88 = partial83.getFields();
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        org.joda.time.Partial partial90 = partial83.plus(readablePeriod89);
        int[] intArray91 = partial90.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray93 = dateTimeField9.set((org.joda.time.ReadablePartial) partial19, 86399, intArray91, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for weekyearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2000" + "'", str14, "2000");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 19 + "'", int37 == 19);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-1L) + "'", long85 == (-1L));
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 86399999L + "'", long87 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldArray88);
        org.junit.Assert.assertNotNull(partial90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
    }

    @Test
    public void test01159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01159");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        org.joda.time.Interval interval16 = property12.toInterval();
        org.joda.time.DateTime dateTime17 = property12.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(2);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.plus(readableDuration20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.minus(readablePeriod22);
        org.joda.time.format.DateTimePrinter dateTimePrinter24 = null;
        org.joda.time.format.DateTimeParser dateTimeParser25 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter24, dateTimeParser25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        int int31 = partial28.compareTo((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology32 = partial28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone36 = chronology34.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter26.withZone(dateTimeZone36);
        int int38 = dateTimeFormatter37.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone39 = dateTimeFormatter37.getZone();
        org.joda.time.DateTime dateTime40 = dateTime23.withZone(dateTimeZone39);
        org.joda.time.format.DateTimePrinter dateTimePrinter41 = null;
        org.joda.time.format.DateTimeParser dateTimeParser42 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter41, dateTimeParser42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter43.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser45 = dateTimeFormatter43.getParser();
        int int46 = dateTimeFormatter43.getDefaultYear();
        org.joda.time.Chronology chronology47 = dateTimeFormatter43.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter48 = null;
        org.joda.time.format.DateTimeParser dateTimeParser49 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter48, dateTimeParser49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        int int55 = partial52.compareTo((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Chronology chronology56 = partial52.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.Chronology chronology58 = chronology56.withZone(dateTimeZone57);
        org.joda.time.DateTimeField dateTimeField59 = chronology58.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone60 = chronology58.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter50.withZone(dateTimeZone60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter43.withZone(dateTimeZone60);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone60);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone60);
        org.joda.time.DateTime dateTime65 = dateTime40.withZone(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2000 + "'", int38 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNull(dateTimeParser45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2000 + "'", int46 == 2000);
        org.junit.Assert.assertNull(chronology47);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test01160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01160");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder3.setVariant("Property[millisOfSecond]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: Property[millisOfSecond] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test01161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01161");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekOfWeekyear();
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        int int12 = dateTimeField8.getMaximumTextLength(locale10);
        int int14 = dateTimeField8.getLeapAmount((-259200000L));
        java.lang.String str15 = dateTimeField8.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = dateTimeField8.set((long) 43200, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fran\347ais (Canada)" + "'", str11, "fran\347ais (Canada)");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DateTimeField[weekOfWeekyear]" + "'", str15, "DateTimeField[weekOfWeekyear]");
    }

    @Test
    public void test01162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01162");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.io.Writer writer4 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        int int10 = partial7.compareTo((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime14.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfYear();
        org.joda.time.DateTime dateTime20 = property19.withMinimumValue();
        boolean boolean21 = dateTime20.isAfterNow();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int23 = dateTime20.get(dateTimeFieldType22);
        java.util.Locale locale24 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale25 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str26 = locale24.getDisplayName(locale25);
        java.lang.String str27 = locale24.getDisplayName();
        java.util.Calendar calendar28 = dateTime20.toCalendar(locale24);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime20.getZone();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer4, (org.joda.time.ReadableInstant) dateTime30);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fran\347ais (Canada)" + "'", str26, "fran\347ais (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "fran\347ais (Canada)" + "'", str27, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-58380393600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=120,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone29);
    }

    @Test
    public void test01163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01163");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!", "fran\347ais (Canada)" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        java.lang.String str9 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList7);
        java.lang.String[] strArray11 = new java.lang.String[] { "fr-CA" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        java.util.Locale.FilteringMode filteringMode14 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList12, filteringMode14);
        java.util.Locale locale16 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str17 = locale16.getDisplayCountry();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str19 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet18);
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str21 = locale20.getDisplayCountry();
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!", "fran\347ais (Canada)" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        java.lang.String str35 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strList33);
        java.util.Locale locale36 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale37 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.lang.String str39 = locale36.toLanguageTag();
        java.lang.String str40 = locale36.getISO3Country();
        java.util.Locale locale41 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale42 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str43 = locale41.getDisplayName(locale42);
        java.lang.String str44 = locale41.toLanguageTag();
        java.lang.String str45 = locale41.toLanguageTag();
        java.util.Locale locale46 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str47 = locale46.getCountry();
        java.util.Locale locale48 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale49 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str50 = locale48.getDisplayName(locale49);
        java.lang.String str51 = locale48.toLanguageTag();
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale53 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        java.lang.String str55 = locale52.toLanguageTag();
        java.lang.String str56 = locale52.toLanguageTag();
        boolean boolean57 = locale52.hasExtensions();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        int int63 = partial60.compareTo((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Chronology chronology64 = partial60.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.Chronology chronology66 = chronology64.withZone(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) 0, chronology64);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.DateTime dateTime69 = dateTime67.minus(readableDuration68);
        org.joda.time.DateTime.Property property70 = dateTime69.millisOfSecond();
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        int int72 = property70.getMaximumTextLength(locale71);
        java.util.Locale locale73 = java.util.Locale.CANADA_FRENCH;
        boolean boolean74 = locale73.hasExtensions();
        java.util.Locale[] localeArray75 = new java.util.Locale[] { locale36, locale41, locale46, locale48, locale52, locale71, locale73 };
        java.util.ArrayList<java.util.Locale> localeList76 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList76, localeArray75);
        java.util.Locale.FilteringMode filteringMode78 = null;
        java.util.List<java.util.Locale> localeList79 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.util.Locale>) localeList76, filteringMode78);
        java.util.List<java.util.Locale> localeList80 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList79);
        java.util.Locale.LanguageRange[] languageRangeArray81 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList82 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList82, languageRangeArray81);
        java.lang.String[] strArray87 = new java.lang.String[] { "", "hi!", "fran\347ais (Canada)" };
        java.util.ArrayList<java.lang.String> strList88 = new java.util.ArrayList<java.lang.String>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList88, strArray87);
        java.lang.String str90 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList82, (java.util.Collection<java.lang.String>) strList88);
        java.lang.String[] strArray92 = new java.lang.String[] { "fr-CA" };
        java.util.ArrayList<java.lang.String> strList93 = new java.util.ArrayList<java.lang.String>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList93, strArray92);
        java.util.Locale.FilteringMode filteringMode95 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList96 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList82, (java.util.Collection<java.lang.String>) strList93, filteringMode95);
        java.util.Locale.FilteringMode filteringMode97 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList98 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strList96, filteringMode97);
        java.util.List<java.lang.String> strList99 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet22, filteringMode97);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + filteringMode14 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode14.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Canada" + "'", str17, "Canada");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Canada" + "'", str21, "Canada");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "fran\347ais (Canada)" + "'", str38, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "fr-CA" + "'", str39, "fr-CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "CAN" + "'", str40, "CAN");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "fran\347ais (Canada)" + "'", str43, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fr-CA" + "'", str44, "fr-CA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "fr-CA" + "'", str45, "fr-CA");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "CA" + "'", str47, "CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "fran\347ais (Canada)" + "'", str50, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "fr-CA" + "'", str51, "fr-CA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "fran\347ais (Canada)" + "'", str54, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "fr-CA" + "'", str55, "fr-CA");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "fr-CA" + "'", str56, "fr-CA");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(localeList79);
        org.junit.Assert.assertNotNull(localeList80);
        org.junit.Assert.assertNotNull(languageRangeArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + filteringMode95 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode95.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList96);
        org.junit.Assert.assertTrue("'" + filteringMode97 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode97.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList98);
        org.junit.Assert.assertNotNull(strList99);
    }

    @Test
    public void test01164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01164");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        boolean boolean7 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        java.lang.String str8 = partial6.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = partial6.getFieldTypes();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readableDuration20);
        org.joda.time.DateTime dateTime23 = dateTime19.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime25 = dateTime19.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime27 = dateTime25.minusWeeks(19);
        org.joda.time.DateTime dateTime29 = dateTime25.plusMillis((int) '#');
        int int30 = dateTime29.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str32 = dateTimeFieldType31.getName();
        boolean boolean33 = dateTime29.isSupported(dateTimeFieldType31);
        org.joda.time.DateTime dateTime34 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        int int40 = partial37.compareTo((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = partial37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.Chronology chronology43 = chronology41.withZone(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 0, chronology41);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.minus(readableDuration45);
        org.joda.time.Chronology chronology47 = dateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.dayOfMonth();
        org.joda.time.Chronology chronology49 = chronology47.withUTC();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.dayOfYear();
        org.joda.time.DateTime dateTime51 = dateTime29.toDateTime(chronology49);
        org.joda.time.DateTime.Property property52 = dateTime29.secondOfMinute();
        org.joda.time.DateTime dateTime53 = property52.roundCeilingCopy();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        int int60 = partial57.compareTo((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology61 = partial57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.Chronology chronology63 = chronology61.withZone(dateTimeZone62);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) 0, chronology61);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.DateTime dateTime66 = dateTime64.minus(readableDuration65);
        org.joda.time.Chronology chronology67 = dateTime64.getChronology();
        org.joda.time.Chronology chronology68 = chronology67.withUTC();
        org.joda.time.DateTimeField dateTimeField69 = chronology67.hourOfDay();
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(chronology67);
        org.joda.time.DateTime.Property property71 = dateTime70.hourOfDay();
        org.joda.time.DateTime dateTime72 = property71.getDateTime();
        java.util.Locale locale74 = java.util.Locale.CANADA_FRENCH;
        boolean boolean75 = locale74.hasExtensions();
        java.util.Set<java.lang.Character> charSet76 = locale74.getExtensionKeys();
        org.joda.time.DateTime dateTime77 = property71.setCopy("19", locale74);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime78 = property52.setCopy("years", locale74);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"years\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "halfdayOfDay" + "'", str32, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(charSet76);
        org.junit.Assert.assertNotNull(dateTime77);
    }

    @Test
    public void test01165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01165");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder1.removeUnicodeLocaleAttribute("DateTimeField[era]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: DateTimeField[era] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test01166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01166");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        long long16 = chronology12.set((org.joda.time.ReadablePartial) partial14, (long) (byte) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology12.era();
        org.joda.time.DateTimeField dateTimeField18 = chronology12.clockhourOfHalfday();
        boolean boolean19 = dateTimeField18.isSupported();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test01167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01167");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = partial0.getFieldTypes();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology9.getZone();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = partial14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 0, chronology18);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.minus(readableDuration22);
        org.joda.time.Chronology chronology24 = dateTime21.getChronology();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        long long28 = chronology24.set((org.joda.time.ReadablePartial) partial26, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = partial26.getFieldTypes();
        java.util.Locale locale30 = java.util.Locale.PRC;
        boolean boolean31 = partial26.equals((java.lang.Object) locale30);
        int int32 = partial26.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int34 = partial26.indexOf(dateTimeFieldType33);
        long long36 = chronology9.set((org.joda.time.ReadablePartial) partial26, (long) 86399999);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readableDuration47);
        org.joda.time.Chronology chronology49 = dateTime46.getChronology();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        long long53 = chronology49.set((org.joda.time.ReadablePartial) partial51, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = partial51.getFieldTypes();
        java.util.Locale locale55 = java.util.Locale.PRC;
        boolean boolean56 = partial51.equals((java.lang.Object) locale55);
        int int57 = partial51.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int59 = partial51.indexOf(dateTimeFieldType58);
        int[] intArray61 = chronology9.get((org.joda.time.ReadablePartial) partial51, (long) (short) -1);
        org.joda.time.Partial partial62 = new org.joda.time.Partial(dateTimeFieldTypeArray1, intArray61);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 86399999L + "'", long36 == 86399999L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
    }

    @Test
    public void test01168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01168");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = partial8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology12);
        org.joda.time.DateTime dateTime17 = dateTime15.withHourOfDay(0);
        org.joda.time.DateTime dateTime18 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime20 = dateTime17.plusHours(0);
        boolean boolean21 = dateTime17.isEqualNow();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = dateTime17.withDate(86399999, 2, 69);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test01169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01169");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("32");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=32");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01170");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DurationField durationField20 = durationFieldType13.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime11.withChronology(chronology19);
        org.joda.time.DateTime dateTime25 = dateTime22.withDurationAdded(1L, 0);
        java.lang.String str26 = dateTime22.toString();
        org.joda.time.DateTime dateTime28 = dateTime22.plusMinutes(52);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime31 = dateTime28.withPeriodAdded(readablePeriod29, (-292275054));
        boolean boolean32 = dateTime28.isAfterNow();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str26, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test01171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01171");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str1 = durationFieldType0.getName();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DurationField durationField9 = durationFieldType2.getField(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfYear();
        boolean boolean13 = durationFieldType0.isSupported(chronology8);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.hourOfHalfday();
        java.lang.String str17 = dateTimeField15.getAsShortText((long) 999);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "seconds" + "'", str1, "seconds");
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
    }

    @Test
    public void test01172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01172");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = partial8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology12);
        org.joda.time.DateTime dateTime17 = dateTime15.withHourOfDay(0);
        org.joda.time.DateTime dateTime18 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateMidnight dateMidnight19 = dateTime18.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight20 = dateTime18.toDateMidnight();
        org.joda.time.DateTime dateTime22 = dateTime18.minusMinutes((int) '#');
        int int23 = dateTime22.getMinuteOfDay();
        int int24 = dateTime22.getSecondOfMinute();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1405 + "'", int23 == 1405);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test01173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01173");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        java.lang.Object obj6 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.minus(readableDuration17);
        org.joda.time.DateTime dateTime20 = dateTime16.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime22 = dateTime16.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks(19);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int int32 = partial29.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = partial29.getChronology();
        org.joda.time.DurationField durationField34 = durationFieldType27.getField(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.dayOfMonth();
        org.joda.time.DateTime dateTime37 = dateTime26.toDateTime(chronology33);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(obj6, chronology33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter2.withChronology(chronology33);
        java.util.Locale locale40 = dateTimeFormatter39.getLocale();
        java.lang.StringBuffer stringBuffer41 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter39.printTo(stringBuffer41, (long) (-52));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNull(locale40);
    }

    @Test
    public void test01174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01174");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(0L);
    }

    @Test
    public void test01175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01175");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property15 = dateTime11.era();
        org.joda.time.DateTime.Property property16 = dateTime11.secondOfDay();
        int int17 = dateTime11.getYearOfCentury();
        org.joda.time.DateTime dateTime19 = dateTime11.withMillisOfSecond(9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime19.withMonthOfYear((int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 70 + "'", int17 == 70);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test01176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01176");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = partial14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekOfWeekyear();
        int int23 = dateTimeField21.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        int int28 = partial25.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        boolean boolean31 = partial27.isAfter((org.joda.time.ReadablePartial) partial30);
        java.lang.String str32 = partial30.toString();
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeField21.getAsShortText((org.joda.time.ReadablePartial) partial30, 53, locale34);
        long long37 = chronology12.set((org.joda.time.ReadablePartial) partial30, (long) 0);
        org.joda.time.DateTimeField dateTimeField38 = chronology12.weekOfWeekyear();
        int int40 = dateTimeField38.getLeapAmount((long) 53);
        // The following exception was thrown during execution in test generation
        try {
            long long43 = dateTimeField38.set((long) '4', "d\351cembre");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"de?cembre\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53 + "'", int23 == 53);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "53" + "'", str35, "53");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test01177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01177");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        int int10 = partial7.compareTo((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime14.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime20 = dateTime14.withSecondOfMinute(0);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime14.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter2.withZone(dateTimeZone21);
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter25.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser27 = dateTimeFormatter25.getParser();
        int int28 = dateTimeFormatter25.getDefaultYear();
        org.joda.time.Chronology chronology29 = dateTimeFormatter25.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = null;
        org.joda.time.format.DateTimeParser dateTimeParser31 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter30, dateTimeParser31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = partial34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology40.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter32.withZone(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter25.withZone(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter22.withZone(dateTimeZone42);
        boolean boolean47 = dateTimeFormatter46.isPrinter();
        java.io.Writer writer48 = null;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        int int53 = partial50.compareTo((org.joda.time.ReadablePartial) partial52);
        org.joda.time.Chronology chronology54 = partial50.getChronology();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        int int60 = partial57.compareTo((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology61 = partial57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.Chronology chronology63 = chronology61.withZone(dateTimeZone62);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) 0, chronology61);
        org.joda.time.DateTime dateTime66 = dateTime64.withHourOfDay(0);
        org.joda.time.DateTime dateTime67 = partial50.toDateTime((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(chronology71);
        int int73 = partial70.compareTo((org.joda.time.ReadablePartial) partial72);
        org.joda.time.Chronology chronology74 = partial70.getChronology();
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.Chronology chronology76 = chronology74.withZone(dateTimeZone75);
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) 0, chronology74);
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.DateTime dateTime79 = dateTime77.minus(readableDuration78);
        org.joda.time.DateTime dateTime81 = dateTime77.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime83 = dateTime77.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime85 = dateTime83.minusWeeks(19);
        int int86 = dateTime83.getMonthOfYear();
        org.joda.time.DateTime dateTime87 = dateTime83.toDateTimeISO();
        boolean boolean88 = partial50.isMatch((org.joda.time.ReadableInstant) dateTime83);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter46.printTo(writer48, (org.joda.time.ReadablePartial) partial50);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(dateTimeParser27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2000 + "'", int28 == 2000);
        org.junit.Assert.assertNull(chronology29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test01178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01178");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        org.joda.time.DateTime dateTime13 = dateTime11.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTime();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readableDuration25);
        org.joda.time.DateTime.Property property27 = dateTime26.millisOfSecond();
        boolean boolean28 = mutableDateTime14.isBefore((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime30 = dateTime26.withWeekyear(19);
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays(0);
        int int33 = dateTime30.getMonthOfYear();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime36 = dateTime30.withDurationAdded(readableDuration34, 100);
        org.joda.time.DateTime dateTime38 = dateTime30.minus(946684800000L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test01179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01179");
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        int int10 = partial7.compareTo((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.DurationField durationField12 = durationFieldType5.getField(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((int) (short) 10, (int) (byte) 100, (int) (byte) 100, 2922789, 35, chronology11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2922789 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test01180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01180");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale1.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
    }

    @Test
    public void test01181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01181");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.months();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.monthOfYear();
        org.joda.time.DurationField durationField16 = chronology12.years();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test01182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01182");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayScript(locale1);
        java.lang.String str3 = locale1.toLanguageTag();
        boolean boolean4 = locale1.hasExtensions();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        int int10 = partial7.compareTo((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.DateTime dateTime16 = dateTime14.withHourOfDay(0);
        org.joda.time.DateTime dateTime18 = dateTime16.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime18.toMutableDateTime();
        org.joda.time.DateTime.Property property20 = dateTime18.weekyear();
        java.lang.String str21 = property20.getAsString();
        boolean boolean22 = locale1.equals((java.lang.Object) property20);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ko" + "'", str3, "ko");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "97" + "'", str21, "97");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test01183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01183");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone12);
        int int14 = dateTimeFormatter13.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = dateTimeFormatter13.parseLocalDate("2022-02-11T09:36:04.246Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2000 + "'", int14 == 2000);
    }

    @Test
    public void test01184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01184");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.lang.String str8 = locale6.getDisplayCountry(locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withLocale(locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withPivotYear((java.lang.Integer) 3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter9.withPivotYear((java.lang.Integer) 0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        int int19 = partial16.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = partial16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Chronology chronology22 = chronology20.withZone(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 0, chronology20);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.minus(readableDuration24);
        org.joda.time.Chronology chronology26 = dateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.dayOfWeek();
        org.joda.time.DurationField durationField29 = chronology26.seconds();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.millisOfSecond();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter13.withChronology(chronology26);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        int int43 = partial40.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = partial40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology44.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) 0, chronology44);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.minus(readableDuration48);
        org.joda.time.DateTime dateTime51 = dateTime47.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime53 = dateTime47.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime55 = dateTime53.minusWeeks(19);
        org.joda.time.DateTime dateTime57 = dateTime53.plusMillis((int) '#');
        int int58 = dateTime57.getDayOfMonth();
        org.joda.time.DateTime dateTime60 = dateTime57.plus((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone61 = dateTime57.getZone();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(366, 7, 7, 23, (int) ' ', 0, dateTimeZone61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter31.withZone(dateTimeZone61);
        java.lang.StringBuffer stringBuffer64 = null;
        org.joda.time.ReadableInstant readableInstant65 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter31.printTo(stringBuffer64, readableInstant65);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
    }

    @Test
    public void test01185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01185");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int int25 = partial22.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = partial22.getChronology();
        org.joda.time.DurationField durationField27 = durationFieldType20.getField(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfMonth();
        org.joda.time.DateTime dateTime30 = dateTime19.toDateTime(chronology26);
        org.joda.time.DateTimeField dateTimeField31 = chronology26.weekyearOfCentury();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = partial34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 0, chronology38);
        org.joda.time.DateTime dateTime43 = dateTime41.withHourOfDay(0);
        int int44 = dateTime43.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        int int50 = partial47.compareTo((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = partial47.getChronology();
        org.joda.time.DurationField durationField52 = durationFieldType45.getField(chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.weekOfWeekyear();
        org.joda.time.DateTime dateTime54 = dateTime43.withChronology(chronology51);
        org.joda.time.DateTime dateTime56 = dateTime43.plusWeeks((int) (short) 1);
        org.joda.time.DateTime.Property property57 = dateTime43.yearOfEra();
        boolean boolean59 = dateTime43.isEqual((long) 2);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        int int64 = partial61.compareTo((org.joda.time.ReadablePartial) partial63);
        org.joda.time.Chronology chronology65 = partial61.getChronology();
        java.lang.String str66 = partial61.toStringList();
        org.joda.time.DateTime dateTime67 = dateTime43.withFields((org.joda.time.ReadablePartial) partial61);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial69 = partial61.plus(readablePeriod68);
        java.util.Locale locale71 = java.util.Locale.ITALIAN;
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.lang.String str73 = locale71.getDisplayScript(locale72);
        java.util.Locale locale77 = new java.util.Locale("fr-CA", "1", "86399999");
        java.util.Locale locale78 = locale77.stripExtensions();
        java.lang.String str79 = locale72.getDisplayScript(locale78);
        java.util.Locale locale80 = locale72.stripExtensions();
        java.lang.String str81 = dateTimeField31.getAsText((org.joda.time.ReadablePartial) partial61, 70, locale80);
        org.joda.time.format.DateTimePrinter dateTimePrinter82 = null;
        org.joda.time.format.DateTimeParser dateTimeParser83 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter84 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter82, dateTimeParser83);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter85 = dateTimeFormatter84.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser86 = dateTimeFormatter84.getParser();
        int int87 = dateTimeFormatter84.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter88 = dateTimeFormatter84.withZoneUTC();
        org.joda.time.Chronology chronology89 = dateTimeFormatter88.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter91 = dateTimeFormatter88.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter93 = dateTimeFormatter91.withPivotYear(69);
        boolean boolean94 = dateTimeFormatter91.isParser();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str95 = partial61.toString(dateTimeFormatter91);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 19 + "'", int44 == 19);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[]" + "'", str66, "[]");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "it");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals(locale77.toString(), "fr-ca_1_86399999");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr-ca_1_86399999");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "70" + "'", str81, "70");
        org.junit.Assert.assertNotNull(dateTimeFormatter85);
        org.junit.Assert.assertNull(dateTimeParser86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2000 + "'", int87 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter88);
        org.junit.Assert.assertNull(chronology89);
        org.junit.Assert.assertNotNull(dateTimeFormatter91);
        org.junit.Assert.assertNotNull(dateTimeFormatter93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test01186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01186");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withZone(dateTimeZone17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTimeFormatter2.parseDateTime("janvier");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
    }

    @Test
    public void test01187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01187");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("\uc774\ud0c8\ub9ac\uc544\uc5b4", (double) 86400000L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=8.64E7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01188");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale6.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withLocale(locale6);
        boolean boolean10 = dateTimeFormatter9.isPrinter();
        java.util.Locale locale11 = java.util.Locale.CHINA;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withLocale(locale11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withDefaultYear(19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime16 = dateTimeFormatter12.parseMutableDateTime("86399999");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
    }

    @Test
    public void test01189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01189");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        long long12 = dateTime11.getMillis();
        int int13 = dateTime11.getDayOfYear();
        org.joda.time.DateTime.Property property14 = dateTime11.millisOfSecond();
        int int15 = property14.getMinimumValue();
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale16.getDisplayScript(locale17);
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str20 = locale19.getDisplayCountry();
        java.lang.String str21 = locale17.getDisplayName(locale19);
        java.lang.String str22 = locale19.getScript();
        java.lang.String str23 = property14.getAsText(locale19);
        java.lang.String str24 = locale19.getDisplayName();
        java.lang.Object obj25 = locale19.clone();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Canada" + "'", str20, "Canada");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "cor\351en" + "'", str21, "cor\351en");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0" + "'", str23, "0");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fran\347ais (Canada)" + "'", str24, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "fr_CA");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "fr_CA");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "fr_CA");
    }

    @Test
    public void test01190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01190");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        int int16 = partial13.compareTo((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = partial13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 0, chronology17);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.minus(readableDuration21);
        org.joda.time.Chronology chronology23 = dateTime20.getChronology();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        long long27 = chronology23.set((org.joda.time.ReadablePartial) partial25, (long) (byte) -1);
        int[] intArray29 = chronology7.get((org.joda.time.ReadablePartial) partial25, (long) ' ');
        org.joda.time.DurationField durationField30 = chronology7.eras();
        org.joda.time.DateTimeField dateTimeField31 = chronology7.dayOfYear();
        boolean boolean32 = durationFieldType0.isSupported(chronology7);
        // The following exception was thrown during execution in test generation
        try {
            long long40 = chronology7.getDateTimeMillis(0, 3970, (int) (byte) 0, 5, 292278994, 19, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278994 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test01191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01191");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        long long12 = dateTime11.getMillis();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        boolean boolean20 = partial16.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.DateTime dateTime32 = dateTime30.withHourOfDay(0);
        org.joda.time.DateTime dateTime34 = dateTime32.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime34.toMutableDateTime();
        org.joda.time.DateTime dateTime36 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readableDuration47);
        org.joda.time.DateTime dateTime50 = dateTime46.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime52 = dateTime46.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime54 = dateTime52.minusWeeks(19);
        org.joda.time.DateTime dateTime56 = dateTime52.plusMillis((int) '#');
        int int57 = dateTime56.getDayOfMonth();
        boolean boolean58 = partial16.equals((java.lang.Object) dateTime56);
        boolean boolean59 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime61 = dateTime56.plusSeconds(2);
        org.joda.time.DateTime.Property property62 = dateTime61.minuteOfHour();
        org.joda.time.DateTime dateTime64 = property62.addWrapFieldToCopy((int) '#');
        org.joda.time.DurationField durationField65 = property62.getRangeDurationField();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(durationField65);
    }

    @Test
    public void test01192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01192");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale6.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withLocale(locale6);
        java.lang.String str10 = locale6.getCountry();
        java.lang.String str11 = locale6.toString();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ko" + "'", str11, "ko");
    }

    @Test
    public void test01193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01193");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder1.addUnicodeLocaleAttribute("coreano");
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.getDefault(category5);
        java.util.Locale.Builder builder7 = builder1.setLocale(locale6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.setLanguageTag("32");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 32 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test01194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01194");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        java.lang.Integer int5 = dateTimeFormatter4.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter4.withPivotYear(23);
        org.joda.time.Chronology chronology8 = dateTimeFormatter4.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = dateTimeFormatter4.parseLocalDateTime("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(chronology8);
    }

    @Test
    public void test01195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01195");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        org.joda.time.DateTime dateTime13 = dateTime11.withYear((int) 'a');
        boolean boolean14 = dateTime11.isEqualNow();
        org.joda.time.DateMidnight dateMidnight15 = dateTime11.toDateMidnight();
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = null;
        org.joda.time.format.DateTimeParser dateTimeParser17 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter16, dateTimeParser17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone28 = chronology26.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter18.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = dateTime11.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime30.toDateTimeISO();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test01196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01196");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.DateTime dateTime18 = dateTime16.withHourOfDay(0);
        org.joda.time.DateTime dateTime20 = dateTime18.withYear((int) 'a');
        boolean boolean21 = dateTime18.isEqualNow();
        org.joda.time.DateMidnight dateMidnight22 = dateTime18.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone23 = dateMidnight22.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(9, 0, 99, 8, 86399999, 11, (-292275054), dateTimeZone23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399999 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
    }

    @Test
    public void test01197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01197");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime15 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property16 = dateTime11.monthOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        int int22 = partial19.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = partial19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 0, chronology23);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.minus(readableDuration27);
        org.joda.time.Chronology chronology29 = dateTime26.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str31 = dateTimeFieldType30.getName();
        int int32 = dateTime26.get(dateTimeFieldType30);
        org.joda.time.DateTime dateTime34 = dateTime26.minusMinutes(4);
        org.joda.time.Instant instant35 = dateTime34.toInstant();
        org.joda.time.DateTime.Property property36 = dateTime34.weekyear();
        long long37 = property16.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime38 = property16.withMaximumValue();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "halfdayOfDay" + "'", str31, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test01198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01198");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        long long12 = dateTime11.getMillis();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        boolean boolean20 = partial16.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.DateTime dateTime32 = dateTime30.withHourOfDay(0);
        org.joda.time.DateTime dateTime34 = dateTime32.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime34.toMutableDateTime();
        org.joda.time.DateTime dateTime36 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readableDuration47);
        org.joda.time.DateTime dateTime50 = dateTime46.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime52 = dateTime46.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime54 = dateTime52.minusWeeks(19);
        org.joda.time.DateTime dateTime56 = dateTime52.plusMillis((int) '#');
        int int57 = dateTime56.getDayOfMonth();
        boolean boolean58 = partial16.equals((java.lang.Object) dateTime56);
        boolean boolean59 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime61 = dateTime56.plusSeconds(2);
        org.joda.time.Chronology chronology62 = dateTime56.getChronology();
        org.joda.time.DateTime.Property property63 = dateTime56.millisOfSecond();
        org.joda.time.DateTime dateTime64 = property63.roundHalfFloorCopy();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test01199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01199");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        boolean boolean7 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial11 = partial6.withPeriodAdded(readablePeriod9, (int) (byte) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = partial14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 0, chronology18);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.minus(readableDuration22);
        org.joda.time.Chronology chronology24 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.centuryOfEra();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        int int33 = partial30.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = partial30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 0, chronology34);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.minus(readableDuration38);
        org.joda.time.Chronology chronology40 = dateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.secondOfDay();
        org.joda.time.DurationField durationField42 = chronology40.seconds();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        int int47 = partial44.compareTo((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        boolean boolean50 = partial46.isAfter((org.joda.time.ReadablePartial) partial49);
        int[] intArray52 = chronology40.get((org.joda.time.ReadablePartial) partial46, (long) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = partial46.getFormatter();
        int[] intArray55 = chronology24.get((org.joda.time.ReadablePartial) partial46, (-10L));
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        int int61 = partial58.compareTo((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology62 = partial58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.Chronology chronology64 = chronology62.withZone(dateTimeZone63);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) 0, chronology62);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.DateTime dateTime67 = dateTime65.minus(readableDuration66);
        org.joda.time.DateTime dateTime69 = dateTime65.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property70 = dateTime69.dayOfYear();
        org.joda.time.DateTime dateTime71 = property70.withMinimumValue();
        boolean boolean72 = dateTime71.isAfterNow();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int74 = dateTime71.get(dateTimeFieldType73);
        org.joda.time.DurationFieldType durationFieldType75 = dateTimeFieldType73.getDurationType();
        int int76 = partial46.indexOf(dateTimeFieldType73);
        boolean boolean77 = partial6.isSupported(dateTimeFieldType73);
        int int78 = partial6.size();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 12 + "'", int74 == 12);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test01200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01200");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        long long12 = dateTime11.getMillis();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        boolean boolean20 = partial16.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.DateTime dateTime32 = dateTime30.withHourOfDay(0);
        org.joda.time.DateTime dateTime34 = dateTime32.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime34.toMutableDateTime();
        org.joda.time.DateTime dateTime36 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readableDuration47);
        org.joda.time.DateTime dateTime50 = dateTime46.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime52 = dateTime46.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime54 = dateTime52.minusWeeks(19);
        org.joda.time.DateTime dateTime56 = dateTime52.plusMillis((int) '#');
        int int57 = dateTime56.getDayOfMonth();
        boolean boolean58 = partial16.equals((java.lang.Object) dateTime56);
        boolean boolean59 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime61 = dateTime56.plusSeconds(2);
        org.joda.time.DateTime dateTime63 = dateTime61.withMillisOfDay(2);
        org.joda.time.DateTime dateTime65 = dateTime63.withCenturyOfEra((int) (byte) 0);
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray67 = partial66.getFieldTypes();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        int int72 = partial69.compareTo((org.joda.time.ReadablePartial) partial71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        boolean boolean75 = partial71.isAfter((org.joda.time.ReadablePartial) partial74);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Partial partial78 = new org.joda.time.Partial(chronology77);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Partial partial80 = new org.joda.time.Partial(chronology79);
        int int81 = partial78.compareTo((org.joda.time.ReadablePartial) partial80);
        org.joda.time.Chronology chronology82 = partial78.getChronology();
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.Chronology chronology84 = chronology82.withZone(dateTimeZone83);
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((long) 0, chronology82);
        org.joda.time.DateTime dateTime87 = dateTime85.withHourOfDay(0);
        org.joda.time.DateTime dateTime89 = dateTime87.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime90 = dateTime89.toMutableDateTime();
        org.joda.time.DateTime dateTime91 = partial71.toDateTime((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean93 = partial71.isSupported(dateTimeFieldType92);
        int int94 = partial66.indexOf(dateTimeFieldType92);
        java.lang.String str95 = dateTimeFieldType92.getName();
        org.joda.time.DateTime.Property property96 = dateTime63.property(dateTimeFieldType92);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime98 = dateTime63.withMonthOfYear((int) 'x');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray67);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(mutableDateTime90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "monthOfYear" + "'", str95, "monthOfYear");
        org.junit.Assert.assertNotNull(property96);
    }

    @Test
    public void test01201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01201");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property15 = dateTime11.era();
        org.joda.time.DateTime.Property property16 = dateTime11.secondOfDay();
        int int17 = property16.getLeapAmount();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.DateTime dateTime29 = dateTime27.withHourOfDay(0);
        int int30 = dateTime29.getCenturyOfEra();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        int int36 = partial33.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = partial33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 0, chronology37);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.minus(readableDuration41);
        org.joda.time.Chronology chronology43 = dateTime40.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str45 = dateTimeFieldType44.getName();
        int int46 = dateTime40.get(dateTimeFieldType44);
        org.joda.time.DateTime dateTime48 = dateTime40.minusMinutes(4);
        int int49 = dateTime40.getWeekyear();
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.DateTime dateTime51 = dateTime40.plus(readableDuration50);
        boolean boolean52 = dateTime29.isAfter((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime54 = dateTime29.minusWeeks((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int56 = dateTime54.get(dateTimeFieldType55);
        org.joda.time.DateTime dateTime57 = dateTime54.toDateTimeISO();
        long long58 = property16.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime59 = property16.getDateTime();
        org.joda.time.DateTime dateTime61 = property16.addToCopy(2000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime63 = property16.setCopy((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 19 + "'", int30 == 19);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "halfdayOfDay" + "'", str45, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 21168000L + "'", long58 == 21168000L);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test01202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01202");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("12", (double) 1969);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1969.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01203");
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter9.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser11 = dateTimeFormatter9.getParser();
        int int12 = dateTimeFormatter9.getDefaultYear();
        org.joda.time.Chronology chronology13 = dateTimeFormatter9.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = null;
        org.joda.time.format.DateTimeParser dateTimeParser15 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter14, dateTimeParser15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        int int21 = partial18.compareTo((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = partial18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Chronology chronology24 = chronology22.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology24.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter16.withZone(dateTimeZone26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter9.withZone(dateTimeZone26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((int) (byte) 1, 0, 13, (-52), 2022, 170, (-27409536), dateTimeZone26);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -52 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(dateTimeParser11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2000 + "'", int12 == 2000);
        org.junit.Assert.assertNull(chronology13);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
    }

    @Test
    public void test01204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01204");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        int int14 = partial11.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = partial11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter9.withZone(dateTimeZone19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withZone(dateTimeZone19);
        boolean boolean22 = dateTimeFormatter2.isPrinter();
        boolean boolean23 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter2.withZoneUTC();
        java.util.Locale locale25 = dateTimeFormatter2.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = dateTimeFormatter2.print((long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(locale25);
    }

    @Test
    public void test01205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01205");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DurationField durationField20 = durationFieldType13.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime11.withChronology(chronology19);
        org.joda.time.DateTime dateTime24 = dateTime11.plusWeeks((int) (short) 1);
        org.joda.time.DateTime.Property property25 = dateTime11.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = dateTime11.withMonthOfYear(170);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 170 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test01206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01206");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = partial1.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType11 = partial1.getFieldType(834);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 834");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
    }

    @Test
    public void test01207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01207");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DurationField durationField20 = durationFieldType13.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime11.withChronology(chronology19);
        org.joda.time.DateTime dateTime24 = dateTime11.plusWeeks((int) (short) 1);
        org.joda.time.DateTime.Property property25 = dateTime11.yearOfEra();
        boolean boolean27 = dateTime11.isEqual((long) 2);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int int32 = partial29.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = partial29.getChronology();
        java.lang.String str34 = partial29.toStringList();
        org.joda.time.DateTime dateTime35 = dateTime11.withFields((org.joda.time.ReadablePartial) partial29);
        org.joda.time.DateTime.Property property36 = dateTime35.yearOfCentury();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test01208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01208");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        org.joda.time.DurationField durationField15 = property12.getRangeDurationField();
        int int16 = property12.get();
        org.joda.time.DateTime dateTime18 = property12.addToCopy((long) 0);
        int int19 = property12.getLeapAmount();
        org.joda.time.DateTime dateTime20 = property12.withMaximumValue();
        org.joda.time.Chronology chronology21 = dateTime20.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        int int27 = partial24.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = partial24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 0, chronology28);
        org.joda.time.DateTimeField dateTimeField32 = chronology28.millisOfDay();
        int int33 = dateTimeField32.getMinimumValue();
        int int34 = dateTime20.get(dateTimeField32);
        java.lang.String str35 = dateTimeField32.getName();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        int int41 = partial38.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 0, chronology42);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.minus(readableDuration46);
        org.joda.time.DateTime dateTime49 = dateTime45.withYearOfEra((int) 'x');
        int int50 = dateTime49.getWeekOfWeekyear();
        org.joda.time.Instant instant51 = dateTime49.toInstant();
        org.joda.time.DateTime dateTime53 = dateTime49.withMillis(180100L);
        org.joda.time.DateTime.Property property54 = dateTime53.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone55 = dateTime53.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((java.lang.Object) str35, dateTimeZone55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"millisOfDay\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 999 + "'", int34 == 999);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "millisOfDay" + "'", str35, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
    }

    @Test
    public void test01209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01209");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.months();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial16 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.DateTime dateTime31 = dateTime27.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime33 = dateTime27.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime35 = dateTime33.minusWeeks(19);
        org.joda.time.DateTime dateTime37 = dateTime33.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        int int43 = partial40.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = partial40.getChronology();
        org.joda.time.DurationField durationField45 = durationFieldType38.getField(chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.dayOfMonth();
        org.joda.time.DateTime dateTime48 = dateTime37.toDateTime(chronology44);
        org.joda.time.Chronology chronology49 = chronology44.withUTC();
        org.joda.time.DateTimeField dateTimeField50 = chronology44.hourOfDay();
        org.joda.time.DateTimeField dateTimeField51 = chronology44.millisOfSecond();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        int int56 = partial53.compareTo((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Chronology chronology57 = partial53.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean59 = partial53.isSupported(dateTimeFieldType58);
        org.joda.time.Chronology chronology60 = partial53.getChronology();
        org.joda.time.Partial partial61 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        int int68 = partial65.compareTo((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology69 = partial65.getChronology();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.Chronology chronology71 = chronology69.withZone(dateTimeZone70);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) 0, chronology69);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = new org.joda.time.Partial(chronology76);
        int int78 = partial75.compareTo((org.joda.time.ReadablePartial) partial77);
        org.joda.time.Chronology chronology79 = partial75.getChronology();
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.Chronology chronology81 = chronology79.withZone(dateTimeZone80);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((long) 0, chronology79);
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.DateTime dateTime84 = dateTime82.minus(readableDuration83);
        org.joda.time.Chronology chronology85 = dateTime82.getChronology();
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Partial partial87 = new org.joda.time.Partial(chronology86);
        long long89 = chronology85.set((org.joda.time.ReadablePartial) partial87, (long) (byte) -1);
        int[] intArray91 = chronology69.get((org.joda.time.ReadablePartial) partial87, (long) ' ');
        int[] intArray93 = dateTimeField51.addWrapPartial((org.joda.time.ReadablePartial) partial53, (int) (short) 0, intArray91, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray95 = dateTimeField15.add(readablePartial16, 0, intArray91, 86399);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[]");
    }

    @Test
    public void test01210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01210");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        int int7 = dateTimeFormatter2.getDefaultYear();
        java.lang.Appendable appendable8 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        int int14 = partial11.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = partial11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 0, chronology15);
        org.joda.time.DateTime dateTime20 = dateTime18.withHourOfDay(0);
        int int21 = dateTime20.getCenturyOfEra();
        boolean boolean23 = dateTime20.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property24 = dateTime20.era();
        org.joda.time.DateTime.Property property25 = dateTime20.secondOfDay();
        org.joda.time.DateTime dateTime27 = dateTime20.minusHours(0);
        org.joda.time.DateTime dateTime29 = dateTime20.withYearOfEra(317);
        org.joda.time.DateTime.Property property30 = dateTime29.weekOfWeekyear();
        org.joda.time.DateTime dateTime32 = dateTime29.minusDays(19);
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime32.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable8, (org.joda.time.ReadableInstant) dateTime32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 19 + "'", int21 == 19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
    }

    @Test
    public void test01211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01211");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.lang.String str8 = locale6.getDisplayCountry(locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withLocale(locale7);
        int int10 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        int int16 = partial13.compareTo((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = partial13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 0, chronology17);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.minus(readableDuration21);
        org.joda.time.DateTime.Property property23 = dateTime22.millisOfSecond();
        org.joda.time.DateTime dateTime25 = dateTime22.minusMillis((int) (byte) -1);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        int int30 = partial27.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = partial27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.hourOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.minuteOfHour();
        org.joda.time.DateTime dateTime36 = dateTime25.toDateTime(chronology33);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DurationField durationField44 = durationFieldType37.getField(chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.weekyearOfCentury();
        java.util.Locale locale48 = java.util.Locale.CANADA_FRENCH;
        boolean boolean49 = locale48.hasExtensions();
        java.util.Set<java.lang.Character> charSet50 = locale48.getExtensionKeys();
        java.lang.String str51 = dateTimeField46.getAsShortText(2000, locale48);
        long long53 = dateTimeField46.roundHalfEven((long) 12);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        int int59 = partial56.compareTo((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology60 = partial56.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.Chronology chronology62 = chronology60.withZone(dateTimeZone61);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) 0, chronology60);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.DateTime dateTime65 = dateTime63.minus(readableDuration64);
        org.joda.time.DateTime.Property property66 = dateTime65.millisOfSecond();
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        int int68 = property66.getMaximumTextLength(locale67);
        long long69 = property66.remainder();
        org.joda.time.Interval interval70 = property66.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = property66.getFieldType();
        java.util.Locale locale72 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale73 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str74 = locale72.getDisplayName(locale73);
        java.util.Locale locale75 = java.util.Locale.ENGLISH;
        java.lang.String str76 = locale73.getDisplayVariant(locale75);
        java.lang.String str77 = property66.getAsShortText(locale73);
        int int78 = dateTimeField46.getMaximumTextLength(locale73);
        java.util.Calendar calendar79 = dateTime25.toCalendar(locale73);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str80 = dateTimeFormatter2.print((org.joda.time.ReadableInstant) dateTime25);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2000 + "'", int10 == 2000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(charSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2000" + "'", str51, "2000");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 3 + "'", int68 == 3);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "fran\347ais (Canada)" + "'", str74, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "0" + "'", str77, "0");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(calendar79);
        org.junit.Assert.assertEquals(calendar79.toString(), "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test01212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01212");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime15 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime17 = dateTime15.withCenturyOfEra(12);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.withPeriodAdded(readablePeriod18, 22200);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = dateTime20.toString("halfdayOfDay");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: l");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test01213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01213");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        int int10 = partial7.compareTo((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readableDuration15);
        org.joda.time.Chronology chronology17 = dateTime14.getChronology();
        org.joda.time.Chronology chronology18 = chronology17.withUTC();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(720, 97, 834, 0, 9, dateTimeZone19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
    }

    @Test
    public void test01214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01214");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        org.joda.time.DateTime dateTime13 = dateTime11.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTime();
        org.joda.time.DateTime.Property property15 = dateTime13.weekyear();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime13.getZone();
        org.joda.time.DateTime dateTime18 = dateTime13.minusMillis((int) '4');
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test01215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01215");
        java.util.Locale.Category category0 = null;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale1.getISO3Language();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(category0, locale1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Category cannot be NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
    }

    @Test
    public void test01216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01216");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        boolean boolean21 = partial17.isAfter((org.joda.time.ReadablePartial) partial20);
        java.lang.String str22 = partial20.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial20.without(dateTimeFieldType23);
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.lang.String str29 = locale26.getDisplayVariant();
        java.util.Locale locale30 = locale26.stripExtensions();
        java.lang.String str31 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) partial20, 53, locale30);
        int int32 = partial20.size();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = partial35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 0, chronology39);
        org.joda.time.DateTime dateTime44 = dateTime42.withHourOfDay(0);
        int int45 = dateTime44.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        int int51 = partial48.compareTo((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Chronology chronology52 = partial48.getChronology();
        org.joda.time.DurationField durationField53 = durationFieldType46.getField(chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.weekOfWeekyear();
        org.joda.time.DateTime dateTime55 = dateTime44.withChronology(chronology52);
        org.joda.time.DateTime dateTime58 = dateTime55.withDurationAdded(1L, 0);
        org.joda.time.DateTime dateTime60 = dateTime55.withMillisOfDay((int) (short) 1);
        org.joda.time.DateTime.Property property61 = dateTime60.secondOfDay();
        int int62 = dateTime60.getMillisOfSecond();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        int int68 = partial65.compareTo((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology69 = partial65.getChronology();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.Chronology chronology71 = chronology69.withZone(dateTimeZone70);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) 0, chronology69);
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.DateTime dateTime74 = dateTime72.minus(readableDuration73);
        org.joda.time.DateTime dateTime76 = dateTime72.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime78 = dateTime72.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime80 = dateTime78.minusWeeks(19);
        boolean boolean81 = dateTime60.isEqual((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTime dateTime83 = dateTime60.plusMillis(10);
        org.joda.time.DateTime dateTime84 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime86 = dateTime83.withYearOfEra(31);
        org.joda.time.MutableDateTime mutableDateTime87 = dateTime86.toMutableDateTime();
        boolean boolean88 = mutableDateTime87.isBeforeNow();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fran\347ais (Canada)" + "'", str28, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "53" + "'", str31, "53");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 19 + "'", int45 == 19);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(mutableDateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test01217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01217");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        int int10 = partial7.compareTo((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.DateTime dateTime16 = dateTime14.withHourOfDay(0);
        org.joda.time.DateTime dateTime18 = dateTime16.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime18.toMutableDateTime();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int int25 = partial22.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = partial22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.Chronology chronology28 = chronology26.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 0, chronology26);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.minus(readableDuration30);
        org.joda.time.DateTime.Property property32 = dateTime31.millisOfSecond();
        boolean boolean33 = mutableDateTime19.isBefore((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime35 = dateTime31.withYear(0);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(292278993, (int) 'u', (-52), 73, 2, chronology36);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 73 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test01218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01218");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        long long12 = dateTime11.getMillis();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        boolean boolean20 = partial16.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.DateTime dateTime32 = dateTime30.withHourOfDay(0);
        org.joda.time.DateTime dateTime34 = dateTime32.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime34.toMutableDateTime();
        org.joda.time.DateTime dateTime36 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readableDuration47);
        org.joda.time.DateTime dateTime50 = dateTime46.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime52 = dateTime46.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime54 = dateTime52.minusWeeks(19);
        org.joda.time.DateTime dateTime56 = dateTime52.plusMillis((int) '#');
        int int57 = dateTime56.getDayOfMonth();
        boolean boolean58 = partial16.equals((java.lang.Object) dateTime56);
        boolean boolean59 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime56);
        long long60 = dateTime11.getMillis();
        java.lang.String str61 = dateTime11.toString();
        org.joda.time.DateTime.Property property62 = dateTime11.yearOfEra();
        java.lang.String str63 = property62.getAsString();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        int int69 = partial66.compareTo((org.joda.time.ReadablePartial) partial68);
        org.joda.time.Chronology chronology70 = partial66.getChronology();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.Chronology chronology72 = chronology70.withZone(dateTimeZone71);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) 0, chronology70);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.DateTime dateTime75 = dateTime73.minus(readableDuration74);
        org.joda.time.DateTime dateTime77 = dateTime73.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property78 = dateTime77.dayOfYear();
        org.joda.time.DateTime dateTime79 = property78.withMinimumValue();
        java.lang.String str80 = dateTime79.toString();
        long long81 = property62.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DurationField durationField82 = property62.getDurationField();
        java.util.Locale locale83 = java.util.Locale.ENGLISH;
        java.lang.String str84 = property62.getAsText(locale83);
        org.joda.time.DurationField durationField85 = property62.getRangeDurationField();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str61, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1970" + "'", str63, "1970");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "0120-01-01T00:00:00.000Z" + "'", str80, "0120-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1850L + "'", long81 == 1850L);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "en");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "1970" + "'", str84, "1970");
        org.junit.Assert.assertNull(durationField85);
    }

    @Test
    public void test01219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01219");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        java.util.Locale locale3 = new java.util.Locale("coreano");
        java.lang.String str4 = locale1.getDisplayScript(locale3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = locale1.getUnicodeLocaleType("korean");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: korean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertEquals(locale3.toString(), "coreano");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test01220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01220");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property15 = dateTime11.era();
        int int16 = property15.getMaximumValue();
        org.joda.time.DurationField durationField17 = property15.getRangeDurationField();
        org.joda.time.DateTimeField dateTimeField18 = property15.getField();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test01221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01221");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DurationField durationField7 = durationFieldType0.getField(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = dateTimeField10.set((long) 22, 53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test01222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01222");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.DateTime dateTime18 = dateTime16.withHourOfDay(0);
        org.joda.time.DateTime dateTime20 = dateTime18.withYear((int) 'a');
        boolean boolean21 = dateTime18.isEqualNow();
        org.joda.time.DateMidnight dateMidnight22 = dateTime18.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone23 = dateMidnight22.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter2.withZone(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter24.withPivotYear((java.lang.Integer) 0);
        java.lang.StringBuffer stringBuffer27 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter24.printTo(stringBuffer27, (-2970675054L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
    }

    @Test
    public void test01223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01223");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DurationField durationField20 = durationFieldType13.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime11.withChronology(chronology19);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        int int28 = partial25.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = partial25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Chronology chronology31 = chronology29.withZone(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 0, chronology29);
        org.joda.time.DateTime dateTime34 = dateTime32.withHourOfDay(0);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime36 = dateTime32.minus(readablePeriod35);
        boolean boolean37 = dateTime22.isAfter((org.joda.time.ReadableInstant) dateTime36);
        boolean boolean38 = dateTime36.isBeforeNow();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime40 = dateTime36.withEra(1439);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1439 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test01224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01224");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTime.Property property13 = dateTime9.weekyear();
        int int14 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime9.minusMinutes((int) '#');
        org.joda.time.DateTime.Property property17 = dateTime9.secondOfMinute();
        org.joda.time.DateTime dateTime18 = property17.roundHalfCeilingCopy();
        int int19 = dateTime18.getDayOfMonth();
        boolean boolean21 = dateTime18.isAfter(86340L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test01225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01225");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        java.lang.String str15 = property14.getName();
        org.joda.time.Interval interval16 = property14.toInterval();
        java.lang.String str17 = property14.getAsString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "dayOfYear" + "'", str15, "dayOfYear");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
    }

    @Test
    public void test01226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01226");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology7.getZone();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readableDuration20);
        org.joda.time.Chronology chronology22 = dateTime19.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        long long26 = chronology22.set((org.joda.time.ReadablePartial) partial24, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial24.getFieldTypes();
        java.util.Locale locale28 = java.util.Locale.PRC;
        boolean boolean29 = partial24.equals((java.lang.Object) locale28);
        int int30 = partial24.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int32 = partial24.indexOf(dateTimeFieldType31);
        long long34 = chronology7.set((org.joda.time.ReadablePartial) partial24, (long) 86399999);
        java.util.Locale.Builder builder36 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder37 = builder36.clearExtensions();
        java.util.Locale.Builder builder38 = builder36.clear();
        java.util.Locale locale39 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str40 = locale39.getDisplayCountry();
        java.util.Locale.Builder builder41 = builder36.setLocale(locale39);
        java.lang.String str42 = locale39.getLanguage();
        java.lang.String str43 = partial24.toString("366", locale39);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Partial partial46 = new org.joda.time.Partial(dateTimeFieldType44, 12);
        int[] intArray47 = partial46.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str49 = dateTimeFieldType48.getName();
        org.joda.time.Partial partial51 = partial46.with(dateTimeFieldType48, 2);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = partial24.isEqual((org.joda.time.ReadablePartial) partial51);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 86399999L + "'", long34 == 86399999L);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Canada" + "'", str40, "Canada");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "fr" + "'", str42, "fr");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "366" + "'", str43, "366");
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[12]");
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "year" + "'", str49, "year");
        org.junit.Assert.assertNotNull(partial51);
    }

    @Test
    public void test01227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01227");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        int int19 = partial16.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = partial16.getChronology();
        org.joda.time.DurationField durationField21 = durationFieldType14.getField(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.weekOfWeekyear();
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = dateTimeField22.getAsText(19, locale24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter13.withLocale(locale24);
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale28 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.lang.String str30 = locale27.toLanguageTag();
        java.lang.String str31 = locale27.getISO3Country();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter26.withLocale(locale27);
        java.io.Writer writer33 = null;
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        int int39 = partial36.compareTo((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = partial36.getChronology();
        org.joda.time.DurationField durationField41 = durationFieldType34.getField(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.weekyearOfCentury();
        org.joda.time.DurationField durationField44 = dateTimeField43.getLeapDurationField();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        int int49 = partial46.compareTo((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = partial46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.Chronology chronology52 = chronology50.withZone(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField53 = chronology52.weekOfWeekyear();
        int int55 = dateTimeField53.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        int int60 = partial57.compareTo((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        boolean boolean63 = partial59.isAfter((org.joda.time.ReadablePartial) partial62);
        java.lang.String str64 = partial62.toString();
        java.util.Locale locale66 = null;
        java.lang.String str67 = dateTimeField53.getAsShortText((org.joda.time.ReadablePartial) partial62, 53, locale66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        int int72 = partial69.compareTo((org.joda.time.ReadablePartial) partial71);
        org.joda.time.Chronology chronology73 = partial69.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.era();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = new org.joda.time.Partial(chronology75);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Partial partial78 = new org.joda.time.Partial(chronology77);
        int int79 = partial76.compareTo((org.joda.time.ReadablePartial) partial78);
        int[] intArray81 = new int[] { 2 };
        int int82 = dateTimeField74.getMinimumValue((org.joda.time.ReadablePartial) partial76, intArray81);
        int int83 = dateTimeField43.getMaximumValue((org.joda.time.ReadablePartial) partial62, intArray81);
        int[] intArray84 = partial62.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter85 = partial62.getFormatter();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter32.printTo(writer33, (org.joda.time.ReadablePartial) partial62);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "19" + "'", str25, "19");
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "fran\347ais (Canada)" + "'", str29, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "fr-CA" + "'", str30, "fr-CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "CAN" + "'", str31, "CAN");
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNull(durationField44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 53 + "'", int55 == 53);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "53" + "'", str67, "53");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[2]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 99 + "'", int83 == 99);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter85);
    }

    @Test
    public void test01228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01228");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str14 = dateTimeFieldType13.getName();
        int int15 = dateTime9.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime17 = dateTime9.minusMinutes(4);
        int int18 = dateTime9.getWeekyear();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime9.plus(readableDuration19);
        org.joda.time.DateTime.Property property21 = dateTime9.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property21.getFieldType();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        int int29 = partial26.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = partial26.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean32 = partial26.isSupported(dateTimeFieldType31);
        java.lang.String str33 = partial26.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        boolean boolean41 = partial37.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        int int47 = partial44.compareTo((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology48 = partial44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) 0, chronology48);
        org.joda.time.DateTime dateTime53 = dateTime51.withHourOfDay(0);
        org.joda.time.DateTime dateTime55 = dateTime53.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime56 = dateTime55.toMutableDateTime();
        org.joda.time.DateTime dateTime57 = partial37.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        int int63 = partial60.compareTo((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Chronology chronology64 = partial60.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.Chronology chronology66 = chronology64.withZone(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) 0, chronology64);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.DateTime dateTime69 = dateTime67.minus(readableDuration68);
        org.joda.time.DateTime dateTime71 = dateTime67.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime73 = dateTime67.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime75 = dateTime73.minusWeeks(19);
        org.joda.time.DateTime dateTime77 = dateTime73.plusMillis((int) '#');
        int int78 = dateTime77.getDayOfMonth();
        boolean boolean79 = partial37.equals((java.lang.Object) dateTime77);
        boolean boolean80 = partial26.isEqual((org.joda.time.ReadablePartial) partial37);
        java.util.Locale locale82 = java.util.Locale.CHINESE;
        java.lang.String str83 = dateTimeField24.getAsShortText((org.joda.time.ReadablePartial) partial26, 100, locale82);
        long long85 = dateTimeField24.roundHalfCeiling((long) 233);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "halfdayOfDay" + "'", str14, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "100" + "'", str83, "100");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 233L + "'", long85 == 233L);
    }

    @Test
    public void test01229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01229");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = chronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfDay();
        org.joda.time.DurationField durationField15 = chronology12.millis();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = chronology12.getDateTimeMillis(43200, 73, (-27409536), 19, 72, 19, (-27409536));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 72 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test01230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01230");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTime.Property property13 = dateTime9.weekyear();
        int int14 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime9.minusMinutes((int) '#');
        org.joda.time.DateTime.Property property17 = dateTime9.secondOfMinute();
        org.joda.time.DateTime dateTime18 = property17.getDateTime();
        org.joda.time.DurationField durationField19 = property17.getDurationField();
        java.util.Locale locale21 = new java.util.Locale("hi!");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        int int27 = partial24.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = partial24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 0, chronology28);
        org.joda.time.DateTimeField dateTimeField32 = chronology28.millisOfDay();
        int int33 = dateTimeField32.getMinimumValue();
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.lang.String str36 = dateTimeField32.getAsShortText((long) (byte) -1, locale35);
        java.lang.String str37 = locale21.getDisplayCountry(locale35);
        int int38 = property17.getMaximumTextLength(locale21);
        java.util.Locale locale39 = java.util.Locale.ITALY;
        java.lang.String str40 = locale39.getScript();
        java.util.Set<java.lang.String> strSet41 = locale39.getUnicodeLocaleAttributes();
        java.lang.String str42 = locale21.getDisplayScript(locale39);
        java.lang.Object obj43 = locale39.clone();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "86399999" + "'", str36, "86399999");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "it_IT");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "it_IT");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "it_IT");
    }

    @Test
    public void test01231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01231");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter12.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser14 = dateTimeFormatter12.getParser();
        int int15 = dateTimeFormatter12.getDefaultYear();
        org.joda.time.Chronology chronology16 = dateTimeFormatter12.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = null;
        org.joda.time.format.DateTimeParser dateTimeParser18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone29 = chronology27.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter19.withZone(dateTimeZone29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter12.withZone(dateTimeZone29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter6.withZone(dateTimeZone29);
        java.io.Writer writer33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        int int43 = partial40.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = partial40.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean46 = partial40.isSupported(dateTimeFieldType45);
        boolean boolean47 = partial37.isEqual((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        int int52 = partial49.compareTo((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        boolean boolean55 = partial51.isAfter((org.joda.time.ReadablePartial) partial54);
        boolean boolean56 = partial40.isAfter((org.joda.time.ReadablePartial) partial51);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(writer33, (org.joda.time.ReadablePartial) partial51);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(dateTimeParser14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2000 + "'", int15 == 2000);
        org.junit.Assert.assertNull(chronology16);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test01232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01232");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        boolean boolean7 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        int int13 = partial10.compareTo((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = partial10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Chronology chronology16 = chronology14.withZone(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 0, chronology14);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        org.joda.time.DateTime dateTime21 = dateTime19.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime21.toMutableDateTime();
        org.joda.time.DateTime dateTime23 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        int int29 = partial26.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = partial26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology30);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.minus(readableDuration34);
        org.joda.time.DateTime dateTime37 = dateTime33.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime39 = dateTime33.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime41 = dateTime39.minusWeeks(19);
        org.joda.time.DateTime dateTime43 = dateTime39.plusMillis((int) '#');
        int int44 = dateTime43.getDayOfMonth();
        boolean boolean45 = partial3.equals((java.lang.Object) dateTime43);
        int[] intArray46 = partial3.getValues();
        java.lang.String str47 = partial3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
    }

    @Test
    public void test01233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01233");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        boolean boolean30 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime32 = dateTime29.withMillis((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime29.withYearOfCentury((int) (short) 0);
        org.joda.time.DateTime dateTime35 = dateTime34.toDateTimeISO();
        int int36 = dateTime34.getYear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1900 + "'", int36 == 1900);
    }

    @Test
    public void test01234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01234");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.DateTime dateTime15 = property14.withMinimumValue();
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.DateTime.Property property17 = dateTime15.minuteOfDay();
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = null;
        org.joda.time.format.DateTimeParser dateTimeParser19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter18, dateTimeParser19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter20.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser22 = dateTimeFormatter20.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = dateTimeFormatter20.getPrinter();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale24.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter20.withLocale(locale24);
        java.lang.String str28 = property17.getAsShortText(locale24);
        org.joda.time.DateTime dateTime30 = property17.addToCopy((-10L));
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        int int35 = partial32.compareTo((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology36 = partial32.getChronology();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.DateTime dateTime48 = dateTime46.withHourOfDay(0);
        org.joda.time.DateTime dateTime49 = partial32.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateMidnight dateMidnight50 = dateTime49.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight51 = dateTime49.toDateMidnight();
        org.joda.time.DateTime dateTime53 = dateTime49.minusMinutes((int) '#');
        int int54 = dateTime53.getMinuteOfDay();
        int int55 = property17.getDifference((org.joda.time.ReadableInstant) dateTime53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime57 = property17.setCopy(22200);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22200 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0120-01-01T00:00:00.000Z" + "'", str16, "0120-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNull(dateTimeParser22);
        org.junit.Assert.assertNull(dateTimePrinter23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0" + "'", str28, "0");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1405 + "'", int54 == 1405);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-973006525) + "'", int55 == (-973006525));
    }

    @Test
    public void test01235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01235");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology12.add(readablePeriod15, (long) 12, 0);
        org.joda.time.DateTimeField dateTimeField19 = chronology12.millisOfDay();
        java.lang.String str20 = dateTimeField19.getName();
        boolean boolean21 = dateTimeField19.isSupported();
        long long23 = dateTimeField19.roundFloor(62135596800097L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 12L + "'", long18 == 12L);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "millisOfDay" + "'", str20, "millisOfDay");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 62135596800097L + "'", long23 == 62135596800097L);
    }

    @Test
    public void test01236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01236");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DurationField durationField20 = durationFieldType13.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime11.withChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfWeek();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        int int28 = partial25.compareTo((org.joda.time.ReadablePartial) partial27);
        java.lang.String str29 = partial25.toString();
        org.joda.time.Partial partial30 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        int int36 = partial33.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = partial33.getChronology();
        org.joda.time.DurationField durationField38 = durationFieldType31.getField(chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.weekyearOfCentury();
        org.joda.time.DurationField durationField41 = dateTimeField40.getLeapDurationField();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        int int46 = partial43.compareTo((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology47 = partial43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField50 = chronology49.weekOfWeekyear();
        int int52 = dateTimeField50.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        int int57 = partial54.compareTo((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        boolean boolean60 = partial56.isAfter((org.joda.time.ReadablePartial) partial59);
        java.lang.String str61 = partial59.toString();
        java.util.Locale locale63 = null;
        java.lang.String str64 = dateTimeField50.getAsShortText((org.joda.time.ReadablePartial) partial59, 53, locale63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        int int69 = partial66.compareTo((org.joda.time.ReadablePartial) partial68);
        org.joda.time.Chronology chronology70 = partial66.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.era();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = new org.joda.time.Partial(chronology72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        int int76 = partial73.compareTo((org.joda.time.ReadablePartial) partial75);
        int[] intArray78 = new int[] { 2 };
        int int79 = dateTimeField71.getMinimumValue((org.joda.time.ReadablePartial) partial73, intArray78);
        int int80 = dateTimeField40.getMaximumValue((org.joda.time.ReadablePartial) partial59, intArray78);
        int int81 = dateTimeField23.getMinimumValue((org.joda.time.ReadablePartial) partial30, intArray78);
        int int83 = dateTimeField23.getMaximumValue(86399999L);
        org.joda.time.DurationField durationField84 = dateTimeField23.getLeapDurationField();
        long long86 = dateTimeField23.roundFloor((long) 70);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNull(durationField41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 53 + "'", int52 == 53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "53" + "'", str64, "53");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[2]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 99 + "'", int80 == 99);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 7 + "'", int83 == 7);
        org.junit.Assert.assertNull(durationField84);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
    }

    @Test
    public void test01237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01237");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property15 = dateTime11.era();
        int int16 = property15.getMaximumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.plus(readablePeriod18);
        org.joda.time.DateTime dateTime21 = dateTime17.withMinuteOfHour(6);
        org.joda.time.DateTime.Property property22 = dateTime21.minuteOfDay();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test01238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01238");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTime dateTime14 = dateTime9.withWeekyear(23);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = dateTime14.isBefore(readableInstant15);
        org.joda.time.DateMidnight dateMidnight17 = dateTime14.toDateMidnight();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.days();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.Chronology chronology31 = dateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.dayOfWeek();
        org.joda.time.DurationField durationField34 = chronology31.seconds();
        org.joda.time.DurationField durationField35 = durationFieldType18.getField(chronology31);
        org.joda.time.DurationField durationField36 = chronology31.halfdays();
        org.joda.time.DateTime dateTime37 = dateTime14.withChronology(chronology31);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        long long41 = chronology31.add(readablePeriod38, (long) 19, 70);
        // The following exception was thrown during execution in test generation
        try {
            long long46 = chronology31.getDateTimeMillis(0, 4, 999, 8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 999 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 19L + "'", long41 == 19L);
    }

    @Test
    public void test01239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01239");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        long long16 = chronology12.set((org.joda.time.ReadablePartial) partial14, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = partial14.getFieldTypes();
        java.util.Locale locale18 = java.util.Locale.PRC;
        boolean boolean19 = partial14.equals((java.lang.Object) locale18);
        int int20 = partial14.size();
        org.joda.time.Chronology chronology21 = partial14.getChronology();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial14.minus(readablePeriod22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType25 = partial23.getFieldType((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(partial23);
    }

    @Test
    public void test01240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01240");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int int25 = partial22.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = partial22.getChronology();
        org.joda.time.DurationField durationField27 = durationFieldType20.getField(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfMonth();
        org.joda.time.DateTime dateTime30 = dateTime19.toDateTime(chronology26);
        org.joda.time.Chronology chronology31 = chronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = chronology26.yearOfEra();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = partial35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.weekOfWeekyear();
        int int44 = dateTimeField42.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        int int50 = partial47.compareTo((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = partial47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.Chronology chronology53 = chronology51.withZone(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) 0, chronology51);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.minus(readableDuration55);
        org.joda.time.Chronology chronology57 = dateTime54.getChronology();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        long long61 = chronology57.set((org.joda.time.ReadablePartial) partial59, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray62 = partial59.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = partial59.getFormatter();
        java.util.Locale locale66 = java.util.Locale.forLanguageTag("0120-01-01T00:00:00.000Z");
        java.lang.String str67 = dateTimeField42.getAsText((org.joda.time.ReadablePartial) partial59, 10, locale66);
        java.lang.String str68 = dateTimeField32.getAsText(292278993, locale66);
        java.lang.String str69 = locale66.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 53 + "'", int44 == 53);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray62);
        org.junit.Assert.assertNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "10" + "'", str67, "10");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "292278993" + "'", str68, "292278993");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
    }

    @Test
    public void test01241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01241");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTimeField dateTimeField10 = chronology6.millisOfDay();
        int int11 = dateTimeField10.getMinimumValue();
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = dateTimeField10.getAsShortText((long) (byte) -1, locale13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        int int19 = partial16.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        boolean boolean22 = partial18.isAfter((org.joda.time.ReadablePartial) partial21);
        java.lang.String str23 = partial21.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        org.joda.time.Partial partial25 = partial21.without(dateTimeFieldType24);
        int int26 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int int32 = partial29.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = partial29.getChronology();
        org.joda.time.DurationField durationField34 = durationFieldType27.getField(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.weekOfWeekyear();
        long long38 = dateTimeField35.getDifferenceAsLong(5443200010L, (long) (short) 1);
        org.joda.time.format.DateTimePrinter dateTimePrinter40 = null;
        org.joda.time.format.DateTimeParser dateTimeParser41 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter40, dateTimeParser41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter42.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser44 = dateTimeFormatter42.getParser();
        int int45 = dateTimeFormatter42.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter42.withZoneUTC();
        java.util.Locale locale47 = java.util.Locale.CHINA;
        java.lang.String str48 = locale47.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter46.withLocale(locale47);
        java.lang.String str50 = dateTimeField35.getAsText(5443200012L, locale47);
        int int51 = dateTimeField10.getMaximumTextLength(locale47);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "86399999" + "'", str14, "86399999");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 86399999 + "'", int26 == 86399999);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 9L + "'", long38 == 9L);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNull(dateTimeParser44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2000 + "'", int45 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "CN" + "'", str48, "CN");
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "10" + "'", str50, "10");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 8 + "'", int51 == 8);
    }

    @Test
    public void test01242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01242");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str14 = dateTimeFieldType13.getName();
        int int15 = dateTime9.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime17 = dateTime9.minusMinutes(4);
        int int18 = dateTime9.getWeekyear();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime9.plus(readableDuration19);
        org.joda.time.Instant instant21 = dateTime9.toInstant();
        org.joda.time.DateTime dateTime23 = dateTime9.minusYears((int) 'a');
        boolean boolean25 = dateTime9.isBefore(62135596560000L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "halfdayOfDay" + "'", str14, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test01243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01243");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder1.setVariant("");
        java.util.Locale.Builder builder5 = builder1.clearExtensions();
        java.util.Locale locale6 = builder5.build();
        java.util.Locale.Builder builder7 = builder5.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.setLanguage("kor");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.setLanguageTag("DateTimeField[dayOfMonth]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: DateTimeField[dayOfMonth] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test01244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01244");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        org.joda.time.Chronology chronology5 = dateTimeFormatter3.getChronolgy();
        java.util.Locale locale6 = dateTimeFormatter3.getLocale();
        java.util.Locale locale10 = new java.util.Locale("Property[millisOfSecond]", "hi!", "");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter3.withLocale(locale10);
        java.io.Writer writer12 = null;
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = null;
        org.joda.time.format.DateTimeParser dateTimeParser15 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter14, dateTimeParser15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter16.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser18 = dateTimeFormatter16.getParser();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.DateTime dateTime32 = dateTime28.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime34 = dateTime28.withSecondOfMinute(0);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime28.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter16.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(0L, dateTimeZone35);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter3.printTo(writer12, (org.joda.time.ReadableInstant) dateTime37);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertEquals(locale10.toString(), "property[millisofsecond]_HI!");
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNull(dateTimeParser18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
    }

    @Test
    public void test01245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01245");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        org.joda.time.DateTime dateTime13 = dateTime11.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTime();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readableDuration25);
        org.joda.time.DateTime.Property property27 = dateTime26.millisOfSecond();
        boolean boolean28 = mutableDateTime14.isBefore((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime30 = dateTime26.withWeekyear(19);
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays(0);
        int int33 = dateTime30.getMonthOfYear();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime36 = dateTime30.withDurationAdded(readableDuration34, 100);
        int int37 = dateTime30.getCenturyOfEra();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test01246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01246");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("zh", (double) (byte) 0);
        java.lang.Object obj3 = null;
        boolean boolean4 = languageRange2.equals(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test01247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01247");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DurationField durationField7 = durationFieldType0.getField(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        java.lang.String str10 = dateTimeField9.toString();
        java.util.Locale locale15 = new java.util.Locale("fr-CA", "1", "86399999");
        java.lang.String str16 = dateTimeField9.getAsShortText(19, locale15);
        java.util.Set<java.lang.String> strSet17 = locale15.getUnicodeLocaleKeys();
        java.lang.String str18 = locale15.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = locale15.getISO3Country();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter country code for 1");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str10, "DateTimeField[dayOfMonth]");
        org.junit.Assert.assertEquals(locale15.toString(), "fr-ca_1_86399999");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "19" + "'", str16, "19");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
    }

    @Test
    public void test01248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01248");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        java.lang.Integer int5 = dateTimeFormatter4.getPivotYear();
        java.lang.StringBuffer stringBuffer6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = partial8.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean14 = partial8.isSupported(dateTimeFieldType13);
        org.joda.time.Chronology chronology15 = partial8.getChronology();
        org.joda.time.Partial partial16 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        int int21 = partial18.compareTo((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = partial18.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean24 = partial18.isSupported(dateTimeFieldType23);
        org.joda.time.Chronology chronology25 = partial18.getChronology();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial18.plus(readablePeriod26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        int int33 = partial30.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = partial30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 0, chronology34);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.minus(readableDuration38);
        org.joda.time.DateTime.Property property40 = dateTime39.millisOfSecond();
        org.joda.time.DateTime dateTime42 = dateTime39.minus((long) (short) 10);
        org.joda.time.DateTime dateTime44 = dateTime39.withWeekOfWeekyear(19);
        org.joda.time.DateTime dateTime45 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean46 = partial16.isEqual((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial18.plus(readablePeriod47);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter4.printTo(stringBuffer6, (org.joda.time.ReadablePartial) partial48);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(partial48);
    }

    @Test
    public void test01249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01249");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property15 = dateTime11.era();
        java.lang.String str16 = property15.getAsString();
        org.joda.time.DateTime dateTime17 = property15.roundCeilingCopy();
        java.lang.String str18 = property15.getAsText();
        org.joda.time.DateTime dateTime19 = property15.roundHalfEvenCopy();
        java.lang.String str20 = dateTime19.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ap. J.-C." + "'", str18, "ap. J.-C.");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0001-01-01T00:00:00.000Z" + "'", str20, "0001-01-01T00:00:00.000Z");
    }

    @Test
    public void test01250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01250");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str4 = locale3.getDisplayCountry();
        java.util.Locale.Builder builder5 = builder0.setLocale(locale3);
        java.util.Locale.Builder builder7 = builder5.setRegion("CA");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.setRegion("ISOChronology[Etc/UTC]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ISOChronology[Etc/UTC] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Canada" + "'", str4, "Canada");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test01251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01251");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        int int21 = partial18.compareTo((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = partial18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Chronology chronology24 = chronology22.withZone(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 0, chronology22);
        org.joda.time.DateTime dateTime27 = dateTime25.withHourOfDay(0);
        org.joda.time.DateTime dateTime29 = dateTime27.withYear((int) 'a');
        boolean boolean30 = dateTime27.isEqualNow();
        org.joda.time.DateMidnight dateMidnight31 = dateTime27.toDateMidnight();
        int int32 = dateTime27.getEra();
        org.joda.time.DateTime dateTime34 = dateTime27.plusHours(720);
        org.joda.time.DateTime.Property property35 = dateTime34.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int36 = property12.getDifference((org.joda.time.ReadableInstant) dateTime34);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -2592000000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test01252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01252");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        org.joda.time.DateTime dateTime14 = dateTime11.minus((long) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime11.plusDays(97);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        int int21 = partial18.compareTo((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = partial18.getChronology();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        int int28 = partial25.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = partial25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Chronology chronology31 = chronology29.withZone(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 0, chronology29);
        org.joda.time.DateTime dateTime34 = dateTime32.withHourOfDay(0);
        org.joda.time.DateTime dateTime35 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateMidnight dateMidnight36 = dateTime35.toDateMidnight();
        org.joda.time.DateTime dateTime38 = dateTime35.plusWeeks((int) 'u');
        org.joda.time.DateTime dateTime40 = dateTime38.plusMillis((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int42 = dateTime38.get(dateTimeFieldType41);
        org.joda.time.DateTime.Property property43 = dateTime16.property(dateTimeFieldType41);
        java.util.Locale locale45 = null;
        org.joda.time.DateTime dateTime46 = property43.setCopy("8", locale45);
        int int47 = dateTime46.getSecondOfMinute();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 72 + "'", int42 == 72);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test01253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01253");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTime.Property property13 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime15 = dateTime9.withMillisOfDay((int) 'a');
        org.joda.time.DateTime.Property property16 = dateTime9.monthOfYear();
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = locale17.toLanguageTag();
        java.lang.String str21 = locale17.toLanguageTag();
        java.lang.String str22 = locale17.getDisplayScript();
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayScript(locale24);
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str27 = locale26.getDisplayCountry();
        java.lang.String str28 = locale24.getDisplayName(locale26);
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.lang.String str30 = locale26.getDisplayScript(locale29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        int int36 = partial33.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = partial33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 0, chronology37);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.minus(readableDuration41);
        org.joda.time.DateTime dateTime44 = dateTime40.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime46 = dateTime40.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime48 = dateTime46.minusWeeks(19);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        int int56 = partial53.compareTo((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Chronology chronology57 = partial53.getChronology();
        org.joda.time.DurationField durationField58 = durationFieldType51.getField(chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.dayOfMonth();
        org.joda.time.DateTime dateTime61 = dateTime50.toDateTime(chronology57);
        org.joda.time.Chronology chronology62 = chronology57.withUTC();
        org.joda.time.DateTimeField dateTimeField63 = chronology57.hourOfDay();
        long long65 = dateTimeField63.roundHalfFloor(86399999L);
        java.util.Locale locale66 = java.util.Locale.CANADA_FRENCH;
        boolean boolean67 = locale66.hasExtensions();
        int int68 = dateTimeField63.getMaximumTextLength(locale66);
        java.util.Locale locale69 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str70 = locale66.getDisplayName(locale69);
        java.lang.String str71 = locale66.getDisplayScript();
        java.lang.String str72 = locale29.getDisplayScript(locale66);
        boolean boolean73 = locale66.hasExtensions();
        java.lang.String str74 = locale17.getDisplayScript(locale66);
        int int75 = property16.getMaximumShortTextLength(locale17);
        java.lang.String str76 = locale17.toLanguageTag();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "fran\347ais (Canada)" + "'", str19, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fr-CA" + "'", str20, "fr-CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fr-CA" + "'", str21, "fr-CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Canada" + "'", str27, "Canada");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "cor\351en" + "'", str28, "cor\351en");
        org.junit.Assert.assertNotNull(locale29);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 86400000L + "'", long65 == 86400000L);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "fran\347ais (Canada)" + "'", str70, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 5 + "'", int75 == 5);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "fr-CA" + "'", str76, "fr-CA");
    }

    @Test
    public void test01254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01254");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        boolean boolean21 = partial17.isAfter((org.joda.time.ReadablePartial) partial20);
        java.lang.String str22 = partial20.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial20.without(dateTimeFieldType23);
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.lang.String str29 = locale26.getDisplayVariant();
        java.util.Locale locale30 = locale26.stripExtensions();
        java.lang.String str31 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) partial20, 53, locale30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        int int36 = partial33.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = partial33.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean39 = partial33.isSupported(dateTimeFieldType38);
        org.joda.time.Chronology chronology40 = partial33.getChronology();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial33.plus(readablePeriod41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean44 = partial33.isSupported(dateTimeFieldType43);
        boolean boolean45 = partial20.isSupported(dateTimeFieldType43);
        org.joda.time.format.DateTimePrinter dateTimePrinter47 = null;
        org.joda.time.format.DateTimeParser dateTimeParser48 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter47, dateTimeParser48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter49.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser51 = dateTimeFormatter49.getParser();
        int int52 = dateTimeFormatter49.getDefaultYear();
        org.joda.time.Chronology chronology53 = dateTimeFormatter49.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter54 = null;
        org.joda.time.format.DateTimeParser dateTimeParser55 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter54, dateTimeParser55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        int int61 = partial58.compareTo((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology62 = partial58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.Chronology chronology64 = chronology62.withZone(dateTimeZone63);
        org.joda.time.DateTimeField dateTimeField65 = chronology64.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone66 = chronology64.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter56.withZone(dateTimeZone66);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter49.withZone(dateTimeZone66);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(dateTimeZone66);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(dateTimeZone66);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(73L, dateTimeZone66);
        org.joda.time.DateTime dateTime72 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime74 = dateTime72.plusDays(12);
        org.joda.time.DateTime dateTime75 = dateTime72.toDateTime();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fran\347ais (Canada)" + "'", str28, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "53" + "'", str31, "53");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNull(dateTimeParser51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2000 + "'", int52 == 2000);
        org.junit.Assert.assertNull(chronology53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
    }

    @Test
    public void test01255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01255");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekOfWeekyear();
        int int10 = dateTimeField8.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        boolean boolean18 = partial14.isAfter((org.joda.time.ReadablePartial) partial17);
        java.lang.String str19 = partial17.toString();
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) partial17, 53, locale21);
        long long24 = dateTimeField8.roundFloor((long) 53);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        int int29 = partial26.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        boolean boolean32 = partial28.isAfter((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial28);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean35 = partial28.isSupported(dateTimeFieldType34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        int int41 = partial38.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 0, chronology42);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.minus(readableDuration46);
        org.joda.time.DateTime dateTime49 = dateTime45.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime51 = dateTime45.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime53 = dateTime51.minusWeeks(19);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        int int61 = partial58.compareTo((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology62 = partial58.getChronology();
        org.joda.time.DurationField durationField63 = durationFieldType56.getField(chronology62);
        org.joda.time.DateTimeField dateTimeField64 = chronology62.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.dayOfMonth();
        org.joda.time.DateTime dateTime66 = dateTime55.toDateTime(chronology62);
        org.joda.time.DateTimeField dateTimeField67 = chronology62.weekyearOfCentury();
        org.joda.time.Partial partial68 = partial28.withChronologyRetainFields(chronology62);
        int int69 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) partial68);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField71 = partial68.getField(9);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 9");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "53" + "'", str22, "53");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-259200000L) + "'", long24 == (-259200000L));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
    }

    @Test
    public void test01256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01256");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        boolean boolean7 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        int int13 = partial10.compareTo((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = partial10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Chronology chronology16 = chronology14.withZone(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 0, chronology14);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        org.joda.time.DateTime dateTime21 = dateTime19.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime21.toMutableDateTime();
        org.joda.time.DateTime dateTime23 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        int int29 = partial26.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = partial26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology30);
        org.joda.time.DateTime dateTime35 = dateTime33.withHourOfDay(0);
        int int36 = dateTime35.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DurationField durationField44 = durationFieldType37.getField(chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.weekOfWeekyear();
        org.joda.time.DateTime dateTime46 = dateTime35.withChronology(chronology43);
        java.util.Date date47 = dateTime46.toDate();
        boolean boolean48 = partial3.equals((java.lang.Object) dateTime46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        int int54 = partial51.compareTo((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = partial51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.Chronology chronology57 = chronology55.withZone(dateTimeZone56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 0, chronology55);
        org.joda.time.DateTime dateTime60 = dateTime58.withHourOfDay(0);
        int int61 = dateTime60.getCenturyOfEra();
        boolean boolean63 = dateTime60.equals((java.lang.Object) '4');
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.DateTime dateTime66 = dateTime60.withDurationAdded(readableDuration64, 1);
        org.joda.time.Instant instant67 = dateTime60.toInstant();
        boolean boolean68 = dateTime46.isEqual((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Chronology chronology69 = dateTime46.getChronology();
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray73 = chronology69.get(readablePeriod70, 2035L, 2035L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 19 + "'", int36 == 19);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 19 + "'", int61 == 19);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(chronology69);
    }

    @Test
    public void test01257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01257");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.removeUnicodeLocaleAttribute("CAN");
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder4.setScript("CA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: CA [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test01258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01258");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        int int15 = dateTimeField13.getMaximumValue((long) 1439);
        org.joda.time.DurationField durationField16 = dateTimeField13.getLeapDurationField();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertNull(durationField16);
    }

    @Test
    public void test01259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01259");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.era();
        long long9 = dateTimeField6.addWrapField((long) 9, (-973006525));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-124334351999991L) + "'", long9 == (-124334351999991L));
    }

    @Test
    public void test01260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01260");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology8.getZone();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 5, dateTimeZone10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTime13.withHourOfDay(292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
    }

    @Test
    public void test01261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01261");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 0, chronology8);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.minus(readableDuration12);
        org.joda.time.Chronology chronology14 = dateTime11.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.centuries();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 1970, chronology14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(180100L, chronology14);
        org.joda.time.Instant instant18 = dateTime17.toInstant();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(instant18);
    }

    @Test
    public void test01262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01262");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.DateTime dateTime18 = dateTime16.withHourOfDay(0);
        org.joda.time.DateTime dateTime20 = dateTime18.withYear((int) 'a');
        boolean boolean21 = dateTime18.isEqualNow();
        org.joda.time.DateMidnight dateMidnight22 = dateTime18.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone23 = dateMidnight22.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter2.withZone(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter24.withPivotYear((java.lang.Integer) 0);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int int32 = partial29.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = partial29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 0, chronology33);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readableDuration37);
        org.joda.time.Chronology chronology39 = dateTime36.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str41 = dateTimeFieldType40.getName();
        int int42 = dateTime36.get(dateTimeFieldType40);
        org.joda.time.DateTime dateTime44 = dateTime36.minusMinutes(4);
        org.joda.time.Instant instant45 = dateTime44.toInstant();
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTime dateTime47 = dateTime44.minus(readableDuration46);
        java.util.Date date48 = dateTime44.toDate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = dateTimeFormatter26.print((org.joda.time.ReadableInstant) dateTime44);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "halfdayOfDay" + "'", str41, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:56:00 UTC 1969");
    }

    @Test
    public void test01263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01263");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withDefaultYear(99);
        java.io.Writer writer17 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.DateTime dateTime29 = dateTime27.withHourOfDay(0);
        int int30 = dateTime29.getCenturyOfEra();
        boolean boolean32 = dateTime29.equals((java.lang.Object) '4');
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = partial35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 0, chronology39);
        org.joda.time.DateTime dateTime44 = dateTime42.withHourOfDay(0);
        int int45 = dateTime44.getCenturyOfEra();
        boolean boolean47 = dateTime44.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime48 = dateTime44.withEarlierOffsetAtOverlap();
        boolean boolean49 = dateTime29.isAfter((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime51 = dateTime48.minus((long) 3);
        org.joda.time.DateTime.Property property52 = dateTime48.minuteOfHour();
        org.joda.time.DateTime.Property property53 = dateTime48.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer17, (org.joda.time.ReadableInstant) dateTime48);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 19 + "'", int30 == 19);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 19 + "'", int45 == 19);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
    }

    @Test
    public void test01264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01264");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int int25 = partial22.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = partial22.getChronology();
        org.joda.time.DurationField durationField27 = durationFieldType20.getField(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfMonth();
        org.joda.time.DateTime dateTime30 = dateTime19.toDateTime(chronology26);
        org.joda.time.Chronology chronology31 = chronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = chronology26.hourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology26.millisOfSecond();
        java.lang.String str35 = dateTimeField33.getAsText((long) 100);
        boolean boolean36 = dateTimeField33.isSupported();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "100" + "'", str35, "100");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test01265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01265");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isOffsetParsed();
        boolean boolean6 = dateTimeFormatter2.isPrinter();
        java.io.Writer writer7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekOfWeekyear();
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        int int20 = dateTimeField16.getMaximumTextLength(locale18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.minus(readableDuration31);
        org.joda.time.Chronology chronology33 = dateTime30.getChronology();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        long long37 = chronology33.set((org.joda.time.ReadablePartial) partial35, (long) (byte) -1);
        int int38 = dateTimeField16.getMinimumValue((org.joda.time.ReadablePartial) partial35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial35.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial42 = partial35.withPeriodAdded(readablePeriod40, (int) (short) -1);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        int int48 = partial45.compareTo((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = partial45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 0, chronology49);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.minus(readableDuration53);
        org.joda.time.DateTime dateTime56 = dateTime52.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property57 = dateTime56.dayOfYear();
        org.joda.time.DateTime dateTime58 = property57.withMinimumValue();
        boolean boolean59 = dateTime58.isAfterNow();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int61 = dateTime58.get(dateTimeFieldType60);
        org.joda.time.DurationFieldType durationFieldType62 = dateTimeFieldType60.getDurationType();
        org.joda.time.Partial partial63 = partial42.without(dateTimeFieldType60);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer7, (org.joda.time.ReadablePartial) partial42);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "fran\347ais (Canada)" + "'", str19, "fran\347ais (Canada)");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 12 + "'", int61 == 12);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(partial63);
    }

    @Test
    public void test01266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01266");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.minus(readableDuration11);
        org.joda.time.Chronology chronology13 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.dayOfWeek();
        org.joda.time.DurationField durationField16 = chronology13.seconds();
        org.joda.time.DurationField durationField17 = durationFieldType0.getField(chronology13);
        org.joda.time.DurationField durationField18 = chronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.secondOfMinute();
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("und");
        java.lang.String str23 = dateTimeField19.getAsShortText(12L, locale22);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0" + "'", str23, "0");
    }

    @Test
    public void test01267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01267");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone12);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = dateTimeFormatter2.parseMillis("PM");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
    }

    @Test
    public void test01268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01268");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.monthOfYear();
        int int11 = dateTimeField9.getMinimumValue(62135596886340L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test01269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01269");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.era();
        long long12 = chronology5.add((long) 22200, (long) 35, 2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 22270L + "'", long12 == 22270L);
    }

    @Test
    public void test01270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01270");
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = partial8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology12);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.minus(readableDuration16);
        org.joda.time.Chronology chronology18 = dateTime15.getChronology();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        long long22 = chronology18.set((org.joda.time.ReadablePartial) partial20, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = partial20.getFieldTypes();
        java.util.Locale locale24 = java.util.Locale.PRC;
        boolean boolean25 = partial20.equals((java.lang.Object) locale24);
        int int26 = partial20.size();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int int32 = partial29.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = partial29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 0, chronology33);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readableDuration37);
        org.joda.time.DateTime dateTime40 = dateTime36.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime42 = dateTime36.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime44 = dateTime42.minusWeeks(19);
        org.joda.time.DateTime dateTime46 = dateTime42.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        int int52 = partial49.compareTo((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = partial49.getChronology();
        org.joda.time.DurationField durationField54 = durationFieldType47.getField(chronology53);
        org.joda.time.DateTimeField dateTimeField55 = chronology53.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.dayOfMonth();
        org.joda.time.DateTime dateTime57 = dateTime46.toDateTime(chronology53);
        org.joda.time.Chronology chronology58 = chronology53.withUTC();
        org.joda.time.Partial partial59 = partial20.withChronologyRetainFields(chronology58);
        boolean boolean60 = dateTimeFieldType5.isSupported(chronology58);
        org.joda.time.format.DateTimePrinter dateTimePrinter61 = null;
        org.joda.time.format.DateTimeParser dateTimeParser62 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter61, dateTimeParser62);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter63.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser65 = dateTimeFormatter63.getParser();
        int int66 = dateTimeFormatter63.getDefaultYear();
        org.joda.time.Chronology chronology67 = dateTimeFormatter63.getChronology();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(chronology71);
        int int73 = partial70.compareTo((org.joda.time.ReadablePartial) partial72);
        org.joda.time.Chronology chronology74 = partial70.getChronology();
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.Chronology chronology76 = chronology74.withZone(dateTimeZone75);
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) 0, chronology74);
        org.joda.time.DateTime dateTime79 = dateTime77.withHourOfDay(0);
        org.joda.time.DateTime dateTime81 = dateTime79.withYear((int) 'a');
        boolean boolean82 = dateTime79.isEqualNow();
        org.joda.time.DateMidnight dateMidnight83 = dateTime79.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone84 = dateMidnight83.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter85 = dateTimeFormatter63.withZone(dateTimeZone84);
        org.joda.time.Chronology chronology86 = chronology58.withZone(dateTimeZone84);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime(2, 100, (int) 'x', 99, 1900, dateTimeZone84);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 99 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNull(dateTimeParser65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2000 + "'", int66 == 2000);
        org.junit.Assert.assertNull(chronology67);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(dateTimeFormatter85);
        org.junit.Assert.assertNotNull(chronology86);
    }

    @Test
    public void test01271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01271");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DurationField durationField7 = durationFieldType0.getField(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.dayOfYear();
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.lang.String str15 = dateTimeField10.getAsShortText((long) (byte) 10, locale12);
        java.lang.Class<?> wildcardClass16 = locale12.getClass();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test01272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01272");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        boolean boolean21 = partial17.isAfter((org.joda.time.ReadablePartial) partial20);
        java.lang.String str22 = partial20.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial20.without(dateTimeFieldType23);
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.lang.String str29 = locale26.getDisplayVariant();
        java.util.Locale locale30 = locale26.stripExtensions();
        java.lang.String str31 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) partial20, 53, locale30);
        int int32 = partial20.size();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = partial35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 0, chronology39);
        org.joda.time.DateTime dateTime44 = dateTime42.withHourOfDay(0);
        int int45 = dateTime44.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        int int51 = partial48.compareTo((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Chronology chronology52 = partial48.getChronology();
        org.joda.time.DurationField durationField53 = durationFieldType46.getField(chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.weekOfWeekyear();
        org.joda.time.DateTime dateTime55 = dateTime44.withChronology(chronology52);
        org.joda.time.DateTime dateTime58 = dateTime55.withDurationAdded(1L, 0);
        org.joda.time.DateTime dateTime60 = dateTime55.withMillisOfDay((int) (short) 1);
        org.joda.time.DateTime.Property property61 = dateTime60.secondOfDay();
        int int62 = dateTime60.getMillisOfSecond();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        int int68 = partial65.compareTo((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology69 = partial65.getChronology();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.Chronology chronology71 = chronology69.withZone(dateTimeZone70);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) 0, chronology69);
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.DateTime dateTime74 = dateTime72.minus(readableDuration73);
        org.joda.time.DateTime dateTime76 = dateTime72.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime78 = dateTime72.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime80 = dateTime78.minusWeeks(19);
        boolean boolean81 = dateTime60.isEqual((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTime dateTime83 = dateTime60.plusMillis(10);
        org.joda.time.DateTime dateTime84 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime86 = dateTime83.withYearOfEra(31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime88 = dateTime83.withDayOfWeek(1971);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1971 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fran\347ais (Canada)" + "'", str28, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "53" + "'", str31, "53");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 19 + "'", int45 == 19);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
    }

    @Test
    public void test01273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01273");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.yearOfEra();
        int int16 = dateTimeField14.get(59L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
    }

    @Test
    public void test01274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01274");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(1970, 720, (int) (short) -1, 4, 0, 7, 8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 720 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01275");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTimeField dateTimeField10 = chronology6.millisOfDay();
        int int11 = dateTimeField10.getMinimumValue();
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = dateTimeField10.getAsShortText((long) (byte) -1, locale13);
        int int16 = dateTimeField10.get((long) (short) 1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        int int22 = partial19.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = partial19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 0, chronology23);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.minus(readableDuration27);
        org.joda.time.Chronology chronology29 = dateTime26.getChronology();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        long long33 = chronology29.set((org.joda.time.ReadablePartial) partial31, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = partial31.getFieldTypes();
        java.util.Locale locale36 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale37 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.lang.String str39 = locale36.toLanguageTag();
        java.lang.String str40 = locale36.toLanguageTag();
        java.lang.String str41 = locale36.getDisplayScript();
        java.util.Locale locale42 = java.util.Locale.ITALIAN;
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.lang.String str44 = locale42.getDisplayScript(locale43);
        java.util.Locale locale45 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str46 = locale45.getDisplayCountry();
        java.lang.String str47 = locale43.getDisplayName(locale45);
        java.util.Locale locale48 = java.util.Locale.getDefault();
        java.lang.String str49 = locale45.getDisplayScript(locale48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        int int55 = partial52.compareTo((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Chronology chronology56 = partial52.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.Chronology chronology58 = chronology56.withZone(dateTimeZone57);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) 0, chronology56);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.DateTime dateTime61 = dateTime59.minus(readableDuration60);
        org.joda.time.DateTime dateTime63 = dateTime59.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime65 = dateTime59.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime67 = dateTime65.minusWeeks(19);
        org.joda.time.DateTime dateTime69 = dateTime65.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(chronology71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        int int75 = partial72.compareTo((org.joda.time.ReadablePartial) partial74);
        org.joda.time.Chronology chronology76 = partial72.getChronology();
        org.joda.time.DurationField durationField77 = durationFieldType70.getField(chronology76);
        org.joda.time.DateTimeField dateTimeField78 = chronology76.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField79 = chronology76.dayOfMonth();
        org.joda.time.DateTime dateTime80 = dateTime69.toDateTime(chronology76);
        org.joda.time.Chronology chronology81 = chronology76.withUTC();
        org.joda.time.DateTimeField dateTimeField82 = chronology76.hourOfDay();
        long long84 = dateTimeField82.roundHalfFloor(86399999L);
        java.util.Locale locale85 = java.util.Locale.CANADA_FRENCH;
        boolean boolean86 = locale85.hasExtensions();
        int int87 = dateTimeField82.getMaximumTextLength(locale85);
        java.util.Locale locale88 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str89 = locale85.getDisplayName(locale88);
        java.lang.String str90 = locale85.getDisplayScript();
        java.lang.String str91 = locale48.getDisplayScript(locale85);
        boolean boolean92 = locale85.hasExtensions();
        java.lang.String str93 = locale36.getDisplayScript(locale85);
        java.lang.String str94 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) partial31, 366, locale85);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType96 = partial31.getFieldType(1970);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1970");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "86399999" + "'", str14, "86399999");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "fran\347ais (Canada)" + "'", str38, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "fr-CA" + "'", str39, "fr-CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "fr-CA" + "'", str40, "fr-CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Canada" + "'", str46, "Canada");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "cor\351en" + "'", str47, "cor\351en");
        org.junit.Assert.assertNotNull(locale48);
// flaky:         org.junit.Assert.assertEquals(locale48.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 86400000L + "'", long84 == 86400000L);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "fran\347ais (Canada)" + "'", str89, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "366" + "'", str94, "366");
    }

    @Test
    public void test01276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01276");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        int int14 = partial11.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = partial11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter9.withZone(dateTimeZone19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withZone(dateTimeZone19);
        boolean boolean22 = dateTimeFormatter2.isPrinter();
        boolean boolean23 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withPivotYear(120);
        java.lang.Appendable appendable26 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int int32 = partial29.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = partial29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 0, chronology33);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readableDuration37);
        org.joda.time.Chronology chronology39 = dateTime36.getChronology();
        org.joda.time.Chronology chronology40 = chronology39.withUTC();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.hourOfDay();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology39);
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology39);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable26, (org.joda.time.ReadablePartial) partial43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test01277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01277");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DurationField durationField7 = durationFieldType0.getField(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.dayOfYear();
        long long12 = dateTimeField10.roundCeiling((long) 8);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 86400000L + "'", long12 == 86400000L);
    }

    @Test
    public void test01278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01278");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        java.lang.String str6 = partial1.toStringList();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.minus(readableDuration17);
        org.joda.time.DateTime dateTime20 = dateTime16.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime22 = dateTime16.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks(19);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int int32 = partial29.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = partial29.getChronology();
        org.joda.time.DurationField durationField34 = durationFieldType27.getField(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.dayOfMonth();
        org.joda.time.DateTime dateTime37 = dateTime26.toDateTime(chronology33);
        org.joda.time.DateTime dateTime38 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DurationFieldType durationFieldType39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime41 = dateTime37.withFieldAdded(durationFieldType39, 86399999);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test01279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01279");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readableDuration20);
        org.joda.time.Chronology chronology22 = dateTime19.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        long long26 = chronology22.set((org.joda.time.ReadablePartial) partial24, (long) (byte) -1);
        int[] intArray28 = chronology6.get((org.joda.time.ReadablePartial) partial24, (long) ' ');
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = partial31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 0, chronology35);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.minus(readableDuration39);
        org.joda.time.DateTime.Property property41 = dateTime40.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean43 = dateTime40.isSupported(dateTimeFieldType42);
        boolean boolean44 = partial24.isSupported(dateTimeFieldType42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        int int49 = partial46.compareTo((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = partial46.getChronology();
        java.lang.String str51 = partial46.toStringList();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        int int57 = partial54.compareTo((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Chronology chronology58 = partial54.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 0, chronology58);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.DateTime dateTime63 = dateTime61.minus(readableDuration62);
        org.joda.time.DateTime dateTime65 = dateTime61.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime67 = dateTime61.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime69 = dateTime67.minusWeeks(19);
        org.joda.time.DateTime dateTime71 = dateTime67.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType72 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = new org.joda.time.Partial(chronology75);
        int int77 = partial74.compareTo((org.joda.time.ReadablePartial) partial76);
        org.joda.time.Chronology chronology78 = partial74.getChronology();
        org.joda.time.DurationField durationField79 = durationFieldType72.getField(chronology78);
        org.joda.time.DateTimeField dateTimeField80 = chronology78.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField81 = chronology78.dayOfMonth();
        org.joda.time.DateTime dateTime82 = dateTime71.toDateTime(chronology78);
        org.joda.time.DateTime dateTime83 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        int int84 = partial24.compareTo((org.joda.time.ReadablePartial) partial46);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = partial46.getValue(2000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test01280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01280");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        boolean boolean30 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime.Property property31 = dateTime29.secondOfMinute();
        boolean boolean32 = property31.isLeap();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = partial35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 0, chronology39);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.minus(readableDuration43);
        org.joda.time.DateTime.Property property45 = dateTime44.millisOfSecond();
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        int int47 = property45.getMaximumTextLength(locale46);
        long long48 = property45.remainder();
        java.lang.String str49 = property45.getAsText();
        org.joda.time.DateTime dateTime50 = property45.roundCeilingCopy();
        int int51 = dateTime50.getMinuteOfDay();
        long long52 = property31.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime53 = property31.roundCeilingCopy();
        org.joda.time.DurationField durationField54 = property31.getDurationField();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(durationField54);
    }

    @Test
    public void test01281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01281");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        org.joda.time.DurationField durationField15 = property12.getRangeDurationField();
        int int16 = property12.getMaximumValueOverall();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 999 + "'", int16 == 999);
    }

    @Test
    public void test01282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01282");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        long long16 = chronology12.set((org.joda.time.ReadablePartial) partial14, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = partial14.getFieldTypes();
        java.util.Locale locale18 = java.util.Locale.PRC;
        boolean boolean19 = partial14.equals((java.lang.Object) locale18);
        int int20 = partial14.size();
        org.joda.time.Chronology chronology21 = partial14.getChronology();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial14.minus(readablePeriod22);
        java.lang.String str24 = partial14.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        int int29 = partial26.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        boolean boolean32 = partial28.isAfter((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = partial35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 0, chronology39);
        org.joda.time.DateTime dateTime44 = dateTime42.withHourOfDay(0);
        int int45 = dateTime44.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        int int51 = partial48.compareTo((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Chronology chronology52 = partial48.getChronology();
        org.joda.time.DurationField durationField53 = durationFieldType46.getField(chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.weekOfWeekyear();
        org.joda.time.DateTime dateTime55 = dateTime44.withChronology(chronology52);
        org.joda.time.DateTime dateTime57 = dateTime44.plusWeeks((int) (short) 1);
        boolean boolean58 = partial28.isMatch((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        int int64 = partial61.compareTo((org.joda.time.ReadablePartial) partial63);
        org.joda.time.Chronology chronology65 = partial61.getChronology();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.Chronology chronology67 = chronology65.withZone(dateTimeZone66);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) 0, chronology65);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.DateTime dateTime70 = dateTime68.minus(readableDuration69);
        org.joda.time.DateTime dateTime72 = dateTime68.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime74 = dateTime68.withSecondOfMinute(0);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = new org.joda.time.Partial(chronology75);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Partial partial78 = new org.joda.time.Partial(chronology77);
        int int79 = partial76.compareTo((org.joda.time.ReadablePartial) partial78);
        org.joda.time.Chronology chronology80 = partial76.getChronology();
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.Chronology chronology82 = chronology80.withZone(dateTimeZone81);
        org.joda.time.DateTimeField dateTimeField83 = chronology82.weekOfWeekyear();
        int int84 = dateTime74.get(dateTimeField83);
        org.joda.time.DateTime dateTime86 = dateTime74.plusMillis(19);
        org.joda.time.DateTime dateTime87 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime86);
        boolean boolean88 = partial14.isAfter((org.joda.time.ReadablePartial) partial28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField90 = partial28.getField(292278994);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 292278994");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 19 + "'", int45 == 19);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test01283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01283");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DurationField durationField20 = durationFieldType13.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime11.withChronology(chronology19);
        org.joda.time.DateTime dateTime25 = dateTime22.withDurationAdded(1L, 0);
        org.joda.time.DateTime dateTime27 = dateTime22.withMillisOfDay((int) (short) 1);
        org.joda.time.DateTime.Property property28 = dateTime27.secondOfDay();
        int int29 = dateTime27.getMillisOfSecond();
        org.joda.time.DateTime dateTime31 = dateTime27.minusDays(31);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test01284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01284");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("86399990", (double) 21168052L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=2.1168052E7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01285");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        int int14 = partial11.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = partial11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter9.withZone(dateTimeZone19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withZone(dateTimeZone19);
        boolean boolean22 = dateTimeFormatter2.isPrinter();
        boolean boolean23 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter24.withPivotYear((java.lang.Integer) 7);
        java.lang.Integer int27 = dateTimeFormatter24.getPivotYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        int int33 = partial30.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = partial30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 0, chronology34);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.minus(readableDuration38);
        org.joda.time.DateTime dateTime41 = dateTime37.withYearOfEra((int) 'x');
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        int int46 = partial43.compareTo((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology47 = partial43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField50 = chronology49.weekOfWeekyear();
        org.joda.time.DateTime dateTime51 = dateTime41.withChronology(chronology49);
        org.joda.time.DateTime.Property property52 = dateTime51.secondOfMinute();
        org.joda.time.DateTime.Property property53 = dateTime51.weekOfWeekyear();
        org.joda.time.DateTime.Property property54 = dateTime51.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = dateTimeFormatter24.print((org.joda.time.ReadableInstant) dateTime51);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test01286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01286");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        int int10 = partial7.compareTo((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime14.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime20 = dateTime14.withSecondOfMinute(0);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime14.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter2.withZone(dateTimeZone21);
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter25.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser27 = dateTimeFormatter25.getParser();
        int int28 = dateTimeFormatter25.getDefaultYear();
        org.joda.time.Chronology chronology29 = dateTimeFormatter25.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = null;
        org.joda.time.format.DateTimeParser dateTimeParser31 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter30, dateTimeParser31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = partial34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology40.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter32.withZone(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter25.withZone(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter22.withZone(dateTimeZone42);
        org.joda.time.Chronology chronology47 = dateTimeFormatter22.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter22.withPivotYear(10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate51 = dateTimeFormatter49.parseLocalDate("Property[monthOfYear]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(dateTimeParser27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2000 + "'", int28 == 2000);
        org.junit.Assert.assertNull(chronology29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
    }

    @Test
    public void test01287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01287");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((int) (byte) 100, 720, 24, 170, 13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 170 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01288");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter2.getParser();
        java.lang.Appendable appendable8 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable8, (long) 59);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimeParser7);
    }

    @Test
    public void test01289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01289");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder1.setVariant("");
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder4.setUnicodeLocaleKeyword("\uce90\ub098\ub2e4", "ko");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: ?????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test01290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01290");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        int int14 = partial11.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = partial11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter9.withZone(dateTimeZone19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withZone(dateTimeZone19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        int int27 = partial24.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = partial24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 0, chronology28);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.minus(readableDuration32);
        org.joda.time.Chronology chronology34 = dateTime31.getChronology();
        org.joda.time.Chronology chronology35 = chronology34.withUTC();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfDay();
        org.joda.time.DurationField durationField37 = chronology34.millis();
        org.joda.time.DurationField durationField38 = chronology34.days();
        org.joda.time.DateTimeField dateTimeField39 = chronology34.yearOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter2.withChronology(chronology34);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        int int46 = partial43.compareTo((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology47 = partial43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 0, chronology47);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.minus(readableDuration51);
        org.joda.time.Chronology chronology53 = dateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.dayOfWeek();
        org.joda.time.DurationField durationField56 = chronology53.seconds();
        org.joda.time.DurationField durationField57 = chronology53.months();
        org.joda.time.DateTimeField dateTimeField58 = chronology53.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        long long62 = chronology53.add(readablePeriod59, (long) 43200, 97);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter2.withChronology(chronology53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime65 = dateTimeFormatter2.parseDateTime("und");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 43200L + "'", long62 == 43200L);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
    }

    @Test
    public void test01291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01291");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("\uc11c\uae30");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"????\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01292");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone12);
        boolean boolean14 = dateTimeFormatter13.isPrinter();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readableDuration25);
        org.joda.time.Chronology chronology27 = dateTime24.getChronology();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        long long31 = chronology27.set((org.joda.time.ReadablePartial) partial29, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = partial29.getFieldTypes();
        java.util.Locale locale33 = java.util.Locale.PRC;
        boolean boolean34 = partial29.equals((java.lang.Object) locale33);
        int int35 = partial29.size();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        int int41 = partial38.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 0, chronology42);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.minus(readableDuration46);
        org.joda.time.DateTime dateTime49 = dateTime45.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime51 = dateTime45.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime53 = dateTime51.minusWeeks(19);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        int int61 = partial58.compareTo((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology62 = partial58.getChronology();
        org.joda.time.DurationField durationField63 = durationFieldType56.getField(chronology62);
        org.joda.time.DateTimeField dateTimeField64 = chronology62.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.dayOfMonth();
        org.joda.time.DateTime dateTime66 = dateTime55.toDateTime(chronology62);
        org.joda.time.Chronology chronology67 = chronology62.withUTC();
        org.joda.time.Partial partial68 = partial29.withChronologyRetainFields(chronology67);
        org.joda.time.Chronology chronology69 = partial68.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter13.withChronology(chronology69);
        org.joda.time.DateTimeField dateTimeField71 = chronology69.dayOfWeek();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNotNull(dateTimeField71);
    }

    @Test
    public void test01293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01293");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTime.Property property13 = dateTime9.weekyear();
        int int14 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime9.minusMinutes((int) '#');
        org.joda.time.DateTime.Property property17 = dateTime9.secondOfMinute();
        org.joda.time.DateTime dateTime18 = property17.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        int int29 = dateTimeField27.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        int int35 = partial32.compareTo((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology36 = partial32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.Chronology chronology38 = chronology36.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 0, chronology36);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.minus(readableDuration40);
        org.joda.time.Chronology chronology42 = dateTime39.getChronology();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        long long46 = chronology42.set((org.joda.time.ReadablePartial) partial44, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = partial44.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = partial44.getFormatter();
        java.util.Locale locale51 = java.util.Locale.forLanguageTag("0120-01-01T00:00:00.000Z");
        java.lang.String str52 = dateTimeField27.getAsText((org.joda.time.ReadablePartial) partial44, 10, locale51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        int int57 = partial54.compareTo((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Chronology chronology58 = partial54.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean60 = partial54.isSupported(dateTimeFieldType59);
        boolean boolean61 = partial44.isSupported(dateTimeFieldType59);
        org.joda.time.DateTime.Property property62 = dateTime18.property(dateTimeFieldType59);
        org.joda.time.Instant instant63 = dateTime18.toInstant();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 53 + "'", int29 == 53);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "10" + "'", str52, "10");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(instant63);
    }

    @Test
    public void test01294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01294");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekOfWeekyear();
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        int int12 = dateTimeField8.getMaximumTextLength(locale10);
        int int14 = dateTimeField8.getLeapAmount((-259200000L));
        java.lang.String str15 = dateTimeField8.toString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean23 = partial17.isSupported(dateTimeFieldType22);
        org.joda.time.Chronology chronology24 = partial17.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        int int31 = partial28.compareTo((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology32 = partial28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.monthOfYear();
        long long39 = dateTimeField36.getDifferenceAsLong((long) (short) 100, (-18L));
        java.util.Locale.Category category41 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale42 = java.util.Locale.getDefault(category41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        int int47 = partial44.compareTo((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology48 = partial44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.weekOfWeekyear();
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale53 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        int int55 = dateTimeField51.getMaximumTextLength(locale53);
        java.util.Locale.setDefault(category41, locale53);
        java.util.Locale locale57 = java.util.Locale.getDefault(category41);
        java.lang.String str58 = dateTimeField36.getAsText((-3600000L), locale57);
        java.lang.String str59 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) partial25, 292278993, locale57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        int int65 = partial62.compareTo((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Chronology chronology66 = partial62.getChronology();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.Chronology chronology68 = chronology66.withZone(dateTimeZone67);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) 0, chronology66);
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.DateTime dateTime71 = dateTime69.minus(readableDuration70);
        org.joda.time.Chronology chronology72 = dateTime69.getChronology();
        org.joda.time.Partial partial73 = partial25.withChronologyRetainFields(chronology72);
        org.joda.time.Chronology chronology74 = chronology72.withUTC();
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray78 = chronology74.get(readablePeriod75, 27820800120L, 4L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fran\347ais (Canada)" + "'", str11, "fran\347ais (Canada)");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DateTimeField[weekOfWeekyear]" + "'", str15, "DateTimeField[weekOfWeekyear]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + category41 + "' != '" + java.util.Locale.Category.FORMAT + "'", category41.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "fran\347ais (Canada)" + "'", str54, "fran\347ais (Canada)");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "d\351cembre" + "'", str58, "d\351cembre");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "292278993" + "'", str59, "292278993");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertNotNull(chronology74);
    }

    @Test
    public void test01295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01295");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime9.getZone();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        int int21 = partial18.compareTo((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = partial18.getChronology();
        java.lang.String str23 = partial18.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        int int29 = partial26.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = partial26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology30);
        org.joda.time.DateTime dateTime35 = dateTime33.withHourOfDay(0);
        int int36 = dateTime35.getCenturyOfEra();
        boolean boolean38 = dateTime35.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property39 = dateTime35.era();
        org.joda.time.DateTime dateTime41 = dateTime35.withHourOfDay(12);
        org.joda.time.DateTime dateTime42 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.lang.String str44 = dateTimeFieldType43.getName();
        org.joda.time.DateTime dateTime46 = dateTime42.withField(dateTimeFieldType43, 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        int int52 = partial49.compareTo((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = partial49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 0, chronology53);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.minus(readableDuration57);
        org.joda.time.DateTime dateTime60 = dateTime56.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime62 = dateTime56.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime64 = dateTime62.minusWeeks(19);
        int int65 = dateTime64.getSecondOfMinute();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        int int71 = partial68.compareTo((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = partial68.getChronology();
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.Chronology chronology74 = chronology72.withZone(dateTimeZone73);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) 0, chronology72);
        org.joda.time.DateTime dateTime77 = dateTime75.withHourOfDay(0);
        org.joda.time.DateTime dateTime79 = dateTime77.withYear((int) 'a');
        boolean boolean80 = dateTime77.isEqualNow();
        org.joda.time.DateMidnight dateMidnight81 = dateTime77.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone82 = dateMidnight81.getZone();
        org.joda.time.DateTime dateTime83 = dateTime64.withZoneRetainFields(dateTimeZone82);
        org.joda.time.DateTime dateTime84 = dateTime46.toDateTime(dateTimeZone82);
        org.joda.time.MutableDateTime mutableDateTime85 = dateTime9.toMutableDateTime(dateTimeZone82);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime90 = dateTime9.withTime((int) (short) 10, (int) (byte) 10, (int) 'a', 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 19 + "'", int36 == 19);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "secondOfDay" + "'", str44, "secondOfDay");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(mutableDateTime85);
    }

    @Test
    public void test01296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01296");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = partial8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology12);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.minus(readableDuration16);
        org.joda.time.DateTime dateTime19 = dateTime15.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime21 = dateTime15.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime23 = dateTime21.minusWeeks(19);
        org.joda.time.DateTime dateTime25 = dateTime21.plusMillis((int) '#');
        int int26 = dateTime25.getDayOfMonth();
        org.joda.time.DateTime dateTime28 = dateTime25.plus((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime25.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(99, 10, (int) (byte) 100, 233, 43200, 70, dateTimeZone29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 233 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
    }

    @Test
    public void test01297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01297");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        boolean boolean30 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime.Property property31 = dateTime29.secondOfMinute();
        java.lang.String str32 = dateTime29.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime34 = dateTime29.withEra(999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 999 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str32, "1970-01-01T00:00:00.000Z");
    }

    @Test
    public void test01298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01298");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter3.getParser();
        int int6 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.Chronology chronology8 = dateTimeFormatter7.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withPivotYear((java.lang.Integer) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.parse("DateTimeField[yearOfEra]", dateTimeFormatter10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test01299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01299");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        int int20 = dateTime19.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.minus(readablePeriod21);
        org.joda.time.DateTime.Property property23 = dateTime19.centuryOfEra();
        java.lang.String str24 = property23.getAsShortText();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "19" + "'", str24, "19");
    }

    @Test
    public void test01300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01300");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) '4');
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        int int9 = partial6.compareTo((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = partial6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Chronology chronology12 = chronology10.withZone(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 0, chronology10);
        org.joda.time.DateTime dateTime15 = dateTime13.withHourOfDay(0);
        org.joda.time.DateTime dateTime17 = dateTime15.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime17.toMutableDateTime();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.DateTime.Property property31 = dateTime30.millisOfSecond();
        boolean boolean32 = mutableDateTime18.isBefore((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime34 = dateTime30.withWeekyear(19);
        int int35 = property2.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test01301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01301");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfYear((int) 'a');
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        int int27 = partial24.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = partial24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 0, chronology28);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = partial34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 0, chronology38);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime43 = dateTime41.minus(readableDuration42);
        org.joda.time.Chronology chronology44 = dateTime41.getChronology();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        long long48 = chronology44.set((org.joda.time.ReadablePartial) partial46, (long) (byte) -1);
        int[] intArray50 = chronology28.get((org.joda.time.ReadablePartial) partial46, (long) ' ');
        org.joda.time.DurationField durationField51 = chronology28.eras();
        org.joda.time.DateTime dateTime52 = dateTime19.withChronology(chronology28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime54 = dateTime19.withEra(43200);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 43200 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test01302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01302");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        org.joda.time.Chronology chronology5 = dateTimeFormatter3.getChronolgy();
        boolean boolean6 = dateTimeFormatter3.isPrinter();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = partial8.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean14 = partial8.isSupported(dateTimeFieldType13);
        java.lang.String str15 = partial8.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        int int21 = partial18.compareTo((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = partial18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Chronology chronology24 = chronology22.withZone(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 0, chronology22);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.minus(readableDuration26);
        org.joda.time.Chronology chronology28 = dateTime25.getChronology();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        int int33 = partial30.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = partial30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.weekOfWeekyear();
        int int39 = dateTimeField37.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        int int44 = partial41.compareTo((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        boolean boolean47 = partial43.isAfter((org.joda.time.ReadablePartial) partial46);
        java.lang.String str48 = partial46.toString();
        java.util.Locale locale50 = null;
        java.lang.String str51 = dateTimeField37.getAsShortText((org.joda.time.ReadablePartial) partial46, 53, locale50);
        long long53 = chronology28.set((org.joda.time.ReadablePartial) partial46, (long) 0);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        int int59 = partial56.compareTo((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology60 = partial56.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.Chronology chronology62 = chronology60.withZone(dateTimeZone61);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) 0, chronology60);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.DateTime dateTime65 = dateTime63.minus(readableDuration64);
        org.joda.time.Chronology chronology66 = dateTime63.getChronology();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        long long70 = chronology66.set((org.joda.time.ReadablePartial) partial68, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray71 = partial68.getFieldTypes();
        java.util.Locale locale72 = java.util.Locale.PRC;
        boolean boolean73 = partial68.equals((java.lang.Object) locale72);
        int int74 = partial68.size();
        boolean boolean75 = partial46.isMatch((org.joda.time.ReadablePartial) partial68);
        boolean boolean76 = partial8.isAfter((org.joda.time.ReadablePartial) partial46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = dateTimeFormatter3.print((org.joda.time.ReadablePartial) partial8);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 53 + "'", int39 == 53);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "53" + "'", str51, "53");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test01303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01303");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekOfWeekyear();
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        int int12 = dateTimeField8.getMaximumTextLength(locale10);
        int int14 = dateTimeField8.getLeapAmount((-259200000L));
        java.lang.String str15 = dateTimeField8.toString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean23 = partial17.isSupported(dateTimeFieldType22);
        org.joda.time.Chronology chronology24 = partial17.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        int int31 = partial28.compareTo((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology32 = partial28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.monthOfYear();
        long long39 = dateTimeField36.getDifferenceAsLong((long) (short) 100, (-18L));
        java.util.Locale.Category category41 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale42 = java.util.Locale.getDefault(category41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        int int47 = partial44.compareTo((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology48 = partial44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.weekOfWeekyear();
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale53 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        int int55 = dateTimeField51.getMaximumTextLength(locale53);
        java.util.Locale.setDefault(category41, locale53);
        java.util.Locale locale57 = java.util.Locale.getDefault(category41);
        java.lang.String str58 = dateTimeField36.getAsText((-3600000L), locale57);
        java.lang.String str59 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) partial25, 292278993, locale57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        int int65 = partial62.compareTo((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Chronology chronology66 = partial62.getChronology();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.Chronology chronology68 = chronology66.withZone(dateTimeZone67);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) 0, chronology66);
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.DateTime dateTime71 = dateTime69.minus(readableDuration70);
        org.joda.time.Chronology chronology72 = dateTime69.getChronology();
        org.joda.time.Partial partial73 = partial25.withChronologyRetainFields(chronology72);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.Partial partial76 = partial73.withPeriodAdded(readablePeriod74, 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fran\347ais (Canada)" + "'", str11, "fran\347ais (Canada)");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DateTimeField[weekOfWeekyear]" + "'", str15, "DateTimeField[weekOfWeekyear]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + category41 + "' != '" + java.util.Locale.Category.FORMAT + "'", category41.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "fran\347ais (Canada)" + "'", str54, "fran\347ais (Canada)");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "d\351cembre" + "'", str58, "d\351cembre");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "292278993" + "'", str59, "292278993");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertNotNull(partial76);
    }

    @Test
    public void test01304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01304");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        int int10 = partial7.compareTo((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.DateTime dateTime16 = dateTime14.withHourOfDay(0);
        int int17 = dateTime16.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DurationField durationField25 = durationFieldType18.getField(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.weekOfWeekyear();
        org.joda.time.DateTime dateTime27 = dateTime16.withChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(1969, (int) 'a', 292278994, 22, (int) 'a', chronology24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 19 + "'", int17 == 19);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test01305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01305");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        int int16 = property12.getLeapAmount();
        org.joda.time.DateTime dateTime17 = property12.withMinimumValue();
        org.joda.time.DateTime dateTime19 = dateTime17.withCenturyOfEra((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTime dateTime22 = dateTime19.withFieldAdded(durationFieldType20, 1970);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str24 = dateTimeFieldType23.getName();
        java.lang.String str25 = dateTimeFieldType23.getName();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType23.getDurationType();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        int int31 = partial28.compareTo((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology32 = partial28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfHalfday();
        boolean boolean37 = durationFieldType26.isSupported(chronology34);
        boolean boolean38 = durationFieldType20.isSupported(chronology34);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        int int43 = partial40.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = partial40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology44.withZone(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField47 = chronology46.hourOfDay();
        org.joda.time.DurationField durationField48 = chronology46.minutes();
        org.joda.time.DurationField durationField49 = durationFieldType20.getField(chronology46);
        java.lang.String str50 = durationFieldType20.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "halfdayOfDay" + "'", str24, "halfdayOfDay");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "halfdayOfDay" + "'", str25, "halfdayOfDay");
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "days" + "'", str50, "days");
    }

    @Test
    public void test01306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01306");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str14 = dateTimeFieldType13.getName();
        int int15 = dateTime9.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime17 = dateTime9.minusMinutes(4);
        org.joda.time.Instant instant18 = dateTime17.toInstant();
        org.joda.time.DateTime.Property property19 = dateTime17.weekyear();
        org.joda.time.DateTime dateTime20 = property19.roundHalfCeilingCopy();
        boolean boolean21 = dateTime20.isAfterNow();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        int int27 = partial24.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = partial24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 0, chronology28);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.minus(readableDuration32);
        org.joda.time.Chronology chronology34 = dateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.secondOfDay();
        org.joda.time.DurationField durationField36 = chronology34.seconds();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        int int41 = partial38.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        boolean boolean44 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        int[] intArray46 = chronology34.get((org.joda.time.ReadablePartial) partial40, (long) 10);
        org.joda.time.DurationField durationField47 = chronology34.hours();
        org.joda.time.DateTimeField dateTimeField48 = chronology34.halfdayOfDay();
        long long50 = dateTimeField48.roundHalfEven((-981L));
        int int52 = dateTimeField48.getMaximumValue((long) 86399);
        java.lang.String str54 = dateTimeField48.getAsText((-86398030L));
        int int55 = dateTime20.get(dateTimeField48);
        // The following exception was thrown during execution in test generation
        try {
            long long58 = dateTimeField48.set((long) (-27409536), "\ud55c\uad6d\uc5b4");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"????????\" for halfdayOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "halfdayOfDay" + "'", str14, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "AM" + "'", str54, "AM");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test01307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01307");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        int int16 = partial13.compareTo((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = partial13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 0, chronology17);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.minus(readableDuration21);
        org.joda.time.Chronology chronology23 = dateTime20.getChronology();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        long long27 = chronology23.set((org.joda.time.ReadablePartial) partial25, (long) (byte) -1);
        int[] intArray29 = chronology7.get((org.joda.time.ReadablePartial) partial25, (long) ' ');
        org.joda.time.DurationField durationField30 = chronology7.eras();
        org.joda.time.DateTimeField dateTimeField31 = chronology7.dayOfYear();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(5443200012L, chronology7);
        org.joda.time.DateTimeField dateTimeField33 = chronology7.dayOfWeek();
        java.lang.String str34 = chronology7.toString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ISOChronology[UTC]" + "'", str34, "ISOChronology[UTC]");
    }

    @Test
    public void test01308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01308");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("CHN", 1.0d);
        double double3 = languageRange2.getWeight();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        int int9 = partial6.compareTo((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = partial6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Chronology chronology12 = chronology10.withZone(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 0, chronology10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readableDuration14);
        org.joda.time.Chronology chronology16 = dateTime13.getChronology();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        int int21 = partial18.compareTo((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = partial18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Chronology chronology24 = chronology22.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.weekOfWeekyear();
        int int27 = dateTimeField25.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int int32 = partial29.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        boolean boolean35 = partial31.isAfter((org.joda.time.ReadablePartial) partial34);
        java.lang.String str36 = partial34.toString();
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeField25.getAsShortText((org.joda.time.ReadablePartial) partial34, 53, locale38);
        long long41 = chronology16.set((org.joda.time.ReadablePartial) partial34, (long) 0);
        org.joda.time.DateTimeField dateTimeField42 = chronology16.weekOfWeekyear();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology16);
        boolean boolean44 = languageRange2.equals((java.lang.Object) chronology16);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 53 + "'", int27 == 53);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "53" + "'", str39, "53");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test01309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01309");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        long long16 = chronology12.set((org.joda.time.ReadablePartial) partial14, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = partial14.getFieldTypes();
        java.util.Locale locale18 = java.util.Locale.PRC;
        boolean boolean19 = partial14.equals((java.lang.Object) locale18);
        int int20 = partial14.size();
        org.joda.time.Chronology chronology21 = partial14.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.year();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray26 = chronology21.get(readablePeriod24, 3692303999999L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test01310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01310");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("fr-CA");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!", "fran\347ais (Canada)" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList14);
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = locale17.toLanguageTag();
        java.lang.String str21 = locale17.getISO3Country();
        java.util.Locale locale22 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        java.lang.String str25 = locale22.toLanguageTag();
        java.lang.String str26 = locale22.toLanguageTag();
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str28 = locale27.getCountry();
        java.util.Locale locale29 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale30 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str31 = locale29.getDisplayName(locale30);
        java.lang.String str32 = locale29.toLanguageTag();
        java.util.Locale locale33 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale34 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str35 = locale33.getDisplayName(locale34);
        java.lang.String str36 = locale33.toLanguageTag();
        java.lang.String str37 = locale33.toLanguageTag();
        boolean boolean38 = locale33.hasExtensions();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        int int44 = partial41.compareTo((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = partial41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Chronology chronology47 = chronology45.withZone(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 0, chronology45);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.minus(readableDuration49);
        org.joda.time.DateTime.Property property51 = dateTime50.millisOfSecond();
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        int int53 = property51.getMaximumTextLength(locale52);
        java.util.Locale locale54 = java.util.Locale.CANADA_FRENCH;
        boolean boolean55 = locale54.hasExtensions();
        java.util.Locale[] localeArray56 = new java.util.Locale[] { locale17, locale22, locale27, locale29, locale33, locale52, locale54 };
        java.util.ArrayList<java.util.Locale> localeList57 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList57, localeArray56);
        java.util.Locale.FilteringMode filteringMode59 = null;
        java.util.List<java.util.Locale> localeList60 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList57, filteringMode59);
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.util.Locale>) localeList60);
        java.util.List<java.util.Locale> localeList62 = java.util.Locale.filter(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList60);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList64 = java.util.Locale.LanguageRange.parse("coreano");
        java.util.Locale.LanguageRange[] languageRangeArray65 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList66 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList66, languageRangeArray65);
        java.lang.String[] strArray71 = new java.lang.String[] { "", "hi!", "fran\347ais (Canada)" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        java.lang.String str74 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList66, (java.util.Collection<java.lang.String>) strList72);
        java.lang.String[] strArray76 = new java.lang.String[] { "fr-CA" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        java.util.Locale.FilteringMode filteringMode79 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList80 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList66, (java.util.Collection<java.lang.String>) strList77, filteringMode79);
        java.util.Locale locale81 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str82 = locale81.getDisplayCountry();
        java.util.Set<java.lang.String> strSet83 = locale81.getUnicodeLocaleAttributes();
        java.lang.String str84 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList66, (java.util.Collection<java.lang.String>) strSet83);
        java.util.Locale locale85 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale86 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str87 = locale85.getDisplayName(locale86);
        java.lang.String str88 = locale85.getDisplayVariant();
        java.util.Locale locale89 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale90 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str91 = locale89.getDisplayName(locale90);
        java.lang.String str92 = locale85.getDisplayName(locale89);
        java.util.Set<java.lang.String> strSet93 = locale85.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList94 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList66, (java.util.Collection<java.lang.String>) strSet93);
        java.util.List<java.lang.String> strList95 = java.util.Locale.filterTags(languageRangeList64, (java.util.Collection<java.lang.String>) strSet93);
        java.lang.String str96 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strList95);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "fran\347ais (Canada)" + "'", str19, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fr-CA" + "'", str20, "fr-CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "CAN" + "'", str21, "CAN");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fran\347ais (Canada)" + "'", str24, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "fr-CA" + "'", str25, "fr-CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fr-CA" + "'", str26, "fr-CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "CA" + "'", str28, "CA");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "fran\347ais (Canada)" + "'", str31, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "fr-CA" + "'", str32, "fr-CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "fran\347ais (Canada)" + "'", str35, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "fr-CA" + "'", str36, "fr-CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "fr-CA" + "'", str37, "fr-CA");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(localeList60);
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(localeList62);
        org.junit.Assert.assertNotNull(languageRangeList64);
        org.junit.Assert.assertNotNull(languageRangeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + filteringMode79 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode79.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Canada" + "'", str82, "Canada");
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "fran\347ais (Canada)" + "'", str87, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "fran\347ais (Canada)" + "'", str91, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "fran\347ais (Canada)" + "'", str92, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertNotNull(strList94);
        org.junit.Assert.assertNotNull(strList95);
        org.junit.Assert.assertNull(str96);
    }

    @Test
    public void test01311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01311");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        long long16 = chronology12.set((org.joda.time.ReadablePartial) partial14, (long) (byte) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology12.era();
        // The following exception was thrown during execution in test generation
        try {
            int int20 = dateTimeField17.getDifference((-2970675054L), (-950400000L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test01312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01312");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        org.joda.time.DateTime dateTime13 = dateTime11.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTime();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readableDuration25);
        org.joda.time.DateTime.Property property27 = dateTime26.millisOfSecond();
        boolean boolean28 = mutableDateTime14.isBefore((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime30 = dateTime26.withWeekyear(19);
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays(0);
        int int33 = dateTime30.getEra();
        org.joda.time.DateTime dateTime34 = dateTime30.withTimeAtStartOfDay();
        int int35 = dateTime34.getDayOfMonth();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
    }

    @Test
    public void test01313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01313");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        boolean boolean7 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        int int13 = partial10.compareTo((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = partial10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Chronology chronology16 = chronology14.withZone(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 0, chronology14);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        org.joda.time.DateTime dateTime21 = dateTime19.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime21.toMutableDateTime();
        org.joda.time.DateTime dateTime23 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime24 = dateTime21.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        int int30 = partial27.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = partial27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 0, chronology31);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.minus(readableDuration35);
        org.joda.time.DateTime.Property property37 = dateTime36.millisOfSecond();
        org.joda.time.DateTime dateTime39 = dateTime36.minusMillis((int) (byte) -1);
        int int40 = dateTime39.getMinuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DateTime.Property property42 = dateTime39.property(dateTimeFieldType41);
        org.joda.time.DateTime dateTime44 = dateTime24.withField(dateTimeFieldType41, (int) (short) 1);
        java.lang.Class<?> wildcardClass45 = dateTimeFieldType41.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test01314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01314");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.monthOfYear();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTimeField dateTimeField16 = chronology12.millisOfDay();
        org.joda.time.DurationField durationField17 = chronology12.centuries();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray21 = chronology12.get(readablePeriod18, (-31464000000L), (long) 13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test01315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01315");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime15 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime17 = dateTime15.withCenturyOfEra(12);
        org.joda.time.DateTime.Property property18 = dateTime15.monthOfYear();
        org.joda.time.DateTime.Property property19 = dateTime15.secondOfMinute();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test01316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01316");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        java.lang.String str6 = partial1.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.DateTime dateTime18 = dateTime16.withHourOfDay(0);
        int int19 = dateTime18.getCenturyOfEra();
        boolean boolean21 = dateTime18.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property22 = dateTime18.era();
        org.joda.time.DateTime dateTime24 = dateTime18.withHourOfDay(12);
        org.joda.time.DateTime dateTime25 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.lang.String str27 = dateTimeFieldType26.getName();
        org.joda.time.DateTime dateTime29 = dateTime25.withField(dateTimeFieldType26, 10);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime25.toMutableDateTimeISO();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = partial34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 0, chronology38);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime43 = dateTime41.minus(readableDuration42);
        org.joda.time.DateTime dateTime45 = dateTime41.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property46 = dateTime45.dayOfYear();
        org.joda.time.DateTime dateTime47 = property46.withMinimumValue();
        boolean boolean48 = dateTime47.isAfterNow();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int50 = dateTime47.get(dateTimeFieldType49);
        java.util.Locale locale51 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str53 = locale51.getDisplayName(locale52);
        java.lang.String str54 = locale51.getDisplayName();
        java.util.Calendar calendar55 = dateTime47.toCalendar(locale51);
        java.lang.String str56 = mutableDateTime30.toString("34", locale51);
        java.lang.String str57 = locale51.getISO3Country();
        java.lang.String str58 = locale51.getScript();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 19 + "'", int19 == 19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "secondOfDay" + "'", str27, "secondOfDay");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 12 + "'", int50 == 12);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "fran\347ais (Canada)" + "'", str53, "fran\347ais (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "fran\347ais (Canada)" + "'", str54, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(calendar55);
        org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=-58380393600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=120,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "34" + "'", str56, "34");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "CAN" + "'", str57, "CAN");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test01317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01317");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        long long12 = dateTime11.getMillis();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 0, chronology19);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readableDuration23);
        org.joda.time.DateTime dateTime26 = dateTime22.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime28 = dateTime22.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime30 = dateTime28.minusWeeks(19);
        int int31 = dateTime30.getSecondOfMinute();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = partial34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 0, chronology38);
        org.joda.time.DateTime dateTime43 = dateTime41.withHourOfDay(0);
        org.joda.time.DateTime dateTime45 = dateTime43.withYear((int) 'a');
        boolean boolean46 = dateTime43.isEqualNow();
        org.joda.time.DateMidnight dateMidnight47 = dateTime43.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone48 = dateMidnight47.getZone();
        org.joda.time.DateTime dateTime49 = dateTime30.withZoneRetainFields(dateTimeZone48);
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime11.toMutableDateTime(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime53 = dateTime51.withDayOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
    }

    @Test
    public void test01318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01318");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter3.getParser();
        int int6 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.Chronology chronology7 = dateTimeFormatter3.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology18.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter10.withZone(dateTimeZone20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter3.withZone(dateTimeZone20);
        boolean boolean23 = dateTimeFormatter22.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.parse("AM", dateTimeFormatter22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test01319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01319");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        org.joda.time.DurationField durationField15 = property12.getRangeDurationField();
        int int16 = property12.get();
        org.joda.time.DateTime dateTime18 = property12.addToCopy((long) 0);
        int int19 = property12.getLeapAmount();
        org.joda.time.DateTime dateTime20 = property12.withMaximumValue();
        org.joda.time.Chronology chronology21 = dateTime20.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        int int27 = partial24.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = partial24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 0, chronology28);
        org.joda.time.DateTimeField dateTimeField32 = chronology28.millisOfDay();
        int int33 = dateTimeField32.getMinimumValue();
        int int34 = dateTime20.get(dateTimeField32);
        long long37 = dateTimeField32.getDifferenceAsLong(100L, (long) 'x');
        int int40 = dateTimeField32.getDifference(4L, 0L);
        int int42 = dateTimeField32.getLeapAmount((-102643200008L));
        boolean boolean44 = dateTimeField32.isLeap(4L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 999 + "'", int34 == 999);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-20L) + "'", long37 == (-20L));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test01320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01320");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        java.lang.String str6 = partial1.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.DateTime dateTime18 = dateTime16.withHourOfDay(0);
        int int19 = dateTime18.getCenturyOfEra();
        boolean boolean21 = dateTime18.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property22 = dateTime18.era();
        org.joda.time.DateTime dateTime24 = dateTime18.withHourOfDay(12);
        org.joda.time.DateTime dateTime25 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = partial1.toString(dateTimeFormatter26);
        int[] intArray28 = partial1.getValues();
        int[] intArray29 = partial1.getValues();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        int int35 = partial32.compareTo((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology36 = partial32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.Chronology chronology38 = chronology36.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 0, chronology36);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.minus(readableDuration40);
        org.joda.time.Chronology chronology42 = dateTime39.getChronology();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        long long46 = chronology42.set((org.joda.time.ReadablePartial) partial44, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = partial44.getFieldTypes();
        java.util.Locale locale48 = java.util.Locale.PRC;
        boolean boolean49 = partial44.equals((java.lang.Object) locale48);
        int int50 = partial44.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int52 = partial44.indexOf(dateTimeFieldType51);
        org.joda.time.Partial partial53 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial44);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial44.plus(readablePeriod54);
        boolean boolean56 = partial1.isAfter((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = partial57.getFieldTypes();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        int int63 = partial60.compareTo((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        boolean boolean66 = partial62.isAfter((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        int int72 = partial69.compareTo((org.joda.time.ReadablePartial) partial71);
        org.joda.time.Chronology chronology73 = partial69.getChronology();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.Chronology chronology75 = chronology73.withZone(dateTimeZone74);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) 0, chronology73);
        org.joda.time.DateTime dateTime78 = dateTime76.withHourOfDay(0);
        org.joda.time.DateTime dateTime80 = dateTime78.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime81 = dateTime80.toMutableDateTime();
        org.joda.time.DateTime dateTime82 = partial62.toDateTime((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean84 = partial62.isSupported(dateTimeFieldType83);
        int int85 = partial57.indexOf(dateTimeFieldType83);
        org.joda.time.DurationFieldType durationFieldType86 = dateTimeFieldType83.getRangeDurationType();
        java.lang.String str87 = durationFieldType86.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial89 = partial55.withFieldAdded(durationFieldType86, 2022);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'years' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 19 + "'", int19 == 19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(mutableDateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "years" + "'", str87, "years");
    }

    @Test
    public void test01321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01321");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        java.lang.Object obj6 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.minus(readableDuration17);
        org.joda.time.DateTime dateTime20 = dateTime16.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime22 = dateTime16.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks(19);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int int32 = partial29.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = partial29.getChronology();
        org.joda.time.DurationField durationField34 = durationFieldType27.getField(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.dayOfMonth();
        org.joda.time.DateTime dateTime37 = dateTime26.toDateTime(chronology33);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(obj6, chronology33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter2.withChronology(chronology33);
        java.util.Locale locale40 = dateTimeFormatter39.getLocale();
        int int41 = dateTimeFormatter39.getDefaultYear();
        java.io.Writer writer42 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        int int48 = partial45.compareTo((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = partial45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 0, chronology49);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.minus(readableDuration53);
        org.joda.time.DateTime.Property property55 = dateTime54.millisOfSecond();
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        int int57 = property55.getMaximumTextLength(locale56);
        long long58 = property55.remainder();
        org.joda.time.Interval interval59 = property55.toInterval();
        org.joda.time.DateTime dateTime60 = property55.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime62 = dateTime60.withHourOfDay(2);
        org.joda.time.DateTime dateTime64 = dateTime62.minusSeconds(3);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter39.printTo(writer42, (org.joda.time.ReadableInstant) dateTime62);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNull(locale40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2000 + "'", int41 == 2000);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test01322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01322");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str14 = dateTimeFieldType13.getName();
        int int15 = dateTime9.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime17 = dateTime9.minusMinutes(4);
        int int18 = dateTime9.getWeekyear();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime9.plus(readableDuration19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.withDurationAdded(readableDuration21, (int) (short) -1);
        boolean boolean25 = dateTime20.isBefore((long) 720);
        boolean boolean27 = dateTime20.isAfter(0L);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        int int33 = partial30.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = partial30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 0, chronology34);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.minus(readableDuration38);
        org.joda.time.DateTime.Property property40 = dateTime39.millisOfSecond();
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        int int42 = property40.getMaximumTextLength(locale41);
        long long43 = property40.remainder();
        int int44 = property40.getLeapAmount();
        org.joda.time.DateTime dateTime45 = property40.withMinimumValue();
        org.joda.time.DateTime dateTime47 = dateTime45.withCenturyOfEra((int) (short) 1);
        boolean boolean48 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        int int54 = partial51.compareTo((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = partial51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.Chronology chronology57 = chronology55.withZone(dateTimeZone56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 0, chronology55);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.DateTime dateTime60 = dateTime58.minus(readableDuration59);
        org.joda.time.Chronology chronology61 = dateTime58.getChronology();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        int int66 = partial63.compareTo((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology67 = partial63.getChronology();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.Chronology chronology69 = chronology67.withZone(dateTimeZone68);
        org.joda.time.DateTimeField dateTimeField70 = chronology69.weekOfWeekyear();
        int int72 = dateTimeField70.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = new org.joda.time.Partial(chronology75);
        int int77 = partial74.compareTo((org.joda.time.ReadablePartial) partial76);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = new org.joda.time.Partial(chronology78);
        boolean boolean80 = partial76.isAfter((org.joda.time.ReadablePartial) partial79);
        java.lang.String str81 = partial79.toString();
        java.util.Locale locale83 = null;
        java.lang.String str84 = dateTimeField70.getAsShortText((org.joda.time.ReadablePartial) partial79, 53, locale83);
        long long86 = chronology61.set((org.joda.time.ReadablePartial) partial79, (long) 0);
        org.joda.time.DateTimeField dateTimeField87 = chronology61.weekOfWeekyear();
        org.joda.time.DateTime dateTime88 = org.joda.time.DateTime.now(chronology61);
        int int89 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime88);
        java.util.GregorianCalendar gregorianCalendar90 = dateTime20.toGregorianCalendar();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "halfdayOfDay" + "'", str14, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 53 + "'", int72 == 53);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[]" + "'", str81, "[]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "53" + "'", str84, "53");
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(gregorianCalendar90);
    }

    @Test
    public void test01323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01323");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Collection<java.lang.String> strCollection1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = java.util.Locale.lookupTag(languageRangeList0, strCollection1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01324");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronolgy();
        boolean boolean8 = dateTimeFormatter6.isParser();
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeFormatter6.getZone();
        java.io.Writer writer10 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        int int16 = partial13.compareTo((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = partial13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 0, chronology17);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.minus(readableDuration21);
        org.joda.time.Chronology chronology23 = dateTime20.getChronology();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        long long27 = chronology23.set((org.joda.time.ReadablePartial) partial25, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial25.getFieldTypes();
        java.util.Locale locale29 = java.util.Locale.PRC;
        boolean boolean30 = partial25.equals((java.lang.Object) locale29);
        int int31 = partial25.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int33 = partial25.indexOf(dateTimeFieldType32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = partial34.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = partial34.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(writer10, (org.joda.time.ReadablePartial) partial34);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
    }

    @Test
    public void test01325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01325");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readableDuration25);
        long long27 = dateTime26.getMillis();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int int32 = partial29.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        boolean boolean35 = partial31.isAfter((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        int int41 = partial38.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 0, chronology42);
        org.joda.time.DateTime dateTime47 = dateTime45.withHourOfDay(0);
        org.joda.time.DateTime dateTime49 = dateTime47.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime49.toMutableDateTime();
        org.joda.time.DateTime dateTime51 = partial31.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        int int57 = partial54.compareTo((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Chronology chronology58 = partial54.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 0, chronology58);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.DateTime dateTime63 = dateTime61.minus(readableDuration62);
        org.joda.time.DateTime dateTime65 = dateTime61.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime67 = dateTime61.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime69 = dateTime67.minusWeeks(19);
        org.joda.time.DateTime dateTime71 = dateTime67.plusMillis((int) '#');
        int int72 = dateTime71.getDayOfMonth();
        boolean boolean73 = partial31.equals((java.lang.Object) dateTime71);
        boolean boolean74 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime71);
        boolean boolean75 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime76 = dateTime71.withEarlierOffsetAtOverlap();
        long long77 = dateTime71.getMillis();
        int int78 = dateTime71.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 35L + "'", long77 == 35L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
    }

    @Test
    public void test01326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01326");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = partial8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology12);
        org.joda.time.DateTime dateTime17 = dateTime15.withHourOfDay(0);
        org.joda.time.DateTime dateTime18 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Instant instant19 = dateTime17.toInstant();
        org.joda.time.DateMidnight dateMidnight20 = dateTime17.toDateMidnight();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int int25 = partial22.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        boolean boolean28 = partial24.isAfter((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = partial31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 0, chronology35);
        org.joda.time.DateTime dateTime40 = dateTime38.withHourOfDay(0);
        org.joda.time.DateTime dateTime42 = dateTime40.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime42.toMutableDateTime();
        org.joda.time.DateTime dateTime44 = partial24.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        int int50 = partial47.compareTo((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = partial47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.Chronology chronology53 = chronology51.withZone(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) 0, chronology51);
        org.joda.time.DateTime dateTime56 = dateTime54.withHourOfDay(0);
        int int57 = dateTime56.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        int int63 = partial60.compareTo((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Chronology chronology64 = partial60.getChronology();
        org.joda.time.DurationField durationField65 = durationFieldType58.getField(chronology64);
        org.joda.time.DateTimeField dateTimeField66 = chronology64.weekOfWeekyear();
        org.joda.time.DateTime dateTime67 = dateTime56.withChronology(chronology64);
        java.util.Date date68 = dateTime67.toDate();
        boolean boolean69 = partial24.equals((java.lang.Object) dateTime67);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = new org.joda.time.Partial(chronology72);
        int int74 = partial71.compareTo((org.joda.time.ReadablePartial) partial73);
        org.joda.time.Chronology chronology75 = partial71.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.era();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Partial partial78 = new org.joda.time.Partial(chronology77);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Partial partial80 = new org.joda.time.Partial(chronology79);
        int int81 = partial78.compareTo((org.joda.time.ReadablePartial) partial80);
        int[] intArray83 = new int[] { 2 };
        int int84 = dateTimeField76.getMinimumValue((org.joda.time.ReadablePartial) partial78, intArray83);
        int int85 = partial78.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str87 = dateTimeFieldType86.getName();
        org.joda.time.Partial partial88 = partial78.without(dateTimeFieldType86);
        boolean boolean89 = partial24.isSupported(dateTimeFieldType86);
        int int90 = dateTime17.get(dateTimeFieldType86);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial92 = new org.joda.time.Partial(dateTimeFieldType86, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for halfdayOfDay must not be smaller than 0");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 19 + "'", int57 == 19);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[2]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "halfdayOfDay" + "'", str87, "halfdayOfDay");
        org.junit.Assert.assertNotNull(partial88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test01327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01327");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = partial8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology12);
        org.joda.time.DateTime dateTime17 = dateTime15.withHourOfDay(0);
        org.joda.time.DateTime dateTime19 = dateTime17.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime19.toMutableDateTime();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.minus(readableDuration31);
        org.joda.time.DateTime.Property property33 = dateTime32.millisOfSecond();
        boolean boolean34 = mutableDateTime20.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime36 = dateTime32.withWeekyear(19);
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(0);
        int int39 = dateTime36.getMonthOfYear();
        org.joda.time.DateTime dateTime41 = dateTime36.minusYears((int) (byte) 10);
        org.joda.time.Chronology chronology42 = dateTime41.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(22200, 0, 8, (int) (byte) -1, (int) 'a', 9, chronology42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
    }

    @Test
    public void test01328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01328");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str14 = dateTimeFieldType13.getName();
        int int15 = dateTime9.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime17 = dateTime9.minusMinutes(4);
        org.joda.time.Instant instant18 = dateTime17.toInstant();
        org.joda.time.DateTime.Property property19 = dateTime17.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTime.Property property21 = dateTime17.property(dateTimeFieldType20);
        boolean boolean22 = dateTime17.isBeforeNow();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "halfdayOfDay" + "'", str14, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test01329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01329");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 0, chronology8);
        org.joda.time.DateTimeField dateTimeField12 = chronology8.millisOfDay();
        int int13 = dateTimeField12.getMinimumValue();
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = dateTimeField12.getAsShortText((long) (byte) -1, locale15);
        java.lang.String str17 = locale1.getDisplayCountry(locale15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) locale1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "86399999" + "'", str16, "86399999");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test01330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01330");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int int25 = partial22.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = partial22.getChronology();
        org.joda.time.DurationField durationField27 = durationFieldType20.getField(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfMonth();
        org.joda.time.DateTime dateTime30 = dateTime19.toDateTime(chronology26);
        org.joda.time.DateTimeField dateTimeField31 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField32 = chronology26.millisOfDay();
        long long34 = dateTimeField32.roundHalfFloor((long) 292278993);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 292278993L + "'", long34 == 292278993L);
    }

    @Test
    public void test01331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01331");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("secondofday");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"secondofday\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01332");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str4 = locale3.getDisplayCountry();
        java.util.Locale.Builder builder5 = builder0.setLocale(locale3);
        java.util.Locale.Builder builder7 = builder5.setRegion("CA");
        java.util.Locale locale8 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = locale8.toLanguageTag();
        java.lang.String str12 = locale8.getISO3Country();
        java.util.Locale.Builder builder13 = builder5.setLocale(locale8);
        java.util.Locale.Builder builder16 = builder13.setExtension('x', "");
        java.util.Locale.Builder builder17 = builder13.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder13.setScript("hourOfDay");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: hourOfDay [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Canada" + "'", str4, "Canada");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "fran\347ais (Canada)" + "'", str10, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fr-CA" + "'", str11, "fr-CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CAN" + "'", str12, "CAN");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test01333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01333");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readableDuration25);
        long long27 = dateTime26.getMillis();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int int32 = partial29.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        boolean boolean35 = partial31.isAfter((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        int int41 = partial38.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 0, chronology42);
        org.joda.time.DateTime dateTime47 = dateTime45.withHourOfDay(0);
        org.joda.time.DateTime dateTime49 = dateTime47.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime49.toMutableDateTime();
        org.joda.time.DateTime dateTime51 = partial31.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        int int57 = partial54.compareTo((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Chronology chronology58 = partial54.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 0, chronology58);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.DateTime dateTime63 = dateTime61.minus(readableDuration62);
        org.joda.time.DateTime dateTime65 = dateTime61.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime67 = dateTime61.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime69 = dateTime67.minusWeeks(19);
        org.joda.time.DateTime dateTime71 = dateTime67.plusMillis((int) '#');
        int int72 = dateTime71.getDayOfMonth();
        boolean boolean73 = partial31.equals((java.lang.Object) dateTime71);
        boolean boolean74 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime71);
        boolean boolean75 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime77 = dateTime11.withMillis((long) 2);
        boolean boolean78 = dateTime77.isBeforeNow();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test01334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01334");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str14 = dateTimeFieldType13.getName();
        int int15 = dateTime9.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime17 = dateTime9.minusMinutes(4);
        int int18 = dateTime9.getWeekyear();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime9.plus(readableDuration19);
        org.joda.time.DateTime.Property property21 = dateTime9.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property21.getFieldType();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        int int29 = partial26.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = partial26.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean32 = partial26.isSupported(dateTimeFieldType31);
        java.lang.String str33 = partial26.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        boolean boolean41 = partial37.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        int int47 = partial44.compareTo((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology48 = partial44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) 0, chronology48);
        org.joda.time.DateTime dateTime53 = dateTime51.withHourOfDay(0);
        org.joda.time.DateTime dateTime55 = dateTime53.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime56 = dateTime55.toMutableDateTime();
        org.joda.time.DateTime dateTime57 = partial37.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        int int63 = partial60.compareTo((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Chronology chronology64 = partial60.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.Chronology chronology66 = chronology64.withZone(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) 0, chronology64);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.DateTime dateTime69 = dateTime67.minus(readableDuration68);
        org.joda.time.DateTime dateTime71 = dateTime67.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime73 = dateTime67.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime75 = dateTime73.minusWeeks(19);
        org.joda.time.DateTime dateTime77 = dateTime73.plusMillis((int) '#');
        int int78 = dateTime77.getDayOfMonth();
        boolean boolean79 = partial37.equals((java.lang.Object) dateTime77);
        boolean boolean80 = partial26.isEqual((org.joda.time.ReadablePartial) partial37);
        java.util.Locale locale82 = java.util.Locale.CHINESE;
        java.lang.String str83 = dateTimeField24.getAsShortText((org.joda.time.ReadablePartial) partial26, 100, locale82);
        int int84 = partial26.size();
        int[] intArray85 = partial26.getValues();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "halfdayOfDay" + "'", str14, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "100" + "'", str83, "100");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
    }

    @Test
    public void test01335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01335");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(43200, 120, 86399, 1439, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1439 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01336");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = partial8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology12);
        org.joda.time.DateTime dateTime17 = dateTime15.withHourOfDay(0);
        org.joda.time.DateTime dateTime18 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Instant instant19 = dateTime17.toInstant();
        org.joda.time.DateTime.Property property20 = dateTime17.yearOfEra();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int int25 = partial22.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        boolean boolean28 = partial24.isAfter((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = partial31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 0, chronology35);
        org.joda.time.DateTime dateTime40 = dateTime38.withHourOfDay(0);
        org.joda.time.DateTime dateTime42 = dateTime40.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime42.toMutableDateTime();
        org.joda.time.DateTime dateTime44 = partial24.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        int int50 = partial47.compareTo((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = partial47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.Chronology chronology53 = chronology51.withZone(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) 0, chronology51);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.minus(readableDuration55);
        org.joda.time.DateTime dateTime58 = dateTime54.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime60 = dateTime54.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime62 = dateTime60.minusWeeks(19);
        org.joda.time.DateTime dateTime64 = dateTime60.plusMillis((int) '#');
        int int65 = dateTime64.getDayOfMonth();
        boolean boolean66 = partial24.equals((java.lang.Object) dateTime64);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        int int71 = partial68.compareTo((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = partial68.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean74 = partial68.isSupported(dateTimeFieldType73);
        int int75 = dateTime64.get(dateTimeFieldType73);
        int int76 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime78 = dateTime64.plusWeeks(100);
        org.joda.time.DateTime.Property property79 = dateTime64.dayOfYear();
        org.joda.time.DateTime dateTime81 = property79.addWrapFieldToCopy(8);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.DateTime dateTime83 = dateTime81.plus(readablePeriod82);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
    }

    @Test
    public void test01337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01337");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        java.lang.Object obj6 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.minus(readableDuration17);
        org.joda.time.DateTime dateTime20 = dateTime16.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime22 = dateTime16.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks(19);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int int32 = partial29.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = partial29.getChronology();
        org.joda.time.DurationField durationField34 = durationFieldType27.getField(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.dayOfMonth();
        org.joda.time.DateTime dateTime37 = dateTime26.toDateTime(chronology33);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(obj6, chronology33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter2.withChronology(chronology33);
        java.lang.Appendable appendable40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = partial41.getFieldTypes();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        int int47 = partial44.compareTo((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        boolean boolean50 = partial46.isAfter((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        int int56 = partial53.compareTo((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Chronology chronology57 = partial53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.Chronology chronology59 = chronology57.withZone(dateTimeZone58);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 0, chronology57);
        org.joda.time.DateTime dateTime62 = dateTime60.withHourOfDay(0);
        org.joda.time.DateTime dateTime64 = dateTime62.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime65 = dateTime64.toMutableDateTime();
        org.joda.time.DateTime dateTime66 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean68 = partial46.isSupported(dateTimeFieldType67);
        int int69 = partial41.indexOf(dateTimeFieldType67);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter39.printTo(appendable40, (org.joda.time.ReadablePartial) partial41);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
    }

    @Test
    public void test01338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01338");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        int int9 = partial6.compareTo((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = partial6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Chronology chronology12 = chronology10.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology12.getZone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readableDuration25);
        org.joda.time.Chronology chronology27 = dateTime24.getChronology();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        long long31 = chronology27.set((org.joda.time.ReadablePartial) partial29, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = partial29.getFieldTypes();
        java.util.Locale locale33 = java.util.Locale.PRC;
        boolean boolean34 = partial29.equals((java.lang.Object) locale33);
        int int35 = partial29.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int37 = partial29.indexOf(dateTimeFieldType36);
        long long39 = chronology12.set((org.joda.time.ReadablePartial) partial29, (long) 86399999);
        org.joda.time.DurationField durationField40 = chronology12.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(0, 43200, 834, (int) 'u', (-694733), chronology12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 117 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 86399999L + "'", long39 == 86399999L);
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test01339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01339");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter3.getParser();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = partial8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology12);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.minus(readableDuration16);
        org.joda.time.DateTime dateTime19 = dateTime15.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime21 = dateTime15.withSecondOfMinute(0);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime15.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter3.withZone(dateTimeZone22);
        org.joda.time.format.DateTimePrinter dateTimePrinter24 = null;
        org.joda.time.format.DateTimeParser dateTimeParser25 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter24, dateTimeParser25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter26.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser28 = dateTimeFormatter26.getParser();
        int int29 = dateTimeFormatter26.getDefaultYear();
        org.joda.time.Chronology chronology30 = dateTimeFormatter26.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter31 = null;
        org.joda.time.format.DateTimeParser dateTimeParser32 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter31, dateTimeParser32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = partial35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone43 = chronology41.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter33.withZone(dateTimeZone43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter26.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter23.withZone(dateTimeZone43);
        java.util.Locale locale49 = java.util.Locale.forLanguageTag("AD");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter23.withLocale(locale49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter50.withDefaultYear((int) (short) 1);
        int int53 = dateTimeFormatter52.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.parse("120", dateTimeFormatter52);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(dateTimeParser28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2000 + "'", int29 == 2000);
        org.junit.Assert.assertNull(chronology30);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ad");
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
    }

    @Test
    public void test01340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01340");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("korean");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"korean\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01341");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("fra");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        int int10 = partial7.compareTo((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime14.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfYear();
        org.joda.time.DateTime dateTime20 = property19.withMinimumValue();
        boolean boolean21 = dateTime20.isAfterNow();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int23 = dateTime20.get(dateTimeFieldType22);
        java.util.Locale locale24 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale25 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str26 = locale24.getDisplayName(locale25);
        java.lang.String str27 = locale24.getDisplayName();
        java.util.Calendar calendar28 = dateTime20.toCalendar(locale24);
        java.util.Locale.Builder builder29 = builder0.setLocale(locale24);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder31 = builder29.addUnicodeLocaleAttribute("10");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 10 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fran\347ais (Canada)" + "'", str26, "fran\347ais (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "fran\347ais (Canada)" + "'", str27, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-58380393600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=120,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test01342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01342");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.DateTime dateTime26 = dateTime24.withHourOfDay(0);
        int int27 = dateTime26.getCenturyOfEra();
        boolean boolean29 = dateTime26.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime30 = dateTime26.withEarlierOffsetAtOverlap();
        boolean boolean31 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = dateTime30.minus((long) 3);
        org.joda.time.DateTime.Property property34 = dateTime30.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime36 = dateTime30.withEra(59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 19 + "'", int27 == 19);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test01343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01343");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.minus(readableDuration11);
        org.joda.time.Chronology chronology13 = dateTime10.getChronology();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        long long17 = chronology13.set((org.joda.time.ReadablePartial) partial15, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = partial15.getFieldTypes();
        java.util.Locale locale19 = java.util.Locale.PRC;
        boolean boolean20 = partial15.equals((java.lang.Object) locale19);
        int int21 = partial15.size();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        int int27 = partial24.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = partial24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 0, chronology28);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.minus(readableDuration32);
        org.joda.time.DateTime dateTime35 = dateTime31.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime37 = dateTime31.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime39 = dateTime37.minusWeeks(19);
        org.joda.time.DateTime dateTime41 = dateTime37.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        int int47 = partial44.compareTo((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology48 = partial44.getChronology();
        org.joda.time.DurationField durationField49 = durationFieldType42.getField(chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.dayOfMonth();
        org.joda.time.DateTime dateTime52 = dateTime41.toDateTime(chronology48);
        org.joda.time.Chronology chronology53 = chronology48.withUTC();
        org.joda.time.Partial partial54 = partial15.withChronologyRetainFields(chronology53);
        boolean boolean55 = dateTimeFieldType0.isSupported(chronology53);
        org.joda.time.format.DateTimePrinter dateTimePrinter56 = null;
        org.joda.time.format.DateTimeParser dateTimeParser57 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter56, dateTimeParser57);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter58.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser60 = dateTimeFormatter58.getParser();
        int int61 = dateTimeFormatter58.getDefaultYear();
        org.joda.time.Chronology chronology62 = dateTimeFormatter58.getChronology();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        int int68 = partial65.compareTo((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology69 = partial65.getChronology();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.Chronology chronology71 = chronology69.withZone(dateTimeZone70);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) 0, chronology69);
        org.joda.time.DateTime dateTime74 = dateTime72.withHourOfDay(0);
        org.joda.time.DateTime dateTime76 = dateTime74.withYear((int) 'a');
        boolean boolean77 = dateTime74.isEqualNow();
        org.joda.time.DateMidnight dateMidnight78 = dateTime74.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone79 = dateMidnight78.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter58.withZone(dateTimeZone79);
        org.joda.time.Chronology chronology81 = chronology53.withZone(dateTimeZone79);
        // The following exception was thrown during execution in test generation
        try {
            long long89 = chronology81.getDateTimeMillis(53, (int) '#', (int) (short) 1, 720, 31, 1970, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 720 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNull(dateTimeParser60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2000 + "'", int61 == 2000);
        org.junit.Assert.assertNull(chronology62);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
        org.junit.Assert.assertNotNull(chronology81);
    }

    @Test
    public void test01344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01344");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str14 = dateTimeFieldType13.getName();
        int int15 = dateTime9.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime17 = dateTime9.minusMinutes(4);
        int int18 = dateTime17.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime17.withDayOfYear((-694733));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -694733 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "halfdayOfDay" + "'", str14, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 31 + "'", int18 == 31);
    }

    @Test
    public void test01345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01345");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int int25 = partial22.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = partial22.getChronology();
        org.joda.time.DurationField durationField27 = durationFieldType20.getField(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfMonth();
        org.joda.time.DateTime dateTime30 = dateTime19.toDateTime(chronology26);
        org.joda.time.Chronology chronology31 = chronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = chronology26.yearOfEra();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = partial35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.weekOfWeekyear();
        int int44 = dateTimeField42.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        int int50 = partial47.compareTo((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = partial47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.Chronology chronology53 = chronology51.withZone(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) 0, chronology51);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.minus(readableDuration55);
        org.joda.time.Chronology chronology57 = dateTime54.getChronology();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        long long61 = chronology57.set((org.joda.time.ReadablePartial) partial59, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray62 = partial59.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = partial59.getFormatter();
        java.util.Locale locale66 = java.util.Locale.forLanguageTag("0120-01-01T00:00:00.000Z");
        java.lang.String str67 = dateTimeField42.getAsText((org.joda.time.ReadablePartial) partial59, 10, locale66);
        java.lang.String str68 = dateTimeField32.getAsText(292278993, locale66);
        java.util.Locale locale69 = java.util.Locale.FRENCH;
        java.lang.String str70 = locale66.getDisplayCountry(locale69);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = locale69.getUnicodeLocaleType("ita");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ita");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 53 + "'", int44 == 53);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray62);
        org.junit.Assert.assertNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "10" + "'", str67, "10");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "292278993" + "'", str68, "292278993");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
    }

    @Test
    public void test01346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01346");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DurationField durationField20 = durationFieldType13.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime11.withChronology(chronology19);
        org.joda.time.DateTime dateTime25 = dateTime22.withDurationAdded(1L, 0);
        org.joda.time.DateTime dateTime27 = dateTime22.withMillisOfDay((int) (short) 1);
        org.joda.time.DateTime.Property property28 = dateTime27.secondOfDay();
        org.joda.time.Instant instant29 = dateTime27.toInstant();
        org.joda.time.DateTime dateTime31 = dateTime27.minusYears((int) 'x');
        java.lang.String str32 = dateTime27.toString();
        org.joda.time.Instant instant33 = dateTime27.toInstant();
        java.lang.String str34 = instant33.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01-01T00:00:00.001Z" + "'", str32, "1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01-01T00:00:00.001Z" + "'", str34, "1970-01-01T00:00:00.001Z");
    }

    @Test
    public void test01347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01347");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        java.lang.Object obj6 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.minus(readableDuration17);
        org.joda.time.DateTime dateTime20 = dateTime16.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime22 = dateTime16.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks(19);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int int32 = partial29.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = partial29.getChronology();
        org.joda.time.DurationField durationField34 = durationFieldType27.getField(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.dayOfMonth();
        org.joda.time.DateTime dateTime37 = dateTime26.toDateTime(chronology33);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(obj6, chronology33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter2.withChronology(chronology33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime41 = dateTimeFormatter2.parseMutableDateTime("halfdayOfDay");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
    }

    @Test
    public void test01348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01348");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekOfWeekyear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readableDuration20);
        org.joda.time.DateTime dateTime23 = dateTime19.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime25 = dateTime19.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime27 = dateTime25.minusWeeks(19);
        int int28 = dateTime27.getSecondOfMinute();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = partial31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 0, chronology35);
        org.joda.time.DateTime dateTime40 = dateTime38.withHourOfDay(0);
        org.joda.time.DateTime dateTime42 = dateTime40.withYear((int) 'a');
        boolean boolean43 = dateTime40.isEqualNow();
        org.joda.time.DateMidnight dateMidnight44 = dateTime40.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone45 = dateMidnight44.getZone();
        org.joda.time.DateTime dateTime46 = dateTime27.withZoneRetainFields(dateTimeZone45);
        org.joda.time.Chronology chronology47 = chronology7.withZone(dateTimeZone45);
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        java.lang.String str49 = partial48.toStringList();
        java.util.Locale locale51 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str53 = locale51.getDisplayName(locale52);
        java.lang.String str54 = locale51.getDisplayVariant();
        java.util.Locale locale55 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale56 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str57 = locale55.getDisplayName(locale56);
        java.lang.String str58 = locale51.getDisplayName(locale55);
        java.lang.String str59 = locale51.toLanguageTag();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = partial48.toString("kor", locale51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: o");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "fran\347ais (Canada)" + "'", str53, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "fran\347ais (Canada)" + "'", str57, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "fran\347ais (Canada)" + "'", str58, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "fr-CA" + "'", str59, "fr-CA");
    }

    @Test
    public void test01349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01349");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        org.joda.time.DurationField durationField15 = property12.getRangeDurationField();
        int int16 = property12.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property12.getFieldType();
        java.util.Locale locale20 = new java.util.Locale("French (Canada)", "eras");
        int int21 = property12.getMaximumTextLength(locale20);
        org.joda.time.DateTime dateTime23 = property12.setCopy("366");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        int int30 = partial27.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = partial27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 0, chronology31);
        org.joda.time.DateTimeField dateTimeField35 = chronology31.millisOfDay();
        int int36 = dateTimeField35.getMinimumValue();
        long long38 = dateTimeField35.remainder((long) 99);
        java.util.Locale locale40 = new java.util.Locale("hi!");
        java.util.Locale locale42 = new java.util.Locale("coreano");
        java.lang.String str43 = locale40.getDisplayScript(locale42);
        int int44 = dateTimeField35.getMaximumTextLength(locale40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime45 = property12.setCopy("1970-04-07T00:00:00.035Z", locale40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-04-07T00:00:00.035Z\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertEquals(locale20.toString(), "french (canada)_ERAS");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertEquals(locale40.toString(), "hi!");
        org.junit.Assert.assertEquals(locale42.toString(), "coreano");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
    }

    @Test
    public void test01350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01350");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        java.util.Locale locale6 = dateTimeFormatter2.getLocale();
        boolean boolean7 = dateTimeFormatter2.isOffsetParsed();
        java.lang.Appendable appendable8 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        int int14 = partial11.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = partial11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 0, chronology15);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.minus(readableDuration19);
        org.joda.time.DateTime.Property property21 = dateTime20.millisOfSecond();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        int int23 = property21.getMaximumTextLength(locale22);
        long long24 = property21.remainder();
        org.joda.time.Interval interval25 = property21.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property21.getFieldType();
        org.joda.time.DateTimeField dateTimeField27 = property21.getField();
        java.lang.String str29 = dateTimeField27.getAsShortText(0L);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        boolean boolean37 = partial33.isAfter((org.joda.time.ReadablePartial) partial36);
        java.lang.String str38 = partial36.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial36.getFieldTypes();
        java.util.Locale locale41 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale42 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str43 = locale41.getDisplayName(locale42);
        java.lang.String str44 = locale41.getDisplayVariant();
        java.util.Locale locale45 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale46 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str47 = locale45.getDisplayName(locale46);
        java.lang.String str48 = locale41.getDisplayName(locale45);
        java.util.Set<java.lang.String> strSet49 = locale41.getUnicodeLocaleAttributes();
        java.lang.String str50 = dateTimeField27.getAsShortText((org.joda.time.ReadablePartial) partial36, 999, locale41);
        int[] intArray51 = partial36.getValues();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable8, (org.joda.time.ReadablePartial) partial36);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0" + "'", str29, "0");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "fran\347ais (Canada)" + "'", str43, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "fran\347ais (Canada)" + "'", str47, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "fran\347ais (Canada)" + "'", str48, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "999" + "'", str50, "999");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
    }

    @Test
    public void test01351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01351");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        int int18 = dateTime17.getSecondOfMinute();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        org.joda.time.DateTime dateTime32 = dateTime30.withYear((int) 'a');
        boolean boolean33 = dateTime30.isEqualNow();
        org.joda.time.DateMidnight dateMidnight34 = dateTime30.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone35 = dateMidnight34.getZone();
        org.joda.time.DateTime dateTime36 = dateTime17.withZoneRetainFields(dateTimeZone35);
        org.joda.time.DateTime.Property property37 = dateTime36.weekOfWeekyear();
        boolean boolean38 = property37.isLeap();
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        int int44 = partial41.compareTo((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = partial41.getChronology();
        org.joda.time.DurationField durationField46 = durationFieldType39.getField(chronology45);
        org.joda.time.DateTimeField dateTimeField47 = chronology45.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField49 = chronology45.dayOfYear();
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Locale locale52 = java.util.Locale.KOREA;
        java.lang.String str53 = locale51.getDisplayCountry(locale52);
        java.lang.String str54 = dateTimeField49.getAsShortText((long) (byte) 10, locale51);
        java.lang.String str55 = property37.getAsText(locale51);
        java.util.Locale locale58 = new java.util.Locale("-1", "AM");
        java.lang.String str59 = locale51.getDisplayVariant(locale58);
        java.lang.String str60 = locale51.getLanguage();
        java.lang.Object obj61 = locale51.clone();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1" + "'", str54, "1");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "34" + "'", str55, "34");
        org.junit.Assert.assertEquals(locale58.toString(), "-1_AM");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "");
    }

    @Test
    public void test01352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01352");
        java.util.Locale locale1 = new java.util.Locale("[]");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 0, chronology8);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.minus(readableDuration12);
        org.joda.time.DateTime.Property property14 = dateTime13.millisOfSecond();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        int int16 = property14.getMaximumTextLength(locale15);
        long long17 = property14.remainder();
        org.joda.time.Interval interval18 = property14.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property14.getFieldType();
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale21 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str22 = locale20.getDisplayName(locale21);
        java.lang.String str23 = locale20.getDisplayVariant();
        java.util.Locale locale24 = locale20.stripExtensions();
        int int25 = property14.getMaximumShortTextLength(locale20);
        java.lang.String str26 = locale1.getDisplayName(locale20);
        boolean boolean27 = locale1.hasExtensions();
        org.junit.Assert.assertEquals(locale1.toString(), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fran\347ais (Canada)" + "'", str22, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test01353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01353");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = partial8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology12);
        org.joda.time.DateTime dateTime17 = dateTime15.withHourOfDay(0);
        org.joda.time.DateTime dateTime18 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Instant instant19 = dateTime17.toInstant();
        org.joda.time.DateTime.Property property20 = dateTime17.yearOfEra();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int int25 = partial22.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        boolean boolean28 = partial24.isAfter((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = partial31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 0, chronology35);
        org.joda.time.DateTime dateTime40 = dateTime38.withHourOfDay(0);
        org.joda.time.DateTime dateTime42 = dateTime40.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime42.toMutableDateTime();
        org.joda.time.DateTime dateTime44 = partial24.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        int int50 = partial47.compareTo((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = partial47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.Chronology chronology53 = chronology51.withZone(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) 0, chronology51);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.minus(readableDuration55);
        org.joda.time.DateTime dateTime58 = dateTime54.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime60 = dateTime54.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime62 = dateTime60.minusWeeks(19);
        org.joda.time.DateTime dateTime64 = dateTime60.plusMillis((int) '#');
        int int65 = dateTime64.getDayOfMonth();
        boolean boolean66 = partial24.equals((java.lang.Object) dateTime64);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        int int71 = partial68.compareTo((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = partial68.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean74 = partial68.isSupported(dateTimeFieldType73);
        int int75 = dateTime64.get(dateTimeFieldType73);
        int int76 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.MutableDateTime mutableDateTime77 = dateTime64.toMutableDateTime();
        org.joda.time.Instant instant78 = dateTime64.toInstant();
        boolean boolean79 = instant78.isBeforeNow();
        java.lang.Object obj80 = null;
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime(obj80);
        org.joda.time.Chronology chronology82 = dateTime81.getChronology();
        org.joda.time.DateTimeField dateTimeField83 = chronology82.hourOfDay();
        boolean boolean84 = dateTimeField83.isSupported();
        int int85 = instant78.get(dateTimeField83);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test01354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01354");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        long long16 = chronology12.set((org.joda.time.ReadablePartial) partial14, (long) (byte) -1);
        org.joda.time.DurationField durationField17 = chronology12.millis();
        org.joda.time.DateTimeField dateTimeField18 = chronology12.yearOfCentury();
        org.joda.time.DurationField durationField19 = chronology12.seconds();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology12.getZone();
        org.joda.time.DateTimeField dateTimeField21 = chronology12.weekyearOfCentury();
        boolean boolean23 = dateTimeField21.isLeap((long) 366);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test01355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01355");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        int int10 = partial7.compareTo((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readableDuration25);
        org.joda.time.Chronology chronology27 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfMonth();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        int int33 = partial30.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        boolean boolean36 = partial32.isAfter((org.joda.time.ReadablePartial) partial35);
        java.lang.String str37 = partial35.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        org.joda.time.Partial partial39 = partial35.without(dateTimeFieldType38);
        java.util.Locale locale41 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale42 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str43 = locale41.getDisplayName(locale42);
        java.lang.String str44 = locale41.getDisplayVariant();
        java.util.Locale locale45 = locale41.stripExtensions();
        java.lang.String str46 = dateTimeField28.getAsText((org.joda.time.ReadablePartial) partial35, 53, locale45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        int int52 = partial49.compareTo((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = partial49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 0, chronology53);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.minus(readableDuration57);
        org.joda.time.DateTime dateTime60 = dateTime56.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime62 = dateTime56.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime64 = dateTime62.minusWeeks(19);
        boolean boolean65 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime62);
        long long67 = chronology11.set((org.joda.time.ReadablePartial) partial35, (-62135596800000L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter3.withChronology(chronology11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter68.withDefaultYear(86340);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime72 = dateTimeFormatter70.parseLocalDateTime("d\351cembre");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "fran\347ais (Canada)" + "'", str43, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "53" + "'", str46, "53");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-62135596800000L) + "'", long67 == (-62135596800000L));
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
    }

    @Test
    public void test01356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01356");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.minuteOfHour();
        int int11 = dateTimeField9.getMinimumValue((long) (byte) 0);
        long long14 = dateTimeField9.addWrapField(100L, 3);
        boolean boolean16 = dateTimeField9.isLeap(12L);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        int int21 = partial18.compareTo((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean29 = partial23.isSupported(dateTimeFieldType28);
        boolean boolean30 = partial20.isEqual((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        int int35 = partial32.compareTo((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        boolean boolean38 = partial34.isAfter((org.joda.time.ReadablePartial) partial37);
        boolean boolean39 = partial23.isAfter((org.joda.time.ReadablePartial) partial34);
        int int40 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) partial23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField42 = partial23.getField(5);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 180100L + "'", long14 == 180100L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 59 + "'", int40 == 59);
    }

    @Test
    public void test01357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01357");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readableDuration20);
        org.joda.time.Chronology chronology22 = dateTime19.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        long long26 = chronology22.set((org.joda.time.ReadablePartial) partial24, (long) (byte) -1);
        int[] intArray28 = chronology6.get((org.joda.time.ReadablePartial) partial24, (long) ' ');
        org.joda.time.DurationField durationField29 = chronology6.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology6.dayOfYear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = partial34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 0, chronology38);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime43 = dateTime41.minus(readableDuration42);
        org.joda.time.Chronology chronology44 = dateTime41.getChronology();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        long long48 = chronology44.set((org.joda.time.ReadablePartial) partial46, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = partial46.getFieldTypes();
        java.util.Locale locale50 = java.util.Locale.PRC;
        boolean boolean51 = partial46.equals((java.lang.Object) locale50);
        java.lang.String str52 = dateTimeField30.getAsShortText(86500L, locale50);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        int int59 = partial56.compareTo((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology60 = partial56.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.Chronology chronology62 = chronology60.withZone(dateTimeZone61);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) 0, chronology60);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.DateTime dateTime65 = dateTime63.minus(readableDuration64);
        org.joda.time.DateTime dateTime67 = dateTime63.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime69 = dateTime63.withSecondOfMinute(0);
        org.joda.time.DateTime.Property property70 = dateTime69.minuteOfHour();
        java.util.Locale locale71 = java.util.Locale.ITALIAN;
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.lang.String str73 = locale71.getDisplayScript(locale72);
        java.util.Set<java.lang.String> strSet74 = locale71.getUnicodeLocaleAttributes();
        boolean boolean75 = property70.equals((java.lang.Object) locale71);
        java.lang.String str76 = dateTimeField30.getAsText(1814400000L, locale71);
        int int78 = dateTimeField30.getLeapAmount(0L);
        long long80 = dateTimeField30.roundCeiling(86400000L);
        java.lang.String str81 = dateTimeField30.getName();
        long long84 = dateTimeField30.getDifferenceAsLong((long) (-27409536), (long) 86340);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1" + "'", str52, "1");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "it");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "22" + "'", str76, "22");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 86400000L + "'", long80 == 86400000L);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "dayOfYear" + "'", str81, "dayOfYear");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
    }

    @Test
    public void test01358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01358");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder1.addUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder7 = builder1.setUnicodeLocaleKeyword("53", "");
        java.util.Locale.Builder builder9 = builder1.setLanguage("CN");
        java.util.Locale.Builder builder10 = builder1.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder1.removeUnicodeLocaleAttribute("1970-04-07T00:00:00.035Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 1970-04-07T00:00:00.035Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test01359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01359");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property15 = dateTime11.era();
        int int16 = property15.getMaximumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.plus(readablePeriod18);
        org.joda.time.DateTime dateTime21 = dateTime17.withMinuteOfHour(6);
        long long22 = dateTime21.getMillis();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-62135596440000L) + "'", long22 == (-62135596440000L));
    }

    @Test
    public void test01360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01360");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        boolean boolean5 = dateTimeFormatter4.isPrinter();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = partial8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology12);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        int int21 = partial18.compareTo((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = partial18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Chronology chronology24 = chronology22.withZone(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 0, chronology22);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.minus(readableDuration26);
        org.joda.time.Chronology chronology28 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.dayOfMonth();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        boolean boolean37 = partial33.isAfter((org.joda.time.ReadablePartial) partial36);
        java.lang.String str38 = partial36.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        org.joda.time.Partial partial40 = partial36.without(dateTimeFieldType39);
        java.util.Locale locale42 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale43 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str44 = locale42.getDisplayName(locale43);
        java.lang.String str45 = locale42.getDisplayVariant();
        java.util.Locale locale46 = locale42.stripExtensions();
        java.lang.String str47 = dateTimeField29.getAsText((org.joda.time.ReadablePartial) partial36, 53, locale46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        int int53 = partial50.compareTo((org.joda.time.ReadablePartial) partial52);
        org.joda.time.Chronology chronology54 = partial50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.Chronology chronology56 = chronology54.withZone(dateTimeZone55);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 0, chronology54);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTime dateTime59 = dateTime57.minus(readableDuration58);
        org.joda.time.DateTime dateTime61 = dateTime57.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime63 = dateTime57.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime65 = dateTime63.minusWeeks(19);
        boolean boolean66 = partial36.isMatch((org.joda.time.ReadableInstant) dateTime63);
        long long68 = chronology12.set((org.joda.time.ReadablePartial) partial36, (-62135596800000L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatter4.withChronology(chronology12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter69.withDefaultYear(86340);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.parse("0001-01-01T00:00:00.000Z", dateTimeFormatter71);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fran\347ais (Canada)" + "'", str44, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "53" + "'", str47, "53");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-62135596800000L) + "'", long68 == (-62135596800000L));
        org.junit.Assert.assertNotNull(dateTimeFormatter69);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
    }

    @Test
    public void test01361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01361");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.monthOfYear();
        org.joda.time.Chronology chronology15 = chronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = null;
        org.joda.time.format.DateTimeParser dateTimeParser18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser21 = dateTimeFormatter19.getParser();
        int int22 = dateTimeFormatter19.getDefaultYear();
        org.joda.time.Chronology chronology23 = dateTimeFormatter19.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter24 = null;
        org.joda.time.format.DateTimeParser dateTimeParser25 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter24, dateTimeParser25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        int int31 = partial28.compareTo((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology32 = partial28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone36 = chronology34.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter26.withZone(dateTimeZone36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter19.withZone(dateTimeZone36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        int int44 = partial41.compareTo((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = partial41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Chronology chronology47 = chronology45.withZone(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 0, chronology45);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.minus(readableDuration49);
        org.joda.time.Chronology chronology51 = dateTime48.getChronology();
        org.joda.time.Chronology chronology52 = chronology51.withUTC();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.hourOfDay();
        org.joda.time.DurationField durationField54 = chronology51.millis();
        org.joda.time.DurationField durationField55 = chronology51.days();
        org.joda.time.DateTimeField dateTimeField56 = chronology51.yearOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter19.withChronology(chronology51);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        int int63 = partial60.compareTo((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Chronology chronology64 = partial60.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.Chronology chronology66 = chronology64.withZone(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) 0, chronology64);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.DateTime dateTime69 = dateTime67.minus(readableDuration68);
        org.joda.time.Chronology chronology70 = dateTime67.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField72 = chronology70.dayOfWeek();
        org.joda.time.DurationField durationField73 = chronology70.seconds();
        org.joda.time.DurationField durationField74 = chronology70.months();
        org.joda.time.DateTimeField dateTimeField75 = chronology70.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        long long79 = chronology70.add(readablePeriod76, (long) 43200, 97);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter19.withChronology(chronology70);
        org.joda.time.DateTimeZone dateTimeZone81 = chronology70.getZone();
        org.joda.time.Chronology chronology82 = chronology15.withZone(dateTimeZone81);
        // The following exception was thrown during execution in test generation
        try {
            long long90 = chronology82.getDateTimeMillis((int) (short) -1, 0, 0, 0, 69, 69, 69);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(dateTimeParser21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2000 + "'", int22 == 2000);
        org.junit.Assert.assertNull(chronology23);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 43200L + "'", long79 == 43200L);
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(chronology82);
    }

    @Test
    public void test01362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01362");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = dateTimeFormatter6.parseDateTime("1");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
    }

    @Test
    public void test01363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01363");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withPivotYear(69);
        org.joda.time.format.DateTimeParser dateTimeParser12 = dateTimeFormatter11.getParser();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = partial14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter11.withChronology(chronology20);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(dateTimeParser12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test01364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01364");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        org.joda.time.DateTime dateTime14 = dateTime11.minus((long) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime11.plusDays(97);
        org.joda.time.DateTime.Property property17 = dateTime16.secondOfMinute();
        org.joda.time.DateTime dateTime19 = property17.addToCopy(4L);
        org.joda.time.DurationField durationField20 = property17.getDurationField();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test01365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01365");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        org.joda.time.Interval interval16 = property12.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property12.getFieldType();
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str20 = locale18.getDisplayName(locale19);
        java.lang.String str21 = locale18.getDisplayVariant();
        java.util.Locale locale22 = locale18.stripExtensions();
        int int23 = property12.getMaximumShortTextLength(locale18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        int int29 = partial26.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = partial26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology30);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.minus(readableDuration34);
        org.joda.time.DateTime dateTime37 = dateTime33.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime39 = dateTime33.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime41 = dateTime39.minusWeeks(19);
        int int42 = dateTime41.getSecondOfMinute();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        int int48 = partial45.compareTo((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = partial45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 0, chronology49);
        org.joda.time.DateTime dateTime54 = dateTime52.withHourOfDay(0);
        org.joda.time.DateTime dateTime56 = dateTime54.withYear((int) 'a');
        boolean boolean57 = dateTime54.isEqualNow();
        org.joda.time.DateMidnight dateMidnight58 = dateTime54.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone59 = dateMidnight58.getZone();
        org.joda.time.DateTime dateTime60 = dateTime41.withZoneRetainFields(dateTimeZone59);
        int int61 = property12.compareTo((org.joda.time.ReadableInstant) dateTime60);
        java.lang.String str62 = property12.getName();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fran\347ais (Canada)" + "'", str20, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "millisOfSecond" + "'", str62, "millisOfSecond");
    }

    @Test
    public void test01366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01366");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property15 = dateTime11.era();
        org.joda.time.DateTime dateTime17 = dateTime11.withHourOfDay(12);
        int int18 = dateTime17.getSecondOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.minusSeconds(99);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfYear();
        org.joda.time.DateTime dateTime22 = property21.withMaximumValue();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        int int29 = partial26.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = partial26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology30);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.minus(readableDuration34);
        org.joda.time.DateTime.Property property36 = dateTime35.millisOfSecond();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        int int38 = property36.getMaximumTextLength(locale37);
        long long39 = property36.remainder();
        org.joda.time.Interval interval40 = property36.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property36.getFieldType();
        java.util.Locale locale42 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale43 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str44 = locale42.getDisplayName(locale43);
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.lang.String str46 = locale43.getDisplayVariant(locale45);
        java.lang.String str47 = property36.getAsShortText(locale43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime48 = property21.setCopy("English (Canada)", locale43);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"English (Canada)\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 43200 + "'", int18 == 43200);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fran\347ais (Canada)" + "'", str44, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0" + "'", str47, "0");
    }

    @Test
    public void test01367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01367");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear(23);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readableDuration20);
        org.joda.time.Chronology chronology22 = dateTime19.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        int int27 = partial24.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = partial24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.weekOfWeekyear();
        int int33 = dateTimeField31.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        boolean boolean41 = partial37.isAfter((org.joda.time.ReadablePartial) partial40);
        java.lang.String str42 = partial40.toString();
        java.util.Locale locale44 = null;
        java.lang.String str45 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) partial40, 53, locale44);
        long long47 = chronology22.set((org.joda.time.ReadablePartial) partial40, (long) 0);
        org.joda.time.DateTimeField dateTimeField48 = chronology22.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter9.withChronology(chronology22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime51 = dateTimeFormatter9.parseMutableDateTime("\ud55c\uad6d\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 53 + "'", int33 == 53);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "53" + "'", str45, "53");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
    }

    @Test
    public void test01368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01368");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        long long12 = dateTime11.getMillis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = dateTime11.withTime(86399999, (int) '#', 366, (-52));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399999 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test01369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01369");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = partial14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 0, chronology18);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.minus(readableDuration22);
        org.joda.time.DateTime dateTime25 = dateTime21.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime27 = dateTime21.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime29 = dateTime27.minusWeeks(19);
        org.joda.time.DateTime dateTime31 = dateTime27.plusMillis((int) '#');
        int int32 = dateTime31.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str34 = dateTimeFieldType33.getName();
        boolean boolean35 = dateTime31.isSupported(dateTimeFieldType33);
        org.joda.time.DateTime.Property property36 = dateTime31.year();
        org.joda.time.DateTime dateTime38 = dateTime31.minusMillis(86399999);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.days();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        int int45 = partial42.compareTo((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = partial42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = chronology46.withZone(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 0, chronology46);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.minus(readableDuration50);
        org.joda.time.Chronology chronology52 = dateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField54 = chronology52.dayOfWeek();
        org.joda.time.DurationField durationField55 = chronology52.seconds();
        org.joda.time.DurationField durationField56 = durationFieldType39.getField(chronology52);
        org.joda.time.DurationField durationField57 = chronology52.halfdays();
        org.joda.time.DateTimeField dateTimeField58 = chronology52.yearOfEra();
        long long62 = chronology52.add((long) 97, 31449600000L, 2000);
        org.joda.time.DateTime dateTime63 = dateTime31.toDateTime(chronology52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = dateTimeFormatter6.print((org.joda.time.ReadableInstant) dateTime31);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "halfdayOfDay" + "'", str34, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 62899200000097L + "'", long62 == 62899200000097L);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test01370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01370");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("fr-CA");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.Collection<java.util.Locale> localeCollection4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale locale5 = java.util.Locale.lookup(languageRangeList1, localeCollection4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
    }

    @Test
    public void test01371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01371");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        boolean boolean7 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType10 = partial6.getFieldType(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01372");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DurationField durationField7 = durationFieldType0.getField(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readableDuration20);
        org.joda.time.Chronology chronology22 = dateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfMonth();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        int int28 = partial25.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        boolean boolean31 = partial27.isAfter((org.joda.time.ReadablePartial) partial30);
        java.lang.String str32 = partial30.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        org.joda.time.Partial partial34 = partial30.without(dateTimeFieldType33);
        java.util.Locale locale36 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale37 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.lang.String str39 = locale36.getDisplayVariant();
        java.util.Locale locale40 = locale36.stripExtensions();
        java.lang.String str41 = dateTimeField23.getAsText((org.joda.time.ReadablePartial) partial30, 53, locale40);
        int int42 = partial30.size();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        int int48 = partial45.compareTo((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = partial45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 0, chronology49);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        int int58 = partial55.compareTo((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology59 = partial55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.Chronology chronology61 = chronology59.withZone(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) 0, chronology59);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.DateTime dateTime64 = dateTime62.minus(readableDuration63);
        org.joda.time.Chronology chronology65 = dateTime62.getChronology();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        long long69 = chronology65.set((org.joda.time.ReadablePartial) partial67, (long) (byte) -1);
        int[] intArray71 = chronology49.get((org.joda.time.ReadablePartial) partial67, (long) ' ');
        chronology6.validate((org.joda.time.ReadablePartial) partial30, intArray71);
        // The following exception was thrown during execution in test generation
        try {
            long long78 = chronology6.getDateTimeMillis(10L, 292278993, 1439, 69, 97);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "fran\347ais (Canada)" + "'", str38, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "53" + "'", str41, "53");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
    }

    @Test
    public void test01373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01373");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.DateTime dateTime15 = property14.withMinimumValue();
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        int int22 = partial19.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = partial19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 0, chronology23);
        org.joda.time.DateTime dateTime28 = dateTime26.withHourOfDay(0);
        int int29 = dateTime28.getCenturyOfEra();
        boolean boolean31 = dateTime28.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property32 = dateTime28.era();
        org.joda.time.DateTime.Property property33 = dateTime28.secondOfDay();
        org.joda.time.DateTime dateTime35 = dateTime28.minusHours(0);
        boolean boolean36 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime35);
        int int37 = dateTime35.getHourOfDay();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0120-01-01T00:00:00.000Z" + "'", str16, "0120-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 19 + "'", int29 == 19);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test01374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01374");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        int int16 = property12.getLeapAmount();
        org.joda.time.DateTime dateTime17 = property12.withMinimumValue();
        org.joda.time.DateTime dateTime19 = dateTime17.withCenturyOfEra((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTime dateTime22 = dateTime19.withFieldAdded(durationFieldType20, 1970);
        long long23 = dateTime19.getMillis();
        org.joda.time.DateTime.Property property24 = dateTime19.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant25 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int26 = dateTime19.compareTo(readableInstant25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-56802470400000L) + "'", long23 == (-56802470400000L));
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test01375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01375");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DurationField durationField7 = durationFieldType0.getField(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekyearOfCentury();
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        boolean boolean12 = locale11.hasExtensions();
        java.util.Set<java.lang.Character> charSet13 = locale11.getExtensionKeys();
        java.lang.String str14 = dateTimeField9.getAsShortText(2000, locale11);
        long long16 = dateTimeField9.roundHalfEven((long) 12);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = dateTimeField9.set((long) 2, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for weekyearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2000" + "'", str14, "2000");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test01376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01376");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter3.getParser();
        int int6 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.Chronology chronology7 = dateTimeFormatter3.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology18.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter10.withZone(dateTimeZone20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter3.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-292275054), dateTimeZone20);
        org.joda.time.DateTime dateTime27 = dateTime25.minusHours(720);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime31 = dateTime25.withDurationAdded(readableDuration29, (-1));
        int int32 = dateTime31.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
    }

    @Test
    public void test01377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01377");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime14 = dateTime9.withFieldAdded(durationFieldType12, 3);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        int int16 = dateTime9.get(dateTimeFieldType15);
        org.joda.time.DateTime dateTime18 = dateTime9.plusSeconds(3);
        long long19 = dateTime9.getMillis();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test01378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01378");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone12);
        int int14 = dateTimeFormatter13.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeFormatter13.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime17 = dateTimeFormatter13.parseLocalTime("CHN");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2000 + "'", int14 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone15);
    }

    @Test
    public void test01379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01379");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(3, (-52), (int) 'u', 834, 1, (-52));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 834 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01380");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        int int20 = dateTime19.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str22 = dateTimeFieldType21.getName();
        boolean boolean23 = dateTime19.isSupported(dateTimeFieldType21);
        org.joda.time.DateTime.Property property24 = dateTime19.year();
        org.joda.time.DateTime dateTime26 = dateTime19.minusMillis(86399999);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.days();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        int int33 = partial30.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = partial30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 0, chronology34);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.minus(readableDuration38);
        org.joda.time.Chronology chronology40 = dateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.dayOfWeek();
        org.joda.time.DurationField durationField43 = chronology40.seconds();
        org.joda.time.DurationField durationField44 = durationFieldType27.getField(chronology40);
        org.joda.time.DurationField durationField45 = chronology40.halfdays();
        org.joda.time.DateTimeField dateTimeField46 = chronology40.yearOfEra();
        long long50 = chronology40.add((long) 97, 31449600000L, 2000);
        org.joda.time.DateTime dateTime51 = dateTime19.toDateTime(chronology40);
        org.joda.time.DateTime.Property property52 = dateTime51.centuryOfEra();
        int int53 = property52.getLeapAmount();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "halfdayOfDay" + "'", str22, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 62899200000097L + "'", long50 == 62899200000097L);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test01381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01381");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology8.getZone();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 5, dateTimeZone10);
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.DateTime dateTime16 = dateTime12.withDurationAdded((long) (-694733), 59);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        int int22 = partial19.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = partial19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 0, chronology23);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.minus(readableDuration27);
        org.joda.time.DateTime dateTime30 = dateTime26.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime32 = dateTime26.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime34 = dateTime32.minusWeeks(19);
        int int35 = dateTime34.getSecondOfMinute();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        int int41 = partial38.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 0, chronology42);
        org.joda.time.DateTime dateTime47 = dateTime45.withHourOfDay(0);
        org.joda.time.DateTime dateTime49 = dateTime47.withYear((int) 'a');
        boolean boolean50 = dateTime47.isEqualNow();
        org.joda.time.DateMidnight dateMidnight51 = dateTime47.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone52 = dateMidnight51.getZone();
        org.joda.time.DateTime dateTime53 = dateTime34.withZoneRetainFields(dateTimeZone52);
        org.joda.time.DateTime.Property property54 = dateTime53.weekOfWeekyear();
        boolean boolean55 = dateTime53.isAfterNow();
        org.joda.time.DateTime dateTime56 = dateTime53.toDateTime();
        org.joda.time.DateTime.Property property57 = dateTime56.millisOfSecond();
        org.joda.time.DateTime dateTime59 = dateTime56.plusYears((int) (short) -1);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        int int65 = partial62.compareTo((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Chronology chronology66 = partial62.getChronology();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.Chronology chronology68 = chronology66.withZone(dateTimeZone67);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) 0, chronology66);
        org.joda.time.DateTime dateTime71 = dateTime69.withHourOfDay(0);
        int int72 = dateTime71.getCenturyOfEra();
        boolean boolean74 = dateTime71.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime75 = dateTime71.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean77 = dateTime71.isSupported(dateTimeFieldType76);
        boolean boolean78 = dateTime56.isSupported(dateTimeFieldType76);
        org.joda.time.DurationFieldType durationFieldType79 = dateTimeFieldType76.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime81 = dateTime16.withField(dateTimeFieldType76, 86399999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399999 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 19 + "'", int72 == 19);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(durationFieldType79);
    }

    @Test
    public void test01382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01382");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        boolean boolean6 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear(73);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = dateTimeFormatter8.print((long) 23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
    }

    @Test
    public void test01383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01383");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        java.lang.String str6 = partial1.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.DateTime dateTime18 = dateTime16.withHourOfDay(0);
        int int19 = dateTime18.getCenturyOfEra();
        boolean boolean21 = dateTime18.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property22 = dateTime18.era();
        org.joda.time.DateTime dateTime24 = dateTime18.withHourOfDay(12);
        org.joda.time.DateTime dateTime25 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = partial1.toString(dateTimeFormatter26);
        int[] intArray28 = partial1.getValues();
        int[] intArray29 = partial1.getValues();
        org.joda.time.DateTimeField[] dateTimeFieldArray30 = partial1.getFields();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField32 = partial1.getField(24);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 24");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 19 + "'", int19 == 19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray30);
    }

    @Test
    public void test01384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01384");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.monthOfYear();
        org.joda.time.DurationField durationField15 = dateTimeField14.getLeapDurationField();
        long long18 = dateTimeField14.add((long) (byte) 1, 73L);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str20 = dateTimeFieldType19.getName();
        java.lang.String str21 = dateTimeFieldType19.getName();
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType19.getDurationType();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        int int27 = partial24.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = partial24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.hourOfHalfday();
        boolean boolean33 = durationFieldType22.isSupported(chronology30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        int int39 = partial36.compareTo((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = partial36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.Chronology chronology42 = chronology40.withZone(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 0, chronology40);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTime dateTime45 = dateTime43.minus(readableDuration44);
        org.joda.time.Chronology chronology46 = dateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.secondOfDay();
        org.joda.time.DurationField durationField48 = chronology46.weeks();
        org.joda.time.DurationField durationField49 = durationFieldType22.getField(chronology46);
        org.joda.time.DateTimeField dateTimeField50 = chronology46.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((java.lang.Object) dateTimeField14, chronology46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.GJMonthOfYearDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 191980800001L + "'", long18 == 191980800001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "halfdayOfDay" + "'", str20, "halfdayOfDay");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "halfdayOfDay" + "'", str21, "halfdayOfDay");
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test01385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01385");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        org.joda.time.DurationField durationField15 = property12.getRangeDurationField();
        int int16 = property12.getMinimumValueOverall();
        org.joda.time.DateTime dateTime18 = property12.addToCopy((long) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = property12.setCopy("1439");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1439 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test01386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01386");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DurationField durationField7 = durationFieldType0.getField(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekOfWeekyear();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        int int16 = partial13.compareTo((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = partial13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.weekOfWeekyear();
        int int22 = dateTimeField20.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        int int27 = partial24.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        boolean boolean30 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        java.lang.String str31 = partial29.toString();
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeField20.getAsShortText((org.joda.time.ReadablePartial) partial29, 53, locale33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        int int39 = partial36.compareTo((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        boolean boolean42 = partial38.isAfter((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        int int48 = partial45.compareTo((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = partial45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 0, chronology49);
        org.joda.time.DateTime dateTime54 = dateTime52.withHourOfDay(0);
        org.joda.time.DateTime dateTime56 = dateTime54.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime56.toMutableDateTime();
        org.joda.time.DateTime dateTime58 = partial38.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        int int64 = partial61.compareTo((org.joda.time.ReadablePartial) partial63);
        org.joda.time.Chronology chronology65 = partial61.getChronology();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.Chronology chronology67 = chronology65.withZone(dateTimeZone66);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) 0, chronology65);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.DateTime dateTime70 = dateTime68.minus(readableDuration69);
        org.joda.time.DateTime dateTime72 = dateTime68.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime74 = dateTime68.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime76 = dateTime74.minusWeeks(19);
        org.joda.time.DateTime dateTime78 = dateTime74.plusMillis((int) '#');
        int int79 = dateTime78.getDayOfMonth();
        boolean boolean80 = partial38.equals((java.lang.Object) dateTime78);
        boolean boolean81 = partial29.isEqual((org.joda.time.ReadablePartial) partial38);
        int int82 = partial38.size();
        java.util.Locale locale83 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str84 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) partial38, locale83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekOfWeekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "53" + "'", str34, "53");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test01387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01387");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.era();
        org.joda.time.DurationField durationField11 = durationFieldType1.getField(chronology7);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.days();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 0, chronology19);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readableDuration23);
        org.joda.time.Chronology chronology25 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.dayOfWeek();
        org.joda.time.DurationField durationField28 = chronology25.seconds();
        org.joda.time.DurationField durationField29 = durationFieldType12.getField(chronology25);
        org.joda.time.DurationField durationField30 = chronology25.halfdays();
        org.joda.time.DateTimeField dateTimeField31 = chronology25.minuteOfDay();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = partial34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 0, chronology38);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime43 = dateTime41.minus(readableDuration42);
        org.joda.time.DateTime.Property property44 = dateTime43.millisOfSecond();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        int int46 = property44.getMaximumTextLength(locale45);
        long long47 = property44.remainder();
        org.joda.time.Interval interval48 = property44.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property44.getFieldType();
        org.joda.time.DateTimeField dateTimeField50 = property44.getField();
        java.lang.String str52 = dateTimeField50.getAsShortText(0L);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        int int57 = partial54.compareTo((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        boolean boolean60 = partial56.isAfter((org.joda.time.ReadablePartial) partial59);
        java.lang.String str61 = partial59.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray62 = partial59.getFieldTypes();
        java.util.Locale locale64 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale65 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str66 = locale64.getDisplayName(locale65);
        java.lang.String str67 = locale64.getDisplayVariant();
        java.util.Locale locale68 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale69 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str70 = locale68.getDisplayName(locale69);
        java.lang.String str71 = locale64.getDisplayName(locale68);
        java.util.Set<java.lang.String> strSet72 = locale64.getUnicodeLocaleAttributes();
        java.lang.String str73 = dateTimeField50.getAsShortText((org.joda.time.ReadablePartial) partial59, 999, locale64);
        int[] intArray78 = new int[] { 43200, 'a', 1, ' ' };
        int int79 = dateTimeField31.getMaximumValue((org.joda.time.ReadablePartial) partial59, intArray78);
        org.joda.time.Chronology chronology80 = partial59.getChronology();
        org.joda.time.DateTimeField dateTimeField81 = chronology80.halfdayOfDay();
        boolean boolean82 = durationFieldType1.isSupported(chronology80);
        java.lang.String str83 = durationFieldType1.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0" + "'", str52, "0");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "fran\347ais (Canada)" + "'", str66, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "fran\347ais (Canada)" + "'", str70, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "fran\347ais (Canada)" + "'", str71, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "999" + "'", str73, "999");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[43200, 97, 1, 32]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1439 + "'", int79 == 1439);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "centuries" + "'", str83, "centuries");
    }

    @Test
    public void test01388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01388");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        int int9 = partial6.compareTo((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = partial6.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean12 = partial6.isSupported(dateTimeFieldType11);
        boolean boolean13 = partial3.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial6.plus(readablePeriod14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        int int21 = partial18.compareTo((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = partial18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Chronology chronology24 = chronology22.withZone(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 0, chronology22);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.minus(readableDuration26);
        org.joda.time.Chronology chronology28 = dateTime25.getChronology();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        long long32 = chronology28.set((org.joda.time.ReadablePartial) partial30, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = partial30.getFieldTypes();
        java.util.Locale locale34 = java.util.Locale.PRC;
        boolean boolean35 = partial30.equals((java.lang.Object) locale34);
        int int36 = partial30.size();
        org.joda.time.Chronology chronology37 = partial30.getChronology();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial30.minus(readablePeriod38);
        boolean boolean40 = partial6.isBefore((org.joda.time.ReadablePartial) partial30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType42 = partial30.getFieldType(7);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 7");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test01389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01389");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        long long16 = chronology12.set((org.joda.time.ReadablePartial) partial14, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = partial14.getFieldTypes();
        java.util.Locale locale18 = java.util.Locale.PRC;
        boolean boolean19 = partial14.equals((java.lang.Object) locale18);
        int int20 = partial14.size();
        org.joda.time.Chronology chronology21 = partial14.getChronology();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        java.lang.String str27 = partial23.toString();
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = partial23.isMatch(readableInstant28);
        org.joda.time.DateTimeField[] dateTimeFieldArray30 = partial23.getFields();
        boolean boolean31 = partial14.equals((java.lang.Object) partial23);
        int int32 = partial14.size();
        // The following exception was thrown during execution in test generation
        try {
            int int34 = partial14.getValue(1971);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1971");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test01390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01390");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property15 = dateTime11.era();
        java.lang.String str16 = property15.getAsString();
        org.joda.time.DateTime dateTime17 = property15.roundCeilingCopy();
        java.lang.String str18 = property15.getAsText();
        org.joda.time.DateTime dateTime19 = property15.roundHalfEvenCopy();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.plus(readableDuration20);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime21.toMutableDateTime();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ap. J.-C." + "'", str18, "ap. J.-C.");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
    }

    @Test
    public void test01391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01391");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str14 = dateTimeFieldType13.getName();
        int int15 = dateTime9.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime17 = dateTime9.minusMinutes(4);
        org.joda.time.Instant instant18 = dateTime17.toInstant();
        java.lang.Class<?> wildcardClass19 = instant18.getClass();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "halfdayOfDay" + "'", str14, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test01392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01392");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfDay();
        org.joda.time.DurationField durationField14 = chronology12.seconds();
        org.joda.time.DurationField durationField15 = chronology12.hours();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.era();
        org.joda.time.DurationField durationField17 = chronology12.millis();
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = partial18.getFormatter();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNull(dateTimeFormatter19);
    }

    @Test
    public void test01393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01393");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        int int10 = partial7.compareTo((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime14.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime20 = dateTime14.withSecondOfMinute(0);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime14.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter2.withZone(dateTimeZone21);
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter25.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser27 = dateTimeFormatter25.getParser();
        int int28 = dateTimeFormatter25.getDefaultYear();
        org.joda.time.Chronology chronology29 = dateTimeFormatter25.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = null;
        org.joda.time.format.DateTimeParser dateTimeParser31 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter30, dateTimeParser31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = partial34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology40.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter32.withZone(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter25.withZone(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter22.withZone(dateTimeZone42);
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("AD");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter22.withLocale(locale48);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTimeFormatter49.getZone();
        java.lang.StringBuffer stringBuffer51 = null;
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        int int57 = partial54.compareTo((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Chronology chronology58 = partial54.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 0, chronology58);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.DateTime dateTime63 = dateTime61.minus(readableDuration62);
        org.joda.time.DateTime.Property property64 = dateTime63.millisOfSecond();
        org.joda.time.DateTime dateTime66 = dateTime63.minusMillis((int) (byte) -1);
        int int67 = dateTime66.getMinuteOfHour();
        org.joda.time.DateTime dateTime69 = dateTime66.withWeekOfWeekyear(31);
        java.util.Locale locale73 = new java.util.Locale("", "0022-02-11T09:36:30.397Z", "years");
        java.util.Calendar calendar74 = dateTime69.toCalendar(locale73);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter49.printTo(stringBuffer51, (org.joda.time.ReadableInstant) dateTime69);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(dateTimeParser27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2000 + "'", int28 == 2000);
        org.junit.Assert.assertNull(chronology29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ad");
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertEquals(locale73.toString(), "_0022-02-11T09:36:30.397Z_years");
        org.junit.Assert.assertNotNull(calendar74);
        org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=18144000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=6,WEEK_OF_YEAR=31,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=211,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test01394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01394");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        boolean boolean7 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        java.lang.String str8 = partial6.toString();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial11 = partial6.withPeriodAdded(readablePeriod9, 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField13 = partial11.getField(19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(partial11);
    }

    @Test
    public void test01395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01395");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int int25 = partial22.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = partial22.getChronology();
        org.joda.time.DurationField durationField27 = durationFieldType20.getField(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfMonth();
        org.joda.time.DateTime dateTime30 = dateTime19.toDateTime(chronology26);
        org.joda.time.Chronology chronology31 = chronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = chronology26.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long40 = chronology26.getDateTimeMillis((-694733), 19, (int) (short) -1, 4, 317, 317, 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 317 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test01396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01396");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        long long12 = dateTime11.getMillis();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        boolean boolean20 = partial16.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.DateTime dateTime32 = dateTime30.withHourOfDay(0);
        org.joda.time.DateTime dateTime34 = dateTime32.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime34.toMutableDateTime();
        org.joda.time.DateTime dateTime36 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readableDuration47);
        org.joda.time.DateTime dateTime50 = dateTime46.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime52 = dateTime46.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime54 = dateTime52.minusWeeks(19);
        org.joda.time.DateTime dateTime56 = dateTime52.plusMillis((int) '#');
        int int57 = dateTime56.getDayOfMonth();
        boolean boolean58 = partial16.equals((java.lang.Object) dateTime56);
        boolean boolean59 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime61 = dateTime56.plusSeconds(2);
        org.joda.time.Chronology chronology62 = dateTime56.getChronology();
        org.joda.time.DateTime.Property property63 = dateTime56.millisOfSecond();
        org.joda.time.DateTime dateTime64 = dateTime56.toDateTimeISO();
        org.joda.time.DateTime.Property property65 = dateTime64.secondOfDay();
        org.joda.time.format.DateTimePrinter dateTimePrinter66 = null;
        org.joda.time.format.DateTimeParser dateTimeParser67 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter66, dateTimeParser67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(chronology71);
        int int73 = partial70.compareTo((org.joda.time.ReadablePartial) partial72);
        org.joda.time.Chronology chronology74 = partial70.getChronology();
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.Chronology chronology76 = chronology74.withZone(dateTimeZone75);
        org.joda.time.DateTimeField dateTimeField77 = chronology76.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone78 = chronology76.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter68.withZone(dateTimeZone78);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str80 = dateTime64.toString(dateTimeFormatter68);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
    }

    @Test
    public void test01397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01397");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        int int16 = property12.getLeapAmount();
        org.joda.time.DateTime dateTime17 = property12.withMinimumValue();
        org.joda.time.DateTime dateTime19 = dateTime17.withCenturyOfEra((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTime dateTime22 = dateTime19.withFieldAdded(durationFieldType20, 1970);
        long long23 = dateTime19.getMillis();
        org.joda.time.DateTime.Property property24 = dateTime19.dayOfMonth();
        org.joda.time.Interval interval25 = property24.toInterval();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-56802470400000L) + "'", long23 == (-56802470400000L));
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(interval25);
    }

    @Test
    public void test01398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01398");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.removeUnicodeLocaleAttribute("CAN");
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder0.removeUnicodeLocaleAttribute("DateTimeField[era]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: DateTimeField[era] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test01399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01399");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.monthOfYear();
        org.joda.time.Chronology chronology15 = chronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long22 = chronology15.getDateTimeMillis((-28339200000L), (int) (short) 10, 6, 2, 2000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2000 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test01400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01400");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.DateTime dateTime15 = property14.withMinimumValue();
        boolean boolean16 = dateTime15.isAfterNow();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int18 = dateTime15.get(dateTimeFieldType17);
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.lang.String str22 = locale19.getDisplayName();
        java.util.Calendar calendar23 = dateTime15.toCalendar(locale19);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        int int29 = partial26.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = partial26.getChronology();
        org.joda.time.DurationField durationField31 = durationFieldType24.getField(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.weekyearOfCentury();
        org.joda.time.DurationField durationField34 = dateTimeField33.getLeapDurationField();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        int int39 = partial36.compareTo((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = partial36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.Chronology chronology42 = chronology40.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = chronology42.weekOfWeekyear();
        int int45 = dateTimeField43.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        int int50 = partial47.compareTo((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        boolean boolean53 = partial49.isAfter((org.joda.time.ReadablePartial) partial52);
        java.lang.String str54 = partial52.toString();
        java.util.Locale locale56 = null;
        java.lang.String str57 = dateTimeField43.getAsShortText((org.joda.time.ReadablePartial) partial52, 53, locale56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        int int62 = partial59.compareTo((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Chronology chronology63 = partial59.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.era();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        int int69 = partial66.compareTo((org.joda.time.ReadablePartial) partial68);
        int[] intArray71 = new int[] { 2 };
        int int72 = dateTimeField64.getMinimumValue((org.joda.time.ReadablePartial) partial66, intArray71);
        int int73 = dateTimeField33.getMaximumValue((org.joda.time.ReadablePartial) partial52, intArray71);
        int[] intArray74 = partial52.getValues();
        org.joda.time.DateTime dateTime75 = dateTime15.withFields((org.joda.time.ReadablePartial) partial52);
        org.joda.time.DateTime dateTime76 = dateTime15.withLaterOffsetAtOverlap();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fran\347ais (Canada)" + "'", str21, "fran\347ais (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fran\347ais (Canada)" + "'", str22, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-58380393600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=120,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNull(durationField34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 53 + "'", int45 == 53);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "53" + "'", str57, "53");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[2]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 99 + "'", int73 == 99);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
    }

    @Test
    public void test01401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01401");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        long long15 = dateTime13.getMillis();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        int int21 = partial18.compareTo((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = partial18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Chronology chronology24 = chronology22.withZone(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 0, chronology22);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.minus(readableDuration26);
        org.joda.time.DateTime dateTime29 = dateTime25.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime31 = dateTime25.withSecondOfMinute(0);
        int int32 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime.Property property33 = dateTime13.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = dateTime13.withDayOfMonth(834);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 834 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-58380393600000L) + "'", long15 == (-58380393600000L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test01402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01402");
        java.util.Locale locale2 = new java.util.Locale("2022-02-11T09:36:04.246Z", "ita");
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-11t09:36:04.246z_ITA");
    }

    @Test
    public void test01403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01403");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        org.joda.time.Interval interval16 = property12.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property12.getFieldType();
        org.joda.time.DateTimeField dateTimeField18 = property12.getField();
        java.lang.String str20 = dateTimeField18.getAsShortText(0L);
        int int22 = dateTimeField18.getLeapAmount((long) 70);
        long long25 = dateTimeField18.add((long) (short) 1, 59);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 60L + "'", long25 == 60L);
    }

    @Test
    public void test01404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01404");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DurationField durationField7 = durationFieldType0.getField(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readableDuration20);
        org.joda.time.Chronology chronology22 = dateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfMonth();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        int int28 = partial25.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        boolean boolean31 = partial27.isAfter((org.joda.time.ReadablePartial) partial30);
        java.lang.String str32 = partial30.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        org.joda.time.Partial partial34 = partial30.without(dateTimeFieldType33);
        java.util.Locale locale36 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale37 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.lang.String str39 = locale36.getDisplayVariant();
        java.util.Locale locale40 = locale36.stripExtensions();
        java.lang.String str41 = dateTimeField23.getAsText((org.joda.time.ReadablePartial) partial30, 53, locale40);
        int int42 = partial30.size();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        int int48 = partial45.compareTo((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = partial45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 0, chronology49);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        int int58 = partial55.compareTo((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology59 = partial55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.Chronology chronology61 = chronology59.withZone(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) 0, chronology59);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.DateTime dateTime64 = dateTime62.minus(readableDuration63);
        org.joda.time.Chronology chronology65 = dateTime62.getChronology();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        long long69 = chronology65.set((org.joda.time.ReadablePartial) partial67, (long) (byte) -1);
        int[] intArray71 = chronology49.get((org.joda.time.ReadablePartial) partial67, (long) ' ');
        chronology6.validate((org.joda.time.ReadablePartial) partial30, intArray71);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType74 = partial30.getFieldType((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "fran\347ais (Canada)" + "'", str38, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "53" + "'", str41, "53");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
    }

    @Test
    public void test01405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01405");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology21.getZone();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone23);
        org.joda.time.format.DateTimePrinter dateTimePrinter26 = dateTimeFormatter25.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeFormatter25.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime29 = dateTimeFormatter25.parseDateTime("70");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNull(dateTimePrinter26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
    }

    @Test
    public void test01406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01406");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        int int14 = partial11.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = partial11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter9.withZone(dateTimeZone19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withZone(dateTimeZone19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        int int27 = partial24.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = partial24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 0, chronology28);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.minus(readableDuration32);
        org.joda.time.Chronology chronology34 = dateTime31.getChronology();
        org.joda.time.Chronology chronology35 = chronology34.withUTC();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfDay();
        org.joda.time.DurationField durationField37 = chronology34.millis();
        org.joda.time.DurationField durationField38 = chronology34.days();
        org.joda.time.DateTimeField dateTimeField39 = chronology34.yearOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter2.withChronology(chronology34);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        int int46 = partial43.compareTo((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology47 = partial43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 0, chronology47);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.minus(readableDuration51);
        org.joda.time.Chronology chronology53 = dateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.dayOfWeek();
        org.joda.time.DurationField durationField56 = chronology53.seconds();
        org.joda.time.DurationField durationField57 = chronology53.months();
        org.joda.time.DateTimeField dateTimeField58 = chronology53.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        long long62 = chronology53.add(readablePeriod59, (long) 43200, 97);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter2.withChronology(chronology53);
        boolean boolean64 = dateTimeFormatter63.isParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 43200L + "'", long62 == 43200L);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test01407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01407");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.Chronology chronology2 = partial0.getChronology();
        int[] intArray3 = partial0.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) partial0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Partial");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
    }

    @Test
    public void test01408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01408");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.DateTime dateTime16 = dateTime13.plusMillis(3970);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime13.withHourOfDay((int) 'u');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 117 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test01409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01409");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str1 = dateTimeFieldType0.getName();
        java.lang.String str2 = dateTimeFieldType0.getName();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType0.getDurationType();
        java.lang.String str4 = dateTimeFieldType0.getName();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType0.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial7 = new org.joda.time.Partial(dateTimeFieldType0, 2022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for halfdayOfDay must not be larger than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "halfdayOfDay" + "'", str1, "halfdayOfDay");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "halfdayOfDay" + "'", str2, "halfdayOfDay");
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "halfdayOfDay" + "'", str4, "halfdayOfDay");
        org.junit.Assert.assertNotNull(durationFieldType5);
    }

    @Test
    public void test01410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01410");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTimeField dateTimeField10 = chronology6.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField12 = chronology6.eras();
        org.joda.time.DateTimeField dateTimeField13 = chronology6.secondOfMinute();
        long long15 = dateTimeField13.roundCeiling((long) 19);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1000L + "'", long15 == 1000L);
    }

    @Test
    public void test01411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01411");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder1.setVariant("");
        java.util.Locale locale5 = builder1.build();
        java.util.Locale locale6 = builder1.build();
        java.lang.String str7 = locale6.toLanguageTag();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        int int13 = partial10.compareTo((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = partial10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Chronology chronology16 = chronology14.withZone(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 0, chronology14);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.minus(readableDuration18);
        org.joda.time.DateTime dateTime21 = dateTime17.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfYear();
        java.lang.String str23 = property22.getName();
        int int24 = property22.get();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = property22.getAsText(locale25);
        java.lang.String str27 = locale6.getDisplayLanguage(locale25);
        java.util.Set<java.lang.Character> charSet28 = locale6.getExtensionKeys();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "und" + "'", str7, "und");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "dayOfYear" + "'", str23, "dayOfYear");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(charSet28);
    }

    @Test
    public void test01412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01412");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.Chronology chronology2 = partial0.getChronology();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        boolean boolean10 = partial6.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = partial14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 0, chronology18);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.minus(readableDuration22);
        org.joda.time.DateTime.Property property24 = dateTime23.millisOfSecond();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        int int26 = property24.getMaximumTextLength(locale25);
        long long27 = property24.remainder();
        org.joda.time.Interval interval28 = property24.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property24.getFieldType();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType29.getRangeDurationType();
        boolean boolean31 = partial11.isSupported(dateTimeFieldType29);
        java.lang.String str32 = dateTimeFieldType29.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial34 = partial0.withField(dateTimeFieldType29, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfSecond' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
    }

    @Test
    public void test01413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01413");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale6.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withLocale(locale6);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeFormatter9.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = dateTimeFormatter9.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter9.withPivotYear((java.lang.Integer) 292278993);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTimeFormatter13.parseDateTime("\ud55c\uad6d\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimeZone10);
        org.junit.Assert.assertNull(dateTimePrinter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
    }

    @Test
    public void test01414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01414");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        int int20 = dateTime19.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.minus(readablePeriod21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        int int28 = partial25.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = partial25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Chronology chronology31 = chronology29.withZone(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 0, chronology29);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.minus(readableDuration33);
        org.joda.time.DateTime dateTime36 = dateTime32.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property37 = dateTime36.dayOfYear();
        org.joda.time.DateTime dateTime38 = property37.withMinimumValue();
        boolean boolean39 = dateTime38.isAfterNow();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime42 = dateTime38.withDurationAdded(readableDuration40, 99);
        org.joda.time.DateTime dateTime44 = dateTime42.plusMonths(12);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.plus(readablePeriod45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        int int52 = partial49.compareTo((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = partial49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 0, chronology53);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.minus(readableDuration57);
        org.joda.time.Chronology chronology59 = dateTime56.getChronology();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        long long63 = chronology59.set((org.joda.time.ReadablePartial) partial61, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray64 = partial61.getFieldTypes();
        java.util.Locale locale65 = java.util.Locale.PRC;
        boolean boolean66 = partial61.equals((java.lang.Object) locale65);
        int int67 = partial61.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int69 = partial61.indexOf(dateTimeFieldType68);
        boolean boolean70 = dateTime44.isSupported(dateTimeFieldType68);
        org.joda.time.DateTime.Property property71 = dateTime19.property(dateTimeFieldType68);
        org.joda.time.DurationFieldType durationFieldType72 = dateTimeFieldType68.getDurationType();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(durationFieldType72);
    }

    @Test
    public void test01415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01415");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = chronology12.withUTC();
        org.joda.time.Chronology chronology14 = chronology12.withUTC();
        long long18 = chronology12.add(1644572205168L, 946684800000L, 1969);
        org.joda.time.DurationField durationField19 = chronology12.days();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1865666943405168L + "'", long18 == 1865666943405168L);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test01416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01416");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        long long16 = chronology12.set((org.joda.time.ReadablePartial) partial14, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = partial14.getFieldTypes();
        java.util.Locale locale18 = java.util.Locale.PRC;
        boolean boolean19 = partial14.equals((java.lang.Object) locale18);
        int int20 = partial14.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int22 = partial14.indexOf(dateTimeFieldType21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial23.getFieldTypes();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        int int30 = partial27.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = partial27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 0, chronology31);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.minus(readableDuration35);
        org.joda.time.Chronology chronology37 = dateTime34.getChronology();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        long long41 = chronology37.set((org.joda.time.ReadablePartial) partial39, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = partial39.getFieldTypes();
        java.util.Locale locale43 = java.util.Locale.PRC;
        boolean boolean44 = partial39.equals((java.lang.Object) locale43);
        int int45 = partial39.size();
        org.joda.time.Chronology chronology46 = partial39.getChronology();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial39.minus(readablePeriod47);
        int[] intArray49 = partial39.getValues();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        int int55 = partial52.compareTo((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Chronology chronology56 = partial52.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.Chronology chronology58 = chronology56.withZone(dateTimeZone57);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) 0, chronology56);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.DateTime dateTime61 = dateTime59.minus(readableDuration60);
        org.joda.time.Chronology chronology62 = dateTime59.getChronology();
        org.joda.time.DurationField durationField63 = chronology62.centuries();
        org.joda.time.DurationField durationField64 = chronology62.millis();
        org.joda.time.Partial partial65 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray49, chronology62);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = partial65.getFormatter();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        int int71 = partial68.compareTo((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = new org.joda.time.Partial(chronology72);
        boolean boolean74 = partial70.isAfter((org.joda.time.ReadablePartial) partial73);
        java.lang.String str75 = partial73.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = null;
        org.joda.time.Partial partial77 = partial73.without(dateTimeFieldType76);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.Partial partial79 = partial73.plus(readablePeriod78);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.Partial partial82 = partial79.withPeriodAdded(readablePeriod80, 2000);
        org.joda.time.Chronology chronology83 = partial82.getChronology();
        boolean boolean84 = partial65.isBefore((org.joda.time.ReadablePartial) partial82);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNull(dateTimeFormatter66);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[]" + "'", str75, "[]");
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test01417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01417");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 317);
        int int14 = dateTimeFormatter6.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = dateTimeFormatter6.print((long) 35);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2000 + "'", int14 == 2000);
    }

    @Test
    public void test01418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01418");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        org.joda.time.DurationField durationField15 = property12.getRangeDurationField();
        int int16 = property12.get();
        org.joda.time.DateTime dateTime18 = property12.addToCopy((long) 0);
        int int19 = property12.getLeapAmount();
        org.joda.time.DateTime dateTime20 = property12.withMaximumValue();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.minus(readableDuration31);
        org.joda.time.DateTime.Property property33 = dateTime32.millisOfSecond();
        org.joda.time.DateTime dateTime35 = dateTime32.minusMillis((int) (byte) -1);
        boolean boolean36 = dateTime20.isBefore((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime.Property property37 = dateTime35.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime39 = property37.addToCopy(22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test01419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01419");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.minus(readableDuration11);
        org.joda.time.Chronology chronology13 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.dayOfWeek();
        org.joda.time.DurationField durationField16 = chronology13.seconds();
        org.joda.time.DurationField durationField17 = durationFieldType0.getField(chronology13);
        org.joda.time.DurationField durationField18 = chronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.yearOfEra();
        long long23 = chronology13.add((long) 97, 31449600000L, 2000);
        org.joda.time.DateTimeField dateTimeField24 = chronology13.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray27 = chronology13.get(readablePeriod25, 6L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 62899200000097L + "'", long23 == 62899200000097L);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test01420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01420");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(0, 2, 97, 0, (int) '#', 0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for dayOfMonth must be in the range [1,29]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01421");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayScript(locale1);
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str4 = locale3.getDisplayCountry();
        java.lang.String str5 = locale1.getDisplayName(locale3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = locale1.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Canada" + "'", str4, "Canada");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "cor\351en" + "'", str5, "cor\351en");
    }

    @Test
    public void test01422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01422");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = partial8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology12);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.minus(readableDuration16);
        org.joda.time.DateTime dateTime19 = dateTime15.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime21 = dateTime15.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime23 = dateTime21.minusWeeks(19);
        org.joda.time.DateTime dateTime25 = dateTime21.plusMillis((int) '#');
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfYear((int) 'a');
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        int int33 = partial30.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = partial30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 0, chronology34);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        int int43 = partial40.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = partial40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology44.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) 0, chronology44);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.minus(readableDuration48);
        org.joda.time.Chronology chronology50 = dateTime47.getChronology();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        long long54 = chronology50.set((org.joda.time.ReadablePartial) partial52, (long) (byte) -1);
        int[] intArray56 = chronology34.get((org.joda.time.ReadablePartial) partial52, (long) ' ');
        org.joda.time.DurationField durationField57 = chronology34.eras();
        org.joda.time.DateTime dateTime58 = dateTime25.withChronology(chronology34);
        org.joda.time.DateTimeField dateTimeField59 = chronology34.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(1970, 170, 43200, 1, 233, 86340, chronology34);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 233 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeField59);
    }

    @Test
    public void test01423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01423");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTime.Property property13 = dateTime9.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTime9.withEra(834);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 834 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test01424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01424");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        org.joda.time.DateTime dateTime13 = dateTime11.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTime();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readableDuration25);
        org.joda.time.DateTime.Property property27 = dateTime26.millisOfSecond();
        boolean boolean28 = mutableDateTime14.isBefore((org.joda.time.ReadableInstant) dateTime26);
        int int29 = dateTime26.getYear();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        int int35 = partial32.compareTo((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology36 = partial32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.Chronology chronology38 = chronology36.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 0, chronology36);
        org.joda.time.DateTime dateTime41 = dateTime39.withHourOfDay(0);
        int int42 = dateTime41.getCenturyOfEra();
        boolean boolean44 = dateTime41.equals((java.lang.Object) '4');
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        int int50 = partial47.compareTo((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = partial47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.Chronology chronology53 = chronology51.withZone(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) 0, chronology51);
        org.joda.time.DateTime dateTime56 = dateTime54.withHourOfDay(0);
        int int57 = dateTime56.getCenturyOfEra();
        boolean boolean59 = dateTime56.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime60 = dateTime56.withEarlierOffsetAtOverlap();
        boolean boolean61 = dateTime41.isAfter((org.joda.time.ReadableInstant) dateTime60);
        boolean boolean62 = dateTime26.equals((java.lang.Object) dateTime41);
        int int63 = dateTime26.getSecondOfMinute();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 19 + "'", int42 == 19);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 19 + "'", int57 == 19);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test01425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01425");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.removeUnicodeLocaleAttribute("italien");
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("millis");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder3.removeUnicodeLocaleAttribute("CA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: CA [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test01426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01426");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        int int20 = dateTime19.getDayOfMonth();
        org.joda.time.DateTime dateTime22 = dateTime19.plus((long) (short) -1);
        int int23 = dateTime19.getHourOfDay();
        int int24 = dateTime19.getDayOfMonth();
        int int25 = dateTime19.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 70 + "'", int25 == 70);
    }

    @Test
    public void test01427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01427");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        int int15 = dateTimeField13.getMinimumValue((long) 99);
        int int17 = dateTimeField13.getMinimumValue((long) 233);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test01428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01428");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(1439, 1900, 100, 100, 19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01429");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        int int18 = dateTime17.getSecondOfMinute();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        org.joda.time.DateTime dateTime32 = dateTime30.withYear((int) 'a');
        boolean boolean33 = dateTime30.isEqualNow();
        org.joda.time.DateMidnight dateMidnight34 = dateTime30.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone35 = dateMidnight34.getZone();
        org.joda.time.DateTime dateTime36 = dateTime17.withZoneRetainFields(dateTimeZone35);
        org.joda.time.DateTime.Property property37 = dateTime36.weekOfWeekyear();
        boolean boolean38 = dateTime36.isAfterNow();
        org.joda.time.DateTime dateTime39 = dateTime36.toDateTime();
        boolean boolean41 = dateTime36.isEqual((long) 2022);
        int int42 = dateTime36.getWeekyear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1969 + "'", int42 == 1969);
    }

    @Test
    public void test01430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01430");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.Chronology chronology8 = partial1.getChronology();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial1.plus(readablePeriod9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean12 = partial1.isSupported(dateTimeFieldType11);
        org.joda.time.Partial partial13 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = partial1.getValue(834);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 834");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test01431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01431");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime15 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property16 = dateTime11.monthOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        int int22 = partial19.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = partial19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 0, chronology23);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.minus(readableDuration27);
        org.joda.time.DateTime dateTime30 = dateTime26.withYearOfEra((int) 'x');
        int int31 = dateTime30.getWeekOfWeekyear();
        org.joda.time.Instant instant32 = dateTime30.toInstant();
        int int33 = property16.getDifference((org.joda.time.ReadableInstant) dateTime30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = property16.setCopy(170);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 170 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 22200 + "'", int33 == 22200);
    }

    @Test
    public void test01432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01432");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.DateTime dateTime15 = property14.withMinimumValue();
        java.lang.String str16 = property14.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = property14.setCopy("fr-CA");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"fr-CA\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "dayOfYear" + "'", str16, "dayOfYear");
    }

    @Test
    public void test01433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01433");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2022-02-11T09:35:28.397Z", (double) (-62135596440000L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-6.213559644E13");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01434");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) 'a');
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours(53);
        int int20 = dateTime17.getMillisOfDay();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DurationField durationField28 = durationFieldType21.getField(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        long long34 = chronology27.add(readablePeriod31, (long) 4, 23);
        org.joda.time.DateTimeField dateTimeField35 = chronology27.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone36 = chronology27.getZone();
        org.joda.time.DateTimeField dateTimeField37 = chronology27.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime17.toMutableDateTime(chronology27);
        org.joda.time.DateTime dateTime40 = dateTime17.plusMonths(53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test01435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01435");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder1.setLanguage("Canada");
        java.util.Locale locale5 = builder1.build();
        java.util.Locale locale6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder1.setLocale(locale6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "canada");
    }

    @Test
    public void test01436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01436");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        long long16 = chronology12.set((org.joda.time.ReadablePartial) partial14, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = partial14.getFieldTypes();
        java.util.Locale locale18 = java.util.Locale.PRC;
        boolean boolean19 = partial14.equals((java.lang.Object) locale18);
        int int20 = partial14.size();
        org.joda.time.Chronology chronology21 = partial14.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.year();
        org.joda.time.DurationField durationField23 = chronology21.weeks();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test01437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01437");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        boolean boolean30 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime32 = dateTime29.withMillis((long) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime29.withYearOfCentury((int) (short) 0);
        org.joda.time.DateTime dateTime35 = dateTime34.toDateTimeISO();
        org.joda.time.format.DateTimePrinter dateTimePrinter37 = null;
        org.joda.time.format.DateTimeParser dateTimeParser38 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter37, dateTimeParser38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter39.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser41 = dateTimeFormatter39.getParser();
        int int42 = dateTimeFormatter39.getDefaultYear();
        org.joda.time.Chronology chronology43 = dateTimeFormatter39.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter44 = null;
        org.joda.time.format.DateTimeParser dateTimeParser45 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter44, dateTimeParser45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        int int51 = partial48.compareTo((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Chronology chronology52 = partial48.getChronology();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.Chronology chronology54 = chronology52.withZone(dateTimeZone53);
        org.joda.time.DateTimeField dateTimeField55 = chronology54.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone56 = chronology54.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter46.withZone(dateTimeZone56);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter39.withZone(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone56);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone56);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(73L, dateTimeZone56);
        boolean boolean62 = dateTime34.equals((java.lang.Object) dateTime61);
        org.joda.time.DateTime dateTime63 = dateTime34.withTimeAtStartOfDay();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNull(dateTimeParser41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2000 + "'", int42 == 2000);
        org.junit.Assert.assertNull(chronology43);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test01438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01438");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        long long12 = dateTime11.getMillis();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        boolean boolean20 = partial16.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.DateTime dateTime32 = dateTime30.withHourOfDay(0);
        org.joda.time.DateTime dateTime34 = dateTime32.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime34.toMutableDateTime();
        org.joda.time.DateTime dateTime36 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readableDuration47);
        org.joda.time.DateTime dateTime50 = dateTime46.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime52 = dateTime46.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime54 = dateTime52.minusWeeks(19);
        org.joda.time.DateTime dateTime56 = dateTime52.plusMillis((int) '#');
        int int57 = dateTime56.getDayOfMonth();
        boolean boolean58 = partial16.equals((java.lang.Object) dateTime56);
        boolean boolean59 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime.Property property60 = dateTime11.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime62 = dateTime11.withYearOfCentury((-27409536));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -27409536 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(property60);
    }

    @Test
    public void test01439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01439");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        boolean boolean30 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology31 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.clockhourOfHalfday();
        long long36 = dateTimeField33.addWrapField((-11404800001L), 70);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-11412000001L) + "'", long36 == (-11412000001L));
    }

    @Test
    public void test01440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01440");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        org.joda.time.DurationField durationField15 = property12.getRangeDurationField();
        int int16 = property12.get();
        org.joda.time.DateTime dateTime18 = property12.addToCopy((long) 0);
        int int19 = property12.getLeapAmount();
        org.joda.time.DateTime dateTime20 = property12.withMaximumValue();
        java.lang.String str21 = property12.getAsShortText();
        org.joda.time.DurationField durationField22 = property12.getLeapDurationField();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertNull(durationField22);
    }

    @Test
    public void test01441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01441");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = partial0.getFieldTypes();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        boolean boolean9 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(0);
        org.joda.time.DateTime dateTime23 = dateTime21.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime23.toMutableDateTime();
        org.joda.time.DateTime dateTime25 = partial5.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean27 = partial5.isSupported(dateTimeFieldType26);
        int int28 = partial0.indexOf(dateTimeFieldType26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        int int35 = partial32.compareTo((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology36 = partial32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.Chronology chronology38 = chronology36.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 0, chronology36);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.minus(readableDuration40);
        org.joda.time.Chronology chronology42 = dateTime39.getChronology();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        long long46 = chronology42.set((org.joda.time.ReadablePartial) partial44, (long) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        long long50 = chronology42.add(readablePeriod47, (long) (byte) 10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType29.getField(chronology42);
        boolean boolean52 = dateTimeFieldType26.isSupported(chronology42);
        long long56 = chronology42.add((long) (byte) 10, (long) (-292275054), 100);
        org.joda.time.DateTimeField dateTimeField57 = chronology42.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-29227505390L) + "'", long56 == (-29227505390L));
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test01442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01442");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        boolean boolean30 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime29);
        int int31 = dateTime15.getMinuteOfHour();
        int int32 = dateTime15.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test01443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01443");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.lang.String str8 = locale7.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withLocale(locale7);
        boolean boolean10 = dateTimeFormatter9.isParser();
        java.io.Writer writer11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        int int16 = partial13.compareTo((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = partial13.getChronology();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.DateTime dateTime29 = dateTime27.withHourOfDay(0);
        org.joda.time.DateTime dateTime30 = partial13.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        int int35 = partial32.compareTo((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        boolean boolean38 = partial34.isAfter((org.joda.time.ReadablePartial) partial37);
        java.lang.String str39 = partial37.toString();
        boolean boolean40 = partial13.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial13.minus(readablePeriod41);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter9.printTo(writer11, (org.joda.time.ReadablePartial) partial13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CN" + "'", str8, "CN");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
    }

    @Test
    public void test01444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01444");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        int int18 = dateTime17.getSecondOfMinute();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        org.joda.time.DateTime dateTime32 = dateTime30.withYear((int) 'a');
        boolean boolean33 = dateTime30.isEqualNow();
        org.joda.time.DateMidnight dateMidnight34 = dateTime30.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone35 = dateMidnight34.getZone();
        org.joda.time.DateTime dateTime36 = dateTime17.withZoneRetainFields(dateTimeZone35);
        org.joda.time.DateTime.Property property37 = dateTime36.weekOfWeekyear();
        java.lang.String str38 = property37.getAsShortText();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        int int44 = partial41.compareTo((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = partial41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Chronology chronology47 = chronology45.withZone(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 0, chronology45);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.minus(readableDuration49);
        org.joda.time.DateTime dateTime52 = dateTime48.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime54 = dateTime48.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime56 = dateTime54.minusWeeks(19);
        org.joda.time.DateTime dateTime58 = dateTime54.plusMillis((int) '#');
        int int59 = dateTime58.getDayOfMonth();
        org.joda.time.DateTime dateTime61 = dateTime58.plus((long) (short) -1);
        long long62 = property37.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime63 = property37.withMinimumValue();
        org.joda.time.DateTime dateTime65 = property37.addToCopy(1850L);
        org.joda.time.DateTimeField dateTimeField66 = property37.getField();
        org.joda.time.DurationField durationField67 = property37.getLeapDurationField();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "34" + "'", str38, "34");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-19L) + "'", long62 == (-19L));
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNull(durationField67);
    }

    @Test
    public void test01445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01445");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.minus(readableDuration11);
        org.joda.time.Chronology chronology13 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.dayOfWeek();
        org.joda.time.DurationField durationField16 = chronology13.seconds();
        org.joda.time.DurationField durationField17 = durationFieldType0.getField(chronology13);
        org.joda.time.DurationField durationField18 = chronology13.weekyears();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.Chronology chronology31 = dateTime28.getChronology();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        long long35 = chronology31.set((org.joda.time.ReadablePartial) partial33, (long) (byte) -1);
        long long37 = chronology13.set((org.joda.time.ReadablePartial) partial33, (long) 86399999);
        org.joda.time.DateTimeField[] dateTimeFieldArray38 = partial33.getFields();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial33.plus(readablePeriod39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        int int46 = partial43.compareTo((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology47 = partial43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 0, chronology47);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.minus(readableDuration51);
        org.joda.time.Chronology chronology53 = dateTime50.getChronology();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        int int58 = partial55.compareTo((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology59 = partial55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.Chronology chronology61 = chronology59.withZone(dateTimeZone60);
        org.joda.time.DateTimeField dateTimeField62 = chronology61.weekOfWeekyear();
        int int64 = dateTimeField62.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        int int69 = partial66.compareTo((org.joda.time.ReadablePartial) partial68);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        boolean boolean72 = partial68.isAfter((org.joda.time.ReadablePartial) partial71);
        java.lang.String str73 = partial71.toString();
        java.util.Locale locale75 = null;
        java.lang.String str76 = dateTimeField62.getAsShortText((org.joda.time.ReadablePartial) partial71, 53, locale75);
        long long78 = chronology53.set((org.joda.time.ReadablePartial) partial71, (long) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.yearOfEra();
        int int80 = partial71.indexOf(dateTimeFieldType79);
        boolean boolean81 = partial40.isEqual((org.joda.time.ReadablePartial) partial71);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType83 = partial40.getFieldType(9);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 9");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 86399999L + "'", long37 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldArray38);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 53 + "'", int64 == 53);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[]" + "'", str73, "[]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "53" + "'", str76, "53");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test01446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01446");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        int int9 = partial6.compareTo((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = partial6.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean12 = partial6.isSupported(dateTimeFieldType11);
        boolean boolean13 = partial3.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean21 = partial15.isSupported(dateTimeFieldType20);
        org.joda.time.Chronology chronology22 = partial15.getChronology();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial15.plus(readablePeriod23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean26 = partial15.isSupported(dateTimeFieldType25);
        int int27 = partial6.indexOf(dateTimeFieldType25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int int32 = partial29.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        boolean boolean35 = partial31.isAfter((org.joda.time.ReadablePartial) partial34);
        java.lang.String str36 = partial34.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        org.joda.time.Partial partial38 = partial34.without(dateTimeFieldType37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        int int44 = partial41.compareTo((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = partial41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Chronology chronology47 = chronology45.withZone(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 0, chronology45);
        org.joda.time.DateTimeField dateTimeField49 = chronology45.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField50 = chronology45.yearOfCentury();
        org.joda.time.Partial partial51 = partial38.withChronologyRetainFields(chronology45);
        boolean boolean52 = partial6.isEqual((org.joda.time.ReadablePartial) partial38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType54 = partial38.getFieldType((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test01447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01447");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = chronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.dayOfMonth();
        java.lang.String str15 = chronology12.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[UTC]" + "'", str15, "ISOChronology[UTC]");
    }

    @Test
    public void test01448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01448");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.minus(readableDuration17);
        org.joda.time.Chronology chronology19 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.monthOfYear();
        org.joda.time.Chronology chronology22 = chronology19.withUTC();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfCentury();
        org.joda.time.format.DateTimePrinter dateTimePrinter24 = null;
        org.joda.time.format.DateTimeParser dateTimeParser25 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter24, dateTimeParser25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter26.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser28 = dateTimeFormatter26.getParser();
        int int29 = dateTimeFormatter26.getDefaultYear();
        org.joda.time.Chronology chronology30 = dateTimeFormatter26.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter31 = null;
        org.joda.time.format.DateTimeParser dateTimeParser32 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter31, dateTimeParser32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = partial35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone43 = chronology41.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter33.withZone(dateTimeZone43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter26.withZone(dateTimeZone43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        int int51 = partial48.compareTo((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Chronology chronology52 = partial48.getChronology();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.Chronology chronology54 = chronology52.withZone(dateTimeZone53);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) 0, chronology52);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.DateTime dateTime57 = dateTime55.minus(readableDuration56);
        org.joda.time.Chronology chronology58 = dateTime55.getChronology();
        org.joda.time.Chronology chronology59 = chronology58.withUTC();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.hourOfDay();
        org.joda.time.DurationField durationField61 = chronology58.millis();
        org.joda.time.DurationField durationField62 = chronology58.days();
        org.joda.time.DateTimeField dateTimeField63 = chronology58.yearOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter26.withChronology(chronology58);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        int int70 = partial67.compareTo((org.joda.time.ReadablePartial) partial69);
        org.joda.time.Chronology chronology71 = partial67.getChronology();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.Chronology chronology73 = chronology71.withZone(dateTimeZone72);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) 0, chronology71);
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.DateTime dateTime76 = dateTime74.minus(readableDuration75);
        org.joda.time.Chronology chronology77 = dateTime74.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField79 = chronology77.dayOfWeek();
        org.joda.time.DurationField durationField80 = chronology77.seconds();
        org.joda.time.DurationField durationField81 = chronology77.months();
        org.joda.time.DateTimeField dateTimeField82 = chronology77.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        long long86 = chronology77.add(readablePeriod83, (long) 43200, 97);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter87 = dateTimeFormatter26.withChronology(chronology77);
        org.joda.time.DateTimeZone dateTimeZone88 = chronology77.getZone();
        org.joda.time.Chronology chronology89 = chronology22.withZone(dateTimeZone88);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime90 = new org.joda.time.DateTime((int) (short) 1, 834, 9, 2922789, 2, 69, 12, dateTimeZone88);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2922789 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(dateTimeParser28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2000 + "'", int29 == 2000);
        org.junit.Assert.assertNull(chronology30);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 43200L + "'", long86 == 43200L);
        org.junit.Assert.assertNotNull(dateTimeFormatter87);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertNotNull(chronology89);
    }

    @Test
    public void test01449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01449");
        java.util.Locale locale3 = new java.util.Locale("Property[millisOfSecond]", "hi!", "");
        java.lang.String str4 = locale3.getDisplayVariant();
        java.lang.String str5 = locale3.getVariant();
        org.junit.Assert.assertEquals(locale3.toString(), "property[millisofsecond]_HI!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test01450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01450");
        java.util.Locale locale2 = new java.util.Locale("[]", "Property[millisOfSecond]");
        java.lang.String str3 = locale2.getDisplayLanguage();
        java.lang.String str5 = locale2.getExtension('a');
        org.junit.Assert.assertEquals(locale2.toString(), "[]_PROPERTY[MILLISOFSECOND]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test01451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01451");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        long long16 = chronology12.set((org.joda.time.ReadablePartial) partial14, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = partial14.getFieldTypes();
        java.util.Locale locale18 = java.util.Locale.PRC;
        boolean boolean19 = partial14.equals((java.lang.Object) locale18);
        int int20 = partial14.size();
        org.joda.time.Chronology chronology21 = partial14.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.year();
        org.joda.time.DurationField durationField23 = chronology21.hours();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray26 = chronology21.get(readablePeriod24, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test01452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01452");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.monthOfYear();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTimeField dateTimeField16 = chronology12.millisOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        int int22 = partial19.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = partial19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 0, chronology23);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int int32 = partial29.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = partial29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 0, chronology33);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readableDuration37);
        org.joda.time.Chronology chronology39 = dateTime36.getChronology();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        long long43 = chronology39.set((org.joda.time.ReadablePartial) partial41, (long) (byte) -1);
        int[] intArray45 = chronology23.get((org.joda.time.ReadablePartial) partial41, (long) ' ');
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        int int51 = partial48.compareTo((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Chronology chronology52 = partial48.getChronology();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.Chronology chronology54 = chronology52.withZone(dateTimeZone53);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) 0, chronology52);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.DateTime dateTime57 = dateTime55.minus(readableDuration56);
        org.joda.time.DateTime.Property property58 = dateTime57.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean60 = dateTime57.isSupported(dateTimeFieldType59);
        boolean boolean61 = partial41.isSupported(dateTimeFieldType59);
        java.lang.Object obj62 = null;
        boolean boolean63 = partial41.equals(obj62);
        org.joda.time.format.DateTimePrinter dateTimePrinter65 = null;
        org.joda.time.format.DateTimeParser dateTimeParser66 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter65, dateTimeParser66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        int int72 = partial69.compareTo((org.joda.time.ReadablePartial) partial71);
        org.joda.time.Chronology chronology73 = partial69.getChronology();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.Chronology chronology75 = chronology73.withZone(dateTimeZone74);
        org.joda.time.DateTimeField dateTimeField76 = chronology75.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone77 = chronology75.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = dateTimeFormatter67.withZone(dateTimeZone77);
        org.joda.time.DurationFieldType durationFieldType79 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Partial partial81 = new org.joda.time.Partial(chronology80);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Partial partial83 = new org.joda.time.Partial(chronology82);
        int int84 = partial81.compareTo((org.joda.time.ReadablePartial) partial83);
        org.joda.time.Chronology chronology85 = partial81.getChronology();
        org.joda.time.DurationField durationField86 = durationFieldType79.getField(chronology85);
        org.joda.time.DateTimeField dateTimeField87 = chronology85.weekOfWeekyear();
        java.util.Locale locale89 = java.util.Locale.ENGLISH;
        java.lang.String str90 = dateTimeField87.getAsText(19, locale89);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter91 = dateTimeFormatter78.withLocale(locale89);
        java.util.Locale locale92 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale93 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str94 = locale92.getDisplayName(locale93);
        java.lang.String str95 = locale92.toLanguageTag();
        java.lang.String str96 = locale92.getISO3Country();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter97 = dateTimeFormatter91.withLocale(locale92);
        java.lang.String str98 = dateTimeField16.getAsShortText((org.joda.time.ReadablePartial) partial41, 59, locale92);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTimeFormatter78);
        org.junit.Assert.assertNotNull(durationFieldType79);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "en");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "19" + "'", str90, "19");
        org.junit.Assert.assertNotNull(dateTimeFormatter91);
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "fran\347ais (Canada)" + "'", str94, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "fr-CA" + "'", str95, "fr-CA");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "CAN" + "'", str96, "CAN");
        org.junit.Assert.assertNotNull(dateTimeFormatter97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "59" + "'", str98, "59");
    }

    @Test
    public void test01453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01453");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.monthOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.minusDays(720);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, 52);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test01454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01454");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.getLanguage();
        java.lang.String str2 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh" + "'", str1, "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test01455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01455");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTime.Property property13 = dateTime9.weekyear();
        int int14 = dateTime9.getMinuteOfHour();
        boolean boolean16 = dateTime9.isBefore((long) (short) 0);
        org.joda.time.Chronology chronology17 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology17.getZone();
        // The following exception was thrown during execution in test generation
        try {
            long long28 = chronology17.getDateTimeMillis(22, 366, 31, 0, 4, (-292275054), (int) 'u');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
    }

    @Test
    public void test01456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01456");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        long long16 = chronology12.set((org.joda.time.ReadablePartial) partial14, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = partial14.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial14.getFormatter();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = partial14.toDateTime(readableInstant19);
        boolean boolean21 = dateTime20.isEqualNow();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test01457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01457");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((int) (byte) 0, 4, 86340, 69, 1405);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01458");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.monthOfYear();
        org.joda.time.DurationField durationField15 = dateTimeField14.getLeapDurationField();
        long long18 = dateTimeField14.add((long) (byte) 1, 73L);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int int25 = partial22.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = partial22.getChronology();
        org.joda.time.DurationField durationField27 = durationFieldType20.getField(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.clockhourOfHalfday();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = partial31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 0, chronology35);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.minus(readableDuration39);
        org.joda.time.Chronology chronology41 = dateTime38.getChronology();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        long long45 = chronology41.set((org.joda.time.ReadablePartial) partial43, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = partial43.getFieldTypes();
        java.util.Locale locale47 = java.util.Locale.PRC;
        boolean boolean48 = partial43.equals((java.lang.Object) locale47);
        int int49 = partial43.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int51 = partial43.indexOf(dateTimeFieldType50);
        org.joda.time.Partial partial52 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial43);
        java.lang.String str54 = partial52.toString("days");
        java.util.Locale locale56 = java.util.Locale.ITALIAN;
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.lang.String str58 = locale56.getDisplayScript(locale57);
        java.util.Locale locale59 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str60 = locale59.getDisplayCountry();
        java.lang.String str61 = locale57.getDisplayName(locale59);
        java.util.Locale locale62 = java.util.Locale.getDefault();
        java.lang.String str63 = locale59.getDisplayScript(locale62);
        java.util.Locale.setDefault(locale59);
        java.lang.String str65 = locale59.getISO3Language();
        java.lang.String str66 = dateTimeField28.getAsShortText((org.joda.time.ReadablePartial) partial52, 1439, locale59);
        java.util.Locale locale67 = locale59.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str68 = dateTimeField14.getAsText(13, locale67);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 13");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 191980800001L + "'", long18 == 191980800001L);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ufffd\ufffd\ufffd\ufffd" + "'", str54, "\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Canada" + "'", str60, "Canada");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "cor\351en" + "'", str61, "cor\351en");
        org.junit.Assert.assertNotNull(locale62);
// flaky:         org.junit.Assert.assertEquals(locale62.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "fra" + "'", str65, "fra");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1439" + "'", str66, "1439");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_CA");
    }

    @Test
    public void test01459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01459");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.minus(readableDuration17);
        org.joda.time.DateTime dateTime20 = dateTime16.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime22 = dateTime16.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks(19);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '#');
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfYear((int) 'a');
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = partial31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 0, chronology35);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        int int44 = partial41.compareTo((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = partial41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Chronology chronology47 = chronology45.withZone(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 0, chronology45);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.minus(readableDuration49);
        org.joda.time.Chronology chronology51 = dateTime48.getChronology();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        long long55 = chronology51.set((org.joda.time.ReadablePartial) partial53, (long) (byte) -1);
        int[] intArray57 = chronology35.get((org.joda.time.ReadablePartial) partial53, (long) ' ');
        org.joda.time.DurationField durationField58 = chronology35.eras();
        org.joda.time.DateTime dateTime59 = dateTime26.withChronology(chronology35);
        org.joda.time.DateTimeField dateTimeField60 = chronology35.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField61 = chronology35.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(3970, 0, (int) 'a', 12, 233, 366, 86399999, chronology35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 233 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
    }

    @Test
    public void test01460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01460");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        long long12 = dateTime11.getMillis();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        boolean boolean20 = partial16.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.DateTime dateTime32 = dateTime30.withHourOfDay(0);
        org.joda.time.DateTime dateTime34 = dateTime32.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime34.toMutableDateTime();
        org.joda.time.DateTime dateTime36 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readableDuration47);
        org.joda.time.DateTime dateTime50 = dateTime46.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime52 = dateTime46.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime54 = dateTime52.minusWeeks(19);
        org.joda.time.DateTime dateTime56 = dateTime52.plusMillis((int) '#');
        int int57 = dateTime56.getDayOfMonth();
        boolean boolean58 = partial16.equals((java.lang.Object) dateTime56);
        boolean boolean59 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime61 = dateTime56.plusSeconds(2);
        org.joda.time.DateTime.Property property62 = dateTime61.minuteOfHour();
        org.joda.time.DateTime dateTime63 = property62.getDateTime();
        int int64 = property62.getMaximumValue();
        org.joda.time.ReadableInstant readableInstant65 = null;
        int int66 = property62.getDifference(readableInstant65);
        java.lang.String str67 = property62.getAsText();
        int int68 = property62.getMinimumValue();
        org.joda.time.DateTime dateTime69 = property62.withMaximumValue();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 59 + "'", int64 == 59);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-27409537) + "'", int66 == (-27409537));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0" + "'", str67, "0");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test01461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01461");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        org.joda.time.Interval interval16 = property12.toInterval();
        org.joda.time.DateTime dateTime17 = property12.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(2);
        org.joda.time.DateTime.Property property20 = dateTime19.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime23 = dateTime19.withPeriodAdded(readablePeriod21, 23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        int int29 = partial26.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = partial26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology30);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.minus(readableDuration34);
        org.joda.time.Chronology chronology36 = dateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.dayOfMonth();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        boolean boolean45 = partial41.isAfter((org.joda.time.ReadablePartial) partial44);
        java.lang.String str46 = partial44.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        org.joda.time.Partial partial48 = partial44.without(dateTimeFieldType47);
        java.util.Locale locale50 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale51 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str52 = locale50.getDisplayName(locale51);
        java.lang.String str53 = locale50.getDisplayVariant();
        java.util.Locale locale54 = locale50.stripExtensions();
        java.lang.String str55 = dateTimeField37.getAsText((org.joda.time.ReadablePartial) partial44, 53, locale54);
        int int56 = partial44.size();
        org.joda.time.DateTime dateTime57 = dateTime23.withFields((org.joda.time.ReadablePartial) partial44);
        org.joda.time.format.DateTimePrinter dateTimePrinter58 = null;
        org.joda.time.format.DateTimeParser dateTimeParser59 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter58, dateTimeParser59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        int int65 = partial62.compareTo((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Chronology chronology66 = partial62.getChronology();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.Chronology chronology68 = chronology66.withZone(dateTimeZone67);
        org.joda.time.DateTimeField dateTimeField69 = chronology68.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone70 = chronology68.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter60.withZone(dateTimeZone70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = new org.joda.time.Partial(chronology72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        int int76 = partial73.compareTo((org.joda.time.ReadablePartial) partial75);
        org.joda.time.Chronology chronology77 = partial73.getChronology();
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.Chronology chronology79 = chronology77.withZone(dateTimeZone78);
        org.joda.time.DateTimeField dateTimeField80 = chronology79.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone81 = chronology79.getZone();
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime(dateTimeZone81);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter83 = dateTimeFormatter60.withZone(dateTimeZone81);
        org.joda.time.format.DateTimePrinter dateTimePrinter84 = dateTimeFormatter83.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter86 = dateTimeFormatter83.withPivotYear(999);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str87 = partial44.toString(dateTimeFormatter86);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "fran\347ais (Canada)" + "'", str52, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "53" + "'", str55, "53");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(dateTimeFormatter83);
        org.junit.Assert.assertNull(dateTimePrinter84);
        org.junit.Assert.assertNotNull(dateTimeFormatter86);
    }

    @Test
    public void test01462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01462");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((int) (short) 1, 8, (-973006525), 0, (-292275054), 1970, 2022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01463");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(5, 170, 366, (int) (byte) 100, 31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01464");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.format.DateTimeParser dateTimeParser14 = dateTimeFormatter13.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime16 = dateTimeFormatter13.parseLocalTime("DateTimeField[hourOfDay]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(dateTimeParser14);
    }

    @Test
    public void test01465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01465");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 0, chronology19);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readableDuration23);
        org.joda.time.Chronology chronology25 = dateTime22.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str27 = dateTimeFieldType26.getName();
        int int28 = dateTime22.get(dateTimeFieldType26);
        org.joda.time.DateTime dateTime30 = dateTime22.minusMinutes(4);
        int int31 = dateTime22.getWeekyear();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime22.plus(readableDuration32);
        boolean boolean34 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime36 = dateTime11.minusWeeks((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int38 = dateTime36.get(dateTimeFieldType37);
        org.joda.time.DateTime dateTime40 = dateTime36.minusMillis((int) (short) 100);
        org.joda.time.DateTime.Property property41 = dateTime36.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = dateTime36.withMinuteOfHour((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "halfdayOfDay" + "'", str27, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test01466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01466");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.format.DateTimeParser dateTimeParser14 = dateTimeFormatter13.getParser();
        java.lang.Integer int15 = dateTimeFormatter13.getPivotYear();
        java.io.Writer writer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter13.printTo(writer16, (long) 52);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(dateTimeParser14);
        org.junit.Assert.assertNull(int15);
    }

    @Test
    public void test01467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01467");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime15 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime17 = dateTime15.withCenturyOfEra((int) '#');
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime17.plusMonths(6);
        int int21 = dateTime17.getYearOfEra();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3570 + "'", int21 == 3570);
    }

    @Test
    public void test01468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01468");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        long long16 = chronology12.set((org.joda.time.ReadablePartial) partial14, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = partial14.getFieldTypes();
        java.util.Locale locale18 = java.util.Locale.PRC;
        boolean boolean19 = partial14.equals((java.lang.Object) locale18);
        int int20 = partial14.size();
        org.joda.time.Chronology chronology21 = partial14.getChronology();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial14.minus(readablePeriod22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        int int28 = partial25.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = partial25.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean31 = partial25.isSupported(dateTimeFieldType30);
        org.joda.time.Chronology chronology32 = partial25.getChronology();
        org.joda.time.Partial partial33 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial25);
        int int34 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = partial23.getFieldTypes();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
    }

    @Test
    public void test01469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01469");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = partial8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology12);
        org.joda.time.DateTime dateTime17 = dateTime15.withHourOfDay(0);
        org.joda.time.DateTime dateTime18 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        boolean boolean26 = partial22.isAfter((org.joda.time.ReadablePartial) partial25);
        java.lang.String str27 = partial25.toString();
        boolean boolean28 = partial1.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial1.minus(readablePeriod29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField32 = partial30.getField(73);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 73");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(partial30);
    }

    @Test
    public void test01470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01470");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone12);
        int int14 = dateTimeFormatter13.getDefaultYear();
        java.lang.StringBuffer stringBuffer15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = partial16.getFormatter();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.Chronology chronology30 = dateTime27.getChronology();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        long long34 = chronology30.set((org.joda.time.ReadablePartial) partial32, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = partial32.getFieldTypes();
        java.util.Locale locale36 = java.util.Locale.PRC;
        boolean boolean37 = partial32.equals((java.lang.Object) locale36);
        int int38 = partial32.size();
        org.joda.time.Chronology chronology39 = partial32.getChronology();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial32.minus(readablePeriod40);
        boolean boolean42 = partial16.isEqual((org.joda.time.ReadablePartial) partial41);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter13.printTo(stringBuffer15, (org.joda.time.ReadablePartial) partial16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2000 + "'", int14 == 2000);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test01471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01471");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.Chronology chronology8 = partial1.getChronology();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial1.plus(readablePeriod9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean12 = partial1.isSupported(dateTimeFieldType11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 0, chronology19);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readableDuration23);
        org.joda.time.Chronology chronology25 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfDay();
        org.joda.time.DurationField durationField27 = chronology25.seconds();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int int32 = partial29.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        boolean boolean35 = partial31.isAfter((org.joda.time.ReadablePartial) partial34);
        int[] intArray37 = chronology25.get((org.joda.time.ReadablePartial) partial31, (long) 10);
        org.joda.time.DurationField durationField38 = chronology25.hours();
        org.joda.time.DateTimeField dateTimeField39 = chronology25.halfdayOfDay();
        org.joda.time.Partial partial40 = partial1.withChronologyRetainFields(chronology25);
        int[] intArray41 = partial40.getValues();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        int int47 = partial44.compareTo((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology48 = partial44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) 0, chronology48);
        org.joda.time.DateTime dateTime53 = dateTime51.withHourOfDay(0);
        int int54 = dateTime53.getCenturyOfEra();
        boolean boolean56 = dateTime53.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime57 = dateTime53.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean59 = dateTime53.isSupported(dateTimeFieldType58);
        org.joda.time.DateTime dateTime63 = dateTime53.withDate(69, 8, 13);
        org.joda.time.DateTime.Property property64 = dateTime63.minuteOfHour();
        org.joda.time.DateTime dateTime66 = dateTime63.minusWeeks(120);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        int int72 = partial69.compareTo((org.joda.time.ReadablePartial) partial71);
        org.joda.time.Chronology chronology73 = partial69.getChronology();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.Chronology chronology75 = chronology73.withZone(dateTimeZone74);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) 0, chronology73);
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.DateTime dateTime78 = dateTime76.minus(readableDuration77);
        org.joda.time.Chronology chronology79 = dateTime76.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str81 = dateTimeFieldType80.getName();
        int int82 = dateTime76.get(dateTimeFieldType80);
        boolean boolean83 = dateTime66.isSupported(dateTimeFieldType80);
        // The following exception was thrown during execution in test generation
        try {
            int int84 = partial40.get(dateTimeFieldType80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'halfdayOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 19 + "'", int54 == 19);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "halfdayOfDay" + "'", str81, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test01472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01472");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        boolean boolean7 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType10 = partial8.getFieldType(1970);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1970");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01473");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime9.minusDays(31);
        int int18 = dateTime17.getHourOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.minusMonths(12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTime20.withWeekOfWeekyear(2922789);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2922789 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test01474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01474");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        org.joda.time.Chronology chronology5 = dateTimeFormatter3.getChronolgy();
        boolean boolean6 = dateTimeFormatter3.isPrinter();
        java.util.Locale locale7 = dateTimeFormatter3.getLocale();
        int int8 = dateTimeFormatter3.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            long long10 = dateTimeFormatter3.parseMillis("Korean (South Korea)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
    }

    @Test
    public void test01475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01475");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = partial8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology12);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.minus(readableDuration16);
        org.joda.time.DateTime dateTime19 = dateTime15.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfYear();
        org.joda.time.DateTime dateTime21 = property20.withMinimumValue();
        boolean boolean22 = dateTime21.isAfterNow();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int24 = dateTime21.get(dateTimeFieldType23);
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType23.getDurationType();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        int int31 = partial28.compareTo((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology32 = partial28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 0, chronology32);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readableDuration36);
        org.joda.time.Chronology chronology38 = dateTime35.getChronology();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        int int43 = partial40.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = partial40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology44.withZone(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField47 = chronology46.weekOfWeekyear();
        int int49 = dateTimeField47.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        int int54 = partial51.compareTo((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        boolean boolean57 = partial53.isAfter((org.joda.time.ReadablePartial) partial56);
        java.lang.String str58 = partial56.toString();
        java.util.Locale locale60 = null;
        java.lang.String str61 = dateTimeField47.getAsShortText((org.joda.time.ReadablePartial) partial56, 53, locale60);
        long long63 = chronology38.set((org.joda.time.ReadablePartial) partial56, (long) 0);
        boolean boolean64 = durationFieldType25.isSupported(chronology38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((-1), 100, (int) (short) -1, (int) (byte) 0, 1439, 8, chronology38);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1439 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 12 + "'", int24 == 12);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 53 + "'", int49 == 53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[]" + "'", str58, "[]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "53" + "'", str61, "53");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test01476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01476");
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = partial5.getFormatter();
        org.joda.time.Chronology chronology7 = partial5.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = partial5.getFieldTypes();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        int int13 = partial10.compareTo((org.joda.time.ReadablePartial) partial12);
        java.lang.String str14 = partial10.toStringList();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial17 = partial10.withPeriodAdded(readablePeriod15, 999);
        int[] intArray18 = partial10.getValues();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.Chronology chronology31 = dateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.dayOfWeek();
        org.joda.time.DurationField durationField34 = chronology31.seconds();
        org.joda.time.Partial partial35 = new org.joda.time.Partial(dateTimeFieldTypeArray8, intArray18, chronology31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((int) '#', (-1), 0, 3, 5, chronology31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test01477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01477");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) 'x');
        boolean boolean15 = dateTime13.isEqual((long) 86399999);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((long) 52);
        org.joda.time.Instant instant18 = dateTime17.toInstant();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant18);
    }

    @Test
    public void test01478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01478");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.lang.String str8 = locale6.getDisplayCountry(locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withLocale(locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withPivotYear((java.lang.Integer) 3);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        int int16 = partial13.compareTo((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = partial13.getChronology();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.DateTime dateTime29 = dateTime27.withHourOfDay(0);
        org.joda.time.DateTime dateTime30 = partial13.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        int int36 = partial33.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = partial33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 0, chronology37);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.minus(readableDuration41);
        org.joda.time.DateTime dateTime44 = dateTime40.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime46 = dateTime40.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime48 = dateTime46.minusWeeks(19);
        int int49 = dateTime46.getMonthOfYear();
        org.joda.time.DateTime dateTime50 = dateTime46.toDateTimeISO();
        boolean boolean51 = partial13.isMatch((org.joda.time.ReadableInstant) dateTime46);
        java.lang.String str52 = dateTime46.toString();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        int int58 = partial55.compareTo((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology59 = partial55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.Chronology chronology61 = chronology59.withZone(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) 0, chronology59);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.DateTime dateTime64 = dateTime62.minus(readableDuration63);
        org.joda.time.DateTime dateTime66 = dateTime62.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime68 = dateTime62.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime70 = dateTime68.minusWeeks(19);
        org.joda.time.DateTime dateTime72 = dateTime68.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType73 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = new org.joda.time.Partial(chronology76);
        int int78 = partial75.compareTo((org.joda.time.ReadablePartial) partial77);
        org.joda.time.Chronology chronology79 = partial75.getChronology();
        org.joda.time.DurationField durationField80 = durationFieldType73.getField(chronology79);
        org.joda.time.DateTimeField dateTimeField81 = chronology79.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField82 = chronology79.dayOfMonth();
        org.joda.time.DateTime dateTime83 = dateTime72.toDateTime(chronology79);
        org.joda.time.DateTimeField dateTimeField84 = chronology79.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField85 = chronology79.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime86 = dateTime46.toMutableDateTime(chronology79);
        // The following exception was thrown during execution in test generation
        try {
            int int89 = dateTimeFormatter11.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime86, "120", 0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str52, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(mutableDateTime86);
    }

    @Test
    public void test01479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01479");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.minus(readableDuration11);
        org.joda.time.Chronology chronology13 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.dayOfWeek();
        org.joda.time.DurationField durationField16 = chronology13.seconds();
        org.joda.time.DurationField durationField17 = durationFieldType0.getField(chronology13);
        org.joda.time.DurationField durationField18 = chronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology13.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long27 = chronology13.getDateTimeMillis(6L, 1439, (-694733), 1, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1439 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test01480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01480");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.hourOfDay();
        java.util.Locale locale14 = new java.util.Locale("CA");
        java.lang.String str15 = dateTimeField11.getAsShortText(99, locale14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        boolean boolean23 = partial19.isAfter((org.joda.time.ReadablePartial) partial22);
        java.lang.String str24 = partial22.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        org.joda.time.Partial partial26 = partial22.without(dateTimeFieldType25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial22.plus(readablePeriod27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = partial31.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean37 = partial31.isSupported(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = partial31.getChronology();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial31.plus(readablePeriod39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean42 = partial31.isSupported(dateTimeFieldType41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        int int48 = partial45.compareTo((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = partial45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 0, chronology49);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.minus(readableDuration53);
        org.joda.time.Chronology chronology55 = dateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.secondOfDay();
        org.joda.time.DurationField durationField57 = chronology55.seconds();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        int int62 = partial59.compareTo((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        boolean boolean65 = partial61.isAfter((org.joda.time.ReadablePartial) partial64);
        int[] intArray67 = chronology55.get((org.joda.time.ReadablePartial) partial61, (long) 10);
        org.joda.time.DurationField durationField68 = chronology55.hours();
        org.joda.time.DateTimeField dateTimeField69 = chronology55.halfdayOfDay();
        org.joda.time.Partial partial70 = partial31.withChronologyRetainFields(chronology55);
        int[] intArray71 = partial70.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray73 = dateTimeField11.add((org.joda.time.ReadablePartial) partial22, 69, intArray71, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 69");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals(locale14.toString(), "ca");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "99" + "'", str15, "99");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
    }

    @Test
    public void test01481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01481");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.DateTime dateTime18 = dateTime16.withHourOfDay(0);
        org.joda.time.DateTime dateTime20 = dateTime18.withYear((int) 'a');
        boolean boolean21 = dateTime18.isEqualNow();
        org.joda.time.DateMidnight dateMidnight22 = dateTime18.toDateMidnight();
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        int int30 = partial27.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = partial27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone35 = chronology33.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter25.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = dateTime18.withZone(dateTimeZone35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(834, 233, 0, 0, 1900, 18, 2022, dateTimeZone35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1900 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test01482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01482");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        int int20 = dateTime19.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.minus(readablePeriod21);
        org.joda.time.DateTime.Property property23 = dateTime19.secondOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfEvenCopy();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        int int30 = partial27.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = partial27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 0, chronology31);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.minus(readableDuration35);
        org.joda.time.Chronology chronology37 = dateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfDay();
        org.joda.time.DurationField durationField39 = chronology37.seconds();
        org.joda.time.DurationField durationField40 = chronology37.hours();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.era();
        org.joda.time.DateTime dateTime42 = dateTime24.toDateTime(chronology37);
        int int43 = dateTime42.getMinuteOfHour();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test01483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01483");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        boolean boolean21 = partial17.isAfter((org.joda.time.ReadablePartial) partial20);
        java.lang.String str22 = partial20.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial20.without(dateTimeFieldType23);
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.lang.String str29 = locale26.getDisplayVariant();
        java.util.Locale locale30 = locale26.stripExtensions();
        java.lang.String str31 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) partial20, 53, locale30);
        int int32 = partial20.size();
        int[] intArray33 = partial20.getValues();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = partial35.getChronology();
        java.lang.String str40 = partial35.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        int int46 = partial43.compareTo((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology47 = partial43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 0, chronology47);
        org.joda.time.DateTime dateTime52 = dateTime50.withHourOfDay(0);
        int int53 = dateTime52.getCenturyOfEra();
        boolean boolean55 = dateTime52.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property56 = dateTime52.era();
        org.joda.time.DateTime dateTime58 = dateTime52.withHourOfDay(12);
        org.joda.time.DateTime dateTime59 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.MutableDateTime mutableDateTime60 = dateTime59.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime62 = dateTime59.plusSeconds((int) 'x');
        boolean boolean63 = partial20.equals((java.lang.Object) dateTime59);
        int int64 = partial20.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField66 = partial20.getField(292278994);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 292278994");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fran\347ais (Canada)" + "'", str28, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "53" + "'", str31, "53");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 19 + "'", int53 == 19);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test01484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01484");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        int int14 = partial11.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = partial11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter9.withZone(dateTimeZone19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.Chronology chronology24 = dateTime23.getChronology();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        int int29 = partial26.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        boolean boolean32 = partial28.isAfter((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = partial35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 0, chronology39);
        org.joda.time.DateTime dateTime44 = dateTime42.withHourOfDay(0);
        org.joda.time.DateTime dateTime46 = dateTime44.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime46.toMutableDateTime();
        org.joda.time.DateTime dateTime48 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        int int54 = partial51.compareTo((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = partial51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.Chronology chronology57 = chronology55.withZone(dateTimeZone56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 0, chronology55);
        org.joda.time.DateTime dateTime60 = dateTime58.withHourOfDay(0);
        int int61 = dateTime60.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        int int67 = partial64.compareTo((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = partial64.getChronology();
        org.joda.time.DurationField durationField69 = durationFieldType62.getField(chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.weekOfWeekyear();
        org.joda.time.DateTime dateTime71 = dateTime60.withChronology(chronology68);
        java.util.Date date72 = dateTime71.toDate();
        boolean boolean73 = partial28.equals((java.lang.Object) dateTime71);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray74 = partial28.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial77 = partial28.withPeriodAdded(readablePeriod75, 70);
        org.joda.time.DateTime dateTime78 = dateTime23.withFields((org.joda.time.ReadablePartial) partial77);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str80 = dateTime78.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 19 + "'", int61 == 19);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray74);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test01485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01485");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        int int20 = dateTime19.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str22 = dateTimeFieldType21.getName();
        boolean boolean23 = dateTime19.isSupported(dateTimeFieldType21);
        org.joda.time.DateTime.Property property24 = dateTime19.year();
        org.joda.time.DateTime dateTime26 = dateTime19.minusMillis(86399999);
        org.joda.time.DateTime dateTime27 = dateTime19.toDateTimeISO();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "halfdayOfDay" + "'", str22, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test01486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01486");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder1.setVariant("");
        java.util.Locale.Builder builder5 = builder1.clearExtensions();
        java.util.Locale.Builder builder6 = builder1.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder1.addUnicodeLocaleAttribute("minuteofhour");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: minuteofhour [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test01487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01487");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology21.getZone();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeFormatter2.getZone();
        java.io.Writer writer27 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        int int33 = partial30.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = partial30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 0, chronology34);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.minus(readableDuration38);
        org.joda.time.DateTime.Property property40 = dateTime39.millisOfSecond();
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        int int42 = property40.getMaximumTextLength(locale41);
        long long43 = property40.remainder();
        java.lang.String str44 = property40.getAsText();
        org.joda.time.DateTime dateTime45 = property40.roundCeilingCopy();
        org.joda.time.DateTime dateTime47 = dateTime45.withYearOfCentury((int) '#');
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        int int52 = partial49.compareTo((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = partial49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField56 = chronology55.hourOfDay();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.minuteOfHour();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology55);
        org.joda.time.DateTime.Property property59 = dateTime58.weekyear();
        boolean boolean60 = dateTime45.isBefore((org.joda.time.ReadableInstant) dateTime58);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer27, (org.joda.time.ReadableInstant) dateTime58);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0" + "'", str44, "0");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test01488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01488");
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        int int10 = partial7.compareTo((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.DurationField durationField12 = durationFieldType5.getField(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology11.add(readablePeriod15, (long) 4, 23);
        org.joda.time.DateTimeField dateTimeField19 = chronology11.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology11.getZone();
        org.joda.time.DateTimeZone dateTimeZone21 = chronology11.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((int) '#', 11, 73, (-27409537), 834, dateTimeZone21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -27409537 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 4L + "'", long18 == 4L);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
    }

    @Test
    public void test01489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01489");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekOfWeekyear();
        int int25 = dateTime15.get(dateTimeField24);
        org.joda.time.DateTime dateTime27 = dateTime15.withWeekyear(100);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMillis(99);
        int int30 = dateTime27.getYear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
    }

    @Test
    public void test01490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01490");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        org.joda.time.DurationField durationField15 = property12.getRangeDurationField();
        int int16 = property12.get();
        org.joda.time.DateTime dateTime18 = property12.addToCopy((long) 0);
        int int19 = property12.getLeapAmount();
        org.joda.time.DateTime dateTime20 = property12.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = property12.setCopy("Property[yearOfCentury]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[yearOfCentury]\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test01491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01491");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property15 = dateTime11.era();
        int int16 = property15.getMaximumValue();
        long long17 = property15.remainder();
        int int18 = property15.getMinimumValue();
        org.joda.time.DateTime dateTime19 = property15.roundHalfFloorCopy();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone29 = chronology27.getZone();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = dateTime19.withZone(dateTimeZone29);
        org.joda.time.DateTime.Property property32 = dateTime31.millisOfSecond();
        int int33 = dateTime31.getYear();
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime31.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 62135596800000L + "'", long17 == 62135596800000L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime34);
    }

    @Test
    public void test01492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01492");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        int int10 = partial7.compareTo((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime14.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime20 = dateTime14.withSecondOfMinute(0);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime14.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter2.withZone(dateTimeZone21);
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter25.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser27 = dateTimeFormatter25.getParser();
        int int28 = dateTimeFormatter25.getDefaultYear();
        org.joda.time.Chronology chronology29 = dateTimeFormatter25.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = null;
        org.joda.time.format.DateTimeParser dateTimeParser31 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter30, dateTimeParser31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = partial34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology40.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter32.withZone(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter25.withZone(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter22.withZone(dateTimeZone42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate48 = dateTimeFormatter46.parseLocalDate("centuryOfEra");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(dateTimeParser27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2000 + "'", int28 == 2000);
        org.junit.Assert.assertNull(chronology29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
    }

    @Test
    public void test01493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01493");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isOffsetParsed();
        boolean boolean6 = dateTimeFormatter2.isPrinter();
        java.lang.Appendable appendable7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean15 = partial9.isSupported(dateTimeFieldType14);
        org.joda.time.Chronology chronology16 = partial9.getChronology();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial9.plus(readablePeriod17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean20 = partial9.isSupported(dateTimeFieldType19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial9);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable7, (org.joda.time.ReadablePartial) partial21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test01494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01494");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        org.joda.time.DateTime dateTime14 = dateTime11.minus((long) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime11.withWeekOfWeekyear(19);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        int int22 = partial19.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = partial19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 0, chronology23);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.minus(readableDuration27);
        org.joda.time.DateTime dateTime30 = dateTime26.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime32 = dateTime26.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime34 = dateTime32.minusWeeks(19);
        boolean boolean35 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime37 = dateTime11.withSecondOfMinute((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test01495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01495");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = partial8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology12);
        org.joda.time.DateTime dateTime17 = dateTime15.withHourOfDay(0);
        org.joda.time.DateTime dateTime18 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        int int19 = partial1.size();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        boolean boolean27 = partial23.isAfter((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial23);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean30 = partial23.isSupported(dateTimeFieldType29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        int int36 = partial33.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = partial33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 0, chronology37);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.minus(readableDuration41);
        org.joda.time.DateTime dateTime44 = dateTime40.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime46 = dateTime40.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime48 = dateTime46.minusWeeks(19);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        int int56 = partial53.compareTo((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Chronology chronology57 = partial53.getChronology();
        org.joda.time.DurationField durationField58 = durationFieldType51.getField(chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.dayOfMonth();
        org.joda.time.DateTime dateTime61 = dateTime50.toDateTime(chronology57);
        org.joda.time.DateTimeField dateTimeField62 = chronology57.weekyearOfCentury();
        org.joda.time.Partial partial63 = partial23.withChronologyRetainFields(chronology57);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        int int69 = partial66.compareTo((org.joda.time.ReadablePartial) partial68);
        org.joda.time.Chronology chronology70 = partial66.getChronology();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.Chronology chronology72 = chronology70.withZone(dateTimeZone71);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) 0, chronology70);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.DateTime dateTime75 = dateTime73.minus(readableDuration74);
        org.joda.time.DateTime dateTime77 = dateTime73.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property78 = dateTime77.dayOfYear();
        org.joda.time.DateTime dateTime79 = property78.withMinimumValue();
        boolean boolean80 = dateTime79.isAfterNow();
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int82 = dateTime79.get(dateTimeFieldType81);
        boolean boolean83 = partial63.isSupported(dateTimeFieldType81);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial85 = partial1.with(dateTimeFieldType81, 35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for clockhourOfHalfday must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 12 + "'", int82 == 12);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test01496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01496");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("ISOChronology[UTC]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"ISOChronology[UTC]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01497");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        boolean boolean7 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        int int13 = partial10.compareTo((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = partial10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Chronology chronology16 = chronology14.withZone(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 0, chronology14);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        org.joda.time.DateTime dateTime21 = dateTime19.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime21.toMutableDateTime();
        org.joda.time.DateTime dateTime23 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean25 = partial3.isSupported(dateTimeFieldType24);
        java.lang.String str26 = dateTimeFieldType24.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "monthOfYear" + "'", str26, "monthOfYear");
    }

    @Test
    public void test01498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01498");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        boolean boolean15 = partial11.isAfter((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        int int21 = partial18.compareTo((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = partial18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Chronology chronology24 = chronology22.withZone(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 0, chronology22);
        org.joda.time.DateTime dateTime27 = dateTime25.withHourOfDay(0);
        org.joda.time.DateTime dateTime29 = dateTime27.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime29.toMutableDateTime();
        org.joda.time.DateTime dateTime31 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = partial34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 0, chronology38);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime43 = dateTime41.minus(readableDuration42);
        org.joda.time.DateTime dateTime45 = dateTime41.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime47 = dateTime41.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime49 = dateTime47.minusWeeks(19);
        org.joda.time.DateTime dateTime51 = dateTime47.plusMillis((int) '#');
        int int52 = dateTime51.getDayOfMonth();
        boolean boolean53 = partial11.equals((java.lang.Object) dateTime51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        int int58 = partial55.compareTo((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology59 = partial55.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean61 = partial55.isSupported(dateTimeFieldType60);
        int int62 = dateTime51.get(dateTimeFieldType60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property63 = partial1.property(dateTimeFieldType60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'halfdayOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test01499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01499");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.minus(readableDuration17);
        org.joda.time.DateTime.Property property19 = dateTime18.millisOfSecond();
        org.joda.time.DateTime dateTime21 = property19.setCopy((int) (short) 1);
        int int22 = dateTime21.getCenturyOfEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        int int30 = partial27.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = partial27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone35 = chronology33.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter25.withZone(dateTimeZone35);
        int int37 = dateTimeFormatter36.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeFormatter36.getZone();
        org.joda.time.DateTime dateTime39 = dateTime21.withZoneRetainFields(dateTimeZone38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((int) ' ', (int) (short) -1, 4, 22, (int) (short) 10, 12, 2, dateTimeZone38);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 19 + "'", int22 == 19);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2000 + "'", int37 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test01500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01500");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 86399);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = partial8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekOfWeekyear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        int int22 = partial19.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = partial19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 0, chronology23);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.minus(readableDuration27);
        org.joda.time.DateTime dateTime30 = dateTime26.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime32 = dateTime26.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime34 = dateTime32.minusWeeks(19);
        int int35 = dateTime34.getSecondOfMinute();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        int int41 = partial38.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 0, chronology42);
        org.joda.time.DateTime dateTime47 = dateTime45.withHourOfDay(0);
        org.joda.time.DateTime dateTime49 = dateTime47.withYear((int) 'a');
        boolean boolean50 = dateTime47.isEqualNow();
        org.joda.time.DateMidnight dateMidnight51 = dateTime47.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone52 = dateMidnight51.getZone();
        org.joda.time.DateTime dateTime53 = dateTime34.withZoneRetainFields(dateTimeZone52);
        org.joda.time.Chronology chronology54 = chronology14.withZone(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime6.withZone(dateTimeZone52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(834, 7, 100, 1900, 24, dateTimeZone52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1900 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime55);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest20 {

    public static boolean debug = false;

    @Test
    public void test10001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10001");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime9.minus(readablePeriod14);
        org.joda.time.DateMidnight dateMidnight16 = dateTime9.toDateMidnight();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        int int22 = partial19.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = partial19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 0, chronology23);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.minus(readableDuration27);
        org.joda.time.Chronology chronology29 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.dayOfMonth();
        org.joda.time.Chronology chronology31 = chronology29.withUTC();
        org.joda.time.Chronology chronology32 = chronology29.withUTC();
        org.joda.time.DurationField durationField33 = chronology32.centuries();
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime9.toMutableDateTime(chronology32);
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime34.getZone();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
    }

    @Test
    public void test10002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10002");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        int int20 = dateTime19.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.minus(readablePeriod21);
        org.joda.time.DateTime.Property property23 = dateTime19.secondOfDay();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        int int29 = partial26.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = partial26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology30);
        org.joda.time.DateTime dateTime35 = dateTime33.withHourOfDay(0);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(10);
        boolean boolean38 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime33);
        int int39 = dateTime19.getMinuteOfDay();
        org.joda.time.DateTime.Property property40 = dateTime19.yearOfCentury();
        org.joda.time.DateTime.Property property41 = dateTime19.minuteOfHour();
        org.joda.time.Interval interval42 = property41.toInterval();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(interval42);
    }

    @Test
    public void test10003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10003");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.era();
        org.joda.time.DurationField durationField7 = chronology5.weeks();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.DateTime dateTime11 = dateTime8.withCenturyOfEra(0);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = partial14.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.year();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology18.getZone();
        org.joda.time.DateTimeField dateTimeField23 = chronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = chronology18.yearOfEra();
        boolean boolean25 = dateTime11.equals((java.lang.Object) chronology18);
        org.joda.time.DateTimeField dateTimeField26 = chronology18.weekyear();
        long long29 = dateTimeField26.add(12L, 170);
        org.joda.time.ReadablePartial readablePartial30 = null;
        java.util.Locale locale34 = new java.util.Locale("eng", "Chinese", "kor");
        java.lang.String str35 = locale34.getCountry();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        int int41 = partial38.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 0, chronology42);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.minus(readableDuration46);
        org.joda.time.DateTime.Property property48 = dateTime47.millisOfSecond();
        org.joda.time.DateTime dateTime50 = property48.setCopy((int) (short) 1);
        java.util.Locale locale51 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str53 = locale51.getDisplayName(locale52);
        java.lang.String str54 = property48.getAsText(locale51);
        java.lang.String str55 = locale51.getDisplayName();
        java.lang.String str56 = locale34.getDisplayCountry(locale51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = dateTimeField26.getAsShortText(readablePartial30, locale51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0022-02-11T09:42:49.548Z" + "'", str12, "0022-02-11T09:42:49.548Z");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 5365180800012L + "'", long29 == 5365180800012L);
        org.junit.Assert.assertEquals(locale34.toString(), "eng_CHINESE_kor");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "CHINESE" + "'", str35, "CHINESE");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "fran\347ais (Canada)" + "'", str53, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0" + "'", str54, "0");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "fran\347ais (Canada)" + "'", str55, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "CHINESE" + "'", str56, "CHINESE");
    }

    @Test
    public void test10004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10004");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.era();
        org.joda.time.DurationField durationField7 = chronology5.weeks();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(0);
        org.joda.time.DateTime dateTime23 = dateTime21.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime23.toMutableDateTime();
        org.joda.time.DateTime.Property property25 = dateTime23.weekyear();
        org.joda.time.DateTime dateTime26 = property25.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime26.getZone();
        org.joda.time.DateTime dateTime28 = dateTime8.withZoneRetainFields(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime8.minusMinutes(1);
        org.joda.time.DateTime dateTime32 = dateTime30.plusSeconds(6);
        org.joda.time.DateTime.Property property33 = dateTime30.yearOfCentury();
        java.util.Locale locale37 = new java.util.Locale("coreano", "", "1970-01-01T00:00:00.035Z");
        int int38 = property33.getMaximumTextLength(locale37);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals(locale37.toString(), "coreano__1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
    }

    @Test
    public void test10005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10005");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readableDuration20);
        org.joda.time.Chronology chronology22 = dateTime19.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        long long26 = chronology22.set((org.joda.time.ReadablePartial) partial24, (long) (byte) -1);
        int[] intArray28 = chronology6.get((org.joda.time.ReadablePartial) partial24, (long) ' ');
        org.joda.time.Chronology chronology29 = partial24.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.centuryOfEra();
        org.joda.time.DurationField durationField31 = chronology29.eras();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    public void test10006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10006");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfYear((int) 'a');
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        int int27 = partial24.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = partial24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 0, chronology28);
        org.joda.time.DateTime dateTime33 = dateTime31.withHourOfDay(0);
        org.joda.time.DateTime dateTime35 = dateTime33.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime35.toMutableDateTime();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readableDuration47);
        org.joda.time.DateTime.Property property49 = dateTime48.millisOfSecond();
        boolean boolean50 = mutableDateTime36.isBefore((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime52 = dateTime48.withYear(0);
        org.joda.time.Chronology chronology53 = dateTime52.getChronology();
        boolean boolean54 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        int int60 = partial57.compareTo((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology61 = partial57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.Chronology chronology63 = chronology61.withZone(dateTimeZone62);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) 0, chronology61);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.DateTime dateTime66 = dateTime64.minus(readableDuration65);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime69 = dateTime64.withFieldAdded(durationFieldType67, 3);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.era();
        int int71 = dateTime64.get(dateTimeFieldType70);
        org.joda.time.DateTime dateTime73 = dateTime64.plusSeconds(3);
        org.joda.time.DateTime dateTime75 = dateTime64.withMillisOfSecond((int) 'u');
        int int76 = dateTime52.compareTo((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTimeZone dateTimeZone77 = dateTime52.getZone();
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.DateTime dateTime79 = dateTime52.minus(readablePeriod78);
        org.joda.time.DateTime dateTime81 = dateTime52.withWeekOfWeekyear(49);
        org.joda.time.DateTime.Property property82 = dateTime81.minuteOfHour();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property82);
    }

    @Test
    public void test10007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10007");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 317);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter6.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter14.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter15.withPivotYear((-694733));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter17.withPivotYear(5706);
        org.joda.time.format.DateTimeParser dateTimeParser20 = dateTimeFormatter19.getParser();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DurationField durationField28 = durationFieldType21.getField(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.clockhourOfHalfday();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        int int35 = partial32.compareTo((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology36 = partial32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.Chronology chronology38 = chronology36.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 0, chronology36);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.minus(readableDuration40);
        org.joda.time.Chronology chronology42 = dateTime39.getChronology();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        long long46 = chronology42.set((org.joda.time.ReadablePartial) partial44, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = partial44.getFieldTypes();
        java.util.Locale locale48 = java.util.Locale.PRC;
        boolean boolean49 = partial44.equals((java.lang.Object) locale48);
        int int50 = partial44.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int52 = partial44.indexOf(dateTimeFieldType51);
        org.joda.time.Partial partial53 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial44);
        java.lang.String str55 = partial53.toString("days");
        java.util.Locale locale57 = java.util.Locale.ITALIAN;
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.lang.String str59 = locale57.getDisplayScript(locale58);
        java.util.Locale locale60 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str61 = locale60.getDisplayCountry();
        java.lang.String str62 = locale58.getDisplayName(locale60);
        java.util.Locale locale63 = java.util.Locale.getDefault();
        java.lang.String str64 = locale60.getDisplayScript(locale63);
        java.util.Locale.setDefault(locale60);
        java.lang.String str66 = locale60.getISO3Language();
        java.lang.String str67 = dateTimeField29.getAsShortText((org.joda.time.ReadablePartial) partial53, 1439, locale60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter19.withLocale(locale60);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(dateTimeParser20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\ufffd\ufffd\ufffd\ufffd" + "'", str55, "\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Canada" + "'", str61, "Canada");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "cor\351en" + "'", str62, "cor\351en");
        org.junit.Assert.assertNotNull(locale63);
// flaky:         org.junit.Assert.assertEquals(locale63.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "fra" + "'", str66, "fra");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1439" + "'", str67, "1439");
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
    }

    @Test
    public void test10008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10008");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DurationField durationField20 = durationFieldType13.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime11.withChronology(chronology19);
        org.joda.time.DateTime dateTime25 = dateTime22.withDurationAdded(1L, 0);
        org.joda.time.DateTime dateTime27 = dateTime22.withMillisOfDay((int) (short) 1);
        org.joda.time.DateTime.Property property28 = dateTime27.secondOfDay();
        org.joda.time.Instant instant29 = dateTime27.toInstant();
        org.joda.time.DateTime dateTime31 = dateTime27.minusYears((int) 'x');
        org.joda.time.DateTime dateTime32 = dateTime27.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime34 = dateTime27.plusSeconds(18000000);
        org.joda.time.DateTime dateTime36 = dateTime27.minusDays(0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test10009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10009");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        int int18 = dateTime17.getSecondOfMinute();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        org.joda.time.DateTime dateTime32 = dateTime30.withYear((int) 'a');
        boolean boolean33 = dateTime30.isEqualNow();
        org.joda.time.DateMidnight dateMidnight34 = dateTime30.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone35 = dateMidnight34.getZone();
        org.joda.time.DateTime dateTime36 = dateTime17.withZoneRetainFields(dateTimeZone35);
        org.joda.time.DateTime.Property property37 = dateTime36.weekOfWeekyear();
        boolean boolean38 = dateTime36.isAfterNow();
        org.joda.time.DateTime dateTime39 = dateTime36.toDateTime();
        org.joda.time.DateTime.Property property40 = dateTime39.millisOfSecond();
        org.joda.time.DateTime dateTime42 = dateTime39.withDayOfWeek(4);
        org.joda.time.Chronology chronology43 = dateTime39.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.days();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.halfdayOfDay();
        boolean boolean47 = dateTimeField45.isLeap(8675L);
        java.lang.String str49 = dateTimeField45.getAsText(1644580800000L);
        java.util.Locale locale53 = new java.util.Locale("weekyear", "Italian", "years");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        int int60 = partial57.compareTo((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology61 = partial57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.Chronology chronology63 = chronology61.withZone(dateTimeZone62);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) 0, chronology61);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.DateTime dateTime66 = dateTime64.minus(readableDuration65);
        org.joda.time.Chronology chronology67 = dateTime64.getChronology();
        org.joda.time.DurationField durationField68 = chronology67.centuries();
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) 1970, chronology67);
        org.joda.time.DateTimeField dateTimeField70 = chronology67.year();
        org.joda.time.DateTimeField dateTimeField71 = chronology67.year();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = new org.joda.time.Partial(chronology76);
        int int78 = partial75.compareTo((org.joda.time.ReadablePartial) partial77);
        org.joda.time.Chronology chronology79 = partial75.getChronology();
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.Chronology chronology81 = chronology79.withZone(dateTimeZone80);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((long) 0, chronology79);
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.DateTime dateTime84 = dateTime82.minus(readableDuration83);
        org.joda.time.DateTime.Property property85 = dateTime84.millisOfSecond();
        java.util.Locale locale86 = java.util.Locale.KOREAN;
        int int87 = property85.getMaximumTextLength(locale86);
        java.util.Locale locale88 = java.util.Locale.ITALIAN;
        java.util.Locale locale89 = java.util.Locale.KOREAN;
        java.lang.String str90 = locale88.getDisplayScript(locale89);
        java.lang.String str91 = locale86.getDisplayLanguage(locale88);
        java.util.Locale locale92 = java.util.Locale.ITALIAN;
        java.lang.String str93 = locale92.getScript();
        java.lang.String str94 = locale86.getDisplayLanguage(locale92);
        java.lang.String str95 = dateTimeField71.getAsShortText(9, locale92);
        java.lang.String str96 = locale53.getDisplayCountry(locale92);
        int int97 = dateTimeField45.getMaximumShortTextLength(locale53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PM" + "'", str49, "PM");
        org.junit.Assert.assertEquals(locale53.toString(), "weekyear_ITALIAN_years");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 3 + "'", int87 == 3);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "it");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "coreano" + "'", str91, "coreano");
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "it");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "coreano" + "'", str94, "coreano");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "9" + "'", str95, "9");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "ITALIAN" + "'", str96, "ITALIAN");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 2 + "'", int97 == 2);
    }

    @Test
    public void test10010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10010");
        java.util.Locale locale1 = new java.util.Locale("secondOfDay");
        boolean boolean2 = locale1.hasExtensions();
        org.junit.Assert.assertEquals(locale1.toString(), "secondofday");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test10011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10011");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        org.joda.time.DurationField durationField15 = property12.getRangeDurationField();
        int int16 = property12.get();
        org.joda.time.DateTime dateTime18 = property12.addToCopy((long) 0);
        int int19 = property12.getLeapAmount();
        org.joda.time.DateTime dateTime20 = property12.roundCeilingCopy();
        org.joda.time.DateTime dateTime22 = property12.addToCopy(365);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        org.joda.time.DateTime dateTime26 = dateTime22.withFieldAdded(durationFieldType24, 34);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int int32 = partial29.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = partial29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 0, chronology33);
        org.joda.time.DateTime dateTime38 = dateTime36.withHourOfDay(0);
        int int39 = dateTime38.getCenturyOfEra();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        int int45 = partial42.compareTo((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = partial42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = chronology46.withZone(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 0, chronology46);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.minus(readableDuration50);
        org.joda.time.Chronology chronology52 = dateTime49.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str54 = dateTimeFieldType53.getName();
        int int55 = dateTime49.get(dateTimeFieldType53);
        org.joda.time.DateTime dateTime57 = dateTime49.minusMinutes(4);
        int int58 = dateTime49.getWeekyear();
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.DateTime dateTime60 = dateTime49.plus(readableDuration59);
        boolean boolean61 = dateTime38.isAfter((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        int int66 = partial63.compareTo((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology67 = partial63.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.era();
        org.joda.time.DurationField durationField69 = chronology67.weeks();
        org.joda.time.DateTime dateTime70 = org.joda.time.DateTime.now(chronology67);
        boolean boolean71 = dateTime60.isEqual((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime73 = dateTime60.minusSeconds(2);
        org.joda.time.DurationFieldType durationFieldType74 = org.joda.time.DurationFieldType.days();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = new org.joda.time.Partial(chronology76);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = new org.joda.time.Partial(chronology78);
        int int80 = partial77.compareTo((org.joda.time.ReadablePartial) partial79);
        org.joda.time.Chronology chronology81 = partial77.getChronology();
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.Chronology chronology83 = chronology81.withZone(dateTimeZone82);
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime((long) 0, chronology81);
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.DateTime dateTime86 = dateTime84.minus(readableDuration85);
        org.joda.time.Chronology chronology87 = dateTime84.getChronology();
        org.joda.time.DateTimeField dateTimeField88 = chronology87.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField89 = chronology87.dayOfWeek();
        org.joda.time.DurationField durationField90 = chronology87.seconds();
        org.joda.time.DurationField durationField91 = durationFieldType74.getField(chronology87);
        org.joda.time.ReadablePeriod readablePeriod92 = null;
        long long95 = chronology87.add(readablePeriod92, (long) 366, 0);
        org.joda.time.DurationField durationField96 = chronology87.weeks();
        org.joda.time.DateTime dateTime97 = dateTime73.withChronology(chronology87);
        boolean boolean98 = durationFieldType24.isSupported(chronology87);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 19 + "'", int39 == 19);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "halfdayOfDay" + "'", str54, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1970 + "'", int58 == 1970);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 366L + "'", long95 == 366L);
        org.junit.Assert.assertNotNull(durationField96);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test10012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10012");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Partial partial2 = new org.joda.time.Partial(dateTimeFieldType0, 12);
        org.joda.time.Chronology chronology3 = partial2.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean5 = partial2.isSupported(dateTimeFieldType4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType7 = partial2.getFieldType(42);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 42");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test10013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10013");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime9.minus(readablePeriod14);
        int int16 = dateTime15.getDayOfWeek();
        org.joda.time.DateTime dateTime18 = dateTime15.withMinuteOfHour(0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.clockhourOfHalfday();
        org.joda.time.DateTime dateTime27 = dateTime18.withChronology(chronology24);
        org.joda.time.DateTime.Property property28 = dateTime18.millisOfSecond();
        org.joda.time.Instant instant29 = dateTime18.toInstant();
        org.joda.time.Instant instant30 = dateTime18.toInstant();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(instant30);
    }

    @Test
    public void test10014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10014");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime9.minus(readablePeriod14);
        org.joda.time.DateTime dateTime17 = dateTime9.withCenturyOfEra(22200);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        int int22 = partial19.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        boolean boolean25 = partial21.isAfter((org.joda.time.ReadablePartial) partial24);
        java.lang.String str26 = partial24.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        org.joda.time.Partial partial28 = partial24.without(dateTimeFieldType27);
        org.joda.time.Chronology chronology29 = partial24.getChronology();
        long long33 = chronology29.add((long) 52, (long) 31, 70);
        org.joda.time.DateTimeField dateTimeField34 = chronology29.monthOfYear();
        org.joda.time.Chronology chronology35 = chronology29.withUTC();
        org.joda.time.DurationField durationField36 = chronology29.millis();
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime17.toMutableDateTime(chronology29);
        org.joda.time.DateTime dateTime39 = dateTime17.plusWeeks(397069);
        int int40 = dateTime39.getYearOfCentury();
        int int41 = dateTime39.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 2222L + "'", long33 == 2222L);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 79 + "'", int40 == 79);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 79 + "'", int41 == 79);
    }

    @Test
    public void test10015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10015");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronolgy();
        org.joda.time.Chronology chronology6 = dateTimeFormatter4.getChronolgy();
        int int7 = dateTimeFormatter4.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter4.getParser();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        int int14 = partial11.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = partial11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 0, chronology15);
        org.joda.time.DateTime dateTime20 = dateTime18.withHourOfDay(0);
        int int21 = dateTime20.getCenturyOfEra();
        boolean boolean23 = dateTime20.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime24 = dateTime20.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean26 = dateTime20.isSupported(dateTimeFieldType25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int int32 = partial29.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = partial29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 0, chronology33);
        org.joda.time.DateTime dateTime38 = dateTime36.withHourOfDay(0);
        org.joda.time.DateTime dateTime40 = dateTime38.withYear((int) 'a');
        boolean boolean41 = dateTime38.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone42 = dateTime38.getZone();
        org.joda.time.DateTime dateTime43 = dateTime20.withZoneRetainFields(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter4.withZone(dateTimeZone42);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((-675699L), dateTimeZone42);
        org.joda.time.DateTime.Property property48 = dateTime47.era();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        int int54 = partial51.compareTo((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = partial51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.Chronology chronology57 = chronology55.withZone(dateTimeZone56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 0, chronology55);
        org.joda.time.DateTime dateTime60 = dateTime58.withHourOfDay(0);
        int int61 = dateTime60.getCenturyOfEra();
        boolean boolean63 = dateTime60.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property64 = dateTime60.era();
        org.joda.time.DateTime.Property property65 = dateTime60.secondOfDay();
        int int66 = dateTime60.getYearOfCentury();
        org.joda.time.DateTime dateTime68 = dateTime60.withWeekyear(0);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.DateTime dateTime70 = dateTime68.minus(readableDuration69);
        boolean boolean71 = dateTime47.isAfter((org.joda.time.ReadableInstant) dateTime68);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime73 = dateTime47.withEra((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 19 + "'", int21 == 19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 19 + "'", int61 == 19);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 70 + "'", int66 == 70);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test10016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10016");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.era();
        org.joda.time.DurationField durationField7 = chronology5.weeks();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(0);
        org.joda.time.DateTime dateTime23 = dateTime21.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime23.toMutableDateTime();
        org.joda.time.DateTime.Property property25 = dateTime23.weekyear();
        org.joda.time.DateTime dateTime26 = property25.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime26.getZone();
        org.joda.time.DateTime dateTime28 = dateTime8.withZoneRetainFields(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime8.minusMinutes(1);
        org.joda.time.DateTime dateTime32 = dateTime30.plusSeconds(6);
        org.joda.time.DateTime dateTime33 = dateTime32.toDateTime();
        boolean boolean35 = dateTime32.isBefore(10L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test10017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10017");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        java.lang.String str15 = property14.getName();
        org.joda.time.Interval interval16 = property14.toInterval();
        org.joda.time.DateTime dateTime17 = property14.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime18 = property14.getDateTime();
        java.lang.String str19 = property14.getAsText();
        int int20 = property14.getMaximumValue();
        java.lang.String str21 = property14.getAsText();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "dayOfYear" + "'", str15, "dayOfYear");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 366 + "'", int20 == 366);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
    }

    @Test
    public void test10018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10018");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property15 = dateTime11.era();
        int int16 = property15.getMaximumValue();
        long long17 = property15.remainder();
        int int18 = property15.getMinimumValue();
        org.joda.time.DateTime dateTime19 = property15.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField20 = property15.getField();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.DateTime dateTime32 = dateTime30.withHourOfDay(0);
        int int33 = dateTime32.getCenturyOfEra();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        int int39 = partial36.compareTo((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = partial36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.Chronology chronology42 = chronology40.withZone(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 0, chronology40);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTime dateTime45 = dateTime43.minus(readableDuration44);
        org.joda.time.Chronology chronology46 = dateTime43.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str48 = dateTimeFieldType47.getName();
        int int49 = dateTime43.get(dateTimeFieldType47);
        org.joda.time.DateTime dateTime51 = dateTime43.minusMinutes(4);
        int int52 = dateTime43.getWeekyear();
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateTime dateTime54 = dateTime43.plus(readableDuration53);
        boolean boolean55 = dateTime32.isAfter((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime57 = dateTime32.minusWeeks((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int59 = dateTime57.get(dateTimeFieldType58);
        org.joda.time.DateTime dateTime60 = dateTime57.toDateTimeISO();
        boolean boolean61 = dateTime57.isEqualNow();
        boolean boolean62 = property15.equals((java.lang.Object) dateTime57);
        org.joda.time.DateTime dateTime64 = dateTime57.minusDays(1436);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 62135596800000L + "'", long17 == 62135596800000L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 19 + "'", int33 == 19);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "halfdayOfDay" + "'", str48, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1970 + "'", int52 == 1970);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test10019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10019");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        int int16 = property12.getLeapAmount();
        org.joda.time.DateTime dateTime17 = property12.withMinimumValue();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.Chronology chronology30 = dateTime27.getChronology();
        org.joda.time.DateTime dateTime32 = dateTime27.withWeekyear(23);
        long long33 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime35 = property12.addToCopy((int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField36 = property12.getField();
        boolean boolean37 = dateTimeField36.isSupported();
        long long39 = dateTimeField36.remainder((long) 1439);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
    }

    @Test
    public void test10020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10020");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = partial8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology12);
        org.joda.time.DateTime dateTime17 = dateTime15.withHourOfDay(0);
        int int18 = dateTime17.getCenturyOfEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.Chronology chronology31 = dateTime28.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str33 = dateTimeFieldType32.getName();
        int int34 = dateTime28.get(dateTimeFieldType32);
        org.joda.time.DateTime dateTime36 = dateTime28.minusMinutes(4);
        int int37 = dateTime28.getWeekyear();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime28.plus(readableDuration38);
        boolean boolean40 = dateTime17.isAfter((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology41 = dateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.year();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(999, 834, (-27409536), 2000, 71, 1900, chronology41);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 19 + "'", int18 == 19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "halfdayOfDay" + "'", str33, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test10021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10021");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "fran\347ais (Canada)" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList10);
        java.util.Locale locale13 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        java.lang.String str16 = locale13.toLanguageTag();
        java.lang.String str17 = locale13.getISO3Country();
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str20 = locale18.getDisplayName(locale19);
        java.lang.String str21 = locale18.toLanguageTag();
        java.lang.String str22 = locale18.toLanguageTag();
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str24 = locale23.getCountry();
        java.util.Locale locale25 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str27 = locale25.getDisplayName(locale26);
        java.lang.String str28 = locale25.toLanguageTag();
        java.util.Locale locale29 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale30 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str31 = locale29.getDisplayName(locale30);
        java.lang.String str32 = locale29.toLanguageTag();
        java.lang.String str33 = locale29.toLanguageTag();
        boolean boolean34 = locale29.hasExtensions();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        int int40 = partial37.compareTo((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = partial37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.Chronology chronology43 = chronology41.withZone(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 0, chronology41);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.minus(readableDuration45);
        org.joda.time.DateTime.Property property47 = dateTime46.millisOfSecond();
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        int int49 = property47.getMaximumTextLength(locale48);
        java.util.Locale locale50 = java.util.Locale.CANADA_FRENCH;
        boolean boolean51 = locale50.hasExtensions();
        java.util.Locale[] localeArray52 = new java.util.Locale[] { locale13, locale18, locale23, locale25, locale29, locale48, locale50 };
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.Locale.FilteringMode filteringMode55 = null;
        java.util.List<java.util.Locale> localeList56 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList53, filteringMode55);
        java.util.List<java.util.Locale> localeList57 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList56);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap59 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList60 = java.util.Locale.LanguageRange.parse("era", strMap59);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap61 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList62 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList60, strMap61);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap63 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList64 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList62, strMap63);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList66 = java.util.Locale.LanguageRange.parse("coreano");
        java.util.Locale.LanguageRange[] languageRangeArray67 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList68 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68, languageRangeArray67);
        java.lang.String[] strArray73 = new java.lang.String[] { "", "hi!", "fran\347ais (Canada)" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        java.lang.String str76 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, (java.util.Collection<java.lang.String>) strList74);
        java.lang.String[] strArray78 = new java.lang.String[] { "fr-CA" };
        java.util.ArrayList<java.lang.String> strList79 = new java.util.ArrayList<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList79, strArray78);
        java.util.Locale.FilteringMode filteringMode81 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList82 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, (java.util.Collection<java.lang.String>) strList79, filteringMode81);
        java.util.Locale locale83 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str84 = locale83.getDisplayCountry();
        java.util.Set<java.lang.String> strSet85 = locale83.getUnicodeLocaleAttributes();
        java.lang.String str86 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, (java.util.Collection<java.lang.String>) strSet85);
        java.util.Locale locale87 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale88 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str89 = locale87.getDisplayName(locale88);
        java.lang.String str90 = locale87.getDisplayVariant();
        java.util.Locale locale91 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale92 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str93 = locale91.getDisplayName(locale92);
        java.lang.String str94 = locale87.getDisplayName(locale91);
        java.util.Set<java.lang.String> strSet95 = locale87.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList96 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, (java.util.Collection<java.lang.String>) strSet95);
        java.util.List<java.lang.String> strList97 = java.util.Locale.filterTags(languageRangeList66, (java.util.Collection<java.lang.String>) strSet95);
        java.util.List<java.lang.String> strList98 = java.util.Locale.filterTags(languageRangeList62, (java.util.Collection<java.lang.String>) strList97);
        java.util.List<java.lang.String> strList99 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList97);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "fran\347ais (Canada)" + "'", str15, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fr-CA" + "'", str16, "fr-CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CAN" + "'", str17, "CAN");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fran\347ais (Canada)" + "'", str20, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fr-CA" + "'", str21, "fr-CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fr-CA" + "'", str22, "fr-CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "CA" + "'", str24, "CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "fran\347ais (Canada)" + "'", str27, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fr-CA" + "'", str28, "fr-CA");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "fran\347ais (Canada)" + "'", str31, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "fr-CA" + "'", str32, "fr-CA");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "fr-CA" + "'", str33, "fr-CA");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(localeList56);
        org.junit.Assert.assertNotNull(localeList57);
        org.junit.Assert.assertNotNull(languageRangeList60);
        org.junit.Assert.assertNotNull(languageRangeList62);
        org.junit.Assert.assertNotNull(languageRangeList64);
        org.junit.Assert.assertNotNull(languageRangeList66);
        org.junit.Assert.assertNotNull(languageRangeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + filteringMode81 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode81.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Canada" + "'", str84, "Canada");
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "fran\347ais (Canada)" + "'", str89, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "fran\347ais (Canada)" + "'", str93, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "fran\347ais (Canada)" + "'", str94, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(strSet95);
        org.junit.Assert.assertNotNull(strList96);
        org.junit.Assert.assertNotNull(strList97);
        org.junit.Assert.assertNotNull(strList98);
        org.junit.Assert.assertNotNull(strList99);
    }

    @Test
    public void test10022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10022");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.dayOfWeek();
        org.joda.time.DurationField durationField15 = chronology12.seconds();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.millisOfSecond();
        java.util.Locale locale18 = new java.util.Locale("fran\347ais (Canada)");
        java.lang.String str19 = locale18.getISO3Country();
        int int20 = dateTimeField16.getMaximumShortTextLength(locale18);
        int int22 = dateTimeField16.getMinimumValue((long) 666);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals(locale18.toString(), "fran\347ais (canada)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test10023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10023");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.minuteOfHour();
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.DurationField durationField14 = property12.getRangeDurationField();
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = null;
        org.joda.time.format.DateTimeParser dateTimeParser16 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter15, dateTimeParser16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter17.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser19 = dateTimeFormatter17.getParser();
        int int20 = dateTimeFormatter17.getDefaultYear();
        org.joda.time.Chronology chronology21 = dateTimeFormatter17.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter22 = null;
        org.joda.time.format.DateTimeParser dateTimeParser23 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter22, dateTimeParser23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        int int29 = partial26.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = partial26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone34 = chronology32.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter24.withZone(dateTimeZone34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter17.withZone(dateTimeZone34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readableDuration47);
        org.joda.time.Chronology chronology49 = dateTime46.getChronology();
        org.joda.time.Chronology chronology50 = chronology49.withUTC();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.hourOfDay();
        org.joda.time.DurationField durationField52 = chronology49.millis();
        org.joda.time.DurationField durationField53 = chronology49.days();
        org.joda.time.DateTimeField dateTimeField54 = chronology49.yearOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter17.withChronology(chronology49);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        int int61 = partial58.compareTo((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology62 = partial58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.Chronology chronology64 = chronology62.withZone(dateTimeZone63);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) 0, chronology62);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.DateTime dateTime67 = dateTime65.minus(readableDuration66);
        org.joda.time.Chronology chronology68 = dateTime65.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField70 = chronology68.dayOfWeek();
        org.joda.time.DurationField durationField71 = chronology68.seconds();
        org.joda.time.DurationField durationField72 = chronology68.months();
        org.joda.time.DateTimeField dateTimeField73 = chronology68.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        long long77 = chronology68.add(readablePeriod74, (long) 43200, 97);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = dateTimeFormatter17.withChronology(chronology68);
        org.joda.time.DateTimeZone dateTimeZone79 = chronology68.getZone();
        boolean boolean80 = property12.equals((java.lang.Object) dateTimeZone79);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(dateTimeParser19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2000 + "'", int20 == 2000);
        org.junit.Assert.assertNull(chronology21);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 43200L + "'", long77 == 43200L);
        org.junit.Assert.assertNotNull(dateTimeFormatter78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test10024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10024");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.year();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.weekyearOfCentury();
        org.joda.time.DurationField durationField14 = chronology7.seconds();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test10025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10025");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.Chronology chronology2 = partial0.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = partial0.getFieldTypes();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        int int8 = partial5.compareTo((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology9 = partial5.getChronology();
        java.lang.String str10 = partial5.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        int int16 = partial13.compareTo((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = partial13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 0, chronology17);
        org.joda.time.DateTime dateTime22 = dateTime20.withHourOfDay(0);
        int int23 = dateTime22.getCenturyOfEra();
        boolean boolean25 = dateTime22.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property26 = dateTime22.era();
        org.joda.time.DateTime dateTime28 = dateTime22.withHourOfDay(12);
        org.joda.time.DateTime dateTime29 = partial5.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial5.toString(dateTimeFormatter30);
        int[] intArray32 = partial5.getValues();
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str34 = durationFieldType33.getName();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        int int39 = partial36.compareTo((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        boolean boolean42 = partial38.isAfter((org.joda.time.ReadablePartial) partial41);
        java.lang.String str43 = partial41.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        org.joda.time.Partial partial45 = partial41.without(dateTimeFieldType44);
        org.joda.time.Chronology chronology46 = partial41.getChronology();
        long long50 = chronology46.add((long) 52, (long) 31, 70);
        boolean boolean51 = durationFieldType33.isSupported(chronology46);
        org.joda.time.Partial partial52 = new org.joda.time.Partial(dateTimeFieldTypeArray3, intArray32, chronology46);
        org.joda.time.Chronology chronology53 = partial52.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = partial52.toString("2022-02-11T09:38:52.669Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 19 + "'", int23 == 19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "seconds" + "'", str34, "seconds");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 2222L + "'", long50 == 2222L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(chronology53);
    }

    @Test
    public void test10026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10026");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DurationField durationField20 = durationFieldType13.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime11.withChronology(chronology19);
        org.joda.time.DateTime dateTime24 = dateTime11.plusWeeks((int) (short) 1);
        org.joda.time.DateTime.Property property25 = dateTime11.yearOfEra();
        boolean boolean27 = dateTime11.isEqual((long) 2);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int int32 = partial29.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = partial29.getChronology();
        java.lang.String str34 = partial29.toStringList();
        org.joda.time.DateTime dateTime35 = dateTime11.withFields((org.joda.time.ReadablePartial) partial29);
        boolean boolean36 = dateTime35.isBeforeNow();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime39 = dateTime35.withPeriodAdded(readablePeriod37, (int) (byte) 100);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        int int45 = partial42.compareTo((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = partial42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = chronology46.withZone(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 0, chronology46);
        org.joda.time.DateTime dateTime51 = dateTime49.withHourOfDay(0);
        int int52 = dateTime51.getCenturyOfEra();
        boolean boolean54 = dateTime51.equals((java.lang.Object) '4');
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        int int60 = partial57.compareTo((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology61 = partial57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.Chronology chronology63 = chronology61.withZone(dateTimeZone62);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) 0, chronology61);
        org.joda.time.DateTime dateTime66 = dateTime64.withHourOfDay(0);
        int int67 = dateTime66.getCenturyOfEra();
        boolean boolean69 = dateTime66.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime70 = dateTime66.withEarlierOffsetAtOverlap();
        boolean boolean71 = dateTime51.isAfter((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime73 = dateTime70.minus((long) 3);
        org.joda.time.DateTime.Property property74 = dateTime70.minuteOfHour();
        org.joda.time.DateTime.Property property75 = dateTime70.dayOfYear();
        boolean boolean76 = dateTime39.isEqual((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime.Property property77 = dateTime39.millisOfDay();
        org.joda.time.DateTime dateTime78 = property77.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 19 + "'", int52 == 19);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 19 + "'", int67 == 19);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test10027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10027");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.minus(readableDuration11);
        org.joda.time.DateTime dateTime14 = dateTime10.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.DateTime dateTime16 = property15.withMinimumValue();
        boolean boolean17 = dateTime16.isAfterNow();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int19 = dateTime16.get(dateTimeFieldType18);
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale21 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str22 = locale20.getDisplayName(locale21);
        java.lang.String str23 = locale20.getDisplayName();
        java.util.Calendar calendar24 = dateTime16.toCalendar(locale20);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        int int30 = partial27.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = partial27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 0, chronology31);
        org.joda.time.DateTime dateTime36 = dateTime34.withHourOfDay(0);
        org.joda.time.DateTime dateTime38 = dateTime36.withYear((int) 'a');
        boolean boolean39 = dateTime36.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime36.getZone();
        org.joda.time.DateTime dateTime41 = dateTime16.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) ' ', dateTimeZone40);
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime45 = property43.addToCopy(63780177600000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 63780177600000 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 12 + "'", int19 == 12);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fran\347ais (Canada)" + "'", str22, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "fran\347ais (Canada)" + "'", str23, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-58380393600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=120,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test10028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10028");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = partial8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology12);
        org.joda.time.DateTime dateTime17 = dateTime15.withHourOfDay(0);
        org.joda.time.DateTime dateTime19 = dateTime17.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime19.toMutableDateTime();
        org.joda.time.DateTime.Property property21 = dateTime19.weekyear();
        org.joda.time.DateTime dateTime22 = property21.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime22.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter2.withZone(dateTimeZone23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        int int30 = partial27.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = partial27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 0, chronology31);
        org.joda.time.DateTime dateTime36 = dateTime34.withHourOfDay(0);
        org.joda.time.DateTime dateTime38 = dateTime36.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime38.toMutableDateTime();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        int int45 = partial42.compareTo((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = partial42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = chronology46.withZone(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 0, chronology46);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.minus(readableDuration50);
        org.joda.time.DateTime.Property property52 = dateTime51.millisOfSecond();
        boolean boolean53 = mutableDateTime39.isBefore((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime55 = dateTime51.withYear(0);
        org.joda.time.Chronology chronology56 = dateTime55.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.era();
        org.joda.time.DurationField durationField58 = chronology56.years();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter24.withChronology(chronology56);
        int int60 = dateTimeFormatter24.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter24.withOffsetParsed();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2000 + "'", int60 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
    }

    @Test
    public void test10029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10029");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter3.getParser();
        int int6 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.Chronology chronology7 = dateTimeFormatter3.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology18.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter10.withZone(dateTimeZone20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter3.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-292275054), dateTimeZone20);
        org.joda.time.DateTime dateTime27 = dateTime25.minusHours(720);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.plus(readableDuration28);
        org.joda.time.DateTime.Property property30 = dateTime27.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test10030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10030");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        boolean boolean7 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        java.lang.String str8 = partial6.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = partial6.getFieldTypes();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readableDuration20);
        org.joda.time.DateTime dateTime23 = dateTime19.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime25 = dateTime19.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime27 = dateTime25.minusWeeks(19);
        org.joda.time.DateTime dateTime29 = dateTime25.plusMillis((int) '#');
        int int30 = dateTime29.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str32 = dateTimeFieldType31.getName();
        boolean boolean33 = dateTime29.isSupported(dateTimeFieldType31);
        org.joda.time.DateTime dateTime34 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime36 = dateTime34.withMinuteOfHour(31);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readableDuration47);
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime51 = dateTime46.withFieldAdded(durationFieldType49, 3);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.era();
        int int53 = dateTime46.get(dateTimeFieldType52);
        org.joda.time.DateTime dateTime55 = dateTime46.plusSeconds(3);
        org.joda.time.DateTime dateTime57 = dateTime55.plusMillis((int) (short) 0);
        int int58 = dateTime57.getCenturyOfEra();
        int int59 = dateTime34.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime.Property property60 = dateTime57.dayOfMonth();
        org.joda.time.DateTime dateTime61 = property60.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime64 = dateTime61.withDurationAdded((-35100889000L), (-27409540));
        org.joda.time.DateTime dateTime66 = dateTime61.withDayOfYear(59);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "halfdayOfDay" + "'", str32, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 19 + "'", int58 == 19);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
    }

    @Test
    public void test10031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10031");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.DurationField durationField3 = dateTimeField2.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
    }

    @Test
    public void test10032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10032");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekOfWeekyear();
        int int25 = dateTime15.get(dateTimeField24);
        org.joda.time.DateTime dateTime27 = dateTime15.withWeekyear(100);
        org.joda.time.DateTime dateTime28 = dateTime27.withLaterOffsetAtOverlap();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test10033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10033");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTimeField dateTimeField10 = chronology6.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField12 = chronology6.eras();
        org.joda.time.DateTimeField dateTimeField13 = chronology6.millisOfDay();
        boolean boolean14 = dateTimeField13.isLenient();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType15.getDurationType();
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldType15, 18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = partial18.getFormatter();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = partial21.getFormatter();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        int int27 = partial24.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        boolean boolean30 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        java.lang.String str31 = partial29.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        int int36 = partial33.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = partial33.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean39 = partial33.isSupported(dateTimeFieldType38);
        org.joda.time.Chronology chronology40 = partial33.getChronology();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial33.plus(readablePeriod41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        int int48 = partial45.compareTo((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = partial45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 0, chronology49);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.minus(readableDuration53);
        org.joda.time.DateTime.Property property55 = dateTime54.millisOfSecond();
        org.joda.time.DateTime dateTime57 = dateTime54.minus((long) (short) 10);
        org.joda.time.DateTime dateTime59 = dateTime54.withWeekOfWeekyear(19);
        org.joda.time.DateTime dateTime60 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean61 = partial29.isMatch((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean62 = partial21.isMatch((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Partial partial63 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial21);
        java.lang.String str65 = partial21.toString("\ud504\ub791\uc2a4\uc5b4");
        int[] intArray66 = partial21.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray68 = dateTimeField13.addWrapPartial((org.joda.time.ReadablePartial) partial18, 45, intArray66, 84300000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 45");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(dateTimeFormatter22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str65, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
    }

    @Test
    public void test10034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10034");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        int int19 = partial16.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = partial16.getChronology();
        org.joda.time.DurationField durationField21 = durationFieldType14.getField(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.weekOfWeekyear();
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = dateTimeField22.getAsText(19, locale24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter13.withLocale(locale24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter26.withZoneUTC();
        java.lang.Appendable appendable28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        int int33 = partial30.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        boolean boolean36 = partial32.isAfter((org.joda.time.ReadablePartial) partial35);
        java.lang.String str37 = partial35.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        org.joda.time.Partial partial39 = partial35.without(dateTimeFieldType38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial35.plus(readablePeriod40);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter27.printTo(appendable28, (org.joda.time.ReadablePartial) partial41);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "19" + "'", str25, "19");
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(partial41);
    }

    @Test
    public void test10035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10035");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(86500L);
        org.joda.time.DateTime.Property property2 = dateTime1.weekOfWeekyear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        int int8 = partial5.compareTo((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology9 = partial5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Chronology chronology11 = chronology9.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 0, chronology9);
        org.joda.time.DateTime dateTime14 = dateTime12.withHourOfDay(0);
        int int15 = dateTime14.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        int int21 = partial18.compareTo((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = partial18.getChronology();
        org.joda.time.DurationField durationField23 = durationFieldType16.getField(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.weekOfWeekyear();
        org.joda.time.DateTime dateTime25 = dateTime14.withChronology(chronology22);
        org.joda.time.DateTime dateTime27 = dateTime14.plusWeeks((int) (short) 1);
        org.joda.time.DateTime.Property property28 = dateTime14.yearOfEra();
        boolean boolean30 = dateTime14.isEqual((long) 2);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        int int35 = partial32.compareTo((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology36 = partial32.getChronology();
        java.lang.String str37 = partial32.toStringList();
        org.joda.time.DateTime dateTime38 = dateTime14.withFields((org.joda.time.ReadablePartial) partial32);
        org.joda.time.DateTime.Property property39 = dateTime14.monthOfYear();
        org.joda.time.DateTime dateTime41 = dateTime14.minusDays(0);
        int int42 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime43 = dateTime14.toDateTime();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 19 + "'", int15 == 19);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test10036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10036");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        org.joda.time.DurationField durationField15 = property12.getRangeDurationField();
        int int16 = property12.get();
        org.joda.time.DateTime dateTime18 = property12.addToCopy((long) 0);
        int int19 = property12.getLeapAmount();
        org.joda.time.DateTime dateTime20 = property12.withMaximumValue();
        java.lang.String str21 = property12.getAsShortText();
        org.joda.time.DateTime dateTime22 = property12.withMaximumValue();
        org.joda.time.DateTime.Property property23 = dateTime22.year();
        org.joda.time.DateTime.Property property24 = dateTime22.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = property24.setCopy("0023-01-05T00:00:00.000Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0023-01-05T00:00:00.000Z\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test10037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10037");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime15 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property16 = dateTime11.year();
        org.joda.time.DateTime dateTime17 = property16.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime18 = property16.getDateTime();
        int int19 = property16.getMinimumValue();
        org.joda.time.DateTime dateTime21 = property16.addToCopy((long) (-27409536));
        org.joda.time.DateTime dateTime22 = property16.getDateTime();
        java.lang.String str23 = property16.getAsText();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-292275054) + "'", int19 == (-292275054));
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970" + "'", str23, "1970");
    }

    @Test
    public void test10038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10038");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder2.setLanguage("");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test10039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10039");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        long long12 = dateTime11.getMillis();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        boolean boolean20 = partial16.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.DateTime dateTime32 = dateTime30.withHourOfDay(0);
        org.joda.time.DateTime dateTime34 = dateTime32.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime34.toMutableDateTime();
        org.joda.time.DateTime dateTime36 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readableDuration47);
        org.joda.time.DateTime dateTime50 = dateTime46.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime52 = dateTime46.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime54 = dateTime52.minusWeeks(19);
        org.joda.time.DateTime dateTime56 = dateTime52.plusMillis((int) '#');
        int int57 = dateTime56.getDayOfMonth();
        boolean boolean58 = partial16.equals((java.lang.Object) dateTime56);
        boolean boolean59 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime61 = dateTime56.plusSeconds(2);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        int int66 = partial63.compareTo((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        boolean boolean69 = partial65.isAfter((org.joda.time.ReadablePartial) partial68);
        java.lang.String str70 = partial68.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = null;
        org.joda.time.Partial partial72 = partial68.without(dateTimeFieldType71);
        org.joda.time.Chronology chronology73 = partial68.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.minuteOfHour();
        org.joda.time.DateTime dateTime75 = dateTime56.withChronology(chronology73);
        org.joda.time.DateTimeField dateTimeField76 = chronology73.era();
        org.joda.time.DateTimeField dateTimeField77 = chronology73.minuteOfDay();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[]" + "'", str70, "[]");
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
    }

    @Test
    public void test10040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10040");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        org.joda.time.Interval interval16 = property12.toInterval();
        org.joda.time.DateTime dateTime17 = property12.roundHalfFloorCopy();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.DateTime dateTime31 = dateTime27.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime33 = dateTime27.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime35 = dateTime33.minusWeeks(19);
        boolean boolean37 = dateTime35.isBefore((long) '4');
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.DateTime dateTime39 = dateTime35.minus(readablePeriod38);
        int int40 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime42 = dateTime39.minus((long) 6);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        int int48 = partial45.compareTo((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = partial45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 0, chronology49);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.minus(readableDuration53);
        org.joda.time.Chronology chronology55 = dateTime52.getChronology();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        int int61 = partial58.compareTo((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology62 = partial58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.Chronology chronology64 = chronology62.withZone(dateTimeZone63);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) 0, chronology62);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.DateTime dateTime67 = dateTime65.minus(readableDuration66);
        org.joda.time.Chronology chronology68 = dateTime65.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.dayOfMonth();
        org.joda.time.Chronology chronology70 = chronology68.withUTC();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.dayOfYear();
        boolean boolean72 = dateTime52.equals((java.lang.Object) dateTimeField71);
        org.joda.time.DateTime dateTime74 = dateTime52.withDayOfYear((int) (short) 100);
        org.joda.time.DateTime.Property property75 = dateTime74.yearOfEra();
        boolean boolean76 = dateTime42.equals((java.lang.Object) dateTime74);
        org.joda.time.DateTime dateTime78 = dateTime42.minusSeconds(71);
        int int79 = dateTime78.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
    }

    @Test
    public void test10041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10041");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str14 = dateTimeFieldType13.getName();
        int int15 = dateTime9.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime17 = dateTime9.minusMinutes(4);
        int int18 = dateTime9.getWeekyear();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime9.plus(readableDuration19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.withDurationAdded(readableDuration21, (int) (short) -1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        int int29 = partial26.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = partial26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology30);
        org.joda.time.DateTime dateTime35 = dateTime33.withHourOfDay(0);
        int int36 = dateTime35.getCenturyOfEra();
        boolean boolean38 = dateTime35.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property39 = dateTime35.era();
        org.joda.time.DateTime dateTime41 = dateTime35.withHourOfDay(12);
        org.joda.time.DateTime dateTime42 = dateTime35.withEarlierOffsetAtOverlap();
        java.lang.String str43 = dateTime42.toString();
        int int44 = dateTime23.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime.Property property45 = dateTime42.secondOfMinute();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "halfdayOfDay" + "'", str14, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 19 + "'", int36 == 19);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str43, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test10042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10042");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime14 = dateTime9.withFieldAdded(durationFieldType12, 3);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        int int16 = dateTime9.get(dateTimeFieldType15);
        org.joda.time.DateTime dateTime18 = dateTime9.plusSeconds(3);
        int int19 = dateTime18.getSecondOfMinute();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int int25 = partial22.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = partial22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.Chronology chronology28 = chronology26.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 0, chronology26);
        org.joda.time.DateTime dateTime31 = dateTime29.withHourOfDay(0);
        org.joda.time.DateTime dateTime33 = dateTime31.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime33.toMutableDateTime();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        int int40 = partial37.compareTo((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = partial37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.Chronology chronology43 = chronology41.withZone(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 0, chronology41);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.minus(readableDuration45);
        org.joda.time.DateTime.Property property47 = dateTime46.millisOfSecond();
        boolean boolean48 = mutableDateTime34.isBefore((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime50 = dateTime46.withWeekyear(19);
        org.joda.time.DateTime dateTime52 = dateTime50.minusDays(0);
        int int53 = dateTime50.getEra();
        org.joda.time.DateTime dateTime54 = dateTime50.withTimeAtStartOfDay();
        boolean boolean55 = dateTime18.isBefore((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime.Property property56 = dateTime50.dayOfWeek();
        org.joda.time.DateTime dateTime58 = dateTime50.withMillis(9L);
        org.joda.time.DateTime dateTime60 = dateTime50.plus((long) 6);
        org.joda.time.DateTime.Property property61 = dateTime60.secondOfDay();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
    }

    @Test
    public void test10043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10043");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekOfWeekyear();
        int int25 = dateTime15.get(dateTimeField24);
        org.joda.time.DateTime dateTime27 = dateTime15.withWeekyear(100);
        int int28 = dateTime15.getCenturyOfEra();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = partial31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 0, chronology35);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.minus(readableDuration39);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes((int) 'x');
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        int int47 = partial44.compareTo((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        boolean boolean50 = partial46.isAfter((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        int int56 = partial53.compareTo((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Chronology chronology57 = partial53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.Chronology chronology59 = chronology57.withZone(dateTimeZone58);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 0, chronology57);
        org.joda.time.DateTime dateTime62 = dateTime60.withHourOfDay(0);
        int int63 = dateTime62.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        int int69 = partial66.compareTo((org.joda.time.ReadablePartial) partial68);
        org.joda.time.Chronology chronology70 = partial66.getChronology();
        org.joda.time.DurationField durationField71 = durationFieldType64.getField(chronology70);
        org.joda.time.DateTimeField dateTimeField72 = chronology70.weekOfWeekyear();
        org.joda.time.DateTime dateTime73 = dateTime62.withChronology(chronology70);
        org.joda.time.DateTime dateTime75 = dateTime62.plusWeeks((int) (short) 1);
        boolean boolean76 = partial46.isMatch((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime dateTime78 = dateTime75.minusMinutes(69);
        boolean boolean79 = dateTime42.isAfter((org.joda.time.ReadableInstant) dateTime75);
        boolean boolean80 = dateTime15.isEqual((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.MutableDateTime mutableDateTime81 = dateTime42.toMutableDateTime();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 19 + "'", int28 == 19);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 19 + "'", int63 == 19);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(mutableDateTime81);
    }

    @Test
    public void test10044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10044");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.DateTime dateTime15 = property14.withMinimumValue();
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.DateTime.Property property17 = dateTime15.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime15.minus(readablePeriod18);
        org.joda.time.DateTime.Property property20 = dateTime15.monthOfYear();
        org.joda.time.DateTime dateTime22 = dateTime15.minusYears(86340);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        int int28 = partial25.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = partial25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Chronology chronology31 = chronology29.withZone(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 0, chronology29);
        org.joda.time.DateTime dateTime34 = dateTime32.withHourOfDay(0);
        int int35 = dateTime34.getCenturyOfEra();
        boolean boolean37 = dateTime34.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime38 = dateTime34.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime40 = dateTime38.withCenturyOfEra((int) '#');
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        int int42 = dateTime22.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        int int48 = partial45.compareTo((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = partial45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 0, chronology49);
        org.joda.time.DateTime dateTime54 = dateTime52.withHourOfDay(0);
        int int55 = dateTime54.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        int int61 = partial58.compareTo((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology62 = partial58.getChronology();
        org.joda.time.DurationField durationField63 = durationFieldType56.getField(chronology62);
        org.joda.time.DateTimeField dateTimeField64 = chronology62.weekOfWeekyear();
        org.joda.time.DateTime dateTime65 = dateTime54.withChronology(chronology62);
        org.joda.time.DateTime dateTime68 = dateTime65.withDurationAdded(1L, 0);
        org.joda.time.DateTime dateTime70 = dateTime65.withMillisOfDay((int) (short) 1);
        org.joda.time.DateTime.Property property71 = dateTime70.secondOfDay();
        org.joda.time.Instant instant72 = dateTime70.toInstant();
        org.joda.time.DateTime dateTime74 = dateTime70.minusYears((int) 'x');
        int int75 = dateTime70.getWeekOfWeekyear();
        boolean boolean76 = dateTime40.isAfter((org.joda.time.ReadableInstant) dateTime70);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0120-01-01T00:00:00.000Z" + "'", str16, "0120-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 19 + "'", int35 == 19);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 19 + "'", int55 == 19);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test10045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10045");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        int int20 = dateTime19.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.minus(readablePeriod21);
        org.joda.time.DateTime.Property property23 = dateTime19.centuryOfEra();
        org.joda.time.DateTime dateTime25 = property23.addToCopy(0);
        org.joda.time.DateTime dateTime26 = property23.getDateTime();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int int32 = partial29.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = partial29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 0, chronology33);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readableDuration37);
        org.joda.time.DateTime dateTime40 = dateTime36.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property41 = dateTime40.dayOfYear();
        java.lang.String str42 = property41.getName();
        int int43 = property41.get();
        org.joda.time.DateTime dateTime45 = property41.addToCopy(10);
        int int46 = property23.compareTo((org.joda.time.ReadableInstant) dateTime45);
        int int47 = property23.getMinimumValue();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "dayOfYear" + "'", str42, "dayOfYear");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test10046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10046");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(10);
        org.joda.time.Instant instant14 = dateTime13.toInstant();
        org.joda.time.DateTime dateTime16 = dateTime13.plusMillis(23);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.plus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime16.plusMinutes(73);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime16.minus(readableDuration21);
        org.joda.time.DateTime.Property property23 = dateTime22.secondOfDay();
        java.lang.String str24 = property23.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Property[secondOfDay]" + "'", str24, "Property[secondOfDay]");
    }

    @Test
    public void test10047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10047");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        int int20 = dateTime19.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.minus(readablePeriod21);
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter25.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser27 = dateTimeFormatter25.getParser();
        int int28 = dateTimeFormatter25.getDefaultYear();
        org.joda.time.Chronology chronology29 = dateTimeFormatter25.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = null;
        org.joda.time.format.DateTimeParser dateTimeParser31 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter30, dateTimeParser31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = partial34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology40.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter32.withZone(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter25.withZone(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime22.withZoneRetainFields(dateTimeZone42);
        boolean boolean46 = dateTime45.isBeforeNow();
        org.joda.time.DateTime.Property property47 = dateTime45.yearOfEra();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(dateTimeParser27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2000 + "'", int28 == 2000);
        org.junit.Assert.assertNull(chronology29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(property47);
    }

    @Test
    public void test10048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10048");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.DateTime dateTime15 = property14.withMinimumValue();
        org.joda.time.DateTime dateTime17 = property14.setCopy(3);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime17.getZone();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.withDurationAdded(readableDuration19, 2922789);
        org.joda.time.DateTime.Property property22 = dateTime21.millisOfSecond();
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter25.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser27 = dateTimeFormatter25.getParser();
        int int28 = dateTimeFormatter25.getDefaultYear();
        org.joda.time.Chronology chronology29 = dateTimeFormatter25.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = null;
        org.joda.time.format.DateTimeParser dateTimeParser31 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter30, dateTimeParser31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = partial34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology40.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter32.withZone(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter25.withZone(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.DateTime.Property property46 = dateTime45.dayOfMonth();
        boolean boolean47 = property22.equals((java.lang.Object) property46);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(dateTimeParser27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2000 + "'", int28 == 2000);
        org.junit.Assert.assertNull(chronology29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test10049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10049");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.monthOfYear();
        org.joda.time.DurationField durationField15 = dateTimeField14.getLeapDurationField();
        long long18 = dateTimeField14.add((long) (byte) 1, 73L);
        org.joda.time.DurationField durationField19 = dateTimeField14.getRangeDurationField();
        int int20 = dateTimeField14.getMinimumValue();
        long long22 = dateTimeField14.remainder((long) (byte) 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 191980800001L + "'", long18 == 191980800001L);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
    }

    @Test
    public void test10050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10050");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        int int19 = partial16.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = partial16.getChronology();
        org.joda.time.DurationField durationField21 = durationFieldType14.getField(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.weekOfWeekyear();
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = dateTimeField22.getAsText(19, locale24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter13.withLocale(locale24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter26.withZoneUTC();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int int32 = partial29.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = partial29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField40 = chronology35.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField41 = chronology35.centuryOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter26.withChronology(chronology35);
        java.util.Locale locale43 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str44 = locale43.getCountry();
        java.lang.String str45 = locale43.getISO3Country();
        java.util.Set<java.lang.String> strSet46 = locale43.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter42.withLocale(locale43);
        java.lang.String str48 = locale43.toLanguageTag();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "19" + "'", str25, "19");
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "CA" + "'", str44, "CA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "CAN" + "'", str45, "CAN");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "fr-CA" + "'", str48, "fr-CA");
    }

    @Test
    public void test10051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10051");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.minus(readableDuration11);
        org.joda.time.Chronology chronology13 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfDay();
        org.joda.time.DurationField durationField15 = chronology13.seconds();
        org.joda.time.DurationField durationField16 = chronology13.hours();
        org.joda.time.DurationField durationField17 = durationFieldType0.getField(chronology13);
        org.joda.time.DurationField durationField18 = chronology13.days();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTimeField dateTimeField20 = chronology13.hourOfHalfday();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test10052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10052");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        org.joda.time.DateTime dateTime13 = dateTime11.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTime();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readableDuration25);
        org.joda.time.DateTime.Property property27 = dateTime26.millisOfSecond();
        boolean boolean28 = mutableDateTime14.isBefore((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime30 = dateTime26.withYear(0);
        int int31 = dateTime26.getEra();
        int int32 = dateTime26.getMinuteOfHour();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTime dateTime34 = dateTime26.plus(readableDuration33);
        org.joda.time.DateTime dateTime36 = dateTime26.plusMillis(3409);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test10053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10053");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = chronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfDay();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime.Property property16 = dateTime15.hourOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        int int22 = partial19.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = partial19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 0, chronology23);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.minus(readableDuration27);
        org.joda.time.Chronology chronology29 = dateTime26.getChronology();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        long long33 = chronology29.set((org.joda.time.ReadablePartial) partial31, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = partial31.getFieldTypes();
        java.util.Locale locale35 = java.util.Locale.PRC;
        boolean boolean36 = partial31.equals((java.lang.Object) locale35);
        int int37 = partial31.size();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        int int43 = partial40.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = partial40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology44.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) 0, chronology44);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.minus(readableDuration48);
        org.joda.time.DateTime dateTime51 = dateTime47.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime53 = dateTime47.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime55 = dateTime53.minusWeeks(19);
        org.joda.time.DateTime dateTime57 = dateTime53.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        int int63 = partial60.compareTo((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Chronology chronology64 = partial60.getChronology();
        org.joda.time.DurationField durationField65 = durationFieldType58.getField(chronology64);
        org.joda.time.DateTimeField dateTimeField66 = chronology64.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField67 = chronology64.dayOfMonth();
        org.joda.time.DateTime dateTime68 = dateTime57.toDateTime(chronology64);
        org.joda.time.Chronology chronology69 = chronology64.withUTC();
        org.joda.time.Partial partial70 = partial31.withChronologyRetainFields(chronology69);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean72 = partial70.isSupported(dateTimeFieldType71);
        org.joda.time.DurationFieldType durationFieldType73 = dateTimeFieldType71.getDurationType();
        org.joda.time.DateTime dateTime75 = dateTime15.withFieldAdded(durationFieldType73, (int) (short) 100);
        org.joda.time.DateTime dateTime77 = dateTime15.minusMonths(2922789);
        java.lang.String str78 = dateTime15.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "2022-02-11T09:42:51.120Z" + "'", str78, "2022-02-11T09:42:51.120Z");
    }

    @Test
    public void test10054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10054");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfHour();
        int int17 = property16.getMaximumValue();
        long long18 = property16.remainder();
        org.joda.time.DateTime dateTime20 = property16.addToCopy(345600000L);
        org.joda.time.DateTime dateTime21 = property16.roundCeilingCopy();
        org.joda.time.DateTime dateTime22 = property16.roundHalfCeilingCopy();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test10055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10055");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("zh", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
    }

    @Test
    public void test10056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10056");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        org.joda.time.DurationField durationField15 = property12.getRangeDurationField();
        int int16 = property12.get();
        org.joda.time.DateTime dateTime18 = property12.addToCopy((long) 0);
        int int19 = property12.getLeapAmount();
        org.joda.time.DateTime dateTime20 = property12.withMaximumValue();
        java.lang.String str21 = property12.getAsShortText();
        org.joda.time.DateTime dateTime22 = property12.roundCeilingCopy();
        org.joda.time.DateTime.Property property23 = dateTime22.millisOfDay();
        org.joda.time.DateTime dateTime24 = dateTime22.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime22.plus(readableDuration25);
        org.joda.time.DateTime dateTime28 = dateTime26.withYearOfEra(1970);
        int int29 = dateTime28.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test10057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10057");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        long long12 = dateTime11.getMillis();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 0, chronology19);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readableDuration23);
        org.joda.time.DateTime dateTime26 = dateTime22.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime28 = dateTime22.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime30 = dateTime28.minusWeeks(19);
        int int31 = dateTime30.getSecondOfMinute();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = partial34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 0, chronology38);
        org.joda.time.DateTime dateTime43 = dateTime41.withHourOfDay(0);
        org.joda.time.DateTime dateTime45 = dateTime43.withYear((int) 'a');
        boolean boolean46 = dateTime43.isEqualNow();
        org.joda.time.DateMidnight dateMidnight47 = dateTime43.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone48 = dateMidnight47.getZone();
        org.joda.time.DateTime dateTime49 = dateTime30.withZoneRetainFields(dateTimeZone48);
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime11.toMutableDateTime(dateTimeZone48);
        org.joda.time.DateTime dateTime52 = dateTime11.plusMillis(43200);
        org.joda.time.DateTime dateTime54 = dateTime52.plusSeconds(1439);
        int int55 = dateTime52.getHourOfDay();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test10058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10058");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime15.plus(readablePeriod20);
        org.joda.time.DateTime.Property property22 = dateTime15.year();
        org.joda.time.DateTime dateTime23 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((-1873));
        org.joda.time.DateTime.Property property26 = dateTime25.minuteOfHour();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test10059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10059");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getScript();
        java.lang.String str2 = locale0.getDisplayName();
        java.lang.String str3 = locale0.getDisplayScript();
        java.lang.String str4 = locale0.getDisplayCountry();
        java.lang.Class<?> wildcardClass5 = locale0.getClass();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str2, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test10060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10060");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        org.joda.time.DateTime dateTime13 = dateTime11.withYear((int) 'a');
        boolean boolean14 = dateTime11.isEqualNow();
        org.joda.time.DateMidnight dateMidnight15 = dateTime11.toDateMidnight();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        int int21 = partial18.compareTo((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = partial18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Chronology chronology24 = chronology22.withZone(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 0, chronology22);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.minus(readableDuration26);
        org.joda.time.Chronology chronology28 = dateTime25.getChronology();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        int int33 = partial30.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = partial30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.weekOfWeekyear();
        int int39 = dateTimeField37.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        int int44 = partial41.compareTo((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        boolean boolean47 = partial43.isAfter((org.joda.time.ReadablePartial) partial46);
        java.lang.String str48 = partial46.toString();
        java.util.Locale locale50 = null;
        java.lang.String str51 = dateTimeField37.getAsShortText((org.joda.time.ReadablePartial) partial46, 53, locale50);
        long long53 = chronology28.set((org.joda.time.ReadablePartial) partial46, (long) 0);
        org.joda.time.DateTimeField dateTimeField54 = chronology28.halfdayOfDay();
        int int55 = dateMidnight15.get(dateTimeField54);
        long long58 = dateTimeField54.getDifferenceAsLong(700564464000000L, 1814400000L);
        int int60 = dateTimeField54.get((long) 2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 53 + "'", int39 == 53);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "53" + "'", str51, "53");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 16216728L + "'", long58 == 16216728L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test10061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10061");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        java.lang.String str6 = partial1.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.DateTime dateTime18 = dateTime16.withHourOfDay(0);
        int int19 = dateTime18.getCenturyOfEra();
        boolean boolean21 = dateTime18.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property22 = dateTime18.era();
        org.joda.time.DateTime dateTime24 = dateTime18.withHourOfDay(12);
        org.joda.time.DateTime dateTime25 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = partial1.toString(dateTimeFormatter26);
        int[] intArray28 = partial1.getValues();
        int[] intArray29 = partial1.getValues();
        org.joda.time.Chronology chronology30 = partial1.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.minutes();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.dayOfWeek();
        long long35 = dateTimeField32.add((long) 86340, 581);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 19 + "'", int19 == 19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 50198486340L + "'", long35 == 50198486340L);
    }

    @Test
    public void test10062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10062");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DurationField durationField20 = durationFieldType13.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime11.withChronology(chronology19);
        org.joda.time.DateTime dateTime25 = dateTime22.withDurationAdded(1L, 0);
        org.joda.time.DateTime dateTime27 = dateTime22.withMillisOfDay((int) (short) 1);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra((int) '4');
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.lang.String str31 = locale30.getScript();
        java.util.Set<java.lang.String> strSet32 = locale30.getUnicodeLocaleAttributes();
        java.util.Calendar calendar33 = dateTime27.toCalendar(locale30);
        org.joda.time.DateTime dateTime34 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime36 = dateTime34.plusSeconds(274);
        org.joda.time.DateTime dateTime37 = dateTime36.toDateTimeISO();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test10063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10063");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str14 = dateTimeFieldType13.getName();
        int int15 = dateTime9.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime17 = dateTime9.minusMinutes(4);
        org.joda.time.Instant instant18 = dateTime17.toInstant();
        org.joda.time.DateTime.Property property19 = dateTime17.weekyear();
        org.joda.time.DateTime dateTime20 = property19.roundHalfCeilingCopy();
        int int21 = dateTime20.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.minus(readableDuration22);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "halfdayOfDay" + "'", str14, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test10064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10064");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.era();
        org.joda.time.DurationField durationField11 = durationFieldType1.getField(chronology7);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.days();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 0, chronology19);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readableDuration23);
        org.joda.time.Chronology chronology25 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.dayOfWeek();
        org.joda.time.DurationField durationField28 = chronology25.seconds();
        org.joda.time.DurationField durationField29 = durationFieldType12.getField(chronology25);
        org.joda.time.DurationField durationField30 = chronology25.halfdays();
        org.joda.time.DateTimeField dateTimeField31 = chronology25.minuteOfDay();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = partial34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 0, chronology38);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime43 = dateTime41.minus(readableDuration42);
        org.joda.time.DateTime.Property property44 = dateTime43.millisOfSecond();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        int int46 = property44.getMaximumTextLength(locale45);
        long long47 = property44.remainder();
        org.joda.time.Interval interval48 = property44.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property44.getFieldType();
        org.joda.time.DateTimeField dateTimeField50 = property44.getField();
        java.lang.String str52 = dateTimeField50.getAsShortText(0L);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        int int57 = partial54.compareTo((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        boolean boolean60 = partial56.isAfter((org.joda.time.ReadablePartial) partial59);
        java.lang.String str61 = partial59.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray62 = partial59.getFieldTypes();
        java.util.Locale locale64 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale65 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str66 = locale64.getDisplayName(locale65);
        java.lang.String str67 = locale64.getDisplayVariant();
        java.util.Locale locale68 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale69 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str70 = locale68.getDisplayName(locale69);
        java.lang.String str71 = locale64.getDisplayName(locale68);
        java.util.Set<java.lang.String> strSet72 = locale64.getUnicodeLocaleAttributes();
        java.lang.String str73 = dateTimeField50.getAsShortText((org.joda.time.ReadablePartial) partial59, 999, locale64);
        int[] intArray78 = new int[] { 43200, 'a', 1, ' ' };
        int int79 = dateTimeField31.getMaximumValue((org.joda.time.ReadablePartial) partial59, intArray78);
        org.joda.time.Chronology chronology80 = partial59.getChronology();
        org.joda.time.DateTimeField dateTimeField81 = chronology80.halfdayOfDay();
        boolean boolean82 = durationFieldType1.isSupported(chronology80);
        org.joda.time.DateTimeField dateTimeField83 = chronology80.clockhourOfDay();
        int int85 = dateTimeField83.getMaximumValue(5035L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0" + "'", str52, "0");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "fran\347ais (Canada)" + "'", str66, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "fran\347ais (Canada)" + "'", str70, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "fran\347ais (Canada)" + "'", str71, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "999" + "'", str73, "999");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[43200, 97, 1, 32]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1439 + "'", int79 == 1439);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 24 + "'", int85 == 24);
    }

    @Test
    public void test10065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10065");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        java.lang.String str6 = partial1.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.DateTime dateTime18 = dateTime16.withHourOfDay(0);
        int int19 = dateTime18.getCenturyOfEra();
        boolean boolean21 = dateTime18.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property22 = dateTime18.era();
        org.joda.time.DateTime dateTime24 = dateTime18.withHourOfDay(12);
        org.joda.time.DateTime dateTime25 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.lang.String str27 = dateTimeFieldType26.getName();
        org.joda.time.DateTime dateTime29 = dateTime25.withField(dateTimeFieldType26, 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        int int35 = partial32.compareTo((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology36 = partial32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.Chronology chronology38 = chronology36.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 0, chronology36);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.minus(readableDuration40);
        org.joda.time.DateTime dateTime43 = dateTime39.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime45 = dateTime39.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime47 = dateTime45.minusWeeks(19);
        int int48 = dateTime47.getSecondOfMinute();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        int int54 = partial51.compareTo((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = partial51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.Chronology chronology57 = chronology55.withZone(dateTimeZone56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 0, chronology55);
        org.joda.time.DateTime dateTime60 = dateTime58.withHourOfDay(0);
        org.joda.time.DateTime dateTime62 = dateTime60.withYear((int) 'a');
        boolean boolean63 = dateTime60.isEqualNow();
        org.joda.time.DateMidnight dateMidnight64 = dateTime60.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone65 = dateMidnight64.getZone();
        org.joda.time.DateTime dateTime66 = dateTime47.withZoneRetainFields(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = dateTime29.toDateTime(dateTimeZone65);
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone65);
        org.joda.time.DateTime dateTime70 = dateTime68.plusDays(292278994);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 19 + "'", int19 == 19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "secondOfDay" + "'", str27, "secondOfDay");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
    }

    @Test
    public void test10066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10066");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = partial14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekOfWeekyear();
        int int23 = dateTimeField21.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        int int28 = partial25.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        boolean boolean31 = partial27.isAfter((org.joda.time.ReadablePartial) partial30);
        java.lang.String str32 = partial30.toString();
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeField21.getAsShortText((org.joda.time.ReadablePartial) partial30, 53, locale34);
        long long37 = chronology12.set((org.joda.time.ReadablePartial) partial30, (long) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.yearOfEra();
        int int39 = partial30.indexOf(dateTimeFieldType38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = partial30.getFieldTypes();
        org.joda.time.Partial partial41 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial30);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial41.plus(readablePeriod42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = partial41.getFormatter();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53 + "'", int23 == 53);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "53" + "'", str35, "53");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNull(dateTimeFormatter44);
    }

    @Test
    public void test10067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10067");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        int int20 = dateTime19.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.minus(readablePeriod21);
        org.joda.time.DateTime.Property property23 = dateTime19.centuryOfEra();
        org.joda.time.DateTime dateTime25 = property23.addToCopy(0);
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        long long27 = dateTime25.getMillis();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 35L + "'", long27 == 35L);
    }

    @Test
    public void test10068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10068");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(22270, 34839994, 39, 18000000, 2016);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 18000000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10069");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        boolean boolean7 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial3.getFormatter();
        org.joda.time.Chronology chronology10 = partial3.getChronology();
        java.lang.String str11 = chronology10.toString();
        org.joda.time.DurationField durationField12 = chronology10.seconds();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 0, chronology19);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readableDuration23);
        org.joda.time.Chronology chronology25 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        long long31 = chronology25.add(readablePeriod28, (long) 12, 0);
        org.joda.time.DateTimeField dateTimeField32 = chronology25.millisOfDay();
        org.joda.time.DurationField durationField33 = chronology25.weeks();
        org.joda.time.DateTimeField dateTimeField34 = chronology25.hourOfDay();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        int int39 = partial36.compareTo((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = partial36.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean42 = partial36.isSupported(dateTimeFieldType41);
        org.joda.time.Chronology chronology43 = partial36.getChronology();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial36.plus(readablePeriod44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        int int51 = partial48.compareTo((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Chronology chronology52 = partial48.getChronology();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.Chronology chronology54 = chronology52.withZone(dateTimeZone53);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) 0, chronology52);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.DateTime dateTime57 = dateTime55.minus(readableDuration56);
        org.joda.time.DateTime.Property property58 = dateTime57.millisOfSecond();
        org.joda.time.DateTime dateTime60 = dateTime57.minus((long) (short) 10);
        org.joda.time.DateTime dateTime62 = dateTime57.withWeekOfWeekyear(19);
        org.joda.time.DateTime dateTime63 = partial36.toDateTime((org.joda.time.ReadableInstant) dateTime62);
        int int64 = dateTimeField34.getMinimumValue((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology65 = partial36.getChronology();
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial67 = partial36.minus(readablePeriod66);
        int[] intArray69 = chronology10.get((org.joda.time.ReadablePartial) partial67, (long) 32);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[UTC]" + "'", str11, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 12L + "'", long31 == 12L);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
    }

    @Test
    public void test10070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10070");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str1 = dateTimeFieldType0.getName();
        java.lang.String str2 = dateTimeFieldType0.getName();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType0.getDurationType();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        int int8 = partial5.compareTo((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology9 = partial5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Chronology chronology11 = chronology9.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.hourOfHalfday();
        boolean boolean14 = durationFieldType3.isSupported(chronology11);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readableDuration25);
        org.joda.time.Chronology chronology27 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.secondOfDay();
        org.joda.time.DurationField durationField29 = chronology27.weeks();
        org.joda.time.DurationField durationField30 = durationFieldType3.getField(chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = chronology27.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField33 = chronology27.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology27.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            long long37 = dateTimeField34.add((-2193075054L), 255611379600000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 255611379600000 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "halfdayOfDay" + "'", str1, "halfdayOfDay");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "halfdayOfDay" + "'", str2, "halfdayOfDay");
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test10071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10071");
        java.util.Locale locale1 = new java.util.Locale("property[millisofsecond]_HI!");
        org.junit.Assert.assertEquals(locale1.toString(), "property[millisofsecond]_hi!");
    }

    @Test
    public void test10072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10072");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property15 = dateTime11.era();
        org.joda.time.DateTime.Property property16 = dateTime11.secondOfDay();
        int int17 = property16.getLeapAmount();
        int int18 = property16.get();
        java.util.Locale locale20 = new java.util.Locale("[]");
        java.util.Set<java.lang.Character> charSet21 = locale20.getExtensionKeys();
        int int22 = property16.getMaximumTextLength(locale20);
        java.util.Locale locale23 = locale20.stripExtensions();
        java.util.Set<java.lang.Character> charSet24 = locale23.getExtensionKeys();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals(locale20.toString(), "[]");
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "[]");
        org.junit.Assert.assertNotNull(charSet24);
    }

    @Test
    public void test10073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10073");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekOfWeekyear();
        int int10 = dateTimeField8.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        boolean boolean18 = partial14.isAfter((org.joda.time.ReadablePartial) partial17);
        java.lang.String str19 = partial17.toString();
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) partial17, 53, locale21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        int int27 = partial24.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        boolean boolean30 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        java.lang.String str31 = partial29.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        org.joda.time.Partial partial33 = partial29.without(dateTimeFieldType32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial29.plus(readablePeriod34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = partial29.getFieldTypes();
        int[] intArray37 = partial29.getValues();
        boolean boolean38 = partial17.isEqual((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Partial partial39 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        int int45 = partial42.compareTo((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = partial42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = chronology46.withZone(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 0, chronology46);
        org.joda.time.DateTime dateTime51 = dateTime49.minusMinutes(1439);
        org.joda.time.DateTime dateTime52 = dateTime49.withLaterOffsetAtOverlap();
        java.lang.String str54 = dateTime52.toString("86399990");
        org.joda.time.DateTime dateTime55 = partial39.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        int int56 = dateTime55.getHourOfDay();
        boolean boolean58 = dateTime55.isEqual(25559L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "53" + "'", str22, "53");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "86399990" + "'", str54, "86399990");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test10074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10074");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfYear((int) 'a');
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        int int27 = partial24.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = partial24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 0, chronology28);
        org.joda.time.DateTime dateTime33 = dateTime31.withHourOfDay(0);
        org.joda.time.DateTime dateTime35 = dateTime33.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime35.toMutableDateTime();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readableDuration47);
        org.joda.time.DateTime.Property property49 = dateTime48.millisOfSecond();
        boolean boolean50 = mutableDateTime36.isBefore((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime52 = dateTime48.withYear(0);
        org.joda.time.Chronology chronology53 = dateTime52.getChronology();
        boolean boolean54 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime56 = dateTime19.withMillisOfDay(0);
        org.joda.time.DateTime dateTime57 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime60 = dateTime57.withDurationAdded(86409004L, (-19));
        org.joda.time.DateTime dateTime62 = dateTime57.minusMonths(34839994);
        org.joda.time.DateTimeZone dateTimeZone63 = dateTime57.getZone();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
    }

    @Test
    public void test10075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10075");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) 10);
        int[] intArray4 = partial3.getValues();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial3.getFieldTypes();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = partial8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology12);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.minus(readableDuration16);
        org.joda.time.Chronology chronology18 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfDay();
        org.joda.time.DurationField durationField20 = chronology18.seconds();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int int25 = partial22.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        boolean boolean28 = partial24.isAfter((org.joda.time.ReadablePartial) partial27);
        int[] intArray30 = chronology18.get((org.joda.time.ReadablePartial) partial24, (long) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        int int36 = partial33.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = partial33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 0, chronology37);
        org.joda.time.DateTime dateTime42 = dateTime40.withHourOfDay(0);
        int int43 = dateTime42.getCenturyOfEra();
        boolean boolean45 = dateTime42.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property46 = dateTime42.era();
        int int47 = property46.getMaximumValue();
        org.joda.time.DateTime dateTime48 = property46.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property46.getFieldType();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getRangeDurationType();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        int int55 = partial52.compareTo((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        boolean boolean58 = partial54.isAfter((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Partial partial59 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = partial54.getFormatter();
        org.joda.time.Chronology chronology61 = partial54.getChronology();
        boolean boolean62 = dateTimeFieldType49.isSupported(chronology61);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial63 = new org.joda.time.Partial(dateTimeFieldTypeArray5, intArray30, chronology61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Values array must be the same length as the types array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "secondOfDay" + "'", str1, "secondOfDay");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[10]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 19 + "'", int43 == 19);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(dateTimeFormatter60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test10076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10076");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear(23);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readableDuration20);
        org.joda.time.Chronology chronology22 = dateTime19.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        int int27 = partial24.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = partial24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.weekOfWeekyear();
        int int33 = dateTimeField31.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        boolean boolean41 = partial37.isAfter((org.joda.time.ReadablePartial) partial40);
        java.lang.String str42 = partial40.toString();
        java.util.Locale locale44 = null;
        java.lang.String str45 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) partial40, 53, locale44);
        long long47 = chronology22.set((org.joda.time.ReadablePartial) partial40, (long) 0);
        org.joda.time.DateTimeField dateTimeField48 = chronology22.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter9.withChronology(chronology22);
        org.joda.time.Chronology chronology50 = dateTimeFormatter49.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter49.withDefaultYear(316);
        org.joda.time.DateTimeZone dateTimeZone53 = dateTimeFormatter49.getZone();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 53 + "'", int33 == 53);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "53" + "'", str45, "53");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNull(dateTimeZone53);
    }

    @Test
    public void test10077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10077");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        int int16 = property12.getLeapAmount();
        org.joda.time.DateTime dateTime17 = property12.withMinimumValue();
        org.joda.time.DateTime dateTime19 = dateTime17.withCenturyOfEra((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTime dateTime22 = dateTime19.withFieldAdded(durationFieldType20, 1970);
        long long23 = dateTime19.getMillis();
        int int24 = dateTime19.getYearOfEra();
        int int25 = dateTime19.getEra();
        org.joda.time.DateTime.Property property26 = dateTime19.weekyear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-56802470400000L) + "'", long23 == (-56802470400000L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 170 + "'", int24 == 170);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test10078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10078");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.Chronology chronology8 = partial1.getChronology();
        org.joda.time.Partial partial9 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        int int14 = partial11.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = partial11.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean17 = partial11.isSupported(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = partial11.getChronology();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial11.plus(readablePeriod19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.minus(readableDuration31);
        org.joda.time.DateTime.Property property33 = dateTime32.millisOfSecond();
        org.joda.time.DateTime dateTime35 = dateTime32.minus((long) (short) 10);
        org.joda.time.DateTime dateTime37 = dateTime32.withWeekOfWeekyear(19);
        org.joda.time.DateTime dateTime38 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean39 = partial9.isEqual((org.joda.time.ReadablePartial) partial11);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial11.plus(readablePeriod40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        int int46 = partial43.compareTo((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology47 = partial43.getChronology();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        int int53 = partial50.compareTo((org.joda.time.ReadablePartial) partial52);
        org.joda.time.Chronology chronology54 = partial50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.Chronology chronology56 = chronology54.withZone(dateTimeZone55);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 0, chronology54);
        org.joda.time.DateTime dateTime59 = dateTime57.withHourOfDay(0);
        org.joda.time.DateTime dateTime60 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateMidnight dateMidnight61 = dateTime60.toDateMidnight();
        org.joda.time.DateTime dateTime63 = dateTime60.plusWeeks((int) 'u');
        org.joda.time.DateTime dateTime65 = dateTime63.plusMillis((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int67 = dateTime63.get(dateTimeFieldType66);
        boolean boolean68 = partial11.isSupported(dateTimeFieldType66);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType70 = partial11.getFieldType((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 72 + "'", int67 == 72);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test10079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10079");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("zh", strMap1);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.parse("ko");
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean6 = locale5.hasExtensions();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode8 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strSet7, filteringMode8);
        java.util.Locale.FilteringMode filteringMode10 = null;
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strList9, filteringMode10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap12);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.parse("era", strMap15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList16, strMap17);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.parse("fr-CA");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList20, strMap21);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!", "fran\347ais (Canada)" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        java.lang.String str35 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strList33);
        java.util.Locale locale36 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale37 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.lang.String str39 = locale36.toLanguageTag();
        java.lang.String str40 = locale36.getISO3Country();
        java.util.Locale locale41 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale42 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str43 = locale41.getDisplayName(locale42);
        java.lang.String str44 = locale41.toLanguageTag();
        java.lang.String str45 = locale41.toLanguageTag();
        java.util.Locale locale46 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str47 = locale46.getCountry();
        java.util.Locale locale48 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale49 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str50 = locale48.getDisplayName(locale49);
        java.lang.String str51 = locale48.toLanguageTag();
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale53 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        java.lang.String str55 = locale52.toLanguageTag();
        java.lang.String str56 = locale52.toLanguageTag();
        boolean boolean57 = locale52.hasExtensions();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        int int63 = partial60.compareTo((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Chronology chronology64 = partial60.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.Chronology chronology66 = chronology64.withZone(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) 0, chronology64);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.DateTime dateTime69 = dateTime67.minus(readableDuration68);
        org.joda.time.DateTime.Property property70 = dateTime69.millisOfSecond();
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        int int72 = property70.getMaximumTextLength(locale71);
        java.util.Locale locale73 = java.util.Locale.CANADA_FRENCH;
        boolean boolean74 = locale73.hasExtensions();
        java.util.Locale[] localeArray75 = new java.util.Locale[] { locale36, locale41, locale46, locale48, locale52, locale71, locale73 };
        java.util.ArrayList<java.util.Locale> localeList76 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList76, localeArray75);
        java.util.Locale.FilteringMode filteringMode78 = null;
        java.util.List<java.util.Locale> localeList79 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.util.Locale>) localeList76, filteringMode78);
        java.util.List<java.util.Locale> localeList80 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList79);
        java.util.List<java.util.Locale> localeList81 = java.util.Locale.filter(languageRangeList20, (java.util.Collection<java.util.Locale>) localeList79);
        java.util.List<java.util.Locale> localeList82 = java.util.Locale.filter(languageRangeList18, (java.util.Collection<java.util.Locale>) localeList81);
        java.util.List<java.util.Locale> localeList83 = java.util.Locale.filter(languageRangeList13, (java.util.Collection<java.util.Locale>) localeList82);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + filteringMode8 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode8.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(languageRangeList16);
        org.junit.Assert.assertNotNull(languageRangeList18);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(languageRangeList22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "fran\347ais (Canada)" + "'", str38, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "fr-CA" + "'", str39, "fr-CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "CAN" + "'", str40, "CAN");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "fran\347ais (Canada)" + "'", str43, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fr-CA" + "'", str44, "fr-CA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "fr-CA" + "'", str45, "fr-CA");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "CA" + "'", str47, "CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "fran\347ais (Canada)" + "'", str50, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "fr-CA" + "'", str51, "fr-CA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "fran\347ais (Canada)" + "'", str54, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "fr-CA" + "'", str55, "fr-CA");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "fr-CA" + "'", str56, "fr-CA");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(localeList79);
        org.junit.Assert.assertNotNull(localeList80);
        org.junit.Assert.assertNotNull(localeList81);
        org.junit.Assert.assertNotNull(localeList82);
        org.junit.Assert.assertNotNull(localeList83);
    }

    @Test
    public void test10080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10080");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.DateTime.Property property13 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime15 = dateTime11.plus((long) 5);
        org.joda.time.Instant instant16 = dateTime15.toInstant();
        org.joda.time.DateTime dateTime18 = dateTime15.withMillisOfDay(43200);
        int int19 = dateTime18.getYearOfCentury();
        org.joda.time.DateTime dateTime21 = dateTime18.minusDays(84300000);
        int int22 = dateTime18.getMillisOfDay();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 70 + "'", int19 == 70);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 43200 + "'", int22 == 43200);
    }

    @Test
    public void test10081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10081");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        int int20 = dateTime19.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.minus(readablePeriod21);
        org.joda.time.DateTime.Property property23 = dateTime19.secondOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfEvenCopy();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        int int30 = partial27.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = partial27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 0, chronology31);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.minus(readableDuration35);
        org.joda.time.Chronology chronology37 = dateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfDay();
        org.joda.time.DurationField durationField39 = chronology37.seconds();
        org.joda.time.DurationField durationField40 = chronology37.hours();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.era();
        org.joda.time.DateTime dateTime42 = dateTime24.toDateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField43 = chronology37.secondOfMinute();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        int int50 = partial47.compareTo((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = partial47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.Chronology chronology53 = chronology51.withZone(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) 0, chronology51);
        org.joda.time.DateTime dateTime56 = dateTime54.withHourOfDay(0);
        int int57 = dateTime56.getCenturyOfEra();
        boolean boolean59 = dateTime56.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property60 = dateTime56.era();
        int int61 = property60.getMaximumValue();
        org.joda.time.DateTime dateTime62 = property60.roundHalfCeilingCopy();
        org.joda.time.format.DateTimePrinter dateTimePrinter63 = null;
        org.joda.time.format.DateTimeParser dateTimeParser64 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter63, dateTimeParser64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter65.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser67 = dateTimeFormatter65.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter68 = dateTimeFormatter65.getPrinter();
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        boolean boolean70 = locale69.hasExtensions();
        java.lang.String str71 = locale69.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter65.withLocale(locale69);
        int int73 = property60.getMaximumTextLength(locale69);
        java.lang.String str74 = locale69.getVariant();
        java.lang.String str75 = dateTimeField43.getAsShortText(365, locale69);
        long long77 = dateTimeField43.roundCeiling((long) 7);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 19 + "'", int57 == 19);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertNull(dateTimeParser67);
        org.junit.Assert.assertNull(dateTimePrinter68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "365" + "'", str75, "365");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1000L + "'", long77 == 1000L);
    }

    @Test
    public void test10082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10082");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str1 = locale0.getCountry();
        java.lang.String str2 = locale0.getISO3Country();
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleAttributes();
        boolean boolean4 = locale0.hasExtensions();
        java.lang.String str5 = locale0.getDisplayVariant();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CA" + "'", str1, "CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "CAN" + "'", str2, "CAN");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strSet6);
    }

    @Test
    public void test10083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10083");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        int int20 = dateTime19.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.minus(readablePeriod21);
        org.joda.time.DateTime.Property property23 = dateTime19.secondOfDay();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        int int29 = partial26.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = partial26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology30);
        org.joda.time.DateTime dateTime35 = dateTime33.withHourOfDay(0);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(10);
        boolean boolean38 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime33);
        int int39 = dateTime19.getMinuteOfDay();
        org.joda.time.DateTime.Property property40 = dateTime19.centuryOfEra();
        org.joda.time.DateTime.Property property41 = dateTime19.hourOfDay();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = partial42.getFieldTypes();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        int int48 = partial45.compareTo((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        boolean boolean51 = partial47.isAfter((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        int int57 = partial54.compareTo((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Chronology chronology58 = partial54.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 0, chronology58);
        org.joda.time.DateTime dateTime63 = dateTime61.withHourOfDay(0);
        org.joda.time.DateTime dateTime65 = dateTime63.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime66 = dateTime65.toMutableDateTime();
        org.joda.time.DateTime dateTime67 = partial47.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean69 = partial47.isSupported(dateTimeFieldType68);
        int int70 = partial42.indexOf(dateTimeFieldType68);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = new org.joda.time.Partial(chronology75);
        int int77 = partial74.compareTo((org.joda.time.ReadablePartial) partial76);
        org.joda.time.Chronology chronology78 = partial74.getChronology();
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.Chronology chronology80 = chronology78.withZone(dateTimeZone79);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((long) 0, chronology78);
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.DateTime dateTime83 = dateTime81.minus(readableDuration82);
        org.joda.time.Chronology chronology84 = dateTime81.getChronology();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.Partial partial86 = new org.joda.time.Partial(chronology85);
        long long88 = chronology84.set((org.joda.time.ReadablePartial) partial86, (long) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        long long92 = chronology84.add(readablePeriod89, (long) (byte) 10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField93 = dateTimeFieldType71.getField(chronology84);
        boolean boolean94 = dateTimeFieldType68.isSupported(chronology84);
        org.joda.time.DurationField durationField95 = chronology84.days();
        boolean boolean96 = property41.equals((java.lang.Object) durationField95);
        int int97 = property41.get();
        org.joda.time.DateTime dateTime98 = property41.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 10L + "'", long92 == 10L);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(durationField95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertNotNull(dateTime98);
    }

    @Test
    public void test10084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10084");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DurationField durationField7 = durationFieldType0.getField(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = chronology6.add(readablePeriod10, (long) 4, 23);
        org.joda.time.DateTimeField dateTimeField14 = chronology6.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology6.getZone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekOfWeekyear();
        java.util.Locale locale25 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str27 = locale25.getDisplayName(locale26);
        int int28 = dateTimeField24.getMaximumTextLength(locale26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = partial31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 0, chronology35);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.minus(readableDuration39);
        org.joda.time.Chronology chronology41 = dateTime38.getChronology();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        long long45 = chronology41.set((org.joda.time.ReadablePartial) partial43, (long) (byte) -1);
        int int46 = dateTimeField24.getMinimumValue((org.joda.time.ReadablePartial) partial43);
        org.joda.time.DateTimeField[] dateTimeFieldArray47 = partial43.getFields();
        int[] intArray49 = chronology6.get((org.joda.time.ReadablePartial) partial43, (long) 35);
        org.joda.time.DateTimeField dateTimeField50 = chronology6.era();
        org.joda.time.DateTimeField dateTimeField51 = chronology6.monthOfYear();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 4L + "'", long13 == 4L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "fran\347ais (Canada)" + "'", str27, "fran\347ais (Canada)");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test10085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10085");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfYear((int) 'a');
        org.joda.time.DateTime dateTime23 = dateTime19.withYearOfCentury((int) ' ');
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime23.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
    }

    @Test
    public void test10086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10086");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.minus(readableDuration11);
        org.joda.time.DateTime dateTime14 = dateTime10.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime16 = dateTime10.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks(19);
        org.joda.time.DateTime dateTime20 = dateTime16.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DurationField durationField28 = durationFieldType21.getField(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.dayOfMonth();
        org.joda.time.DateTime dateTime31 = dateTime20.toDateTime(chronology27);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(obj0, chronology27);
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime32.toMutableDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = dateTime32.withMonthOfYear(317);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 317 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime33);
    }

    @Test
    public void test10087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10087");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DurationField durationField20 = durationFieldType13.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime11.withChronology(chronology19);
        org.joda.time.DateTime dateTime25 = dateTime22.withDurationAdded(1L, 0);
        org.joda.time.DateTime.Property property26 = dateTime25.secondOfDay();
        java.lang.String str27 = property26.getAsShortText();
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.lang.String str30 = locale28.getDisplayCountry(locale29);
        int int31 = property26.getMaximumTextLength(locale29);
        org.joda.time.format.DateTimePrinter dateTimePrinter32 = null;
        org.joda.time.format.DateTimeParser dateTimeParser33 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter32, dateTimeParser33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter34.withOffsetParsed();
        org.joda.time.Chronology chronology36 = dateTimeFormatter35.getChronolgy();
        org.joda.time.Chronology chronology37 = dateTimeFormatter35.getChronolgy();
        java.util.Locale locale38 = dateTimeFormatter35.getLocale();
        java.util.Locale locale40 = java.util.Locale.forLanguageTag("0022-02-11T09:36:30.397Z");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter35.withLocale(locale40);
        java.lang.String str42 = locale40.getLanguage();
        java.lang.String str43 = property26.getAsText(locale40);
        java.lang.String str44 = locale40.getDisplayLanguage();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0" + "'", str27, "0");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNull(chronology36);
        org.junit.Assert.assertNull(chronology37);
        org.junit.Assert.assertNull(locale38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0" + "'", str43, "0");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test10088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10088");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime15 = dateTime11.withEarlierOffsetAtOverlap();
        int int16 = dateTime15.getYearOfEra();
        java.lang.String str17 = dateTime15.toString();
        boolean boolean19 = dateTime15.isAfter((-59106067200000L));
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime15.minus(readableDuration20);
        int int22 = dateTime21.getEra();
        org.joda.time.DateTime dateTime24 = dateTime21.withYearOfCentury(18);
        org.joda.time.DateTime dateTime26 = dateTime21.plusDays(34945950);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str17, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test10089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10089");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology7 = partial6.getChronology();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology7);
        int int9 = dateTime8.getMinuteOfDay();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 582 + "'", int9 == 582);
    }

    @Test
    public void test10090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10090");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str14 = dateTimeFieldType13.getName();
        int int15 = dateTime9.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime17 = dateTime9.minusMinutes(4);
        int int18 = dateTime9.getWeekyear();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime9.plus(readableDuration19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusMonths((int) '#');
        org.joda.time.DateTime dateTime24 = dateTime20.minusMinutes(12);
        org.joda.time.DateTime dateTime26 = dateTime20.plusWeeks(34);
        org.joda.time.DateTime.Property property27 = dateTime26.minuteOfDay();
        org.joda.time.format.DateTimePrinter dateTimePrinter28 = null;
        org.joda.time.format.DateTimeParser dateTimeParser29 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter28, dateTimeParser29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter30.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser32 = dateTimeFormatter30.getParser();
        int int33 = dateTimeFormatter30.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter30.withZoneUTC();
        org.joda.time.Chronology chronology35 = dateTimeFormatter34.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter34.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter34.withPivotYear((java.lang.Integer) 8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter34.withPivotYear((java.lang.Integer) 317);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter34.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter42.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter43.withPivotYear((-694733));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter45.withPivotYear(5706);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter45.withDefaultYear(15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = dateTime26.toString(dateTimeFormatter45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "halfdayOfDay" + "'", str14, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNull(dateTimeParser32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2000 + "'", int33 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
    }

    @Test
    public void test10091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10091");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property15 = dateTime11.era();
        int int16 = property15.getMaximumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfCeilingCopy();
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = null;
        org.joda.time.format.DateTimeParser dateTimeParser19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter18, dateTimeParser19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter20.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser22 = dateTimeFormatter20.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = dateTimeFormatter20.getPrinter();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale24.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter20.withLocale(locale24);
        int int28 = property15.getMaximumTextLength(locale24);
        int int29 = property15.get();
        org.joda.time.DateTime dateTime30 = property15.withMaximumValue();
        org.joda.time.DateTime.Property property31 = dateTime30.year();
        org.joda.time.Chronology chronology32 = dateTime30.getChronology();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = partial34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.hourOfDay();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.minuteOfHour();
        int int44 = dateTimeField42.getMinimumValue((long) (byte) 0);
        long long47 = dateTimeField42.addWrapField(100L, 3);
        boolean boolean49 = dateTimeField42.isLeap(12L);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        int int54 = partial51.compareTo((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        int int59 = partial56.compareTo((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology60 = partial56.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean62 = partial56.isSupported(dateTimeFieldType61);
        boolean boolean63 = partial53.isEqual((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        int int68 = partial65.compareTo((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        boolean boolean71 = partial67.isAfter((org.joda.time.ReadablePartial) partial70);
        boolean boolean72 = partial56.isAfter((org.joda.time.ReadablePartial) partial67);
        int int73 = dateTimeField42.getMaximumValue((org.joda.time.ReadablePartial) partial56);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.Partial partial75 = partial56.minus(readablePeriod74);
        int int76 = partial56.size();
        long long78 = chronology32.set((org.joda.time.ReadablePartial) partial56, 700564463999999L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNull(dateTimeParser22);
        org.junit.Assert.assertNull(dateTimePrinter23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 180100L + "'", long47 == 180100L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 59 + "'", int73 == 59);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 700564463999999L + "'", long78 == 700564463999999L);
    }

    @Test
    public void test10092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10092");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTime dateTime14 = dateTime9.withWeekyear(23);
        org.joda.time.DateTime.Property property15 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType17.getDurationType();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = chronology24.era();
        org.joda.time.DurationField durationField28 = durationFieldType18.getField(chronology24);
        org.joda.time.DateTime dateTime30 = dateTime16.withFieldAdded(durationFieldType18, 1970);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = partial31.getFormatter();
        org.joda.time.Chronology chronology33 = partial31.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = partial31.getFieldTypes();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        int int39 = partial36.compareTo((org.joda.time.ReadablePartial) partial38);
        java.lang.String str40 = partial36.toStringList();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial36.withPeriodAdded(readablePeriod41, 999);
        int[] intArray44 = partial36.getValues();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        int int50 = partial47.compareTo((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = partial47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.Chronology chronology53 = chronology51.withZone(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) 0, chronology51);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.minus(readableDuration55);
        org.joda.time.Chronology chronology57 = dateTime54.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.dayOfWeek();
        org.joda.time.DurationField durationField60 = chronology57.seconds();
        org.joda.time.Partial partial61 = new org.joda.time.Partial(dateTimeFieldTypeArray34, intArray44, chronology57);
        org.joda.time.DurationField durationField62 = chronology57.centuries();
        org.joda.time.DateTime dateTime63 = dateTime16.withChronology(chronology57);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test10093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10093");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property15 = dateTime11.era();
        org.joda.time.DateTime.Property property16 = dateTime11.secondOfDay();
        org.joda.time.DateTime dateTime18 = dateTime11.minusHours(0);
        org.joda.time.DateTime dateTime20 = dateTime11.withYearOfEra(317);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.minus(readableDuration31);
        org.joda.time.Chronology chronology33 = dateTime30.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str35 = dateTimeFieldType34.getName();
        int int36 = dateTime30.get(dateTimeFieldType34);
        org.joda.time.DateTime dateTime38 = dateTime30.minusMinutes(4);
        org.joda.time.Instant instant39 = dateTime38.toInstant();
        org.joda.time.DateTime.Property property40 = dateTime38.weekyear();
        org.joda.time.DateTime dateTime42 = property40.addToCopy((long) (-292275054));
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property40.getFieldType();
        org.joda.time.DateTime dateTime45 = dateTime11.withField(dateTimeFieldType43, (int) (short) 10);
        org.joda.time.DateTime dateTime47 = dateTime11.plusHours((int) (byte) 10);
        int int48 = dateTime47.getDayOfWeek();
        org.joda.time.DateTime dateTime50 = dateTime47.withMillis((-2193075054L));
        org.joda.time.Instant instant51 = dateTime50.toInstant();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "halfdayOfDay" + "'", str35, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(instant51);
    }

    @Test
    public void test10094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10094");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        int int20 = dateTime19.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str22 = dateTimeFieldType21.getName();
        boolean boolean23 = dateTime19.isSupported(dateTimeFieldType21);
        int int24 = dateTime19.getDayOfMonth();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        int int30 = partial27.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = partial27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 0, chronology31);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.minus(readableDuration35);
        org.joda.time.Chronology chronology37 = dateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfMonth();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        int int43 = partial40.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        boolean boolean46 = partial42.isAfter((org.joda.time.ReadablePartial) partial45);
        java.lang.String str47 = partial45.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        org.joda.time.Partial partial49 = partial45.without(dateTimeFieldType48);
        java.util.Locale locale51 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str53 = locale51.getDisplayName(locale52);
        java.lang.String str54 = locale51.getDisplayVariant();
        java.util.Locale locale55 = locale51.stripExtensions();
        java.lang.String str56 = dateTimeField38.getAsText((org.joda.time.ReadablePartial) partial45, 53, locale55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        int int62 = partial59.compareTo((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Chronology chronology63 = partial59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.Chronology chronology65 = chronology63.withZone(dateTimeZone64);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) 0, chronology63);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.DateTime dateTime68 = dateTime66.minus(readableDuration67);
        org.joda.time.DateTime dateTime70 = dateTime66.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime72 = dateTime66.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime74 = dateTime72.minusWeeks(19);
        boolean boolean75 = partial45.isMatch((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime77 = dateTime72.minusMillis(53);
        int int78 = dateTime77.getSecondOfMinute();
        boolean boolean79 = dateTime19.isBefore((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTime dateTime81 = dateTime77.minusWeeks(33019053);
        org.joda.time.DateTime dateTime82 = dateTime77.withTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime84 = dateTime82.withDayOfYear(1900);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1900 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "halfdayOfDay" + "'", str22, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "fran\347ais (Canada)" + "'", str53, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "53" + "'", str56, "53");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 59 + "'", int78 == 59);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
    }

    @Test
    public void test10095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10095");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(50, (-1), 317, 1852, 1969, 11, 1859);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1852 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10096");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("30971");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=30971");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10097");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 728);
    }

    @Test
    public void test10098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10098");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str14 = dateTimeFieldType13.getName();
        int int15 = dateTime9.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime17 = dateTime9.minusMinutes(4);
        java.lang.String str18 = dateTime9.toString();
        org.joda.time.DateTime dateTime20 = dateTime9.minusWeeks((int) (short) 100);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime9.plus(readableDuration21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        int int28 = partial25.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = partial25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Chronology chronology31 = chronology29.withZone(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 0, chronology29);
        org.joda.time.DateTime dateTime34 = dateTime32.withHourOfDay(0);
        int int35 = dateTime34.getCenturyOfEra();
        boolean boolean37 = dateTime34.equals((java.lang.Object) '4');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded(readableDuration38, 1);
        org.joda.time.DateTime.Property property41 = dateTime34.centuryOfEra();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        int int47 = partial44.compareTo((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology48 = partial44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) 0, chronology48);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.DateTime dateTime53 = dateTime51.minus(readableDuration52);
        org.joda.time.DateTime dateTime55 = dateTime51.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime57 = dateTime51.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime59 = dateTime57.minusWeeks(19);
        int int60 = dateTime59.getSecondOfMinute();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        int int66 = partial63.compareTo((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology67 = partial63.getChronology();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.Chronology chronology69 = chronology67.withZone(dateTimeZone68);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) 0, chronology67);
        org.joda.time.DateTime dateTime72 = dateTime70.withHourOfDay(0);
        org.joda.time.DateTime dateTime74 = dateTime72.withYear((int) 'a');
        boolean boolean75 = dateTime72.isEqualNow();
        org.joda.time.DateMidnight dateMidnight76 = dateTime72.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone77 = dateMidnight76.getZone();
        org.joda.time.DateTime dateTime78 = dateTime59.withZoneRetainFields(dateTimeZone77);
        org.joda.time.DateTime.Property property79 = dateTime78.weekOfWeekyear();
        boolean boolean80 = dateTime78.isAfterNow();
        org.joda.time.DateTime dateTime81 = dateTime78.toDateTime();
        org.joda.time.DateTime.Property property82 = dateTime81.millisOfSecond();
        org.joda.time.DateTime dateTime84 = dateTime81.plusYears((int) (short) -1);
        org.joda.time.DateTime.Property property85 = dateTime81.minuteOfDay();
        org.joda.time.DateTime dateTime87 = property85.addToCopy(9);
        boolean boolean88 = dateTime34.isAfter((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.DateTimeZone dateTimeZone89 = dateTime87.getZone();
        org.joda.time.MutableDateTime mutableDateTime90 = dateTime22.toMutableDateTime(dateTimeZone89);
        int int91 = dateTime22.getYearOfEra();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "halfdayOfDay" + "'", str14, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str18, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 19 + "'", int35 == 19);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertNotNull(mutableDateTime90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1970 + "'", int91 == 1970);
    }

    @Test
    public void test10099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10099");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.era();
        org.joda.time.DurationField durationField7 = chronology5.weeks();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.DateTime dateTime11 = dateTime8.withMonthOfYear(5);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.millisOfDay();
        java.lang.String str15 = dateTimeField14.getName();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "millisOfDay" + "'", str15, "millisOfDay");
    }

    @Test
    public void test10100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10100");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.minuteOfHour();
        org.joda.time.DurationField durationField10 = chronology7.centuries();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.minuteOfHour();
        org.joda.time.DurationField durationField14 = chronology7.years();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test10101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10101");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        long long12 = dateTime11.getMillis();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        boolean boolean20 = partial16.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.DateTime dateTime32 = dateTime30.withHourOfDay(0);
        org.joda.time.DateTime dateTime34 = dateTime32.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime34.toMutableDateTime();
        org.joda.time.DateTime dateTime36 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readableDuration47);
        org.joda.time.DateTime dateTime50 = dateTime46.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime52 = dateTime46.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime54 = dateTime52.minusWeeks(19);
        org.joda.time.DateTime dateTime56 = dateTime52.plusMillis((int) '#');
        int int57 = dateTime56.getDayOfMonth();
        boolean boolean58 = partial16.equals((java.lang.Object) dateTime56);
        boolean boolean59 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime61 = dateTime56.plusSeconds(2);
        org.joda.time.DateTime.Property property62 = dateTime61.minuteOfHour();
        org.joda.time.DateTime dateTime64 = property62.addWrapFieldToCopy((int) '#');
        java.lang.String str65 = property62.getAsString();
        org.joda.time.DateTime dateTime66 = property62.getDateTime();
        org.joda.time.DateTime dateTime67 = property62.roundCeilingCopy();
        org.joda.time.DateTime.Property property68 = dateTime67.weekyear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0" + "'", str65, "0");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
    }

    @Test
    public void test10102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10102");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        int int8 = partial5.compareTo((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology9 = partial5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Chronology chronology11 = chronology9.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = chronology11.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter3.withZone(dateTimeZone13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        int int19 = partial16.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = partial16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Chronology chronology22 = chronology20.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology22.getZone();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter3.withZone(dateTimeZone24);
        org.joda.time.format.DateTimePrinter dateTimePrinter27 = dateTimeFormatter26.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeFormatter26.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter26.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter26.withDefaultYear(86399);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter26.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.parse("0022-02-11T09:36:09.764Z", dateTimeFormatter32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(dateTimePrinter27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
    }

    @Test
    public void test10103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10103");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.months();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.monthOfYear();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField17 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology12.minuteOfDay();
        int int20 = dateTimeField18.get(0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test10104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10104");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        org.joda.time.DateTime dateTime13 = dateTime11.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTime();
        org.joda.time.DateTime.Property property15 = dateTime13.weekyear();
        org.joda.time.DateTime.Property property16 = dateTime13.secondOfDay();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test10105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10105");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.minus(readableDuration17);
        org.joda.time.DateTime dateTime20 = dateTime16.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime22 = dateTime16.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks(19);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '#');
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfYear((int) 'a');
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = partial31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 0, chronology35);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        int int44 = partial41.compareTo((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = partial41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Chronology chronology47 = chronology45.withZone(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 0, chronology45);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.minus(readableDuration49);
        org.joda.time.Chronology chronology51 = dateTime48.getChronology();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        long long55 = chronology51.set((org.joda.time.ReadablePartial) partial53, (long) (byte) -1);
        int[] intArray57 = chronology35.get((org.joda.time.ReadablePartial) partial53, (long) ' ');
        org.joda.time.DurationField durationField58 = chronology35.eras();
        org.joda.time.DateTime dateTime59 = dateTime26.withChronology(chronology35);
        org.joda.time.DateTimeField dateTimeField60 = chronology35.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(42, 274, (-27409540), (int) '#', (int) (short) 1, (int) (short) 10, 2000, chronology35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeField60);
    }

    @Test
    public void test10106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10106");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) 'x');
        boolean boolean15 = dateTime13.isEqual((long) 86399999);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        int int21 = partial18.compareTo((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = partial18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Chronology chronology24 = chronology22.withZone(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 0, chronology22);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.minus(readableDuration26);
        org.joda.time.DateTime dateTime29 = dateTime25.withYearOfEra((int) 'x');
        int int30 = dateTime29.getWeekOfWeekyear();
        org.joda.time.Instant instant31 = dateTime29.toInstant();
        org.joda.time.DateTime dateTime33 = dateTime29.withMillis(180100L);
        int int34 = dateTime29.getYearOfEra();
        org.joda.time.DateTime dateTime36 = dateTime29.withWeekyear((int) (short) 100);
        boolean boolean37 = dateTime13.isAfter((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime39 = dateTime13.plusDays((-27409537));
        org.joda.time.DateTime dateTime40 = dateTime39.withLaterOffsetAtOverlap();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 120 + "'", int34 == 120);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test10107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10107");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        boolean boolean7 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        int int13 = partial10.compareTo((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = partial10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Chronology chronology16 = chronology14.withZone(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 0, chronology14);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        org.joda.time.DateTime dateTime21 = dateTime19.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime21.toMutableDateTime();
        org.joda.time.DateTime dateTime23 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        int int29 = partial26.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = partial26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology30);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.minus(readableDuration34);
        org.joda.time.DateTime dateTime37 = dateTime33.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime39 = dateTime33.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime41 = dateTime39.minusWeeks(19);
        org.joda.time.DateTime dateTime43 = dateTime39.plusMillis((int) '#');
        int int44 = dateTime43.getDayOfMonth();
        boolean boolean45 = partial3.equals((java.lang.Object) dateTime43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        int int50 = partial47.compareTo((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = partial47.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean53 = partial47.isSupported(dateTimeFieldType52);
        int int54 = dateTime43.get(dateTimeFieldType52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        int int60 = partial57.compareTo((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology61 = partial57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.Chronology chronology63 = chronology61.withZone(dateTimeZone62);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) 0, chronology61);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.DateTime dateTime66 = dateTime64.minus(readableDuration65);
        org.joda.time.Chronology chronology67 = dateTime64.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str69 = dateTimeFieldType68.getName();
        int int70 = dateTime64.get(dateTimeFieldType68);
        org.joda.time.DateTime dateTime72 = dateTime64.minusMinutes(4);
        org.joda.time.Instant instant73 = dateTime72.toInstant();
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((java.lang.Object) dateTime72);
        boolean boolean75 = dateTime43.equals((java.lang.Object) dateTime74);
        org.joda.time.Instant instant76 = dateTime43.toInstant();
        org.joda.time.DateTime dateTime78 = dateTime43.minusMillis(291);
        org.joda.time.DateTime dateTime79 = dateTime78.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime82 = dateTime80.minusMillis(19);
        int int83 = dateTime78.compareTo((org.joda.time.ReadableInstant) dateTime80);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "halfdayOfDay" + "'", str69, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
    }

    @Test
    public void test10108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10108");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder2.setExtension('x', "9");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.removeUnicodeLocaleAttribute("Property[dayOfWeek]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: Property[dayOfWeek] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test10109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10109");
        java.util.Locale.Category category0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.DateTime dateTime12 = dateTime10.withHourOfDay(0);
        int int13 = dateTime12.getCenturyOfEra();
        boolean boolean15 = dateTime12.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property16 = dateTime12.era();
        org.joda.time.DateTime.Property property17 = dateTime12.secondOfDay();
        int int18 = property17.getLeapAmount();
        int int19 = property17.get();
        java.util.Locale locale21 = new java.util.Locale("[]");
        java.util.Set<java.lang.Character> charSet22 = locale21.getExtensionKeys();
        int int23 = property17.getMaximumTextLength(locale21);
        java.util.Locale locale24 = locale21.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(category0, locale24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Category cannot be NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 19 + "'", int13 == 19);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals(locale21.toString(), "[]");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "[]");
    }

    @Test
    public void test10110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10110");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology7.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        java.lang.String str13 = dateTime10.toString("86399980");
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime10.plus(readablePeriod14);
        int int16 = dateTime15.getDayOfYear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-11T09:42:52.532Z" + "'", str11, "2022-02-11T09:42:52.532Z");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "86399980" + "'", str13, "86399980");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 42 + "'", int16 == 42);
    }

    @Test
    public void test10111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10111");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.Chronology chronology14 = chronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        java.lang.String str18 = partial17.toString();
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeField15.getAsShortText((org.joda.time.ReadablePartial) partial17, (int) 'u', locale20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial17.plus(readablePeriod22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial17.withPeriodAdded(readablePeriod24, 2);
        org.joda.time.Partial partial27 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial26);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "117" + "'", str21, "117");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial26);
    }

    @Test
    public void test10112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10112");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        int int14 = partial11.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = partial11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter9.withZone(dateTimeZone19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withZone(dateTimeZone19);
        boolean boolean22 = dateTimeFormatter2.isPrinter();
        boolean boolean23 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter2.withZoneUTC();
        java.util.Locale locale25 = dateTimeFormatter2.getLocale();
        org.joda.time.Chronology chronology26 = dateTimeFormatter2.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(locale25);
        org.junit.Assert.assertNull(chronology26);
    }

    @Test
    public void test10113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10113");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime15 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property16 = dateTime11.year();
        org.joda.time.DateTime dateTime17 = property16.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime18 = property16.getDateTime();
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int int25 = partial22.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = partial22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.Chronology chronology28 = chronology26.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 0, chronology26);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.minus(readableDuration30);
        org.joda.time.Chronology chronology32 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.dayOfMonth();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        boolean boolean41 = partial37.isAfter((org.joda.time.ReadablePartial) partial40);
        java.lang.String str42 = partial40.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        org.joda.time.Partial partial44 = partial40.without(dateTimeFieldType43);
        java.util.Locale locale46 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale47 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str48 = locale46.getDisplayName(locale47);
        java.lang.String str49 = locale46.getDisplayVariant();
        java.util.Locale locale50 = locale46.stripExtensions();
        java.lang.String str51 = dateTimeField33.getAsText((org.joda.time.ReadablePartial) partial40, 53, locale50);
        java.lang.String str52 = locale19.getDisplayLanguage(locale50);
        java.lang.String str53 = property16.getAsShortText(locale50);
        org.joda.time.DurationField durationField54 = property16.getLeapDurationField();
        org.joda.time.DateTime dateTime56 = property16.addWrapFieldToCopy((-973006525));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "fran\347ais (Canada)" + "'", str48, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "53" + "'", str51, "53");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "fran\347ais" + "'", str52, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970" + "'", str53, "1970");
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test10114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10114");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str14 = dateTimeFieldType13.getName();
        int int15 = dateTime9.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime17 = dateTime9.minusMinutes(4);
        int int18 = dateTime9.getWeekyear();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime9.plus(readableDuration19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.withDurationAdded(readableDuration21, (int) (short) -1);
        boolean boolean25 = dateTime20.isBefore((long) 720);
        boolean boolean27 = dateTime20.isAfter(0L);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        int int33 = partial30.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = partial30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 0, chronology34);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.minus(readableDuration38);
        org.joda.time.DateTime.Property property40 = dateTime39.millisOfSecond();
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        int int42 = property40.getMaximumTextLength(locale41);
        long long43 = property40.remainder();
        int int44 = property40.getLeapAmount();
        org.joda.time.DateTime dateTime45 = property40.withMinimumValue();
        org.joda.time.DateTime dateTime47 = dateTime45.withCenturyOfEra((int) (short) 1);
        boolean boolean48 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime50 = dateTime20.withMinuteOfHour(58);
        org.joda.time.DateTime dateTime52 = dateTime20.minusMonths(292278994);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "halfdayOfDay" + "'", str14, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test10115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10115");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        org.joda.time.DurationField durationField15 = property12.getRangeDurationField();
        int int16 = property12.get();
        org.joda.time.DateTime dateTime18 = property12.addToCopy((long) 0);
        int int19 = property12.getLeapAmount();
        org.joda.time.DateTime dateTime20 = property12.withMaximumValue();
        java.lang.String str21 = property12.getAsShortText();
        org.joda.time.DateTime dateTime22 = property12.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.plus(readablePeriod23);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra(53);
        int int27 = dateTime26.getWeekyear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 53 + "'", int27 == 53);
    }

    @Test
    public void test10116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10116");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        org.joda.time.Interval interval16 = property12.toInterval();
        org.joda.time.DateTime dateTime17 = property12.roundHalfFloorCopy();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.DateTime dateTime31 = dateTime27.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime33 = dateTime27.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime35 = dateTime33.minusWeeks(19);
        boolean boolean37 = dateTime35.isBefore((long) '4');
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.DateTime dateTime39 = dateTime35.minus(readablePeriod38);
        int int40 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        int int45 = partial42.compareTo((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = partial42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = chronology46.withZone(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField49 = chronology48.hourOfDay();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.minuteOfHour();
        int int52 = dateTimeField50.getMinimumValue((long) (byte) 0);
        java.util.Locale locale54 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str55 = locale54.getDisplayScript();
        java.lang.String str56 = dateTimeField50.getAsShortText((int) '4', locale54);
        java.util.Calendar calendar57 = dateTime17.toCalendar(locale54);
        org.joda.time.DateTime.Property property58 = dateTime17.minuteOfDay();
        long long59 = property58.remainder();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "52" + "'", str56, "52");
        org.junit.Assert.assertNotNull(calendar57);
        org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
    }

    @Test
    public void test10117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10117");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(10);
        org.joda.time.Instant instant14 = dateTime13.toInstant();
        org.joda.time.DateTime dateTime16 = dateTime13.plusMillis(23);
        org.joda.time.DateTime.Property property17 = dateTime13.year();
        org.joda.time.DateTime dateTime18 = property17.withMinimumValue();
        long long19 = property17.remainder();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test10118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10118");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder1.setRegion("0022-02-11T09:40:51.782Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 0022-02-11T09:40:51.782Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test10119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10119");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = partial8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology12);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.minus(readableDuration16);
        long long18 = dateTime17.getMillis();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        boolean boolean26 = partial22.isAfter((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int int32 = partial29.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = partial29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 0, chronology33);
        org.joda.time.DateTime dateTime38 = dateTime36.withHourOfDay(0);
        org.joda.time.DateTime dateTime40 = dateTime38.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime40.toMutableDateTime();
        org.joda.time.DateTime dateTime42 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        int int48 = partial45.compareTo((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = partial45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 0, chronology49);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.minus(readableDuration53);
        org.joda.time.DateTime dateTime56 = dateTime52.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime58 = dateTime52.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime60 = dateTime58.minusWeeks(19);
        org.joda.time.DateTime dateTime62 = dateTime58.plusMillis((int) '#');
        int int63 = dateTime62.getDayOfMonth();
        boolean boolean64 = partial22.equals((java.lang.Object) dateTime62);
        boolean boolean65 = dateTime17.isBefore((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime67 = dateTime62.plusSeconds(2);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(chronology71);
        int int73 = partial70.compareTo((org.joda.time.ReadablePartial) partial72);
        org.joda.time.Chronology chronology74 = partial70.getChronology();
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.Chronology chronology76 = chronology74.withZone(dateTimeZone75);
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) 0, chronology74);
        org.joda.time.DateTime dateTime79 = dateTime77.withHourOfDay(0);
        int int80 = dateTime79.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType81 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Partial partial83 = new org.joda.time.Partial(chronology82);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Partial partial85 = new org.joda.time.Partial(chronology84);
        int int86 = partial83.compareTo((org.joda.time.ReadablePartial) partial85);
        org.joda.time.Chronology chronology87 = partial83.getChronology();
        org.joda.time.DurationField durationField88 = durationFieldType81.getField(chronology87);
        org.joda.time.DateTimeField dateTimeField89 = chronology87.weekOfWeekyear();
        org.joda.time.DateTime dateTime90 = dateTime79.withChronology(chronology87);
        org.joda.time.DateTime dateTime92 = dateTime79.plusWeeks((int) (short) 1);
        org.joda.time.DateTime.Property property93 = dateTime79.yearOfEra();
        boolean boolean94 = dateTime67.isAfter((org.joda.time.ReadableInstant) dateTime79);
        int int95 = dateTime67.getHourOfDay();
        int int96 = dateTime67.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone97 = dateTime67.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime98 = new org.joda.time.DateTime(1833, 1972, (-10), (-27409542), (-973006525), (int) (short) 10, dateTimeZone97);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -27409542 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 19 + "'", int80 == 19);
        org.junit.Assert.assertNotNull(durationFieldType81);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1970 + "'", int96 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone97);
    }

    @Test
    public void test10120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10120");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        int int18 = dateTime17.getSecondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str20 = dateTimeFieldType19.getName();
        boolean boolean21 = dateTime17.isSupported(dateTimeFieldType19);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        int int27 = partial24.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = partial24.getChronology();
        org.joda.time.DurationField durationField29 = durationFieldType22.getField(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.weekyear();
        org.joda.time.DateTimeField dateTimeField33 = chronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType19.getField(chronology28);
        org.joda.time.DateTimeField dateTimeField35 = chronology28.yearOfEra();
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology37 = partial36.getChronology();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "halfdayOfDay" + "'", str20, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(chronology37);
    }

    @Test
    public void test10121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10121");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime14 = dateTime9.withFieldAdded(durationFieldType12, 3);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        int int16 = dateTime9.get(dateTimeFieldType15);
        org.joda.time.DateTime dateTime18 = dateTime9.plusSeconds(3);
        org.joda.time.DateTime.Property property19 = dateTime9.yearOfEra();
        org.joda.time.DateTime dateTime21 = dateTime9.withDayOfYear((int) '#');
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime9.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
    }

    @Test
    public void test10122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10122");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekOfWeekyear();
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        int int12 = dateTimeField8.getMaximumTextLength(locale10);
        long long15 = dateTimeField8.set((long) 12, (int) (short) 10);
        long long18 = dateTimeField8.add((long) 86399999, (-19L));
        org.joda.time.ReadablePartial readablePartial19 = null;
        int int20 = dateTimeField8.getMinimumValue(readablePartial19);
        java.util.Locale locale22 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str23 = locale22.getDisplayCountry();
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str25 = dateTimeField8.getAsText((int) (byte) -1, locale22);
        long long27 = dateTimeField8.roundFloor((long) 999);
        long long29 = dateTimeField8.roundHalfEven((long) 9);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fran\347ais (Canada)" + "'", str11, "fran\347ais (Canada)");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 5443200012L + "'", long15 == 5443200012L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-11404800001L) + "'", long18 == (-11404800001L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\uce90\ub098\ub2e4" + "'", str23, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1" + "'", str25, "-1");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-259200000L) + "'", long27 == (-259200000L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-259200000L) + "'", long29 == (-259200000L));
    }

    @Test
    public void test10123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10123");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DurationField durationField20 = durationFieldType13.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime11.withChronology(chronology19);
        org.joda.time.DateTime dateTime24 = dateTime11.plusWeeks((int) (short) 1);
        org.joda.time.DateTime.Property property25 = dateTime11.yearOfEra();
        boolean boolean27 = dateTime11.isEqual((long) 2);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int int32 = partial29.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = partial29.getChronology();
        java.lang.String str34 = partial29.toStringList();
        org.joda.time.DateTime dateTime35 = dateTime11.withFields((org.joda.time.ReadablePartial) partial29);
        boolean boolean36 = dateTime35.isBeforeNow();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        int int41 = partial38.compareTo((org.joda.time.ReadablePartial) partial40);
        java.lang.String str42 = partial38.toStringList();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial45 = partial38.withPeriodAdded(readablePeriod43, 999);
        org.joda.time.DateTime dateTime46 = dateTime35.withFields((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        int int52 = partial49.compareTo((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = partial49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 0, chronology53);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.minus(readableDuration57);
        org.joda.time.DateTime.Property property59 = dateTime58.millisOfSecond();
        org.joda.time.DateTime dateTime61 = dateTime58.minus((long) (short) 10);
        org.joda.time.DateTime dateTime63 = dateTime58.plusDays(97);
        org.joda.time.DateTime.Property property64 = dateTime58.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.DateTime dateTime66 = dateTime58.minus(readableDuration65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        int int71 = partial68.compareTo((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = partial68.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField74 = chronology72.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField75 = chronology72.dayOfYear();
        org.joda.time.DateTimeField dateTimeField76 = chronology72.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone77 = chronology72.getZone();
        org.joda.time.DateTime dateTime78 = dateTime66.withZoneRetainFields(dateTimeZone77);
        org.joda.time.DateTime dateTime79 = dateTime35.toDateTime(dateTimeZone77);
        org.joda.time.DateTime dateTime81 = dateTime79.plusDays(120);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
    }

    @Test
    public void test10124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10124");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfDay();
        org.joda.time.DurationField durationField14 = chronology12.weeks();
        long long18 = chronology12.add((long) 86340, 5L, (int) ' ');
        org.joda.time.DurationField durationField19 = chronology12.years();
        org.joda.time.DateTimeField dateTimeField20 = chronology12.dayOfYear();
        org.joda.time.DurationField durationField21 = chronology12.months();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 86500L + "'", long18 == 86500L);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test10125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10125");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 317);
        int int14 = dateTimeFormatter6.getDefaultYear();
        boolean boolean15 = dateTimeFormatter6.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = null;
        org.joda.time.format.DateTimeParser dateTimeParser17 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter16, dateTimeParser17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter18.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser20 = dateTimeFormatter18.getParser();
        int int21 = dateTimeFormatter18.getDefaultYear();
        org.joda.time.Chronology chronology22 = dateTimeFormatter18.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        int int30 = partial27.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = partial27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone35 = chronology33.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter25.withZone(dateTimeZone35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter18.withZone(dateTimeZone35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        int int43 = partial40.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = partial40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology44.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) 0, chronology44);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.minus(readableDuration48);
        org.joda.time.Chronology chronology50 = dateTime47.getChronology();
        org.joda.time.Chronology chronology51 = chronology50.withUTC();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.hourOfDay();
        org.joda.time.DurationField durationField53 = chronology50.millis();
        org.joda.time.DurationField durationField54 = chronology50.days();
        org.joda.time.DateTimeField dateTimeField55 = chronology50.yearOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter18.withChronology(chronology50);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        int int62 = partial59.compareTo((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Chronology chronology63 = partial59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.Chronology chronology65 = chronology63.withZone(dateTimeZone64);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) 0, chronology63);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.DateTime dateTime68 = dateTime66.minus(readableDuration67);
        org.joda.time.Chronology chronology69 = dateTime66.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField71 = chronology69.dayOfWeek();
        org.joda.time.DurationField durationField72 = chronology69.seconds();
        org.joda.time.DurationField durationField73 = chronology69.months();
        org.joda.time.DateTimeField dateTimeField74 = chronology69.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        long long78 = chronology69.add(readablePeriod75, (long) 43200, 97);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter18.withChronology(chronology69);
        boolean boolean80 = dateTimeFormatter79.isOffsetParsed();
        java.util.Locale locale81 = dateTimeFormatter79.getLocale();
        java.util.Locale locale82 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str83 = locale82.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter84 = dateTimeFormatter79.withLocale(locale82);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter85 = dateTimeFormatter6.withLocale(locale82);
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter87 = dateTimeFormatter85.withZone(dateTimeZone86);
        java.util.Locale locale88 = dateTimeFormatter87.getLocale();
        boolean boolean89 = dateTimeFormatter87.isParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2000 + "'", int14 == 2000);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(dateTimeParser20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2000 + "'", int21 == 2000);
        org.junit.Assert.assertNull(chronology22);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 43200L + "'", long78 == 43200L);
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(locale81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\uce90\ub098\ub2e4" + "'", str83, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(dateTimeFormatter84);
        org.junit.Assert.assertNotNull(dateTimeFormatter85);
        org.junit.Assert.assertNotNull(dateTimeFormatter87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test10126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10126");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekOfWeekyear();
        int int10 = dateTimeField8.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        int int16 = partial13.compareTo((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = partial13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 0, chronology17);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.minus(readableDuration21);
        org.joda.time.Chronology chronology23 = dateTime20.getChronology();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        long long27 = chronology23.set((org.joda.time.ReadablePartial) partial25, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial25.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = partial25.getFormatter();
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("0120-01-01T00:00:00.000Z");
        java.lang.String str33 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) partial25, 10, locale32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = partial35.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean41 = partial35.isSupported(dateTimeFieldType40);
        boolean boolean42 = partial25.isSupported(dateTimeFieldType40);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        int int48 = partial45.compareTo((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = partial45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 0, chronology49);
        int int53 = dateTime52.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType54.getDurationType();
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType54.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType54.getRangeDurationType();
        org.joda.time.DateTime.Property property58 = dateTime52.property(dateTimeFieldType54);
        org.joda.time.DateTime dateTime59 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime61 = dateTime52.minusWeeks(4);
        org.joda.time.Instant instant62 = dateTime61.toInstant();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "10" + "'", str33, "10");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(instant62);
    }

    @Test
    public void test10127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10127");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        java.lang.String str6 = partial1.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.DateTime dateTime18 = dateTime16.withHourOfDay(0);
        int int19 = dateTime18.getCenturyOfEra();
        boolean boolean21 = dateTime18.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property22 = dateTime18.era();
        org.joda.time.DateTime dateTime24 = dateTime18.withHourOfDay(12);
        org.joda.time.DateTime dateTime25 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime25.toMutableDateTimeISO();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = partial35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 0, chronology39);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.minus(readableDuration43);
        org.joda.time.DateTime dateTime46 = dateTime42.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime48 = dateTime42.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime50 = dateTime48.minusWeeks(19);
        org.joda.time.DateTime dateTime52 = dateTime48.plusMillis((int) '#');
        int int53 = dateTime52.getDayOfMonth();
        org.joda.time.DateTime dateTime55 = dateTime52.plus((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone56 = dateTime52.getZone();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(366, 7, 7, 23, (int) ' ', 0, dateTimeZone56);
        org.joda.time.DateTime dateTime58 = dateTime25.toDateTime(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 19 + "'", int19 == 19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test10128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10128");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        int int15 = dateTimeField13.getLeapAmount((long) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = dateTimeField13.getType();
        int int18 = dateTimeField13.getLeapAmount((long) (short) 10);
        java.lang.String str19 = dateTimeField13.getName();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "dayOfMonth" + "'", str19, "dayOfMonth");
    }

    @Test
    public void test10129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10129");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.year();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology5.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillisOfDay(720);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.plus(readablePeriod13);
        int int15 = dateTime14.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
    }

    @Test
    public void test10130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10130");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property15 = dateTime11.era();
        org.joda.time.DateTime.Property property16 = dateTime11.secondOfDay();
        int int17 = property16.getLeapAmount();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.DateTime dateTime29 = dateTime27.withHourOfDay(0);
        int int30 = dateTime29.getCenturyOfEra();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        int int36 = partial33.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = partial33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 0, chronology37);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.minus(readableDuration41);
        org.joda.time.Chronology chronology43 = dateTime40.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str45 = dateTimeFieldType44.getName();
        int int46 = dateTime40.get(dateTimeFieldType44);
        org.joda.time.DateTime dateTime48 = dateTime40.minusMinutes(4);
        int int49 = dateTime40.getWeekyear();
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.DateTime dateTime51 = dateTime40.plus(readableDuration50);
        boolean boolean52 = dateTime29.isAfter((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime54 = dateTime29.minusWeeks((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int56 = dateTime54.get(dateTimeFieldType55);
        org.joda.time.DateTime dateTime57 = dateTime54.toDateTimeISO();
        long long58 = property16.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime59 = property16.getDateTime();
        org.joda.time.DateTime.Property property60 = dateTime59.millisOfSecond();
        org.joda.time.DateTime dateTime62 = property60.addWrapFieldToCopy(23);
        org.joda.time.DateTime dateTime64 = dateTime62.plusMinutes(0);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.DateTime dateTime66 = dateTime64.minus(readablePeriod65);
        org.joda.time.DateTime dateTime68 = dateTime66.minusMillis(72);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 19 + "'", int30 == 19);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "halfdayOfDay" + "'", str45, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 21168000L + "'", long58 == 21168000L);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
    }

    @Test
    public void test10131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10131");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        boolean boolean7 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        java.lang.String str8 = partial6.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = partial6.getFieldTypes();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readableDuration20);
        org.joda.time.DateTime dateTime23 = dateTime19.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime25 = dateTime19.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime27 = dateTime25.minusWeeks(19);
        org.joda.time.DateTime dateTime29 = dateTime25.plusMillis((int) '#');
        int int30 = dateTime29.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str32 = dateTimeFieldType31.getName();
        boolean boolean33 = dateTime29.isSupported(dateTimeFieldType31);
        org.joda.time.DateTime dateTime34 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime.Property property35 = dateTime34.millisOfSecond();
        int int36 = dateTime34.getDayOfMonth();
        org.joda.time.DateTime dateTime38 = dateTime34.plus((-1L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime40 = dateTime34.withEra(16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 16 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "halfdayOfDay" + "'", str32, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test10132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10132");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str4 = locale3.getDisplayCountry();
        java.util.Locale.Builder builder5 = builder0.setLocale(locale3);
        java.util.Locale.Builder builder7 = builder5.setRegion("CA");
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale.Builder builder10 = builder7.setRegion("");
        java.util.Locale.Builder builder12 = builder7.setVariant("86399990");
        java.util.Locale.Builder builder14 = builder12.addUnicodeLocaleAttribute("1405");
        java.util.Locale.Builder builder15 = builder12.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder12.removeUnicodeLocaleAttribute("0022-02-11T09:40:47.302Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 0022-02-11T09:40:47.302Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uce90\ub098\ub2e4" + "'", str4, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test10133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10133");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime15.plus(readablePeriod20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYear(11);
        org.joda.time.DateTime.Property property24 = dateTime21.dayOfYear();
        org.joda.time.DateTime dateTime26 = property24.setCopy(170);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test10134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10134");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTime dateTime14 = dateTime9.withWeekyear(23);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        int int21 = partial18.compareTo((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = partial18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Chronology chronology24 = chronology22.withZone(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 0, chronology22);
        org.joda.time.DateTime dateTime27 = dateTime25.withHourOfDay(0);
        int int28 = dateTime27.getCenturyOfEra();
        boolean boolean30 = dateTime27.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime31 = dateTime27.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime33 = dateTime31.withCenturyOfEra((int) '#');
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        int int39 = partial36.compareTo((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = partial36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.Chronology chronology42 = chronology40.withZone(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 0, chronology40);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTime dateTime45 = dateTime43.minus(readableDuration44);
        org.joda.time.Chronology chronology46 = dateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.dayOfMonth();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        int int52 = partial49.compareTo((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        boolean boolean55 = partial51.isAfter((org.joda.time.ReadablePartial) partial54);
        java.lang.String str56 = partial54.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        org.joda.time.Partial partial58 = partial54.without(dateTimeFieldType57);
        java.util.Locale locale60 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale61 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str62 = locale60.getDisplayName(locale61);
        java.lang.String str63 = locale60.getDisplayVariant();
        java.util.Locale locale64 = locale60.stripExtensions();
        java.lang.String str65 = dateTimeField47.getAsText((org.joda.time.ReadablePartial) partial54, 53, locale64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        int int70 = partial67.compareTo((org.joda.time.ReadablePartial) partial69);
        org.joda.time.Chronology chronology71 = partial67.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean73 = partial67.isSupported(dateTimeFieldType72);
        org.joda.time.Chronology chronology74 = partial67.getChronology();
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial76 = partial67.plus(readablePeriod75);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean78 = partial67.isSupported(dateTimeFieldType77);
        boolean boolean79 = partial54.isSupported(dateTimeFieldType77);
        boolean boolean80 = dateTime31.isSupported(dateTimeFieldType77);
        boolean boolean81 = dateTime14.isSupported(dateTimeFieldType77);
        org.joda.time.DateTime dateTime83 = dateTime14.plusHours(4);
        org.joda.time.Chronology chronology84 = dateTime14.getChronology();
        org.joda.time.DurationField durationField85 = chronology84.minutes();
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        long long89 = chronology84.add(readablePeriod86, (-59095008000000L), 291);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0023-01-05T00:00:00.000Z" + "'", str15, "0023-01-05T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 19 + "'", int28 == 19);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "fran\347ais (Canada)" + "'", str62, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "53" + "'", str65, "53");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-59095008000000L) + "'", long89 == (-59095008000000L));
    }

    @Test
    public void test10135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10135");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        int int20 = dateTime19.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.minus(readablePeriod21);
        org.joda.time.DateTime.Property property23 = dateTime19.secondOfDay();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        int int29 = partial26.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = partial26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology30);
        org.joda.time.DateTime dateTime35 = dateTime33.withHourOfDay(0);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(10);
        boolean boolean38 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime33);
        int int39 = dateTime19.getMinuteOfDay();
        org.joda.time.DateTime.Property property40 = dateTime19.yearOfCentury();
        org.joda.time.DateTime.Property property41 = dateTime19.minuteOfHour();
        org.joda.time.DateTime dateTime43 = property41.addToCopy((long) 366);
        org.joda.time.DateTime dateTime45 = property41.addWrapFieldToCopy((-694733));
        org.joda.time.format.DateTimePrinter dateTimePrinter46 = null;
        org.joda.time.format.DateTimeParser dateTimeParser47 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter46, dateTimeParser47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        int int53 = partial50.compareTo((org.joda.time.ReadablePartial) partial52);
        org.joda.time.Chronology chronology54 = partial50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.Chronology chronology56 = chronology54.withZone(dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField57 = chronology56.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone58 = chronology56.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter48.withZone(dateTimeZone58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        int int64 = partial61.compareTo((org.joda.time.ReadablePartial) partial63);
        org.joda.time.Chronology chronology65 = partial61.getChronology();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.Chronology chronology67 = chronology65.withZone(dateTimeZone66);
        org.joda.time.DateTimeField dateTimeField68 = chronology67.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone69 = chronology67.getZone();
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(dateTimeZone69);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter48.withZone(dateTimeZone69);
        org.joda.time.format.DateTimeParser dateTimeParser72 = dateTimeFormatter71.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter73 = null;
        org.joda.time.format.DateTimeParser dateTimeParser74 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter73, dateTimeParser74);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter75.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser77 = dateTimeFormatter75.getParser();
        boolean boolean78 = dateTimeFormatter75.isOffsetParsed();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Partial partial81 = new org.joda.time.Partial(chronology80);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Partial partial83 = new org.joda.time.Partial(chronology82);
        int int84 = partial81.compareTo((org.joda.time.ReadablePartial) partial83);
        org.joda.time.Chronology chronology85 = partial81.getChronology();
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.Chronology chronology87 = chronology85.withZone(dateTimeZone86);
        org.joda.time.DateTime dateTime88 = new org.joda.time.DateTime((long) 0, chronology85);
        org.joda.time.DateTime dateTime90 = dateTime88.withHourOfDay(0);
        org.joda.time.DateTime dateTime92 = dateTime90.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime93 = dateTime92.toMutableDateTime();
        org.joda.time.DateTime.Property property94 = dateTime92.weekyear();
        org.joda.time.DateTime dateTime95 = property94.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone96 = dateTime95.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter97 = dateTimeFormatter75.withZone(dateTimeZone96);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter98 = dateTimeFormatter71.withZone(dateTimeZone96);
        org.joda.time.MutableDateTime mutableDateTime99 = dateTime45.toMutableDateTime(dateTimeZone96);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNull(dateTimeParser72);
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
        org.junit.Assert.assertNull(dateTimeParser77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(mutableDateTime93);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(dateTimeZone96);
        org.junit.Assert.assertNotNull(dateTimeFormatter97);
        org.junit.Assert.assertNotNull(dateTimeFormatter98);
        org.junit.Assert.assertNotNull(mutableDateTime99);
    }

    @Test
    public void test10136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10136");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.Chronology chronology14 = chronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        java.lang.String str18 = partial17.toString();
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeField15.getAsShortText((org.joda.time.ReadablePartial) partial17, (int) 'u', locale20);
        long long23 = dateTimeField15.roundFloor(1644572337817L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "117" + "'", str21, "117");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1644537600000L + "'", long23 == 1644537600000L);
    }

    @Test
    public void test10137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10137");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        int int14 = partial11.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = partial11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter9.withZone(dateTimeZone19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone19);
        int int23 = dateTime22.getMillisOfSecond();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        int int28 = partial25.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = partial25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Chronology chronology31 = chronology29.withZone(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = chronology31.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology31.getZone();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime22.toMutableDateTime(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 328 + "'", int23 == 328);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(mutableDateTime35);
    }

    @Test
    public void test10138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10138");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        int int18 = dateTime17.getSecondOfMinute();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        org.joda.time.DateTime dateTime32 = dateTime30.withYear((int) 'a');
        boolean boolean33 = dateTime30.isEqualNow();
        org.joda.time.DateMidnight dateMidnight34 = dateTime30.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone35 = dateMidnight34.getZone();
        org.joda.time.DateTime dateTime36 = dateTime17.withZoneRetainFields(dateTimeZone35);
        org.joda.time.DateTime.Property property37 = dateTime36.weekOfWeekyear();
        boolean boolean38 = dateTime36.isAfterNow();
        org.joda.time.DateTime dateTime39 = dateTime36.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        boolean boolean41 = dateTime39.isSupported(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test10139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10139");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder1.setLanguage("Canada");
        java.util.Locale.Builder builder5 = builder1.clear();
        java.util.Locale.Builder builder6 = builder1.clear();
        java.util.Locale.Builder builder7 = builder1.clear();
        java.util.Locale.Builder builder8 = builder1.clearExtensions();
        java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale locale11 = builder8.build();
        java.lang.String str12 = locale11.toString();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test10140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10140");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) '4');
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        org.joda.time.Interval interval3 = property2.toInterval();
        long long4 = property2.remainder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        int int9 = partial6.compareTo((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = partial6.getChronology();
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str12 = locale11.getDisplayCountry();
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleAttributes();
        boolean boolean14 = partial6.equals((java.lang.Object) locale11);
        java.lang.String str15 = property2.getAsShortText(locale11);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property2.getFieldType();
        int int17 = property2.get();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\uce90\ub098\ub2e4" + "'", str12, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "52" + "'", str15, "52");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
    }

    @Test
    public void test10141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10141");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfDay();
        org.joda.time.DurationField durationField14 = chronology12.weeks();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.era();
        boolean boolean17 = dateTimeField15.isLeap((-1024017120L));
        java.lang.String str19 = dateTimeField15.getAsText((-56802470400000L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\uc11c\uae30" + "'", str19, "\uc11c\uae30");
    }

    @Test
    public void test10142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10142");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        org.joda.time.DateTime dateTime13 = dateTime11.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTime();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readableDuration25);
        org.joda.time.DateTime.Property property27 = dateTime26.millisOfSecond();
        boolean boolean28 = mutableDateTime14.isBefore((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime30 = dateTime26.withWeekyear(19);
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays(0);
        int int33 = dateTime30.getMonthOfYear();
        org.joda.time.DateTime.Property property34 = dateTime30.centuryOfEra();
        int int35 = property34.getMaximumValue();
        java.lang.String str36 = property34.getAsText();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2922789 + "'", int35 == 2922789);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0" + "'", str36, "0");
    }

    @Test
    public void test10143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10143");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTime.Property property13 = dateTime9.weekyear();
        int int14 = dateTime9.getMinuteOfHour();
        boolean boolean16 = dateTime9.isBefore((long) (short) 0);
        org.joda.time.Chronology chronology17 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.year();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.hourOfHalfday();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test10144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10144");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology7 = partial6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = chronology7.getDateTimeMillis(540, (int) 'a', 56, 0, 47, 1405, 1972);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1405 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test10145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10145");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 0, chronology8);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.minus(readableDuration12);
        org.joda.time.Chronology chronology14 = dateTime11.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.centuries();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 1970, chronology14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(180100L, chronology14);
        org.joda.time.DurationField durationField18 = chronology14.minutes();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.minuteOfHour();
        java.lang.String str21 = dateTimeField19.getAsShortText((long) 7);
        int int23 = dateTimeField19.getMaximumValue(252000010L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 59 + "'", int23 == 59);
    }

    @Test
    public void test10146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10146");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology7.getZone();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.weekyearOfCentury();
        java.lang.String str12 = chronology7.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str12, "ISOChronology[Etc/UTC]");
    }

    @Test
    public void test10147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10147");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = partial0.getFieldTypes();
        java.lang.String str2 = partial0.toString();
        org.joda.time.Partial partial3 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = partial3.getFieldTypes();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str6 = durationFieldType5.getName();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DurationField durationField14 = durationFieldType7.getField(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.dayOfYear();
        boolean boolean18 = durationFieldType5.isSupported(chronology13);
        org.joda.time.DateTimeField dateTimeField19 = chronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology13.hourOfHalfday();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology13);
        org.joda.time.DateTime dateTime22 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        boolean boolean23 = dateTime22.isAfterNow();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "seconds" + "'", str6, "seconds");
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test10148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10148");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        int int14 = dateTime13.getWeekOfWeekyear();
        org.joda.time.Instant instant15 = dateTime13.toInstant();
        java.util.Date date16 = dateTime13.toDate();
        org.joda.time.DateTime.Property property17 = dateTime13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = property17.getField();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Mon Jan 02 00:00:00 UTC 120");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test10149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10149");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder1.addUnicodeLocaleAttribute("coreano");
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.getDefault(category5);
        java.util.Locale.Builder builder7 = builder1.setLocale(locale6);
        java.util.Locale.Builder builder9 = builder1.setVariant("Italian");
        java.util.Locale locale11 = new java.util.Locale("CN");
        java.util.Locale.Builder builder12 = builder1.setLocale(locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder1.setLanguageTag("3570-01-01T00:00:00.100Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 3570 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals(locale11.toString(), "cn");
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test10150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10150");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = chronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfDay();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime.Property property16 = dateTime15.hourOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        int int22 = partial19.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = partial19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 0, chronology23);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.minus(readableDuration27);
        org.joda.time.DateTime.Property property29 = dateTime28.millisOfSecond();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        int int31 = property29.getMaximumTextLength(locale30);
        long long32 = property29.remainder();
        org.joda.time.Interval interval33 = property29.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType34.getRangeDurationType();
        java.lang.String str36 = dateTimeFieldType34.toString();
        org.joda.time.DateTime.Property property37 = dateTime15.property(dateTimeFieldType34);
        org.joda.time.DateTime dateTime38 = property37.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime40 = property37.setCopy(2022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "millisOfSecond" + "'", str36, "millisOfSecond");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test10151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10151");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        java.lang.String str5 = partial1.toStringList();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial8 = partial1.withPeriodAdded(readablePeriod6, 999);
        int[] intArray9 = partial1.getValues();
        int[] intArray10 = partial1.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        int int16 = partial13.compareTo((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = partial13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 0, chronology17);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.minus(readableDuration21);
        org.joda.time.Chronology chronology23 = dateTime20.getChronology();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        long long27 = chronology23.set((org.joda.time.ReadablePartial) partial25, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial25.getFieldTypes();
        java.util.Locale locale29 = java.util.Locale.PRC;
        boolean boolean30 = partial25.equals((java.lang.Object) locale29);
        int int31 = partial25.size();
        org.joda.time.Chronology chronology32 = partial25.getChronology();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial25.minus(readablePeriod33);
        java.lang.String str35 = partial25.toString();
        int int36 = partial1.compareTo((org.joda.time.ReadablePartial) partial25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType38 = partial25.getFieldType(13);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 13");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test10152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10152");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("minuteofhour");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"minuteofhour\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10153");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser6 = dateTimeFormatter2.getParser();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withDefaultYear(175);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        int int14 = partial11.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = partial11.getChronology();
        java.lang.String str16 = partial11.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        int int22 = partial19.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = partial19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 0, chronology23);
        org.joda.time.DateTime dateTime28 = dateTime26.withHourOfDay(0);
        int int29 = dateTime28.getCenturyOfEra();
        boolean boolean31 = dateTime28.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property32 = dateTime28.era();
        org.joda.time.DateTime dateTime34 = dateTime28.withHourOfDay(12);
        org.joda.time.DateTime dateTime35 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime35.toMutableDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar37 = mutableDateTime36.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            int int40 = dateTimeFormatter2.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime36, "ISOChronology[UTC]", 581);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNull(dateTimeParser6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 19 + "'", int29 == 19);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(gregorianCalendar37);
    }

    @Test
    public void test10154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10154");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        org.joda.time.DateTime dateTime14 = dateTime11.minus((long) (short) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readableDuration25);
        org.joda.time.Chronology chronology27 = dateTime24.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.months();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime14.toMutableDateTime(chronology27);
        org.joda.time.DateTime dateTime31 = dateTime14.withWeekyear(1969);
        org.joda.time.DateTime.Property property32 = dateTime14.secondOfMinute();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test10155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10155");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = chronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.yearOfCentury();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        int int21 = partial18.compareTo((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = partial18.getChronology();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        int int28 = partial25.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = partial25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Chronology chronology31 = chronology29.withZone(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 0, chronology29);
        org.joda.time.DateTime dateTime34 = dateTime32.withHourOfDay(0);
        org.joda.time.DateTime dateTime35 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        int int40 = partial37.compareTo((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        boolean boolean43 = partial39.isAfter((org.joda.time.ReadablePartial) partial42);
        java.lang.String str44 = partial42.toString();
        boolean boolean45 = partial18.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial18.minus(readablePeriod46);
        int int48 = dateTimeField16.getMaximumValue((org.joda.time.ReadablePartial) partial47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial51 = partial47.withPeriodAdded(readablePeriod49, 1435);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = partial47.getFormatter();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 99 + "'", int48 == 99);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNull(dateTimeFormatter52);
    }

    @Test
    public void test10156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10156");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.monthOfYear();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology12);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray19 = chronology12.get(readablePeriod16, 59998L, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test10157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10157");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        int int20 = dateTime19.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.minus(readablePeriod21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        int int28 = partial25.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = partial25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Chronology chronology31 = chronology29.withZone(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 0, chronology29);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.minus(readableDuration33);
        org.joda.time.DateTime dateTime36 = dateTime32.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property37 = dateTime36.dayOfYear();
        org.joda.time.DateTime dateTime38 = property37.withMinimumValue();
        boolean boolean39 = dateTime38.isAfterNow();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime42 = dateTime38.withDurationAdded(readableDuration40, 99);
        org.joda.time.DateTime dateTime44 = dateTime42.plusMonths(12);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.plus(readablePeriod45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        int int52 = partial49.compareTo((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = partial49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 0, chronology53);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.minus(readableDuration57);
        org.joda.time.Chronology chronology59 = dateTime56.getChronology();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        long long63 = chronology59.set((org.joda.time.ReadablePartial) partial61, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray64 = partial61.getFieldTypes();
        java.util.Locale locale65 = java.util.Locale.PRC;
        boolean boolean66 = partial61.equals((java.lang.Object) locale65);
        int int67 = partial61.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int69 = partial61.indexOf(dateTimeFieldType68);
        boolean boolean70 = dateTime44.isSupported(dateTimeFieldType68);
        org.joda.time.DateTime.Property property71 = dateTime19.property(dateTimeFieldType68);
        org.joda.time.DateTime.Property property72 = dateTime19.secondOfDay();
        org.joda.time.DateTime dateTime73 = property72.withMaximumValue();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime73);
    }

    @Test
    public void test10158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10158");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekOfWeekyear();
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        int int12 = dateTimeField8.getMaximumTextLength(locale10);
        int int14 = dateTimeField8.getLeapAmount((-259200000L));
        java.lang.String str15 = dateTimeField8.toString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean23 = partial17.isSupported(dateTimeFieldType22);
        org.joda.time.Chronology chronology24 = partial17.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        int int31 = partial28.compareTo((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology32 = partial28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.monthOfYear();
        long long39 = dateTimeField36.getDifferenceAsLong((long) (short) 100, (-18L));
        java.util.Locale.Category category41 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale42 = java.util.Locale.getDefault(category41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        int int47 = partial44.compareTo((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology48 = partial44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.weekOfWeekyear();
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale53 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        int int55 = dateTimeField51.getMaximumTextLength(locale53);
        java.util.Locale.setDefault(category41, locale53);
        java.util.Locale locale57 = java.util.Locale.getDefault(category41);
        java.lang.String str58 = dateTimeField36.getAsText((-3600000L), locale57);
        java.lang.String str59 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) partial25, 292278993, locale57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        int int65 = partial62.compareTo((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Chronology chronology66 = partial62.getChronology();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.Chronology chronology68 = chronology66.withZone(dateTimeZone67);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) 0, chronology66);
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.DateTime dateTime71 = dateTime69.minus(readableDuration70);
        org.joda.time.Chronology chronology72 = dateTime69.getChronology();
        org.joda.time.Partial partial73 = partial25.withChronologyRetainFields(chronology72);
        org.joda.time.Chronology chronology74 = chronology72.withUTC();
        org.joda.time.DurationField durationField75 = chronology72.centuries();
        org.joda.time.DurationField durationField76 = chronology72.minutes();
        org.joda.time.DurationField durationField77 = chronology72.weekyears();
        org.joda.time.DurationField durationField78 = chronology72.centuries();
        org.joda.time.DurationField durationField79 = chronology72.hours();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fran\347ais (Canada)" + "'", str11, "fran\347ais (Canada)");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DateTimeField[weekOfWeekyear]" + "'", str15, "DateTimeField[weekOfWeekyear]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + category41 + "' != '" + java.util.Locale.Category.FORMAT + "'", category41.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "fran\347ais (Canada)" + "'", str54, "fran\347ais (Canada)");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "d\351cembre" + "'", str58, "d\351cembre");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "292278993" + "'", str59, "292278993");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(durationField79);
    }

    @Test
    public void test10159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10159");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        org.joda.time.Chronology chronology5 = dateTimeFormatter3.getChronolgy();
        int int6 = dateTimeFormatter3.getDefaultYear();
        int int7 = dateTimeFormatter3.getDefaultYear();
        java.io.Writer writer8 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter3.printTo(writer8, 7010428607999998L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
    }

    @Test
    public void test10160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10160");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str14 = dateTimeFieldType13.getName();
        int int15 = dateTime9.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime17 = dateTime9.minusMinutes(4);
        org.joda.time.Instant instant18 = dateTime17.toInstant();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) dateTime17);
        org.joda.time.DateMidnight dateMidnight20 = dateTime17.toDateMidnight();
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale21.getDisplayScript(locale22);
        java.util.Locale locale24 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str25 = locale24.getDisplayCountry();
        java.lang.String str26 = locale22.getDisplayName(locale24);
        java.util.Calendar calendar27 = dateTime17.toCalendar(locale24);
        java.util.Date date28 = dateTime17.toDate();
        org.joda.time.DateTime dateTime30 = dateTime17.withDayOfMonth(2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "halfdayOfDay" + "'", str14, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\uce90\ub098\ub2e4" + "'", str25, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "cor\351en" + "'", str26, "cor\351en");
        org.junit.Assert.assertNotNull(calendar27);
        org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=-240000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=56,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:56:00 UTC 1969");
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test10161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10161");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        org.joda.time.DateTime dateTime14 = dateTime11.minus((long) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime11.plusDays(97);
        org.joda.time.DateTime.Property property17 = dateTime11.dayOfWeek();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DurationField durationField27 = chronology24.minutes();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 100, chronology24);
        org.joda.time.DateTimeField dateTimeField29 = chronology24.minuteOfHour();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) dateTime11, chronology24);
        org.joda.time.DurationField durationField31 = chronology24.seconds();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology24);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    public void test10162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10162");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        int int14 = dateTime13.getWeekOfWeekyear();
        org.joda.time.Instant instant15 = dateTime13.toInstant();
        org.joda.time.DateTime dateTime17 = dateTime13.withMillis(180100L);
        org.joda.time.DateTime.Property property18 = dateTime17.millisOfSecond();
        org.joda.time.DateTime dateTime20 = property18.addToCopy(86400000L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test10163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10163");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.weekyear();
        long long17 = dateTimeField15.roundCeiling(0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 31795200000L + "'", long17 == 31795200000L);
    }

    @Test
    public void test10164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10164");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        boolean boolean7 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean10 = partial3.isSupported(dateTimeFieldType9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        int int16 = partial13.compareTo((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = partial13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 0, chronology17);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.minus(readableDuration21);
        org.joda.time.DateTime dateTime24 = dateTime20.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime26 = dateTime20.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime28 = dateTime26.minusWeeks(19);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        int int36 = partial33.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = partial33.getChronology();
        org.joda.time.DurationField durationField38 = durationFieldType31.getField(chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.dayOfMonth();
        org.joda.time.DateTime dateTime41 = dateTime30.toDateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField42 = chronology37.weekyearOfCentury();
        org.joda.time.Partial partial43 = partial3.withChronologyRetainFields(chronology37);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        int int49 = partial46.compareTo((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = partial46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.Chronology chronology52 = chronology50.withZone(dateTimeZone51);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) 0, chronology50);
        org.joda.time.DateTime dateTime55 = dateTime53.withHourOfDay(0);
        int int56 = dateTime55.getCenturyOfEra();
        boolean boolean58 = dateTime55.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime59 = dateTime55.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime61 = dateTime59.withCenturyOfEra((int) '#');
        org.joda.time.Chronology chronology62 = dateTime61.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.weekyearOfCentury();
        long long67 = chronology62.add((long) 9, (long) (byte) 10, (int) (short) -1);
        org.joda.time.Partial partial68 = partial3.withChronologyRetainFields(chronology62);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = partial68.getFieldTypes();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 19 + "'", int56 == 19);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
    }

    @Test
    public void test10165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10165");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        org.joda.time.DateTime dateTime14 = dateTime11.minus((long) (short) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readableDuration25);
        org.joda.time.Chronology chronology27 = dateTime24.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.months();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime14.toMutableDateTime(chronology27);
        org.joda.time.DurationField durationField30 = chronology27.millis();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.year();
        org.joda.time.DurationField durationField32 = chronology27.minutes();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        long long36 = chronology27.add(readablePeriod33, (long) 2960, (-27409539));
        org.joda.time.DurationField durationField37 = chronology27.halfdays();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 2960L + "'", long36 == 2960L);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test10166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10166");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str1 = dateTimeFieldType0.getName();
        java.lang.String str2 = dateTimeFieldType0.getName();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType0.getDurationType();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        int int8 = partial5.compareTo((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology9 = partial5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Chronology chronology11 = chronology9.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.hourOfHalfday();
        boolean boolean14 = durationFieldType3.isSupported(chronology11);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readableDuration25);
        org.joda.time.Chronology chronology27 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.secondOfDay();
        org.joda.time.DurationField durationField29 = chronology27.weeks();
        org.joda.time.DurationField durationField30 = durationFieldType3.getField(chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = chronology27.millisOfSecond();
        org.joda.time.Chronology chronology33 = chronology27.withUTC();
        org.joda.time.DurationField durationField34 = chronology27.millis();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "halfdayOfDay" + "'", str1, "halfdayOfDay");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "halfdayOfDay" + "'", str2, "halfdayOfDay");
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test10167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10167");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        java.lang.String str6 = partial1.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.DateTime dateTime18 = dateTime16.withHourOfDay(0);
        int int19 = dateTime18.getCenturyOfEra();
        boolean boolean21 = dateTime18.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property22 = dateTime18.era();
        org.joda.time.DateTime dateTime24 = dateTime18.withHourOfDay(12);
        org.joda.time.DateTime dateTime25 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateMidnight dateMidnight26 = dateTime25.toDateMidnight();
        org.joda.time.DateTime dateTime28 = dateTime25.withDayOfYear(72);
        org.joda.time.DateTime dateTime30 = dateTime28.withYear(0);
        org.joda.time.DateTime.Property property31 = dateTime28.weekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 19 + "'", int19 == 19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test10168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10168");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withDefaultYear((-973006525));
        java.lang.Appendable appendable16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        int int21 = partial18.compareTo((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        boolean boolean24 = partial20.isAfter((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        int int30 = partial27.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = partial27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 0, chronology31);
        org.joda.time.DateTime dateTime36 = dateTime34.withHourOfDay(0);
        org.joda.time.DateTime dateTime38 = dateTime36.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime38.toMutableDateTime();
        org.joda.time.DateTime dateTime40 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        int int46 = partial43.compareTo((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology47 = partial43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 0, chronology47);
        org.joda.time.DateTime dateTime52 = dateTime50.withHourOfDay(0);
        int int53 = dateTime52.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        int int59 = partial56.compareTo((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology60 = partial56.getChronology();
        org.joda.time.DurationField durationField61 = durationFieldType54.getField(chronology60);
        org.joda.time.DateTimeField dateTimeField62 = chronology60.weekOfWeekyear();
        org.joda.time.DateTime dateTime63 = dateTime52.withChronology(chronology60);
        java.util.Date date64 = dateTime63.toDate();
        boolean boolean65 = partial20.equals((java.lang.Object) dateTime63);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        int int70 = partial67.compareTo((org.joda.time.ReadablePartial) partial69);
        org.joda.time.Chronology chronology71 = partial67.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.era();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = new org.joda.time.Partial(chronology75);
        int int77 = partial74.compareTo((org.joda.time.ReadablePartial) partial76);
        int[] intArray79 = new int[] { 2 };
        int int80 = dateTimeField72.getMinimumValue((org.joda.time.ReadablePartial) partial74, intArray79);
        int int81 = partial74.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str83 = dateTimeFieldType82.getName();
        org.joda.time.Partial partial84 = partial74.without(dateTimeFieldType82);
        boolean boolean85 = partial20.isSupported(dateTimeFieldType82);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter15.printTo(appendable16, (org.joda.time.ReadablePartial) partial20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 19 + "'", int53 == 19);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[2]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "halfdayOfDay" + "'", str83, "halfdayOfDay");
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test10169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10169");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withDefaultYear(99);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter16.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter16.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser19 = dateTimeFormatter16.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser20 = dateTimeFormatter16.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTimeFormatter16.parseDateTime("weekyearOfCentury");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(dateTimeParser19);
        org.junit.Assert.assertNull(dateTimeParser20);
    }

    @Test
    public void test10170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10170");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str14 = dateTimeFieldType13.getName();
        int int15 = dateTime9.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime17 = dateTime9.minusMinutes(4);
        int int18 = dateTime9.getWeekyear();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime9.plus(readableDuration19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.withDurationAdded(readableDuration21, (int) (short) -1);
        boolean boolean25 = dateTime20.isBefore((long) 720);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        int int30 = partial27.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = partial27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.weekOfWeekyear();
        java.util.Locale locale35 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale36 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str37 = locale35.getDisplayName(locale36);
        int int38 = dateTimeField34.getMaximumTextLength(locale36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        int int44 = partial41.compareTo((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = partial41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Chronology chronology47 = chronology45.withZone(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 0, chronology45);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.minus(readableDuration49);
        org.joda.time.Chronology chronology51 = dateTime48.getChronology();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        long long55 = chronology51.set((org.joda.time.ReadablePartial) partial53, (long) (byte) -1);
        int int56 = dateTimeField34.getMinimumValue((org.joda.time.ReadablePartial) partial53);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = partial53.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial53.withPeriodAdded(readablePeriod58, (int) (short) -1);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        int int66 = partial63.compareTo((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology67 = partial63.getChronology();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.Chronology chronology69 = chronology67.withZone(dateTimeZone68);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) 0, chronology67);
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.DateTime dateTime72 = dateTime70.minus(readableDuration71);
        org.joda.time.DateTime dateTime74 = dateTime70.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property75 = dateTime74.dayOfYear();
        org.joda.time.DateTime dateTime76 = property75.withMinimumValue();
        boolean boolean77 = dateTime76.isAfterNow();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int79 = dateTime76.get(dateTimeFieldType78);
        org.joda.time.DurationFieldType durationFieldType80 = dateTimeFieldType78.getDurationType();
        org.joda.time.Partial partial81 = partial60.without(dateTimeFieldType78);
        org.joda.time.DateTime dateTime82 = dateTime20.withFields((org.joda.time.ReadablePartial) partial81);
        org.joda.time.DateTime dateTime84 = dateTime82.plusWeeks(0);
        org.joda.time.DateTime dateTime86 = dateTime84.plusMonths(62035);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime88 = dateTime86.withDayOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "halfdayOfDay" + "'", str14, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "fran\347ais (Canada)" + "'", str37, "fran\347ais (Canada)");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 12 + "'", int79 == 12);
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
    }

    @Test
    public void test10171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10171");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        java.lang.String str1 = durationFieldType0.toString();
        java.lang.String str2 = durationFieldType0.toString();
        java.lang.String str3 = durationFieldType0.toString();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "eras" + "'", str1, "eras");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eras" + "'", str2, "eras");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eras" + "'", str3, "eras");
    }

    @Test
    public void test10172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10172");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        java.lang.String str15 = property14.getName();
        int int16 = property14.get();
        org.joda.time.DateTime dateTime18 = property14.addToCopy(10);
        boolean boolean20 = dateTime18.isAfter((-89L));
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.withFields(readablePartial21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        boolean boolean25 = dateTime22.isSupported(dateTimeFieldType23);
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType23.getRangeDurationType();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        int int31 = partial28.compareTo((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology32 = partial28.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.year();
        org.joda.time.DateTimeZone dateTimeZone36 = chronology32.getZone();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.hourOfHalfday();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        int int43 = partial40.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = partial40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology44.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) 0, chronology44);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.minus(readableDuration48);
        org.joda.time.Chronology chronology50 = dateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.secondOfDay();
        org.joda.time.DurationField durationField52 = chronology50.weeks();
        org.joda.time.DateTimeZone dateTimeZone53 = chronology50.getZone();
        org.joda.time.Chronology chronology54 = chronology32.withZone(dateTimeZone53);
        org.joda.time.DateTimeField dateTimeField55 = chronology54.dayOfYear();
        boolean boolean56 = durationFieldType26.isSupported(chronology54);
        org.joda.time.DurationField durationField57 = chronology54.seconds();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "dayOfYear" + "'", str15, "dayOfYear");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(durationField57);
    }

    @Test
    public void test10173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10173");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = partial8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology12);
        org.joda.time.DateTime dateTime17 = dateTime15.withHourOfDay(0);
        org.joda.time.DateTime dateTime18 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime20 = dateTime17.plusHours(0);
        boolean boolean21 = dateTime17.isEqualNow();
        org.joda.time.DateTime.Property property22 = dateTime17.minuteOfHour();
        boolean boolean23 = property22.isLeap();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property22.getFieldType();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        int int30 = partial27.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = partial27.getChronology();
        org.joda.time.DurationField durationField32 = durationFieldType25.getField(chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.weekyearOfCentury();
        org.joda.time.DurationField durationField35 = dateTimeField34.getLeapDurationField();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        int int40 = partial37.compareTo((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = partial37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.Chronology chronology43 = chronology41.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = chronology43.weekOfWeekyear();
        int int46 = dateTimeField44.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        int int51 = partial48.compareTo((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        boolean boolean54 = partial50.isAfter((org.joda.time.ReadablePartial) partial53);
        java.lang.String str55 = partial53.toString();
        java.util.Locale locale57 = null;
        java.lang.String str58 = dateTimeField44.getAsShortText((org.joda.time.ReadablePartial) partial53, 53, locale57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        int int63 = partial60.compareTo((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Chronology chronology64 = partial60.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.era();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        int int70 = partial67.compareTo((org.joda.time.ReadablePartial) partial69);
        int[] intArray72 = new int[] { 2 };
        int int73 = dateTimeField65.getMinimumValue((org.joda.time.ReadablePartial) partial67, intArray72);
        int int74 = dateTimeField34.getMaximumValue((org.joda.time.ReadablePartial) partial53, intArray72);
        int[] intArray75 = partial53.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int int76 = property22.compareTo((org.joda.time.ReadablePartial) partial53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfHour' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNull(durationField35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 53 + "'", int46 == 53);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "53" + "'", str58, "53");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[2]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 99 + "'", int74 == 99);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
    }

    @Test
    public void test10174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10174");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.year();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology5.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        int int16 = partial13.compareTo((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = partial13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 0, chronology17);
        org.joda.time.DateTime dateTime22 = dateTime20.withHourOfDay(0);
        int int23 = dateTime22.getCenturyOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        int int29 = partial26.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = partial26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology30);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.minus(readableDuration34);
        org.joda.time.Chronology chronology36 = dateTime33.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str38 = dateTimeFieldType37.getName();
        int int39 = dateTime33.get(dateTimeFieldType37);
        org.joda.time.DateTime dateTime41 = dateTime33.minusMinutes(4);
        int int42 = dateTime33.getWeekyear();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime44 = dateTime33.plus(readableDuration43);
        boolean boolean45 = dateTime22.isAfter((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = dateTime22.minusWeeks((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int49 = dateTime47.get(dateTimeFieldType48);
        org.joda.time.DateTime dateTime50 = dateTime47.toDateTimeISO();
        org.joda.time.DateTime dateTime52 = dateTime47.withWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime53 = dateTime47.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean55 = dateTime53.isSupported(dateTimeFieldType54);
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType54.getRangeDurationType();
        boolean boolean57 = dateTime10.isSupported(dateTimeFieldType54);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        int int63 = partial60.compareTo((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Chronology chronology64 = partial60.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.Chronology chronology66 = chronology64.withZone(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) 0, chronology64);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.DateTime dateTime69 = dateTime67.minus(readableDuration68);
        org.joda.time.Chronology chronology70 = dateTime67.getChronology();
        org.joda.time.DateTime dateTime72 = dateTime67.withWeekyear(23);
        org.joda.time.DateTime dateTime74 = dateTime67.plusWeeks((-292275054));
        int int75 = dateTime67.getCenturyOfEra();
        boolean boolean76 = dateTime10.isBefore((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime.Property property77 = dateTime10.weekyear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 19 + "'", int23 == 19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "halfdayOfDay" + "'", str38, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 19 + "'", int75 == 19);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(property77);
    }

    @Test
    public void test10175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10175");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.DateTime dateTime26 = dateTime24.withHourOfDay(0);
        int int27 = dateTime26.getCenturyOfEra();
        boolean boolean29 = dateTime26.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime30 = dateTime26.withEarlierOffsetAtOverlap();
        boolean boolean31 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = dateTime30.minus((long) 3);
        org.joda.time.DateTime.Property property34 = dateTime30.minuteOfHour();
        org.joda.time.DateTime.Property property35 = dateTime30.dayOfYear();
        java.util.Locale locale36 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale37 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.lang.String str39 = locale36.getDisplayName();
        int int40 = property35.getMaximumShortTextLength(locale36);
        long long41 = property35.remainder();
        org.joda.time.DateTime dateTime43 = property35.addToCopy((long) 291);
        org.joda.time.DateTime dateTime45 = dateTime43.minusYears((-191523));
        org.joda.time.DateTime dateTime47 = dateTime43.minusDays(86399999);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 19 + "'", int27 == 19);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "fran\347ais (Canada)" + "'", str38, "fran\347ais (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\uce90\ub098\ub2e4)" + "'", str39, "\ud504\ub791\uc2a4\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test10176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10176");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.Chronology chronology2 = partial0.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = partial0.getFieldTypes();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        int int10 = partial7.compareTo((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readableDuration15);
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfSecond();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        int int19 = property17.getMaximumTextLength(locale18);
        long long20 = property17.remainder();
        int int21 = property17.getLeapAmount();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        int int28 = partial25.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = partial25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Chronology chronology31 = chronology29.withZone(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 0, chronology29);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.minus(readableDuration33);
        org.joda.time.DateTime dateTime36 = dateTime32.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property37 = dateTime36.dayOfYear();
        org.joda.time.DateTime dateTime38 = property37.withMinimumValue();
        java.util.Locale.Builder builder39 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder40 = builder39.clearExtensions();
        java.util.Locale.Builder builder41 = builder40.clearExtensions();
        java.util.Locale.Builder builder43 = builder40.addUnicodeLocaleAttribute("coreano");
        java.util.Locale.Category category44 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale45 = java.util.Locale.getDefault(category44);
        java.util.Locale.Builder builder46 = builder40.setLocale(locale45);
        java.util.Calendar calendar47 = dateTime38.toCalendar(locale45);
        org.joda.time.DateTime dateTime48 = property17.setCopy("2", locale45);
        java.lang.String str49 = locale45.getDisplayVariant();
        java.lang.String str50 = partial0.toString("720", locale45);
        java.util.Locale locale51 = locale45.stripExtensions();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + category44 + "' != '" + java.util.Locale.Category.FORMAT + "'", category44.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(calendar47);
        org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=-58380393600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=120,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "720" + "'", str50, "720");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_CA");
    }

    @Test
    public void test10177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10177");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.era();
        org.joda.time.DurationField durationField11 = durationFieldType1.getField(chronology7);
        java.lang.String str12 = durationFieldType1.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "centuries" + "'", str12, "centuries");
    }

    @Test
    public void test10178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10178");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2022-02-11T09:38:52.669Z", (double) (-973005120L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-9.7300512E8");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10179");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        org.joda.time.DurationField durationField15 = property12.getRangeDurationField();
        int int16 = property12.get();
        org.joda.time.DateTime dateTime18 = property12.addToCopy((long) 0);
        int int19 = property12.getLeapAmount();
        org.joda.time.DateTime dateTime20 = property12.withMaximumValue();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.minus(readableDuration31);
        org.joda.time.DateTime.Property property33 = dateTime32.millisOfSecond();
        org.joda.time.DateTime dateTime35 = dateTime32.minusMillis((int) (byte) -1);
        boolean boolean36 = dateTime20.isBefore((org.joda.time.ReadableInstant) dateTime35);
        java.util.GregorianCalendar gregorianCalendar37 = dateTime20.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime41 = dateTime20.withDate(3, 0, 328);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar37);
    }

    @Test
    public void test10180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10180");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfHour();
        int int17 = property16.getMaximumValue();
        long long18 = property16.remainder();
        org.joda.time.DateTime dateTime20 = property16.addToCopy(345600000L);
        org.joda.time.DateTime.Property property21 = dateTime20.year();
        org.joda.time.DateTime dateTime23 = property21.setCopy((-1873));
        org.joda.time.DurationField durationField24 = property21.getLeapDurationField();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test10181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10181");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        int int19 = partial16.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = partial16.getChronology();
        org.joda.time.DurationField durationField21 = durationFieldType14.getField(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.weekOfWeekyear();
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = dateTimeField22.getAsText(19, locale24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter13.withLocale(locale24);
        java.util.Locale locale27 = dateTimeFormatter26.getLocale();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        int int33 = partial30.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = partial30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 0, chronology34);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.minus(readableDuration38);
        org.joda.time.DateTime dateTime41 = dateTime37.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property42 = dateTime41.dayOfYear();
        org.joda.time.DateTime dateTime43 = property42.withMinimumValue();
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.DateTime.Property property45 = dateTime43.minuteOfDay();
        org.joda.time.format.DateTimePrinter dateTimePrinter46 = null;
        org.joda.time.format.DateTimeParser dateTimeParser47 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter46, dateTimeParser47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter48.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser50 = dateTimeFormatter48.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter51 = dateTimeFormatter48.getPrinter();
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        boolean boolean53 = locale52.hasExtensions();
        java.lang.String str54 = locale52.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter48.withLocale(locale52);
        java.lang.String str56 = property45.getAsShortText(locale52);
        java.lang.String str57 = locale52.getLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter26.withLocale(locale52);
        boolean boolean59 = dateTimeFormatter26.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str61 = dateTimeFormatter26.print(62462314200052L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "19" + "'", str25, "19");
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0120-01-01T00:00:00.000Z" + "'", str44, "0120-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNull(dateTimeParser50);
        org.junit.Assert.assertNull(dateTimePrinter51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0" + "'", str56, "0");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ko" + "'", str57, "ko");
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test10182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10182");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.months();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.yearOfCentury();
        long long18 = dateTimeField15.add((-981L), (int) '#');
        long long21 = dateTimeField15.add(62135596908340L, 233);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1104537599019L + "'", long18 == 1104537599019L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 69488409708340L + "'", long21 == 69488409708340L);
    }

    @Test
    public void test10183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10183");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        org.joda.time.DateTime dateTime14 = dateTime11.minus((long) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime11.plusDays(97);
        org.joda.time.DateTime.Property property17 = dateTime11.millisOfSecond();
        java.lang.String str18 = property17.getAsText();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
    }

    @Test
    public void test10184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10184");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = chronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.days();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        int int21 = partial18.compareTo((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = partial18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Chronology chronology24 = chronology22.withZone(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 0, chronology22);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.minus(readableDuration26);
        org.joda.time.Chronology chronology28 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.dayOfWeek();
        org.joda.time.DurationField durationField31 = chronology28.seconds();
        org.joda.time.DurationField durationField32 = durationFieldType15.getField(chronology28);
        org.joda.time.DurationField durationField33 = chronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology28.minuteOfDay();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        int int40 = partial37.compareTo((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = partial37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.Chronology chronology43 = chronology41.withZone(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 0, chronology41);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.minus(readableDuration45);
        org.joda.time.DateTime.Property property47 = dateTime46.millisOfSecond();
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        int int49 = property47.getMaximumTextLength(locale48);
        long long50 = property47.remainder();
        org.joda.time.Interval interval51 = property47.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = property47.getFieldType();
        org.joda.time.DateTimeField dateTimeField53 = property47.getField();
        java.lang.String str55 = dateTimeField53.getAsShortText(0L);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        int int60 = partial57.compareTo((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        boolean boolean63 = partial59.isAfter((org.joda.time.ReadablePartial) partial62);
        java.lang.String str64 = partial62.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray65 = partial62.getFieldTypes();
        java.util.Locale locale67 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale68 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str69 = locale67.getDisplayName(locale68);
        java.lang.String str70 = locale67.getDisplayVariant();
        java.util.Locale locale71 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale72 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str73 = locale71.getDisplayName(locale72);
        java.lang.String str74 = locale67.getDisplayName(locale71);
        java.util.Set<java.lang.String> strSet75 = locale67.getUnicodeLocaleAttributes();
        java.lang.String str76 = dateTimeField53.getAsShortText((org.joda.time.ReadablePartial) partial62, 999, locale67);
        int[] intArray81 = new int[] { 43200, 'a', 1, ' ' };
        int int82 = dateTimeField34.getMaximumValue((org.joda.time.ReadablePartial) partial62, intArray81);
        org.joda.time.Chronology chronology83 = partial62.getChronology();
        java.lang.String str84 = partial62.toString();
        java.util.Locale locale86 = null;
        java.lang.String str87 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) partial62, (int) (short) 10, locale86);
        org.joda.time.Chronology chronology88 = partial62.getChronology();
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray91 = chronology88.get(readablePeriod89, 3084766L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0" + "'", str55, "0");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "fran\347ais (Canada)" + "'", str69, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "fran\347ais (Canada)" + "'", str73, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "fran\347ais (Canada)" + "'", str74, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "999" + "'", str76, "999");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[43200, 97, 1, 32]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1439 + "'", int82 == 1439);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "[]" + "'", str84, "[]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "10" + "'", str87, "10");
        org.junit.Assert.assertNotNull(chronology88);
    }

    @Test
    public void test10185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10185");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        int int15 = dateTimeField13.getLeapAmount((long) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = dateTimeField13.getType();
        int int18 = dateTimeField13.get((long) (short) 1);
        long long20 = dateTimeField13.remainder((-35100888697L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 63911303L + "'", long20 == 63911303L);
    }

    @Test
    public void test10186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10186");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        long long12 = dateTime11.getMillis();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        boolean boolean20 = partial16.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.DateTime dateTime32 = dateTime30.withHourOfDay(0);
        org.joda.time.DateTime dateTime34 = dateTime32.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime34.toMutableDateTime();
        org.joda.time.DateTime dateTime36 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readableDuration47);
        org.joda.time.DateTime dateTime50 = dateTime46.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime52 = dateTime46.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime54 = dateTime52.minusWeeks(19);
        org.joda.time.DateTime dateTime56 = dateTime52.plusMillis((int) '#');
        int int57 = dateTime56.getDayOfMonth();
        boolean boolean58 = partial16.equals((java.lang.Object) dateTime56);
        boolean boolean59 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime61 = dateTime56.plusSeconds(2);
        org.joda.time.DateTime.Property property62 = dateTime56.secondOfDay();
        java.util.Locale locale63 = java.util.Locale.ITALY;
        java.lang.String str64 = locale63.getScript();
        java.lang.String str65 = locale63.getVariant();
        int int66 = property62.getMaximumTextLength(locale63);
        java.lang.String str67 = property62.getName();
        org.joda.time.DateTime dateTime68 = property62.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime69 = dateTime68.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "secondOfDay" + "'", str67, "secondOfDay");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test10187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10187");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("ca");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ca");
    }

    @Test
    public void test10188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10188");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        org.joda.time.Interval interval16 = property12.toInterval();
        org.joda.time.DateTime dateTime17 = property12.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(2);
        org.joda.time.DateTime.Property property20 = dateTime19.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime23 = dateTime19.withPeriodAdded(readablePeriod21, 23);
        org.joda.time.DateTime dateTime25 = dateTime23.withCenturyOfEra(52);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime27 = dateTime23.minus(readablePeriod26);
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTimeISO();
        org.joda.time.DateTime dateTime29 = dateTime28.withLaterOffsetAtOverlap();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test10189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10189");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        boolean boolean14 = partial10.isAfter((org.joda.time.ReadablePartial) partial13);
        java.lang.String str15 = partial13.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        org.joda.time.Partial partial17 = partial13.without(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = partial13.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.minuteOfHour();
        org.joda.time.DurationField durationField20 = chronology18.days();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(5269, 59, 23, (-19), 1934, (int) 'u', 68, chronology18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -19 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test10190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10190");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DurationField durationField20 = durationFieldType13.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime11.withChronology(chronology19);
        org.joda.time.DateTime dateTime24 = dateTime11.plusWeeks((int) (short) 1);
        org.joda.time.DateTime.Property property25 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime26 = property25.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.weekyear();
        org.joda.time.DateTime dateTime29 = dateTime26.minusMillis((int) (byte) 0);
        org.joda.time.DateTime.Property property30 = dateTime29.weekyear();
        org.joda.time.DateTime dateTime32 = dateTime29.withMillis((long) 18);
        int int33 = dateTime32.getYearOfCentury();
        int int34 = dateTime32.getWeekyear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 70 + "'", int33 == 70);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
    }

    @Test
    public void test10191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10191");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        int int18 = dateTime17.getSecondOfMinute();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        org.joda.time.DateTime dateTime32 = dateTime30.withYear((int) 'a');
        boolean boolean33 = dateTime30.isEqualNow();
        org.joda.time.DateMidnight dateMidnight34 = dateTime30.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone35 = dateMidnight34.getZone();
        org.joda.time.DateTime dateTime36 = dateTime17.withZoneRetainFields(dateTimeZone35);
        org.joda.time.DateTime.Property property37 = dateTime36.weekOfWeekyear();
        boolean boolean38 = dateTime36.isAfterNow();
        org.joda.time.DateTime dateTime39 = dateTime36.toDateTime();
        org.joda.time.DateTime.Property property40 = dateTime39.millisOfSecond();
        org.joda.time.DateTime dateTime42 = dateTime39.plusYears((int) (short) -1);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime45 = dateTime39.withPeriodAdded(readablePeriod43, 86340);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test10192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10192");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        boolean boolean7 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        int int13 = partial10.compareTo((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = partial10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Chronology chronology16 = chronology14.withZone(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 0, chronology14);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        int int20 = dateTime19.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DurationField durationField28 = durationFieldType21.getField(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.weekOfWeekyear();
        org.joda.time.DateTime dateTime30 = dateTime19.withChronology(chronology27);
        org.joda.time.DateTime dateTime32 = dateTime19.plusWeeks((int) (short) 1);
        boolean boolean33 = partial3.isMatch((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime35 = dateTime32.plusSeconds((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight36 = dateTime35.toDateMidnight();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = partial37.getFieldTypes();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        int int43 = partial40.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        boolean boolean46 = partial42.isAfter((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        int int52 = partial49.compareTo((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = partial49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 0, chronology53);
        org.joda.time.DateTime dateTime58 = dateTime56.withHourOfDay(0);
        org.joda.time.DateTime dateTime60 = dateTime58.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime61 = dateTime60.toMutableDateTime();
        org.joda.time.DateTime dateTime62 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean64 = partial42.isSupported(dateTimeFieldType63);
        int int65 = partial37.indexOf(dateTimeFieldType63);
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType63.getRangeDurationType();
        java.lang.String str67 = durationFieldType66.toString();
        org.joda.time.DateTime dateTime69 = dateTime35.withFieldAdded(durationFieldType66, 366);
        org.joda.time.format.DateTimePrinter dateTimePrinter70 = null;
        org.joda.time.format.DateTimeParser dateTimeParser71 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter70, dateTimeParser71);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter72.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser74 = dateTimeFormatter72.getParser();
        int int75 = dateTimeFormatter72.getDefaultYear();
        org.joda.time.Chronology chronology76 = dateTimeFormatter72.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter77 = null;
        org.joda.time.format.DateTimeParser dateTimeParser78 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter77, dateTimeParser78);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Partial partial81 = new org.joda.time.Partial(chronology80);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Partial partial83 = new org.joda.time.Partial(chronology82);
        int int84 = partial81.compareTo((org.joda.time.ReadablePartial) partial83);
        org.joda.time.Chronology chronology85 = partial81.getChronology();
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.Chronology chronology87 = chronology85.withZone(dateTimeZone86);
        org.joda.time.DateTimeField dateTimeField88 = chronology87.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone89 = chronology87.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter90 = dateTimeFormatter79.withZone(dateTimeZone89);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter91 = dateTimeFormatter72.withZone(dateTimeZone89);
        org.joda.time.DateTime dateTime92 = new org.joda.time.DateTime(dateTimeZone89);
        org.joda.time.DateTime dateTime93 = new org.joda.time.DateTime(dateTimeZone89);
        org.joda.time.DateTime dateTime95 = dateTime93.withYearOfEra(100);
        boolean boolean96 = dateTime35.equals((java.lang.Object) dateTime95);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime98 = dateTime95.withMinuteOfHour(2000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2000 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 19 + "'", int20 == 19);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "years" + "'", str67, "years");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNull(dateTimeParser74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2000 + "'", int75 == 2000);
        org.junit.Assert.assertNull(chronology76);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertNotNull(dateTimeFormatter90);
        org.junit.Assert.assertNotNull(dateTimeFormatter91);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test10193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10193");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        int int10 = partial7.compareTo((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readableDuration25);
        org.joda.time.Chronology chronology27 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfMonth();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        int int33 = partial30.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        boolean boolean36 = partial32.isAfter((org.joda.time.ReadablePartial) partial35);
        java.lang.String str37 = partial35.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        org.joda.time.Partial partial39 = partial35.without(dateTimeFieldType38);
        java.util.Locale locale41 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale42 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str43 = locale41.getDisplayName(locale42);
        java.lang.String str44 = locale41.getDisplayVariant();
        java.util.Locale locale45 = locale41.stripExtensions();
        java.lang.String str46 = dateTimeField28.getAsText((org.joda.time.ReadablePartial) partial35, 53, locale45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        int int52 = partial49.compareTo((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = partial49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 0, chronology53);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.minus(readableDuration57);
        org.joda.time.DateTime dateTime60 = dateTime56.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime62 = dateTime56.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime64 = dateTime62.minusWeeks(19);
        boolean boolean65 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime62);
        long long67 = chronology11.set((org.joda.time.ReadablePartial) partial35, (-62135596800000L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter3.withChronology(chronology11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter68.withDefaultYear(86340);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter70.withPivotYear(0);
        java.util.Locale locale73 = dateTimeFormatter70.getLocale();
        java.util.Locale locale74 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale75 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str76 = locale74.getDisplayName(locale75);
        java.lang.String str77 = locale74.toLanguageTag();
        java.lang.String str78 = locale74.toLanguageTag();
        java.lang.String str79 = locale74.getDisplayScript();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter70.withLocale(locale74);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Partial partial82 = new org.joda.time.Partial(chronology81);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Partial partial84 = new org.joda.time.Partial(chronology83);
        int int85 = partial82.compareTo((org.joda.time.ReadablePartial) partial84);
        org.joda.time.Chronology chronology86 = partial82.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean88 = partial82.isSupported(dateTimeFieldType87);
        org.joda.time.Chronology chronology89 = partial82.getChronology();
        org.joda.time.DateTimeField dateTimeField90 = chronology89.dayOfMonth();
        long long94 = chronology89.add(35L, (long) 720, 12);
        org.joda.time.DateTimeField dateTimeField95 = chronology89.minuteOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter96 = dateTimeFormatter80.withChronology(chronology89);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "fran\347ais (Canada)" + "'", str43, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "53" + "'", str46, "53");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-62135596800000L) + "'", long67 == (-62135596800000L));
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertNull(locale73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "fran\347ais (Canada)" + "'", str76, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "fr-CA" + "'", str77, "fr-CA");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "fr-CA" + "'", str78, "fr-CA");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 8675L + "'", long94 == 8675L);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertNotNull(dateTimeFormatter96);
    }

    @Test
    public void test10194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10194");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.era();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        int int14 = partial11.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = partial11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 0, chronology15);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.minus(readableDuration19);
        org.joda.time.Chronology chronology21 = dateTime18.getChronology();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        long long25 = chronology21.set((org.joda.time.ReadablePartial) partial23, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial23.getFieldTypes();
        java.util.Locale locale27 = java.util.Locale.PRC;
        boolean boolean28 = partial23.equals((java.lang.Object) locale27);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = partial31.getChronology();
        org.joda.time.DurationField durationField36 = durationFieldType29.getField(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.weekyearOfCentury();
        org.joda.time.DurationField durationField39 = dateTimeField38.getLeapDurationField();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        int int44 = partial41.compareTo((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = partial41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Chronology chronology47 = chronology45.withZone(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = chronology47.weekOfWeekyear();
        int int50 = dateTimeField48.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        int int55 = partial52.compareTo((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        boolean boolean58 = partial54.isAfter((org.joda.time.ReadablePartial) partial57);
        java.lang.String str59 = partial57.toString();
        java.util.Locale locale61 = null;
        java.lang.String str62 = dateTimeField48.getAsShortText((org.joda.time.ReadablePartial) partial57, 53, locale61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        int int67 = partial64.compareTo((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = partial64.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.era();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = new org.joda.time.Partial(chronology72);
        int int74 = partial71.compareTo((org.joda.time.ReadablePartial) partial73);
        int[] intArray76 = new int[] { 2 };
        int int77 = dateTimeField69.getMinimumValue((org.joda.time.ReadablePartial) partial71, intArray76);
        int int78 = dateTimeField38.getMaximumValue((org.joda.time.ReadablePartial) partial57, intArray76);
        int[] intArray79 = partial57.getValues();
        int int80 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) partial23, intArray79);
        int int81 = partial23.size();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNull(durationField39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 53 + "'", int50 == 53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[]" + "'", str59, "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "53" + "'", str62, "53");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[2]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 99 + "'", int78 == 99);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test10195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10195");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale6.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withLocale(locale6);
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronolgy();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = partial14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 0, chronology18);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.minus(readableDuration22);
        org.joda.time.Chronology chronology24 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.dayOfWeek();
        org.joda.time.DurationField durationField27 = chronology24.seconds();
        org.joda.time.DurationField durationField28 = durationFieldType11.getField(chronology24);
        org.joda.time.DurationField durationField29 = chronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField30 = chronology24.minuteOfDay();
        java.util.Locale locale31 = java.util.Locale.US;
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale32.getDisplayScript(locale33);
        java.util.Locale locale35 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str36 = locale35.getDisplayCountry();
        java.lang.String str37 = locale33.getDisplayName(locale35);
        java.lang.String str38 = locale35.getScript();
        java.lang.String str39 = locale31.getDisplayCountry(locale35);
        int int40 = dateTimeField30.getMaximumTextLength(locale35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter2.withLocale(locale35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.ReadableInstant readableInstant43 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = dateTimeFormatter2.print(readableInstant43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\uce90\ub098\ub2e4" + "'", str36, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "cor\351en" + "'", str37, "cor\351en");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Etats-Unis" + "'", str39, "Etats-Unis");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
    }

    @Test
    public void test10196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10196");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        int int20 = dateTime19.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str22 = dateTimeFieldType21.getName();
        boolean boolean23 = dateTime19.isSupported(dateTimeFieldType21);
        int int24 = dateTime19.getDayOfMonth();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        int int30 = partial27.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = partial27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 0, chronology31);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.minus(readableDuration35);
        org.joda.time.Chronology chronology37 = dateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfMonth();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        int int43 = partial40.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        boolean boolean46 = partial42.isAfter((org.joda.time.ReadablePartial) partial45);
        java.lang.String str47 = partial45.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        org.joda.time.Partial partial49 = partial45.without(dateTimeFieldType48);
        java.util.Locale locale51 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str53 = locale51.getDisplayName(locale52);
        java.lang.String str54 = locale51.getDisplayVariant();
        java.util.Locale locale55 = locale51.stripExtensions();
        java.lang.String str56 = dateTimeField38.getAsText((org.joda.time.ReadablePartial) partial45, 53, locale55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        int int62 = partial59.compareTo((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Chronology chronology63 = partial59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.Chronology chronology65 = chronology63.withZone(dateTimeZone64);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) 0, chronology63);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.DateTime dateTime68 = dateTime66.minus(readableDuration67);
        org.joda.time.DateTime dateTime70 = dateTime66.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime72 = dateTime66.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime74 = dateTime72.minusWeeks(19);
        boolean boolean75 = partial45.isMatch((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime77 = dateTime72.minusMillis(53);
        int int78 = dateTime77.getSecondOfMinute();
        boolean boolean79 = dateTime19.isBefore((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTime.Property property80 = dateTime77.yearOfEra();
        org.joda.time.DateTime dateTime81 = dateTime77.toDateTimeISO();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "halfdayOfDay" + "'", str22, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "fran\347ais (Canada)" + "'", str53, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "53" + "'", str56, "53");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 59 + "'", int78 == 59);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(dateTime81);
    }

    @Test
    public void test10197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10197");
        java.util.Locale locale1 = new java.util.Locale("1439");
        org.junit.Assert.assertEquals(locale1.toString(), "1439");
    }

    @Test
    public void test10198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10198");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        int int16 = property12.getLeapAmount();
        int int17 = property12.getMinimumValue();
        org.joda.time.DateTime dateTime18 = property12.roundHalfCeilingCopy();
        long long19 = property12.remainder();
        org.joda.time.DateTime dateTime21 = property12.addWrapFieldToCopy((int) (byte) 100);
        int int22 = dateTime21.getCenturyOfEra();
        boolean boolean24 = dateTime21.isAfter((long) 72);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 19 + "'", int22 == 19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test10199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10199");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = chronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfDay();
        org.joda.time.DurationField durationField15 = chronology12.millis();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.clockhourOfDay();
        java.lang.String str17 = dateTimeField16.toString();
        long long19 = dateTimeField16.roundHalfCeiling((-36L));
        long long21 = dateTimeField16.roundHalfFloor((-11412000001L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DateTimeField[clockhourOfDay]" + "'", str17, "DateTimeField[clockhourOfDay]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-11412000000L) + "'", long21 == (-11412000000L));
    }

    @Test
    public void test10200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10200");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        org.joda.time.DateTime dateTime14 = dateTime11.minus((long) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime11.plusDays(97);
        org.joda.time.DateTime.Property property17 = dateTime11.dayOfWeek();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DurationField durationField27 = chronology24.minutes();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 100, chronology24);
        org.joda.time.DateTimeField dateTimeField29 = chronology24.minuteOfHour();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) dateTime11, chronology24);
        org.joda.time.DateTime.Property property31 = dateTime11.minuteOfHour();
        org.joda.time.DateTime dateTime33 = dateTime11.minusMonths(119);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTime33.getZone();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
    }

    @Test
    public void test10201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10201");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str14 = dateTimeFieldType13.getName();
        int int15 = dateTime9.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime17 = dateTime9.minusMinutes(4);
        java.lang.String str18 = dateTime9.toString();
        org.joda.time.DateTime dateTime20 = dateTime9.minusWeeks((int) (short) 100);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime9.plus(readableDuration21);
        org.joda.time.DateTime dateTime23 = dateTime9.withTimeAtStartOfDay();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "halfdayOfDay" + "'", str14, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str18, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test10202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10202");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.centuryOfEra();
        boolean boolean16 = dateTimeField15.isSupported();
        java.lang.String str17 = dateTimeField15.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DateTimeField[centuryOfEra]" + "'", str17, "DateTimeField[centuryOfEra]");
    }

    @Test
    public void test10203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10203");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 317);
        int int14 = dateTimeFormatter6.getDefaultYear();
        boolean boolean15 = dateTimeFormatter6.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = null;
        org.joda.time.format.DateTimeParser dateTimeParser17 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter16, dateTimeParser17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter18.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser20 = dateTimeFormatter18.getParser();
        int int21 = dateTimeFormatter18.getDefaultYear();
        org.joda.time.Chronology chronology22 = dateTimeFormatter18.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        int int30 = partial27.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = partial27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone35 = chronology33.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter25.withZone(dateTimeZone35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter18.withZone(dateTimeZone35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        int int43 = partial40.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = partial40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology44.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) 0, chronology44);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.minus(readableDuration48);
        org.joda.time.Chronology chronology50 = dateTime47.getChronology();
        org.joda.time.Chronology chronology51 = chronology50.withUTC();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.hourOfDay();
        org.joda.time.DurationField durationField53 = chronology50.millis();
        org.joda.time.DurationField durationField54 = chronology50.days();
        org.joda.time.DateTimeField dateTimeField55 = chronology50.yearOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter18.withChronology(chronology50);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        int int62 = partial59.compareTo((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Chronology chronology63 = partial59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.Chronology chronology65 = chronology63.withZone(dateTimeZone64);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) 0, chronology63);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.DateTime dateTime68 = dateTime66.minus(readableDuration67);
        org.joda.time.Chronology chronology69 = dateTime66.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField71 = chronology69.dayOfWeek();
        org.joda.time.DurationField durationField72 = chronology69.seconds();
        org.joda.time.DurationField durationField73 = chronology69.months();
        org.joda.time.DateTimeField dateTimeField74 = chronology69.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        long long78 = chronology69.add(readablePeriod75, (long) 43200, 97);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter18.withChronology(chronology69);
        boolean boolean80 = dateTimeFormatter79.isOffsetParsed();
        java.util.Locale locale81 = dateTimeFormatter79.getLocale();
        java.util.Locale locale82 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str83 = locale82.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter84 = dateTimeFormatter79.withLocale(locale82);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter85 = dateTimeFormatter6.withLocale(locale82);
        java.util.Locale locale86 = dateTimeFormatter85.getLocale();
        java.lang.String str87 = locale86.getDisplayCountry();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2000 + "'", int14 == 2000);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(dateTimeParser20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2000 + "'", int21 == 2000);
        org.junit.Assert.assertNull(chronology22);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 43200L + "'", long78 == 43200L);
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(locale81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\uce90\ub098\ub2e4" + "'", str83, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(dateTimeFormatter84);
        org.junit.Assert.assertNotNull(dateTimeFormatter85);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "\uce90\ub098\ub2e4" + "'", str87, "\uce90\ub098\ub2e4");
    }

    @Test
    public void test10204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10204");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("zh", (double) (byte) 0);
        java.lang.String str3 = languageRange2.getRange();
        double double4 = languageRange2.getWeight();
        java.lang.String str5 = languageRange2.getRange();
        double double6 = languageRange2.getWeight();
        java.lang.String str7 = languageRange2.getRange();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zh" + "'", str3, "zh");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh" + "'", str5, "zh");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh" + "'", str7, "zh");
    }

    @Test
    public void test10205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10205");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DurationField durationField10 = chronology7.minutes();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100, chronology7);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.minuteOfHour();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 1970, chronology7);
        org.joda.time.DateTimeField dateTimeField14 = chronology7.hourOfDay();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test10206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10206");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        int int10 = partial7.compareTo((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readableDuration25);
        org.joda.time.Chronology chronology27 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfMonth();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        int int33 = partial30.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        boolean boolean36 = partial32.isAfter((org.joda.time.ReadablePartial) partial35);
        java.lang.String str37 = partial35.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        org.joda.time.Partial partial39 = partial35.without(dateTimeFieldType38);
        java.util.Locale locale41 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale42 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str43 = locale41.getDisplayName(locale42);
        java.lang.String str44 = locale41.getDisplayVariant();
        java.util.Locale locale45 = locale41.stripExtensions();
        java.lang.String str46 = dateTimeField28.getAsText((org.joda.time.ReadablePartial) partial35, 53, locale45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        int int52 = partial49.compareTo((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = partial49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 0, chronology53);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.minus(readableDuration57);
        org.joda.time.DateTime dateTime60 = dateTime56.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime62 = dateTime56.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime64 = dateTime62.minusWeeks(19);
        boolean boolean65 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime62);
        long long67 = chronology11.set((org.joda.time.ReadablePartial) partial35, (-62135596800000L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter3.withChronology(chronology11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter68.withDefaultYear(86340);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter70.withPivotYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter70.withPivotYear((java.lang.Integer) 120);
        org.joda.time.format.DateTimeParser dateTimeParser75 = dateTimeFormatter74.getParser();
        java.util.Locale locale76 = dateTimeFormatter74.getLocale();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "fran\347ais (Canada)" + "'", str43, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "53" + "'", str46, "53");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-62135596800000L) + "'", long67 == (-62135596800000L));
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNull(dateTimeParser75);
        org.junit.Assert.assertNull(locale76);
    }

    @Test
    public void test10207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10207");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        org.joda.time.DurationField durationField15 = property12.getRangeDurationField();
        int int16 = property12.get();
        org.joda.time.DateTime dateTime18 = property12.addToCopy((long) 0);
        int int19 = property12.getLeapAmount();
        org.joda.time.DateTime dateTime20 = property12.withMaximumValue();
        java.lang.String str21 = property12.getAsShortText();
        org.joda.time.DateTime dateTime22 = property12.roundCeilingCopy();
        org.joda.time.DateTime.Property property23 = dateTime22.millisOfDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int[] intArray26 = partial25.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean28 = partial25.isSupported(dateTimeFieldType27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial31 = partial25.withPeriodAdded(readablePeriod29, (int) (byte) 10);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = partial34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 0, chronology38);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime43 = dateTime41.minus(readableDuration42);
        org.joda.time.DateTime dateTime45 = dateTime41.withYearOfEra((int) 'x');
        int int46 = dateTime45.getWeekOfWeekyear();
        org.joda.time.Instant instant47 = dateTime45.toInstant();
        org.joda.time.DateTime dateTime49 = dateTime45.withMillis(180100L);
        org.joda.time.DateTime.Property property50 = dateTime49.millisOfSecond();
        int int51 = dateTime49.getYearOfEra();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.DateTime dateTime53 = dateTime49.minus(readableDuration52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.DateTime dateTime56 = dateTime49.withDurationAdded(readableDuration54, 19);
        org.joda.time.DateTime dateTime58 = dateTime49.plusHours((int) (byte) 0);
        org.joda.time.DateTime dateTime59 = partial31.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        int int60 = partial31.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray61 = partial31.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            int int62 = property23.compareTo((org.joda.time.ReadablePartial) partial31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray61);
    }

    @Test
    public void test10208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10208");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        int int14 = dateTime9.getCenturyOfEra();
        org.joda.time.Chronology chronology15 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.yearOfCentury();
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test10209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10209");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        int int20 = dateTime19.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str22 = dateTimeFieldType21.getName();
        boolean boolean23 = dateTime19.isSupported(dateTimeFieldType21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        int int29 = partial26.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = partial26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        int int39 = partial36.compareTo((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = partial36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.Chronology chronology42 = chronology40.withZone(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 0, chronology40);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTime dateTime45 = dateTime43.minus(readableDuration44);
        org.joda.time.Chronology chronology46 = dateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.dayOfMonth();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        int int52 = partial49.compareTo((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        boolean boolean55 = partial51.isAfter((org.joda.time.ReadablePartial) partial54);
        java.lang.String str56 = partial54.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        org.joda.time.Partial partial58 = partial54.without(dateTimeFieldType57);
        java.util.Locale locale60 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale61 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str62 = locale60.getDisplayName(locale61);
        java.lang.String str63 = locale60.getDisplayVariant();
        java.util.Locale locale64 = locale60.stripExtensions();
        java.lang.String str65 = dateTimeField47.getAsText((org.joda.time.ReadablePartial) partial54, 53, locale64);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        int int71 = partial68.compareTo((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = partial68.getChronology();
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.Chronology chronology74 = chronology72.withZone(dateTimeZone73);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) 0, chronology72);
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.DateTime dateTime77 = dateTime75.minus(readableDuration76);
        org.joda.time.DateTime dateTime79 = dateTime75.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime81 = dateTime75.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime83 = dateTime81.minusWeeks(19);
        boolean boolean84 = partial54.isMatch((org.joda.time.ReadableInstant) dateTime81);
        long long86 = chronology30.set((org.joda.time.ReadablePartial) partial54, (-62135596800000L));
        org.joda.time.DateTimeField dateTimeField87 = dateTimeFieldType21.getField(chronology30);
        org.joda.time.DurationFieldType durationFieldType88 = dateTimeFieldType21.getDurationType();
        java.lang.String str89 = durationFieldType88.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "halfdayOfDay" + "'", str22, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "fran\347ais (Canada)" + "'", str62, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "53" + "'", str65, "53");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + (-62135596800000L) + "'", long86 == (-62135596800000L));
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(durationFieldType88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "halfdays" + "'", str89, "halfdays");
    }

    @Test
    public void test10210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10210");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.minuteOfHour();
        java.util.Locale locale16 = new java.util.Locale("chn", "DateTimeField[dayOfMonth]", "seconds");
        java.lang.String str17 = dateTimeField11.getAsText(0, locale16);
        int int18 = dateTimeField11.getMinimumValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals(locale16.toString(), "chn_DATETIMEFIELD[DAYOFMONTH]_seconds");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test10211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10211");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.DateTime dateTime15 = property14.withMinimumValue();
        boolean boolean16 = dateTime15.isAfterNow();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int18 = dateTime15.get(dateTimeFieldType17);
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.lang.String str22 = locale19.getDisplayName();
        java.util.Calendar calendar23 = dateTime15.toCalendar(locale19);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime15.getZone();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMillis(86399990);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMonths(0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fran\347ais (Canada)" + "'", str21, "fran\347ais (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\uce90\ub098\ub2e4)" + "'", str22, "\ud504\ub791\uc2a4\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-58380393600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=120,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test10212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10212");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        int int16 = dateTime15.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property17 = dateTime15.weekOfWeekyear();
        org.joda.time.DateTime dateTime19 = property17.addToCopy(0);
        org.joda.time.DateTime dateTime21 = dateTime19.withCenturyOfEra(42);
        org.joda.time.DateTime.Property property22 = dateTime19.hourOfDay();
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("Korean");
        java.lang.String str25 = property22.getAsShortText(locale24);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "korean");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
    }

    @Test
    public void test10213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10213");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.centuryOfEra();
        org.joda.time.DurationField durationField16 = chronology12.hours();
        org.joda.time.Chronology chronology17 = chronology12.withUTC();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test10214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10214");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readableDuration20);
        org.joda.time.Chronology chronology22 = dateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfMonth();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        int int28 = partial25.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        boolean boolean31 = partial27.isAfter((org.joda.time.ReadablePartial) partial30);
        java.lang.String str32 = partial30.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        org.joda.time.Partial partial34 = partial30.without(dateTimeFieldType33);
        java.util.Locale locale36 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale37 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.lang.String str39 = locale36.getDisplayVariant();
        java.util.Locale locale40 = locale36.stripExtensions();
        java.lang.String str41 = dateTimeField23.getAsText((org.joda.time.ReadablePartial) partial30, 53, locale40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        int int47 = partial44.compareTo((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology48 = partial44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) 0, chronology48);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.DateTime dateTime53 = dateTime51.minus(readableDuration52);
        org.joda.time.DateTime dateTime55 = dateTime51.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime57 = dateTime51.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime59 = dateTime57.minusWeeks(19);
        boolean boolean60 = partial30.isMatch((org.joda.time.ReadableInstant) dateTime57);
        long long62 = chronology6.set((org.joda.time.ReadablePartial) partial30, (-62135596800000L));
        org.joda.time.DateTimeField dateTimeField63 = chronology6.dayOfYear();
        org.joda.time.Chronology chronology64 = chronology6.withUTC();
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        long long68 = chronology64.add(readablePeriod65, (long) (-292275054), 34690);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "fran\347ais (Canada)" + "'", str38, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "53" + "'", str41, "53");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-62135596800000L) + "'", long62 == (-62135596800000L));
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-292275054L) + "'", long68 == (-292275054L));
    }

    @Test
    public void test10215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10215");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int int25 = partial22.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = partial22.getChronology();
        org.joda.time.DurationField durationField27 = durationFieldType20.getField(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfMonth();
        org.joda.time.DateTime dateTime30 = dateTime19.toDateTime(chronology26);
        org.joda.time.Chronology chronology31 = chronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = chronology26.hourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology26.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField34 = chronology26.hourOfDay();
        long long37 = dateTimeField34.addWrapField((-61851599999900L), 24);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        int int43 = partial40.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = partial40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology44.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) 0, chronology44);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.minus(readableDuration48);
        org.joda.time.DateTime.Property property50 = dateTime49.millisOfSecond();
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        int int52 = property50.getMaximumTextLength(locale51);
        long long53 = property50.remainder();
        org.joda.time.Interval interval54 = property50.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property50.getFieldType();
        org.joda.time.DateTimeField dateTimeField56 = property50.getField();
        java.lang.String str58 = dateTimeField56.getAsShortText(0L);
        java.util.Locale locale59 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale60 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str61 = locale59.getDisplayName(locale60);
        java.lang.String str62 = locale59.getDisplayVariant();
        java.util.Locale locale63 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale64 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str65 = locale63.getDisplayName(locale64);
        java.lang.String str66 = locale59.getDisplayName(locale63);
        int int67 = dateTimeField56.getMaximumShortTextLength(locale63);
        int int68 = dateTimeField34.getMaximumTextLength(locale63);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-61851599999900L) + "'", long37 == (-61851599999900L));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0" + "'", str58, "0");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "fran\347ais (Canada)" + "'", str61, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "fran\347ais (Canada)" + "'", str65, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "fran\347ais (Canada)" + "'", str66, "fran\347ais (Canada)");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
    }

    @Test
    public void test10216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10216");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        int int16 = property12.getLeapAmount();
        org.joda.time.DateTime dateTime17 = property12.withMinimumValue();
        org.joda.time.DateTime dateTime19 = dateTime17.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTime dateTime21 = dateTime19.withMillis(43200000L);
        org.joda.time.DateTime.Property property22 = dateTime19.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime19.withMillisOfDay(86399);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime19.getZone();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
    }

    @Test
    public void test10217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10217");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(727557L);
    }

    @Test
    public void test10218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10218");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale6.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withLocale(locale6);
        boolean boolean10 = dateTimeFormatter9.isPrinter();
        java.util.Locale locale11 = java.util.Locale.CHINA;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withLocale(locale11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter12.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter13.withPivotYear((java.lang.Integer) (-27409536));
        java.util.Locale locale16 = java.util.Locale.ITALY;
        java.lang.String str17 = locale16.getScript();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter15.withLocale(locale16);
        java.util.Set<java.lang.Character> charSet20 = locale16.getExtensionKeys();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(charSet20);
    }

    @Test
    public void test10219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10219");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str4 = locale3.getDisplayCountry();
        java.util.Locale.Builder builder5 = builder0.setLocale(locale3);
        java.util.Locale.Builder builder7 = builder5.setRegion("CA");
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder9 = builder8.clear();
        java.util.Locale locale10 = builder8.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder8.setLanguageTag("fran\347ais (canada)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: franc?ais (canada) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uce90\ub098\ub2e4" + "'", str4, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
    }

    @Test
    public void test10220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10220");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.minus(readableDuration11);
        org.joda.time.Chronology chronology13 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.dayOfWeek();
        org.joda.time.DurationField durationField16 = chronology13.seconds();
        org.joda.time.DurationField durationField17 = durationFieldType0.getField(chronology13);
        org.joda.time.DurationField durationField18 = chronology13.weekyears();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.Chronology chronology31 = dateTime28.getChronology();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        long long35 = chronology31.set((org.joda.time.ReadablePartial) partial33, (long) (byte) -1);
        long long37 = chronology13.set((org.joda.time.ReadablePartial) partial33, (long) 86399999);
        org.joda.time.DateTimeField[] dateTimeFieldArray38 = partial33.getFields();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial33.plus(readablePeriod39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial40.withPeriodAdded(readablePeriod41, (int) (byte) 1);
        int[] intArray44 = partial40.getValues();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 86399999L + "'", long37 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldArray38);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
    }

    @Test
    public void test10221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10221");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        org.joda.time.Interval interval16 = property12.toInterval();
        int int17 = property12.getMinimumValue();
        org.joda.time.DateTime dateTime18 = property12.withMaximumValue();
        org.joda.time.DateTime dateTime19 = property12.roundCeilingCopy();
        boolean boolean21 = dateTime19.isAfter(4398834236091172095L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test10222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10222");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        long long12 = dateTime11.getMillis();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        boolean boolean20 = partial16.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.DateTime dateTime32 = dateTime30.withHourOfDay(0);
        org.joda.time.DateTime dateTime34 = dateTime32.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime34.toMutableDateTime();
        org.joda.time.DateTime dateTime36 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readableDuration47);
        org.joda.time.DateTime dateTime50 = dateTime46.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime52 = dateTime46.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime54 = dateTime52.minusWeeks(19);
        org.joda.time.DateTime dateTime56 = dateTime52.plusMillis((int) '#');
        int int57 = dateTime56.getDayOfMonth();
        boolean boolean58 = partial16.equals((java.lang.Object) dateTime56);
        boolean boolean59 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime61 = dateTime56.plusSeconds(2);
        org.joda.time.DateTime dateTime63 = dateTime61.minusHours(7);
        boolean boolean64 = dateTime61.isAfterNow();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test10223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10223");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int int25 = partial22.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = partial22.getChronology();
        org.joda.time.DurationField durationField27 = durationFieldType20.getField(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfMonth();
        org.joda.time.DateTime dateTime30 = dateTime19.toDateTime(chronology26);
        org.joda.time.DateTimeField dateTimeField31 = chronology26.weekyearOfCentury();
        boolean boolean32 = dateTimeField31.isSupported();
        org.joda.time.ReadablePartial readablePartial33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        boolean boolean41 = partial37.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Partial partial42 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean44 = partial37.isSupported(dateTimeFieldType43);
        int[] intArray45 = partial37.getValues();
        int int46 = dateTimeField31.getMaximumValue(readablePartial33, intArray45);
        int int49 = dateTimeField31.getDifference(60L, (long) (-10));
        int int51 = dateTimeField31.getLeapAmount(0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 99 + "'", int46 == 99);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test10224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10224");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        org.joda.time.Chronology chronology5 = dateTimeFormatter3.getChronolgy();
        int int6 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter3.getParser();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        int int13 = partial10.compareTo((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = partial10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Chronology chronology16 = chronology14.withZone(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 0, chronology14);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        int int20 = dateTime19.getCenturyOfEra();
        boolean boolean22 = dateTime19.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime23 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean25 = dateTime19.isSupported(dateTimeFieldType24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        int int31 = partial28.compareTo((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology32 = partial28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 0, chronology32);
        org.joda.time.DateTime dateTime37 = dateTime35.withHourOfDay(0);
        org.joda.time.DateTime dateTime39 = dateTime37.withYear((int) 'a');
        boolean boolean40 = dateTime37.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime37.getZone();
        org.joda.time.DateTime dateTime42 = dateTime19.withZoneRetainFields(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter3.withZone(dateTimeZone41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter44.withZoneUTC();
        java.util.Locale locale46 = dateTimeFormatter44.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter44.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long49 = dateTimeFormatter47.parseMillis("2022-02-11T09:36:45.288Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNull(dateTimeParser7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 19 + "'", int20 == 19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNull(locale46);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
    }

    @Test
    public void test10225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10225");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime9.minus(readablePeriod14);
        int int16 = dateTime15.getDayOfWeek();
        org.joda.time.DateTime dateTime18 = dateTime15.minusYears(35);
        org.joda.time.DateTime.Property property19 = dateTime18.weekyear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int int25 = partial22.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = partial22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.Chronology chronology28 = chronology26.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 0, chronology26);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.minus(readableDuration30);
        org.joda.time.DateTime.Property property32 = dateTime31.millisOfSecond();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        int int34 = property32.getMaximumTextLength(locale33);
        long long35 = property32.remainder();
        int int36 = property32.getLeapAmount();
        org.joda.time.DateTime dateTime37 = property32.withMinimumValue();
        org.joda.time.DateTime dateTime39 = dateTime37.withCenturyOfEra((int) (short) 1);
        boolean boolean40 = dateTime18.isEqual((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime.Property property41 = dateTime18.weekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test10226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10226");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property15 = dateTime11.era();
        org.joda.time.DateTime.Property property16 = dateTime11.secondOfDay();
        org.joda.time.DateTime dateTime18 = dateTime11.minusHours(0);
        int int19 = dateTime11.getMonthOfYear();
        java.util.Date date20 = dateTime11.toDate();
        org.joda.time.DateTime dateTime22 = dateTime11.plusSeconds((-694733));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test10227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10227");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.centuryOfEra();
        long long17 = chronology7.add(2071188120L, 0L, 2022);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2071188120L + "'", long17 == 2071188120L);
    }

    @Test
    public void test10228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10228");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("ko");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.lang.String[] strArray10 = new java.lang.String[] { "", "hi!", "fran\347ais (Canada)" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.lang.String str13 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.lang.String str17 = locale14.toLanguageTag();
        java.lang.String str18 = locale14.getISO3Country();
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.lang.String str22 = locale19.toLanguageTag();
        java.lang.String str23 = locale19.toLanguageTag();
        java.util.Locale locale24 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str25 = locale24.getCountry();
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.lang.String str29 = locale26.toLanguageTag();
        java.util.Locale locale30 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale31 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.lang.String str33 = locale30.toLanguageTag();
        java.lang.String str34 = locale30.toLanguageTag();
        boolean boolean35 = locale30.hasExtensions();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        int int41 = partial38.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 0, chronology42);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.minus(readableDuration46);
        org.joda.time.DateTime.Property property48 = dateTime47.millisOfSecond();
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        int int50 = property48.getMaximumTextLength(locale49);
        java.util.Locale locale51 = java.util.Locale.CANADA_FRENCH;
        boolean boolean52 = locale51.hasExtensions();
        java.util.Locale[] localeArray53 = new java.util.Locale[] { locale14, locale19, locale24, locale26, locale30, locale49, locale51 };
        java.util.ArrayList<java.util.Locale> localeList54 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList54, localeArray53);
        java.util.Locale.FilteringMode filteringMode56 = null;
        java.util.List<java.util.Locale> localeList57 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.util.Locale>) localeList54, filteringMode56);
        java.util.List<java.util.Locale> localeList58 = java.util.Locale.filter(languageRangeList3, (java.util.Collection<java.util.Locale>) localeList54);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fran\347ais (Canada)" + "'", str16, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "fr-CA" + "'", str17, "fr-CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CAN" + "'", str18, "CAN");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fran\347ais (Canada)" + "'", str21, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fr-CA" + "'", str22, "fr-CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "fr-CA" + "'", str23, "fr-CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CA" + "'", str25, "CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fran\347ais (Canada)" + "'", str28, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "fr-CA" + "'", str29, "fr-CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "fran\347ais (Canada)" + "'", str32, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "fr-CA" + "'", str33, "fr-CA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "fr-CA" + "'", str34, "fr-CA");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(localeList57);
        org.junit.Assert.assertNotNull(localeList58);
    }

    @Test
    public void test10229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10229");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) 'a');
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours(53);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.minus(readablePeriod20);
        org.joda.time.DateTime dateTime23 = dateTime17.withSecondOfMinute(31);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime17.toMutableDateTimeISO();
        int int25 = mutableDateTime24.getDayOfMonth();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test10230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10230");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTime.Property property13 = dateTime9.weekyear();
        int int14 = dateTime9.getMinuteOfHour();
        java.lang.String str15 = dateTime9.toString();
        boolean boolean16 = dateTime9.isBeforeNow();
        boolean boolean17 = dateTime9.isEqualNow();
        org.joda.time.DateTime dateTime18 = dateTime9.withLaterOffsetAtOverlap();
        org.joda.time.Instant instant19 = dateTime9.toInstant();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str15, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(instant19);
    }

    @Test
    public void test10231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10231");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        boolean boolean19 = dateTime17.isBefore((long) '4');
        int int20 = dateTime17.getMinuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime17.toMutableDateTime();
        org.joda.time.DateTime dateTime22 = dateTime17.withLaterOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime25 = dateTime17.withDurationAdded(readableDuration23, (int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime27 = dateTime17.minus(readablePeriod26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = dateTime17.withDate(1435, 53, 1972);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test10232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10232");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime14 = dateTime9.withFieldAdded(durationFieldType12, 3);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        int int16 = dateTime9.get(dateTimeFieldType15);
        org.joda.time.DateTime dateTime18 = dateTime9.plusSeconds(3);
        org.joda.time.DateTime dateTime20 = dateTime9.withDayOfWeek(3);
        org.joda.time.DateTime dateTime22 = dateTime9.plusMillis((int) (short) 1);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((java.lang.Object) dateTime22);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test10233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10233");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        org.joda.time.Chronology chronology5 = dateTimeFormatter3.getChronolgy();
        int int6 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter3.getParser();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        int int13 = partial10.compareTo((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = partial10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Chronology chronology16 = chronology14.withZone(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 0, chronology14);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        int int20 = dateTime19.getCenturyOfEra();
        boolean boolean22 = dateTime19.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime23 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean25 = dateTime19.isSupported(dateTimeFieldType24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        int int31 = partial28.compareTo((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology32 = partial28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 0, chronology32);
        org.joda.time.DateTime dateTime37 = dateTime35.withHourOfDay(0);
        org.joda.time.DateTime dateTime39 = dateTime37.withYear((int) 'a');
        boolean boolean40 = dateTime37.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime37.getZone();
        org.joda.time.DateTime dateTime42 = dateTime19.withZoneRetainFields(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter3.withZone(dateTimeZone41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter44.withOffsetParsed();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNull(dateTimeParser7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 19 + "'", int20 == 19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
    }

    @Test
    public void test10234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10234");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        org.joda.time.Chronology chronology5 = dateTimeFormatter3.getChronolgy();
        java.util.Locale locale6 = dateTimeFormatter3.getLocale();
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("0022-02-11T09:36:30.397Z");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter3.withLocale(locale8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime11 = dateTimeFormatter9.parseLocalTime("cinese (Cina)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test10235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10235");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes(1439);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.minus(readablePeriod12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMillis(2922789);
        java.lang.String str16 = dateTime13.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str16, "1970-01-01T00:00:00.000Z");
    }

    @Test
    public void test10236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10236");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        boolean boolean7 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial3.getFormatter();
        org.joda.time.Chronology chronology10 = partial3.getChronology();
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = partial3.getFields();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        int int16 = partial13.compareTo((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        boolean boolean19 = partial15.isAfter((org.joda.time.ReadablePartial) partial18);
        java.lang.String str20 = partial18.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        org.joda.time.Partial partial22 = partial18.without(dateTimeFieldType21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial18.plus(readablePeriod23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial24.withPeriodAdded(readablePeriod25, 2000);
        boolean boolean28 = partial3.isAfter((org.joda.time.ReadablePartial) partial27);
        int[] intArray29 = partial27.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = partial27.isSupported(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test10237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10237");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        int int10 = partial7.compareTo((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readableDuration25);
        org.joda.time.Chronology chronology27 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfMonth();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        int int33 = partial30.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        boolean boolean36 = partial32.isAfter((org.joda.time.ReadablePartial) partial35);
        java.lang.String str37 = partial35.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        org.joda.time.Partial partial39 = partial35.without(dateTimeFieldType38);
        java.util.Locale locale41 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale42 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str43 = locale41.getDisplayName(locale42);
        java.lang.String str44 = locale41.getDisplayVariant();
        java.util.Locale locale45 = locale41.stripExtensions();
        java.lang.String str46 = dateTimeField28.getAsText((org.joda.time.ReadablePartial) partial35, 53, locale45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        int int52 = partial49.compareTo((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = partial49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 0, chronology53);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.minus(readableDuration57);
        org.joda.time.DateTime dateTime60 = dateTime56.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime62 = dateTime56.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime64 = dateTime62.minusWeeks(19);
        boolean boolean65 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime62);
        long long67 = chronology11.set((org.joda.time.ReadablePartial) partial35, (-62135596800000L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter3.withChronology(chronology11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter68.withDefaultYear(86340);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter70.withPivotYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter72.withPivotYear((java.lang.Integer) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter74.withZoneUTC();
        org.joda.time.Chronology chronology76 = dateTimeFormatter75.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "fran\347ais (Canada)" + "'", str43, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "53" + "'", str46, "53");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-62135596800000L) + "'", long67 == (-62135596800000L));
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
    }

    @Test
    public void test10238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10238");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.DateTime dateTime15 = property14.withMinimumValue();
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.DateTime.Property property17 = dateTime15.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime15.minus(readablePeriod18);
        org.joda.time.DateTime.Property property20 = dateTime15.monthOfYear();
        org.joda.time.DateTime dateTime22 = dateTime15.minusYears(86340);
        org.joda.time.DateTime.Property property23 = dateTime15.hourOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        int int30 = partial27.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = partial27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 0, chronology31);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.minus(readableDuration35);
        org.joda.time.DateTime dateTime38 = dateTime34.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfYear();
        org.joda.time.DateTime dateTime40 = property39.withMinimumValue();
        boolean boolean41 = dateTime40.isAfterNow();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int43 = dateTime40.get(dateTimeFieldType42);
        java.util.Locale locale44 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale45 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str46 = locale44.getDisplayName(locale45);
        java.lang.String str47 = locale44.getDisplayName();
        java.util.Calendar calendar48 = dateTime40.toCalendar(locale44);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        int int54 = partial51.compareTo((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = partial51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.Chronology chronology57 = chronology55.withZone(dateTimeZone56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 0, chronology55);
        org.joda.time.DateTime dateTime60 = dateTime58.withHourOfDay(0);
        org.joda.time.DateTime dateTime62 = dateTime60.withYear((int) 'a');
        boolean boolean63 = dateTime60.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone64 = dateTime60.getZone();
        org.joda.time.DateTime dateTime65 = dateTime40.withZone(dateTimeZone64);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) ' ', dateTimeZone64);
        org.joda.time.DateTime dateTime67 = dateTime15.withZone(dateTimeZone64);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0120-01-01T00:00:00.000Z" + "'", str16, "0120-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 12 + "'", int43 == 12);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "fran\347ais (Canada)" + "'", str46, "fran\347ais (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\uce90\ub098\ub2e4)" + "'", str47, "\ud504\ub791\uc2a4\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-58380393600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=120,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
    }

    @Test
    public void test10239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10239");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DurationField durationField20 = durationFieldType13.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime11.withChronology(chronology19);
        org.joda.time.DateTime dateTime25 = dateTime22.withDurationAdded(1L, 0);
        org.joda.time.DateTime dateTime27 = dateTime22.withMillisOfDay((int) (short) 1);
        org.joda.time.DateTime.Property property28 = dateTime27.secondOfDay();
        int int29 = dateTime27.getMillisOfSecond();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        int int35 = partial32.compareTo((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology36 = partial32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.Chronology chronology38 = chronology36.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 0, chronology36);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.minus(readableDuration40);
        org.joda.time.DateTime dateTime43 = dateTime39.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime45 = dateTime39.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime47 = dateTime45.minusWeeks(19);
        boolean boolean48 = dateTime27.isEqual((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        int int53 = partial50.compareTo((org.joda.time.ReadablePartial) partial52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        boolean boolean56 = partial52.isAfter((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        int int62 = partial59.compareTo((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Chronology chronology63 = partial59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.Chronology chronology65 = chronology63.withZone(dateTimeZone64);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) 0, chronology63);
        org.joda.time.DateTime dateTime68 = dateTime66.withHourOfDay(0);
        org.joda.time.DateTime dateTime70 = dateTime68.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime71 = dateTime70.toMutableDateTime();
        org.joda.time.DateTime dateTime72 = partial52.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.lang.String str74 = dateTimeFieldType73.getName();
        boolean boolean75 = dateTime72.isSupported(dateTimeFieldType73);
        int int76 = dateTime47.get(dateTimeFieldType73);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Partial partial78 = new org.joda.time.Partial(chronology77);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Partial partial80 = new org.joda.time.Partial(chronology79);
        int int81 = partial78.compareTo((org.joda.time.ReadablePartial) partial80);
        org.joda.time.Chronology chronology82 = partial78.getChronology();
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.Chronology chronology84 = chronology82.withZone(dateTimeZone83);
        org.joda.time.DateTimeField dateTimeField85 = chronology84.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone86 = chronology84.getZone();
        org.joda.time.DateTimeField dateTimeField87 = chronology84.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField88 = chronology84.monthOfYear();
        org.joda.time.Partial partial89 = new org.joda.time.Partial(chronology84);
        org.joda.time.DateTimeField dateTimeField90 = chronology84.monthOfYear();
        boolean boolean91 = dateTimeFieldType73.isSupported(chronology84);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "secondOfDay" + "'", str74, "secondOfDay");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test10240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10240");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder1.setVariant("");
        java.util.Locale locale5 = builder1.build();
        java.util.Locale locale6 = builder1.build();
        java.lang.String str7 = locale6.toLanguageTag();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        int int13 = partial10.compareTo((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = partial10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Chronology chronology16 = chronology14.withZone(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 0, chronology14);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.minus(readableDuration18);
        long long20 = dateTime19.getMillis();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int int25 = partial22.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        boolean boolean28 = partial24.isAfter((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = partial31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 0, chronology35);
        org.joda.time.DateTime dateTime40 = dateTime38.withHourOfDay(0);
        org.joda.time.DateTime dateTime42 = dateTime40.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime42.toMutableDateTime();
        org.joda.time.DateTime dateTime44 = partial24.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        int int50 = partial47.compareTo((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = partial47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.Chronology chronology53 = chronology51.withZone(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) 0, chronology51);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.minus(readableDuration55);
        org.joda.time.DateTime dateTime58 = dateTime54.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime60 = dateTime54.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime62 = dateTime60.minusWeeks(19);
        org.joda.time.DateTime dateTime64 = dateTime60.plusMillis((int) '#');
        int int65 = dateTime64.getDayOfMonth();
        boolean boolean66 = partial24.equals((java.lang.Object) dateTime64);
        boolean boolean67 = dateTime19.isBefore((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime69 = dateTime64.plusSeconds(2);
        org.joda.time.DateTime.Property property70 = dateTime69.minuteOfHour();
        org.joda.time.DateTime dateTime72 = property70.addWrapFieldToCopy((int) '#');
        java.lang.String str73 = property70.getAsString();
        java.util.Locale locale74 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale75 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str76 = locale74.getDisplayName(locale75);
        java.lang.String str77 = locale74.getDisplayVariant();
        java.util.Locale locale78 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale79 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str80 = locale78.getDisplayName(locale79);
        java.lang.String str81 = locale74.getDisplayName(locale78);
        java.lang.String str82 = property70.getAsText(locale78);
        java.lang.String str84 = locale78.getExtension('x');
        java.lang.String str85 = locale6.getDisplayCountry(locale78);
        java.lang.String str86 = locale6.getDisplayVariant();
        java.lang.String str87 = locale6.getDisplayScript();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "und" + "'", str7, "und");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "0" + "'", str73, "0");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "fran\347ais (Canada)" + "'", str76, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "fran\347ais (Canada)" + "'", str80, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "fran\347ais (Canada)" + "'", str81, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0" + "'", str82, "0");
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
    }

    @Test
    public void test10241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10241");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = partial8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology12);
        org.joda.time.DateTime dateTime17 = dateTime15.withHourOfDay(0);
        org.joda.time.DateTime dateTime18 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateMidnight dateMidnight19 = dateTime18.toDateMidnight();
        org.joda.time.DateTime dateTime21 = dateTime18.plusWeeks((int) 'u');
        org.joda.time.DateTime dateTime23 = dateTime21.plusMillis((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int25 = dateTime21.get(dateTimeFieldType24);
        org.joda.time.DateTime dateTime27 = dateTime21.withYear(47);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 72 + "'", int25 == 72);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test10242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10242");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        org.joda.time.Interval interval16 = property12.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property12.getFieldType();
        org.joda.time.DateTimeField dateTimeField18 = property12.getField();
        int int19 = property12.getMaximumValue();
        org.joda.time.Interval interval20 = property12.toInterval();
        org.joda.time.DateTimeField dateTimeField21 = property12.getField();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 999 + "'", int19 == 999);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test10243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10243");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DurationField durationField20 = durationFieldType13.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime11.withChronology(chronology19);
        org.joda.time.DateTime dateTime25 = dateTime22.withDurationAdded(1L, 0);
        org.joda.time.DateTime dateTime27 = dateTime22.withMillisOfDay((int) (short) 1);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra((int) '4');
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        int int35 = partial32.compareTo((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology36 = partial32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.Chronology chronology38 = chronology36.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 0, chronology36);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        int int45 = partial42.compareTo((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = partial42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = chronology46.withZone(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 0, chronology46);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.minus(readableDuration50);
        org.joda.time.Chronology chronology52 = dateTime49.getChronology();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        long long56 = chronology52.set((org.joda.time.ReadablePartial) partial54, (long) (byte) -1);
        int[] intArray58 = chronology36.get((org.joda.time.ReadablePartial) partial54, (long) ' ');
        org.joda.time.DurationField durationField59 = chronology36.eras();
        org.joda.time.DateTimeField dateTimeField60 = chronology36.dayOfYear();
        org.joda.time.DateTime dateTime61 = dateTime29.toDateTime(chronology36);
        boolean boolean62 = dateTime61.isEqualNow();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        int int68 = partial65.compareTo((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology69 = partial65.getChronology();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.Chronology chronology71 = chronology69.withZone(dateTimeZone70);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) 0, chronology69);
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.DateTime dateTime74 = dateTime72.minus(readableDuration73);
        org.joda.time.DateTime dateTime76 = dateTime72.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime78 = dateTime72.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime80 = dateTime78.minusWeeks(19);
        org.joda.time.DateTime dateTime82 = dateTime78.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType83 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Partial partial85 = new org.joda.time.Partial(chronology84);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Partial partial87 = new org.joda.time.Partial(chronology86);
        int int88 = partial85.compareTo((org.joda.time.ReadablePartial) partial87);
        org.joda.time.Chronology chronology89 = partial85.getChronology();
        org.joda.time.DurationField durationField90 = durationFieldType83.getField(chronology89);
        org.joda.time.DateTimeField dateTimeField91 = chronology89.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField92 = chronology89.dayOfMonth();
        org.joda.time.DateTime dateTime93 = dateTime82.toDateTime(chronology89);
        org.joda.time.Chronology chronology94 = chronology89.withUTC();
        org.joda.time.DateTimeField dateTimeField95 = chronology89.hourOfDay();
        org.joda.time.DateTimeField dateTimeField96 = chronology89.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType97 = dateTimeField96.getType();
        boolean boolean98 = dateTime61.isSupported(dateTimeFieldType97);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(durationFieldType83);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertNotNull(dateTimeField96);
        org.junit.Assert.assertNotNull(dateTimeFieldType97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test10244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10244");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("170");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=170");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10245");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder1.setVariant("");
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder6 = builder4.setLocale(locale5);
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale.Builder builder9 = builder7.removeUnicodeLocaleAttribute("316");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder7.setScript("85705267");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 85705267 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test10246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10246");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        java.lang.String str15 = locale13.getCountry();
        java.lang.String str16 = locale13.getScript();
        java.util.Set<java.lang.Character> charSet17 = locale13.getExtensionKeys();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) charSet17, dateTimeZone18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.util.Collections$EmptySet");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(charSet17);
    }

    @Test
    public void test10247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10247");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getVariant();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 0, chronology8);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.minus(readableDuration12);
        long long14 = dateTime13.getMillis();
        int int15 = dateTime13.getDayOfYear();
        org.joda.time.DateTime.Property property16 = dateTime13.millisOfSecond();
        int int17 = property16.getMinimumValue();
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale18.getDisplayScript(locale19);
        java.util.Locale locale21 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str22 = locale21.getDisplayCountry();
        java.lang.String str23 = locale19.getDisplayName(locale21);
        java.lang.String str24 = locale21.getScript();
        java.lang.String str25 = property16.getAsText(locale21);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        int int27 = property16.getMaximumShortTextLength(locale26);
        java.lang.String str28 = locale0.getDisplayVariant(locale26);
        java.lang.String str29 = locale0.getLanguage();
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = null;
        org.joda.time.format.DateTimeParser dateTimeParser31 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter30, dateTimeParser31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = partial34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology40.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter32.withZone(dateTimeZone42);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        int int49 = partial46.compareTo((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = partial46.getChronology();
        org.joda.time.DurationField durationField51 = durationFieldType44.getField(chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology50.weekOfWeekyear();
        java.util.Locale locale54 = java.util.Locale.ENGLISH;
        java.lang.String str55 = dateTimeField52.getAsText(19, locale54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter43.withLocale(locale54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter56.withZoneUTC();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        int int62 = partial59.compareTo((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Chronology chronology63 = partial59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.Chronology chronology65 = chronology63.withZone(dateTimeZone64);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(chronology65);
        org.joda.time.DateTimeField dateTimeField67 = chronology65.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField68 = chronology65.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField69 = chronology65.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField70 = chronology65.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField71 = chronology65.centuryOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter56.withChronology(chronology65);
        java.util.Locale locale73 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str74 = locale73.getCountry();
        java.lang.String str75 = locale73.getISO3Country();
        java.util.Set<java.lang.String> strSet76 = locale73.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = dateTimeFormatter72.withLocale(locale73);
        boolean boolean78 = dateTimeFormatter72.isParser();
        org.joda.time.DateTimeZone dateTimeZone79 = dateTimeFormatter72.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((java.lang.Object) str29, dateTimeZone79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"ja\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\uce90\ub098\ub2e4" + "'", str22, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "cor\351en" + "'", str23, "cor\351en");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ja" + "'", str29, "ja");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "19" + "'", str55, "19");
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "CA" + "'", str74, "CA");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "CAN" + "'", str75, "CAN");
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(dateTimeFormatter77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(dateTimeZone79);
    }

    @Test
    public void test10248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10248");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        int int14 = partial11.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = partial11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter9.withZone(dateTimeZone19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime24 = dateTime22.plusDays((int) (byte) 100);
        org.joda.time.format.DateTimePrinter dateTimePrinter25 = null;
        org.joda.time.format.DateTimeParser dateTimeParser26 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter25, dateTimeParser26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int int32 = partial29.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = partial29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone37 = chronology35.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter27.withZone(dateTimeZone37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        int int43 = partial40.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = partial40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology44.withZone(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField47 = chronology46.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone48 = chronology46.getZone();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter27.withZone(dateTimeZone48);
        org.joda.time.format.DateTimePrinter dateTimePrinter51 = dateTimeFormatter50.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeFormatter50.getZone();
        org.joda.time.DateTime dateTime53 = dateTime24.withZone(dateTimeZone52);
        boolean boolean55 = dateTime53.isEqual(86409004L);
        int int56 = dateTime53.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNull(dateTimePrinter51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
    }

    @Test
    public void test10249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10249");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        int int18 = dateTime17.getSecondOfMinute();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        org.joda.time.DateTime dateTime32 = dateTime30.withYear((int) 'a');
        boolean boolean33 = dateTime30.isEqualNow();
        org.joda.time.DateMidnight dateMidnight34 = dateTime30.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone35 = dateMidnight34.getZone();
        org.joda.time.DateTime dateTime36 = dateTime17.withZoneRetainFields(dateTimeZone35);
        org.joda.time.DateTime.Property property37 = dateTime36.weekOfWeekyear();
        org.joda.time.DateTime.Property property38 = dateTime36.minuteOfDay();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        int int44 = partial41.compareTo((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = partial41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Chronology chronology47 = chronology45.withZone(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 0, chronology45);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.minus(readableDuration49);
        org.joda.time.DateTime dateTime52 = dateTime48.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime54 = dateTime48.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime56 = dateTime54.minusWeeks(19);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        int int62 = partial59.compareTo((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Chronology chronology63 = partial59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.Chronology chronology65 = chronology63.withZone(dateTimeZone64);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) 0, chronology63);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.DateTime dateTime68 = dateTime66.minus(readableDuration67);
        boolean boolean69 = dateTime54.isAfter((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Chronology chronology70 = dateTime54.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.dayOfMonth();
        org.joda.time.DurationField durationField72 = chronology70.centuries();
        org.joda.time.DateTime dateTime73 = dateTime36.toDateTime(chronology70);
        org.joda.time.DateTimeField dateTimeField74 = chronology70.yearOfCentury();
        org.joda.time.DurationField durationField75 = chronology70.halfdays();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
    }

    @Test
    public void test10250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10250");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfDay();
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = null;
        org.joda.time.format.DateTimeParser dateTimeParser15 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter14, dateTimeParser15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter16.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser18 = dateTimeFormatter16.getParser();
        int int19 = dateTimeFormatter16.getDefaultYear();
        org.joda.time.Chronology chronology20 = dateTimeFormatter16.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = null;
        org.joda.time.format.DateTimeParser dateTimeParser22 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter21, dateTimeParser22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        int int28 = partial25.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = partial25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Chronology chronology31 = chronology29.withZone(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = chronology31.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology31.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter23.withZone(dateTimeZone33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter16.withZone(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone33);
        org.joda.time.Chronology chronology38 = chronology12.withZone(dateTimeZone33);
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNull(dateTimeParser18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2000 + "'", int19 == 2000);
        org.junit.Assert.assertNull(chronology20);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test10251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10251");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfDay();
        org.joda.time.DurationField durationField14 = chronology12.weeks();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.centuryOfEra();
        int int18 = dateTimeField16.getMaximumValue((long) (-27409538));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2922789 + "'", int18 == 2922789);
    }

    @Test
    public void test10252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10252");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("ARM", strMap1);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "fran\347ais (Canada)" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList10);
        java.lang.String[] strArray14 = new java.lang.String[] { "fr-CA" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.Locale.FilteringMode filteringMode17 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList15, filteringMode17);
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str20 = locale19.getDisplayCountry();
        java.util.Set<java.lang.String> strSet21 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str22 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strSet21);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "hi!", "fran\347ais (Canada)" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        java.lang.String str32 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strList30);
        java.util.Locale locale33 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale34 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str35 = locale33.getDisplayName(locale34);
        java.lang.String str36 = locale33.toLanguageTag();
        java.lang.String str37 = locale33.getISO3Country();
        java.util.Locale locale38 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale39 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str40 = locale38.getDisplayName(locale39);
        java.lang.String str41 = locale38.toLanguageTag();
        java.lang.String str42 = locale38.toLanguageTag();
        java.util.Locale locale43 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str44 = locale43.getCountry();
        java.util.Locale locale45 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale46 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str47 = locale45.getDisplayName(locale46);
        java.lang.String str48 = locale45.toLanguageTag();
        java.util.Locale locale49 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale50 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str51 = locale49.getDisplayName(locale50);
        java.lang.String str52 = locale49.toLanguageTag();
        java.lang.String str53 = locale49.toLanguageTag();
        boolean boolean54 = locale49.hasExtensions();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        int int60 = partial57.compareTo((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology61 = partial57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.Chronology chronology63 = chronology61.withZone(dateTimeZone62);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) 0, chronology61);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.DateTime dateTime66 = dateTime64.minus(readableDuration65);
        org.joda.time.DateTime.Property property67 = dateTime66.millisOfSecond();
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        int int69 = property67.getMaximumTextLength(locale68);
        java.util.Locale locale70 = java.util.Locale.CANADA_FRENCH;
        boolean boolean71 = locale70.hasExtensions();
        java.util.Locale[] localeArray72 = new java.util.Locale[] { locale33, locale38, locale43, locale45, locale49, locale68, locale70 };
        java.util.ArrayList<java.util.Locale> localeList73 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList73, localeArray72);
        java.util.Locale.FilteringMode filteringMode75 = null;
        java.util.List<java.util.Locale> localeList76 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList73, filteringMode75);
        java.util.Locale.LanguageRange[] languageRangeArray77 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList78 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList78, languageRangeArray77);
        java.lang.String[] strArray83 = new java.lang.String[] { "", "hi!", "fran\347ais (Canada)" };
        java.util.ArrayList<java.lang.String> strList84 = new java.util.ArrayList<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList84, strArray83);
        java.lang.String str86 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList78, (java.util.Collection<java.lang.String>) strList84);
        java.lang.String[] strArray88 = new java.lang.String[] { "fr-CA" };
        java.util.ArrayList<java.lang.String> strList89 = new java.util.ArrayList<java.lang.String>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList89, strArray88);
        java.util.Locale.FilteringMode filteringMode91 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList92 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList78, (java.util.Collection<java.lang.String>) strList89, filteringMode91);
        java.util.List<java.util.Locale> localeList93 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList73, filteringMode91);
        java.util.List<java.util.Locale> localeList94 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList73);
        java.lang.Class<?> wildcardClass95 = localeList94.getClass();
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + filteringMode17 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode17.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uce90\ub098\ub2e4" + "'", str20, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "fran\347ais (Canada)" + "'", str35, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "fr-CA" + "'", str36, "fr-CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "CAN" + "'", str37, "CAN");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "fran\347ais (Canada)" + "'", str40, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "fr-CA" + "'", str41, "fr-CA");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "fr-CA" + "'", str42, "fr-CA");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "CA" + "'", str44, "CA");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "fran\347ais (Canada)" + "'", str47, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "fr-CA" + "'", str48, "fr-CA");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "fran\347ais (Canada)" + "'", str51, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "fr-CA" + "'", str52, "fr-CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "fr-CA" + "'", str53, "fr-CA");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(localeList76);
        org.junit.Assert.assertNotNull(languageRangeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + filteringMode91 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode91.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList92);
        org.junit.Assert.assertNotNull(localeList93);
        org.junit.Assert.assertNotNull(localeList94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test10253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10253");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes(1439);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = partial14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 0, chronology18);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.minus(readableDuration22);
        org.joda.time.DateTime dateTime25 = dateTime21.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfYear();
        org.joda.time.DateTime dateTime27 = property26.withMinimumValue();
        boolean boolean28 = dateTime27.isAfterNow();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int30 = dateTime27.get(dateTimeFieldType29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        int int36 = partial33.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = partial33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 0, chronology37);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.minus(readableDuration41);
        org.joda.time.Chronology chronology43 = dateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.secondOfDay();
        org.joda.time.format.DateTimePrinter dateTimePrinter45 = null;
        org.joda.time.format.DateTimeParser dateTimeParser46 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter45, dateTimeParser46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter47.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser49 = dateTimeFormatter47.getParser();
        int int50 = dateTimeFormatter47.getDefaultYear();
        org.joda.time.Chronology chronology51 = dateTimeFormatter47.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter52 = null;
        org.joda.time.format.DateTimeParser dateTimeParser53 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter52, dateTimeParser53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        int int59 = partial56.compareTo((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology60 = partial56.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.Chronology chronology62 = chronology60.withZone(dateTimeZone61);
        org.joda.time.DateTimeField dateTimeField63 = chronology62.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone64 = chronology62.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter54.withZone(dateTimeZone64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter47.withZone(dateTimeZone64);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone64);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(dateTimeZone64);
        org.joda.time.Chronology chronology69 = chronology43.withZone(dateTimeZone64);
        boolean boolean70 = dateTimeFieldType29.isSupported(chronology69);
        org.joda.time.DurationField durationField71 = chronology69.weekyears();
        org.joda.time.DateTimeField dateTimeField72 = chronology69.dayOfYear();
        org.joda.time.Chronology chronology73 = chronology69.withUTC();
        org.joda.time.DateTime dateTime74 = dateTime11.withChronology(chronology73);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNull(dateTimeParser49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2000 + "'", int50 == 2000);
        org.junit.Assert.assertNull(chronology51);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTime74);
    }

    @Test
    public void test10254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10254");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        java.lang.Integer int5 = dateTimeFormatter4.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter4.withPivotYear(23);
        org.joda.time.Chronology chronology8 = dateTimeFormatter4.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test10255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10255");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str14 = dateTimeFieldType13.getName();
        int int15 = dateTime9.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime17 = dateTime9.minusMinutes(4);
        int int18 = dateTime9.getWeekyear();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime9.plus(readableDuration19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.withDurationAdded(readableDuration21, (int) (short) -1);
        boolean boolean25 = dateTime20.isBefore((long) 720);
        boolean boolean27 = dateTime20.isAfter(0L);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        int int33 = partial30.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = partial30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 0, chronology34);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.minus(readableDuration38);
        org.joda.time.DateTime.Property property40 = dateTime39.millisOfSecond();
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        int int42 = property40.getMaximumTextLength(locale41);
        long long43 = property40.remainder();
        int int44 = property40.getLeapAmount();
        org.joda.time.DateTime dateTime45 = property40.withMinimumValue();
        org.joda.time.DateTime dateTime47 = dateTime45.withCenturyOfEra((int) (short) 1);
        boolean boolean48 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime50 = dateTime20.withMinuteOfHour(58);
        org.joda.time.DateTime dateTime52 = dateTime20.plusYears((int) '4');
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        int int58 = partial55.compareTo((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology59 = partial55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.Chronology chronology61 = chronology59.withZone(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) 0, chronology59);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.DateTime dateTime64 = dateTime62.minus(readableDuration63);
        org.joda.time.Chronology chronology65 = dateTime62.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        long long71 = chronology65.add(readablePeriod68, (long) 12, 0);
        org.joda.time.DateTimeField dateTimeField72 = chronology65.millisOfDay();
        org.joda.time.DurationField durationField73 = chronology65.years();
        org.joda.time.MutableDateTime mutableDateTime74 = dateTime20.toMutableDateTime(chronology65);
        int int75 = dateTime20.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "halfdayOfDay" + "'", str14, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 12L + "'", long71 == 12L);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
    }

    @Test
    public void test10256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10256");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekOfWeekyear();
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        int int12 = dateTimeField8.getMaximumTextLength(locale10);
        long long15 = dateTimeField8.set((long) 12, (int) (short) 10);
        long long18 = dateTimeField8.add((long) 86399999, (-19L));
        org.joda.time.ReadablePartial readablePartial19 = null;
        int int20 = dateTimeField8.getMinimumValue(readablePartial19);
        org.joda.time.DurationField durationField21 = dateTimeField8.getDurationField();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        int int28 = partial25.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = partial25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Chronology chronology31 = chronology29.withZone(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 0, chronology29);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.minus(readableDuration33);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfHour();
        org.joda.time.Interval interval36 = property35.toInterval();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readableDuration47);
        org.joda.time.Chronology chronology49 = dateTime46.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.monthOfYear();
        java.util.Locale locale54 = new java.util.Locale("fran\347ais (Canada)");
        java.util.Locale.Category category55 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale56 = java.util.Locale.getDefault(category55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        int int61 = partial58.compareTo((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology62 = partial58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.Chronology chronology64 = chronology62.withZone(dateTimeZone63);
        org.joda.time.DateTimeField dateTimeField65 = chronology64.weekOfWeekyear();
        java.util.Locale locale66 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale67 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str68 = locale66.getDisplayName(locale67);
        int int69 = dateTimeField65.getMaximumTextLength(locale67);
        java.util.Locale.setDefault(category55, locale67);
        java.lang.String str71 = locale54.getDisplayVariant(locale67);
        java.lang.String str72 = dateTimeField51.getAsText(5443200012L, locale67);
        int int73 = property35.getMaximumTextLength(locale67);
        java.lang.String str74 = dateTimeField8.getAsShortText((int) 'a', locale67);
        java.lang.String str75 = locale67.getDisplayName();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fran\347ais (Canada)" + "'", str11, "fran\347ais (Canada)");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 5443200012L + "'", long15 == 5443200012L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-11404800001L) + "'", long18 == (-11404800001L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertEquals(locale54.toString(), "fran\347ais (canada)");
        org.junit.Assert.assertTrue("'" + category55 + "' != '" + java.util.Locale.Category.FORMAT + "'", category55.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "fran\347ais (Canada)" + "'", str68, "fran\347ais (Canada)");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "mars" + "'", str72, "mars");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "97" + "'", str74, "97");
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\uce90\ub098\ub2e4)" + "'", str75, "\ud504\ub791\uc2a4\uc5b4\uce90\ub098\ub2e4)");
    }

    @Test
    public void test10257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10257");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.minus(readableDuration11);
        org.joda.time.Chronology chronology13 = dateTime10.getChronology();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        long long17 = chronology13.set((org.joda.time.ReadablePartial) partial15, (long) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = chronology13.add(readablePeriod18, (long) (byte) 10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType0.getField(chronology13);
        org.joda.time.DateTimeField dateTimeField23 = chronology13.clockhourOfHalfday();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        int int29 = partial26.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = partial26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology30);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.minus(readableDuration34);
        org.joda.time.Chronology chronology36 = dateTime33.getChronology();
        org.joda.time.DateTime.Property property37 = dateTime33.weekyear();
        int int38 = dateTime33.getMinuteOfHour();
        org.joda.time.DateTime dateTime40 = dateTime33.minusMinutes((int) '#');
        org.joda.time.DateTime.Property property41 = dateTime33.secondOfMinute();
        org.joda.time.DateTime dateTime42 = property41.getDateTime();
        org.joda.time.DurationField durationField43 = property41.getDurationField();
        java.util.Locale locale45 = new java.util.Locale("hi!");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        int int51 = partial48.compareTo((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Chronology chronology52 = partial48.getChronology();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.Chronology chronology54 = chronology52.withZone(dateTimeZone53);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) 0, chronology52);
        org.joda.time.DateTimeField dateTimeField56 = chronology52.millisOfDay();
        int int57 = dateTimeField56.getMinimumValue();
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.lang.String str60 = dateTimeField56.getAsShortText((long) (byte) -1, locale59);
        java.lang.String str61 = locale45.getDisplayCountry(locale59);
        int int62 = property41.getMaximumTextLength(locale45);
        java.util.Locale locale63 = java.util.Locale.ITALY;
        java.lang.String str64 = locale63.getScript();
        java.util.Set<java.lang.String> strSet65 = locale63.getUnicodeLocaleAttributes();
        java.lang.String str66 = locale45.getDisplayScript(locale63);
        int int67 = dateTimeField23.getMaximumTextLength(locale63);
        long long69 = dateTimeField23.roundFloor((long) 23);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = dateTimeField23.getType();
        java.lang.String str71 = dateTimeFieldType70.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertEquals(locale45.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "86399999" + "'", str60, "86399999");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "clockhourOfHalfday" + "'", str71, "clockhourOfHalfday");
    }

    @Test
    public void test10258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10258");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        int int16 = property12.getLeapAmount();
        org.joda.time.DateTime dateTime17 = property12.withMinimumValue();
        org.joda.time.DateTime dateTime19 = dateTime17.withCenturyOfEra((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTime dateTime22 = dateTime19.withFieldAdded(durationFieldType20, 1970);
        org.joda.time.DateTime dateTime24 = dateTime19.withCenturyOfEra(53);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime19.minus(readableDuration25);
        boolean boolean27 = dateTime26.isBeforeNow();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test10259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10259");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        boolean boolean7 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        java.lang.String str8 = partial6.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = partial6.getFieldTypes();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readableDuration20);
        org.joda.time.DateTime dateTime23 = dateTime19.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime25 = dateTime19.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime27 = dateTime25.minusWeeks(19);
        org.joda.time.DateTime dateTime29 = dateTime25.plusMillis((int) '#');
        int int30 = dateTime29.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str32 = dateTimeFieldType31.getName();
        boolean boolean33 = dateTime29.isSupported(dateTimeFieldType31);
        org.joda.time.DateTime dateTime34 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime.Property property35 = dateTime34.millisOfSecond();
        org.joda.time.DateTime dateTime37 = dateTime34.withCenturyOfEra(22200);
        org.joda.time.DateTime dateTime39 = dateTime37.withSecondOfMinute(35);
        org.joda.time.DateTime.Property property40 = dateTime39.yearOfEra();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "halfdayOfDay" + "'", str32, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test10260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10260");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Instant instant13 = dateTime9.toInstant();
        org.joda.time.DateTime dateTime15 = dateTime9.withYear(97);
        org.joda.time.DateTime.Property property16 = dateTime9.dayOfWeek();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        int int22 = partial19.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = partial19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 0, chronology23);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.minus(readableDuration27);
        org.joda.time.Chronology chronology29 = dateTime26.getChronology();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = partial31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.weekOfWeekyear();
        int int40 = dateTimeField38.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        int int45 = partial42.compareTo((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        boolean boolean48 = partial44.isAfter((org.joda.time.ReadablePartial) partial47);
        java.lang.String str49 = partial47.toString();
        java.util.Locale locale51 = null;
        java.lang.String str52 = dateTimeField38.getAsShortText((org.joda.time.ReadablePartial) partial47, 53, locale51);
        long long54 = chronology29.set((org.joda.time.ReadablePartial) partial47, (long) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.yearOfEra();
        int int56 = partial47.indexOf(dateTimeFieldType55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        int int62 = partial59.compareTo((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Chronology chronology63 = partial59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.Chronology chronology65 = chronology63.withZone(dateTimeZone64);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) 0, chronology63);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.DateTime dateTime68 = dateTime66.minus(readableDuration67);
        org.joda.time.Chronology chronology69 = dateTime66.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str71 = dateTimeFieldType70.getName();
        int int72 = dateTime66.get(dateTimeFieldType70);
        org.joda.time.Partial partial73 = partial47.without(dateTimeFieldType70);
        org.joda.time.DurationFieldType durationFieldType74 = dateTimeFieldType70.getDurationType();
        org.joda.time.DateTime dateTime76 = dateTime9.withFieldAdded(durationFieldType74, 120);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 53 + "'", int40 == 53);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "53" + "'", str52, "53");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "halfdayOfDay" + "'", str71, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertNotNull(dateTime76);
    }

    @Test
    public void test10261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10261");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        boolean boolean7 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        int int13 = partial10.compareTo((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = partial10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Chronology chronology16 = chronology14.withZone(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 0, chronology14);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        org.joda.time.DateTime dateTime21 = dateTime19.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime21.toMutableDateTime();
        org.joda.time.DateTime dateTime23 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        int int29 = partial26.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = partial26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology30);
        org.joda.time.DateTime dateTime35 = dateTime33.withHourOfDay(0);
        int int36 = dateTime35.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DurationField durationField44 = durationFieldType37.getField(chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.weekOfWeekyear();
        org.joda.time.DateTime dateTime46 = dateTime35.withChronology(chronology43);
        java.util.Date date47 = dateTime46.toDate();
        boolean boolean48 = partial3.equals((java.lang.Object) dateTime46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        int int54 = partial51.compareTo((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = partial51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.Chronology chronology57 = chronology55.withZone(dateTimeZone56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 0, chronology55);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.DateTime dateTime60 = dateTime58.minus(readableDuration59);
        org.joda.time.Chronology chronology61 = dateTime58.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.monthOfYear();
        org.joda.time.Chronology chronology64 = chronology61.withUTC();
        org.joda.time.DateTimeField dateTimeField65 = chronology61.clockhourOfHalfday();
        long long67 = dateTimeField65.roundHalfCeiling((long) 97);
        boolean boolean69 = dateTimeField65.isLeap(191980800001L);
        int int70 = dateTime46.get(dateTimeField65);
        org.joda.time.DateTime dateTime72 = dateTime46.minusWeeks(85800000);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str74 = dateTime46.toString("dayOfWeek");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: O");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 19 + "'", int36 == 19);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 12 + "'", int70 == 12);
        org.junit.Assert.assertNotNull(dateTime72);
    }

    @Test
    public void test10262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10262");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter9.withOffsetParsed();
        org.joda.time.Chronology chronology11 = dateTimeFormatter9.getChronolgy();
        java.lang.StringBuffer stringBuffer12 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter9.printTo(stringBuffer12, 8553600006L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(chronology11);
    }

    @Test
    public void test10263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10263");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime17 = dateTime11.withDurationAdded(readableDuration15, 1);
        org.joda.time.Instant instant18 = dateTime11.toInstant();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime11.plus(readableDuration19);
        org.joda.time.Instant instant21 = dateTime20.toInstant();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        java.lang.String str28 = partial23.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = partial31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 0, chronology35);
        org.joda.time.DateTime dateTime40 = dateTime38.withHourOfDay(0);
        int int41 = dateTime40.getCenturyOfEra();
        boolean boolean43 = dateTime40.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property44 = dateTime40.era();
        org.joda.time.DateTime dateTime46 = dateTime40.withHourOfDay(12);
        org.joda.time.DateTime dateTime47 = partial23.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.lang.String str49 = dateTimeFieldType48.getName();
        org.joda.time.DateTime dateTime51 = dateTime47.withField(dateTimeFieldType48, 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        int int57 = partial54.compareTo((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Chronology chronology58 = partial54.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 0, chronology58);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.DateTime dateTime63 = dateTime61.minus(readableDuration62);
        org.joda.time.DateTime dateTime65 = dateTime61.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime67 = dateTime61.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime69 = dateTime67.minusWeeks(19);
        int int70 = dateTime69.getSecondOfMinute();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = new org.joda.time.Partial(chronology72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        int int76 = partial73.compareTo((org.joda.time.ReadablePartial) partial75);
        org.joda.time.Chronology chronology77 = partial73.getChronology();
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.Chronology chronology79 = chronology77.withZone(dateTimeZone78);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((long) 0, chronology77);
        org.joda.time.DateTime dateTime82 = dateTime80.withHourOfDay(0);
        org.joda.time.DateTime dateTime84 = dateTime82.withYear((int) 'a');
        boolean boolean85 = dateTime82.isEqualNow();
        org.joda.time.DateMidnight dateMidnight86 = dateTime82.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone87 = dateMidnight86.getZone();
        org.joda.time.DateTime dateTime88 = dateTime69.withZoneRetainFields(dateTimeZone87);
        org.joda.time.DateTime dateTime89 = dateTime51.toDateTime(dateTimeZone87);
        boolean boolean90 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime89);
        int int91 = dateTime20.getYear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 19 + "'", int41 == 19);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "secondOfDay" + "'", str49, "secondOfDay");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1970 + "'", int91 == 1970);
    }

    @Test
    public void test10264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10264");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter12.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser14 = dateTimeFormatter12.getParser();
        int int15 = dateTimeFormatter12.getDefaultYear();
        org.joda.time.Chronology chronology16 = dateTimeFormatter12.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = null;
        org.joda.time.format.DateTimeParser dateTimeParser18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone29 = chronology27.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter19.withZone(dateTimeZone29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter12.withZone(dateTimeZone29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter6.withZone(dateTimeZone29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter33.withPivotYear(317);
        java.lang.Appendable appendable36 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readableDuration47);
        org.joda.time.Chronology chronology49 = dateTime46.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.dayOfMonth();
        org.joda.time.Chronology chronology51 = chronology49.withUTC();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        int int56 = partial53.compareTo((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        boolean boolean59 = partial55.isAfter((org.joda.time.ReadablePartial) partial58);
        java.lang.String str60 = partial58.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = null;
        org.joda.time.Partial partial62 = partial58.without(dateTimeFieldType61);
        org.joda.time.Chronology chronology63 = partial58.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray64 = partial58.getFieldTypes();
        int[] intArray66 = chronology49.get((org.joda.time.ReadablePartial) partial58, 5L);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial68 = partial58.plus(readablePeriod67);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter35.printTo(appendable36, (org.joda.time.ReadablePartial) partial68);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(dateTimeParser14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2000 + "'", int15 == 2000);
        org.junit.Assert.assertNull(chronology16);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(partial68);
    }

    @Test
    public void test10265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10265");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.monthOfYear();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTimeField dateTimeField16 = chronology12.millisOfDay();
        int int18 = dateTimeField16.getMaximumValue(1970001L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 86399999 + "'", int18 == 86399999);
    }

    @Test
    public void test10266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10266");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readableDuration20);
        org.joda.time.Chronology chronology22 = dateTime19.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        long long26 = chronology22.set((org.joda.time.ReadablePartial) partial24, (long) (byte) -1);
        int[] intArray28 = chronology6.get((org.joda.time.ReadablePartial) partial24, (long) ' ');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = partial24.getFieldTypes();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int[] intArray32 = partial31.getValues();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray29, intArray32, chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        int int40 = partial37.compareTo((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = partial37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.Chronology chronology43 = chronology41.withZone(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 0, chronology41);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.minus(readableDuration45);
        org.joda.time.DateTime dateTime48 = dateTime44.withYearOfEra((int) 'x');
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        int int53 = partial50.compareTo((org.joda.time.ReadablePartial) partial52);
        org.joda.time.Chronology chronology54 = partial50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.Chronology chronology56 = chronology54.withZone(dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField57 = chronology56.weekOfWeekyear();
        org.joda.time.DateTime dateTime58 = dateTime48.withChronology(chronology56);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.lang.String str60 = dateTimeFieldType59.getName();
        boolean boolean61 = dateTime48.isSupported(dateTimeFieldType59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property62 = partial34.property(dateTimeFieldType59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'secondOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "secondOfDay" + "'", str60, "secondOfDay");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test10267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10267");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        long long15 = dateTime13.getMillis();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        int int21 = partial18.compareTo((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = partial18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Chronology chronology24 = chronology22.withZone(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 0, chronology22);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.minus(readableDuration26);
        org.joda.time.DateTime dateTime29 = dateTime25.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime31 = dateTime25.withSecondOfMinute(0);
        int int32 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime.Property property33 = dateTime25.yearOfEra();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        boolean boolean41 = partial37.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Partial partial42 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean44 = partial37.isSupported(dateTimeFieldType43);
        org.joda.time.Chronology chronology45 = partial37.getChronology();
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime25.toMutableDateTime(chronology45);
        org.joda.time.DateTimeField dateTimeField47 = chronology45.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.weekyear();
        org.joda.time.DateTimeField dateTimeField49 = chronology45.monthOfYear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-58380393600000L) + "'", long15 == (-58380393600000L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test10268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10268");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        java.lang.String str6 = partial1.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.DateTime dateTime18 = dateTime16.withHourOfDay(0);
        int int19 = dateTime18.getCenturyOfEra();
        boolean boolean21 = dateTime18.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property22 = dateTime18.era();
        org.joda.time.DateTime dateTime24 = dateTime18.withHourOfDay(12);
        org.joda.time.DateTime dateTime25 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.lang.String str27 = dateTimeFieldType26.getName();
        org.joda.time.DateTime dateTime29 = dateTime25.withField(dateTimeFieldType26, 10);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds(9);
        org.joda.time.DateTime dateTime32 = dateTime31.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime33 = dateTime32.withEarlierOffsetAtOverlap();
        int int34 = dateTime32.getSecondOfDay();
        org.joda.time.DateTime dateTime36 = dateTime32.withYearOfEra(97);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readableDuration47);
        org.joda.time.DateTime dateTime50 = dateTime46.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime52 = dateTime46.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime54 = dateTime52.minusWeeks(19);
        org.joda.time.DateTime dateTime56 = dateTime52.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        int int62 = partial59.compareTo((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Chronology chronology63 = partial59.getChronology();
        org.joda.time.DurationField durationField64 = durationFieldType57.getField(chronology63);
        org.joda.time.DateTimeField dateTimeField65 = chronology63.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField66 = chronology63.dayOfMonth();
        org.joda.time.DateTime dateTime67 = dateTime56.toDateTime(chronology63);
        org.joda.time.DateTime dateTime69 = dateTime56.plusMonths((int) 'u');
        org.joda.time.DateTime dateTime71 = dateTime56.withMillisOfDay((int) '4');
        org.joda.time.DateTime dateTime73 = dateTime71.minusMonths((-52));
        int int74 = dateTime36.compareTo((org.joda.time.ReadableInstant) dateTime73);
        int int75 = dateTime36.getDayOfYear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 19 + "'", int19 == 19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "secondOfDay" + "'", str27, "secondOfDay");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
    }

    @Test
    public void test10269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10269");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale0.getISO3Country();
        java.lang.String str3 = locale0.getDisplayLanguage();
        java.lang.String str4 = locale0.getDisplayName();
        java.lang.String str5 = locale0.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test10270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10270");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekOfWeekyear();
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        int int12 = dateTimeField8.getMaximumTextLength(locale10);
        int int14 = dateTimeField8.getLeapAmount((-259200000L));
        java.lang.String str15 = dateTimeField8.toString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean23 = partial17.isSupported(dateTimeFieldType22);
        org.joda.time.Chronology chronology24 = partial17.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        int int31 = partial28.compareTo((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology32 = partial28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.monthOfYear();
        long long39 = dateTimeField36.getDifferenceAsLong((long) (short) 100, (-18L));
        java.util.Locale.Category category41 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale42 = java.util.Locale.getDefault(category41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        int int47 = partial44.compareTo((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology48 = partial44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.weekOfWeekyear();
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale53 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        int int55 = dateTimeField51.getMaximumTextLength(locale53);
        java.util.Locale.setDefault(category41, locale53);
        java.util.Locale locale57 = java.util.Locale.getDefault(category41);
        java.lang.String str58 = dateTimeField36.getAsText((-3600000L), locale57);
        java.lang.String str59 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) partial25, 292278993, locale57);
        java.lang.String str60 = partial25.toStringList();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        int int66 = partial63.compareTo((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology67 = partial63.getChronology();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.Chronology chronology69 = chronology67.withZone(dateTimeZone68);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) 0, chronology67);
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.DateTime dateTime72 = dateTime70.minus(readableDuration71);
        org.joda.time.Chronology chronology73 = dateTime70.getChronology();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        long long77 = chronology73.set((org.joda.time.ReadablePartial) partial75, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray78 = partial75.getFieldTypes();
        java.util.Locale locale79 = java.util.Locale.PRC;
        boolean boolean80 = partial75.equals((java.lang.Object) locale79);
        int int81 = partial75.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int83 = partial75.indexOf(dateTimeFieldType82);
        org.joda.time.Partial partial84 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial75);
        int int85 = partial25.compareTo((org.joda.time.ReadablePartial) partial75);
        org.joda.time.Chronology chronology86 = partial25.getChronology();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fran\347ais (Canada)" + "'", str11, "fran\347ais (Canada)");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DateTimeField[weekOfWeekyear]" + "'", str15, "DateTimeField[weekOfWeekyear]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + category41 + "' != '" + java.util.Locale.Category.FORMAT + "'", category41.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "fran\347ais (Canada)" + "'", str54, "fran\347ais (Canada)");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "d\351cembre" + "'", str58, "d\351cembre");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "292278993" + "'", str59, "292278993");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(chronology86);
    }

    @Test
    public void test10271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10271");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale6.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withLocale(locale6);
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = null;
        org.joda.time.format.DateTimeParser dateTimeParser14 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter13, dateTimeParser14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone25 = chronology23.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter15.withZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        int int31 = partial28.compareTo((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology32 = partial28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone36 = chronology34.getZone();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter15.withZone(dateTimeZone36);
        org.joda.time.format.DateTimePrinter dateTimePrinter39 = dateTimeFormatter38.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeFormatter38.getZone();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-56802470400000L), dateTimeZone40);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter2.withZone(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNull(dateTimePrinter39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
    }

    @Test
    public void test10272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10272");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTimeField dateTimeField10 = chronology6.millisOfDay();
        int int11 = dateTimeField10.getMinimumValue();
        int int13 = dateTimeField10.getMaximumValue((long) 31);
        int int15 = dateTimeField10.getMinimumValue(5443200012L);
        java.util.Locale.Category category17 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale18 = java.util.Locale.getDefault(category17);
        java.util.Locale locale19 = java.util.Locale.getDefault(category17);
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale20.getDisplayScript(locale21);
        java.util.Locale locale26 = new java.util.Locale("fr-CA", "1", "86399999");
        java.util.Locale locale27 = locale26.stripExtensions();
        java.lang.String str28 = locale21.getDisplayScript(locale27);
        java.lang.String str29 = locale19.getDisplayVariant(locale21);
        java.lang.String str30 = dateTimeField10.getAsText(120, locale19);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        int int36 = partial33.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = partial33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 0, chronology37);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.minus(readableDuration41);
        org.joda.time.DateTime.Property property43 = dateTime42.millisOfSecond();
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        int int45 = property43.getMaximumTextLength(locale44);
        long long46 = property43.remainder();
        org.joda.time.Interval interval47 = property43.toInterval();
        org.joda.time.DateTime dateTime48 = property43.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime50 = dateTime48.withHourOfDay(2);
        org.joda.time.DateTime.Property property51 = dateTime50.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.DateTime dateTime54 = dateTime50.withPeriodAdded(readablePeriod52, 23);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        int int60 = partial57.compareTo((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology61 = partial57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.Chronology chronology63 = chronology61.withZone(dateTimeZone62);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) 0, chronology61);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.DateTime dateTime66 = dateTime64.minus(readableDuration65);
        org.joda.time.Chronology chronology67 = dateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.dayOfMonth();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(chronology71);
        int int73 = partial70.compareTo((org.joda.time.ReadablePartial) partial72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        boolean boolean76 = partial72.isAfter((org.joda.time.ReadablePartial) partial75);
        java.lang.String str77 = partial75.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = null;
        org.joda.time.Partial partial79 = partial75.without(dateTimeFieldType78);
        java.util.Locale locale81 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale82 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str83 = locale81.getDisplayName(locale82);
        java.lang.String str84 = locale81.getDisplayVariant();
        java.util.Locale locale85 = locale81.stripExtensions();
        java.lang.String str86 = dateTimeField68.getAsText((org.joda.time.ReadablePartial) partial75, 53, locale85);
        int int87 = partial75.size();
        org.joda.time.DateTime dateTime88 = dateTime54.withFields((org.joda.time.ReadablePartial) partial75);
        int[] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray92 = dateTimeField10.addWrapPartial((org.joda.time.ReadablePartial) partial75, 86399, intArray90, 1405);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 86399999 + "'", int13 == 86399999);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + category17 + "' != '" + java.util.Locale.Category.FORMAT + "'", category17.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals(locale26.toString(), "fr-ca_1_86399999");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr-ca_1_86399999");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "120" + "'", str30, "120");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[]" + "'", str77, "[]");
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "fran\347ais (Canada)" + "'", str83, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "53" + "'", str86, "53");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(dateTime88);
    }

    @Test
    public void test10273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10273");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekOfWeekyear();
        int int10 = dateTimeField8.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        boolean boolean18 = partial14.isAfter((org.joda.time.ReadablePartial) partial17);
        java.lang.String str19 = partial17.toString();
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) partial17, 53, locale21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        int int27 = partial24.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        boolean boolean30 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        java.lang.String str31 = partial29.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        org.joda.time.Partial partial33 = partial29.without(dateTimeFieldType32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial29.plus(readablePeriod34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = partial29.getFieldTypes();
        int[] intArray37 = partial29.getValues();
        boolean boolean38 = partial17.isEqual((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Partial partial39 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        int int45 = partial42.compareTo((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = partial42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = chronology46.withZone(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 0, chronology46);
        org.joda.time.DateTime dateTime51 = dateTime49.minusMinutes(1439);
        org.joda.time.DateTime dateTime52 = dateTime49.withLaterOffsetAtOverlap();
        java.lang.String str54 = dateTime52.toString("86399990");
        org.joda.time.DateTime dateTime55 = partial39.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean57 = dateTime55.isAfter((long) 62035);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "53" + "'", str22, "53");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "86399990" + "'", str54, "86399990");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test10274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10274");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTime dateTime14 = dateTime9.withWeekyear(23);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = dateTime14.isBefore(readableInstant15);
        org.joda.time.DateMidnight dateMidnight17 = dateTime14.toDateMidnight();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.days();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.Chronology chronology31 = dateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.dayOfWeek();
        org.joda.time.DurationField durationField34 = chronology31.seconds();
        org.joda.time.DurationField durationField35 = durationFieldType18.getField(chronology31);
        org.joda.time.DurationField durationField36 = chronology31.halfdays();
        org.joda.time.DateTime dateTime37 = dateTime14.withChronology(chronology31);
        long long38 = dateTime14.getMillis();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        int int44 = partial41.compareTo((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = partial41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Chronology chronology47 = chronology45.withZone(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 0, chronology45);
        org.joda.time.DateTime dateTime50 = dateTime48.withHourOfDay(0);
        int int51 = dateTime50.getCenturyOfEra();
        org.joda.time.DateTime.Property property52 = dateTime50.hourOfDay();
        org.joda.time.DateTime dateTime54 = dateTime50.plus((long) 5);
        org.joda.time.Instant instant55 = dateTime54.toInstant();
        org.joda.time.DateTime dateTime57 = dateTime54.withMillisOfDay(43200);
        boolean boolean58 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime54);
        int int59 = dateTime14.getEra();
        org.joda.time.DateTime dateTime62 = dateTime14.withDurationAdded((-29227505390L), (int) 'x');
        org.joda.time.DateTime dateTime64 = dateTime62.plus((-124334351998000L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-61441027200000L) + "'", long38 == (-61441027200000L));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 19 + "'", int51 == 19);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test10275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10275");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        int int14 = partial11.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = partial11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter9.withZone(dateTimeZone19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withZone(dateTimeZone19);
        boolean boolean22 = dateTimeFormatter2.isPrinter();
        boolean boolean23 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter2.withZoneUTC();
        java.util.Locale locale25 = dateTimeFormatter2.getLocale();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str27 = dateTimeFieldType26.getName();
        java.lang.String str28 = dateTimeFieldType26.getName();
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType26.getDurationType();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = partial31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.hourOfHalfday();
        boolean boolean40 = durationFieldType29.isSupported(chronology37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter2.withChronology(chronology37);
        java.lang.StringBuffer stringBuffer42 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter41.printTo(stringBuffer42, (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(locale25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "halfdayOfDay" + "'", str27, "halfdayOfDay");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "halfdayOfDay" + "'", str28, "halfdayOfDay");
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
    }

    @Test
    public void test10276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10276");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        int int10 = partial7.compareTo((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime14.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime20 = dateTime14.withSecondOfMinute(0);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime14.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter2.withZone(dateTimeZone21);
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter25.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser27 = dateTimeFormatter25.getParser();
        int int28 = dateTimeFormatter25.getDefaultYear();
        org.joda.time.Chronology chronology29 = dateTimeFormatter25.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = null;
        org.joda.time.format.DateTimeParser dateTimeParser31 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter30, dateTimeParser31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = partial34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology40.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter32.withZone(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter25.withZone(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter22.withZone(dateTimeZone42);
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("AD");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter22.withLocale(locale48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = dateTimeFormatter22.print((-700699L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(dateTimeParser27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2000 + "'", int28 == 2000);
        org.junit.Assert.assertNull(chronology29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ad");
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
    }

    @Test
    public void test10277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10277");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfHour();
        int int17 = property16.getMaximumValue();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.DateTime dateTime31 = dateTime27.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime33 = dateTime27.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime35 = dateTime33.minusWeeks(19);
        org.joda.time.DateTime dateTime37 = dateTime33.plusMillis((int) '#');
        int int38 = dateTime37.getDayOfMonth();
        int int39 = dateTime37.getWeekyear();
        int int40 = dateTime37.getYearOfCentury();
        long long41 = property16.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime42 = property16.getDateTime();
        java.util.GregorianCalendar gregorianCalendar43 = dateTime42.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone44 = dateTime42.getZone();
        org.joda.time.DateTime.Property property45 = dateTime42.yearOfEra();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 70 + "'", int40 == 70);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(gregorianCalendar43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test10278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10278");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter12.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser14 = dateTimeFormatter12.getParser();
        int int15 = dateTimeFormatter12.getDefaultYear();
        org.joda.time.Chronology chronology16 = dateTimeFormatter12.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = null;
        org.joda.time.format.DateTimeParser dateTimeParser18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone29 = chronology27.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter19.withZone(dateTimeZone29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter12.withZone(dateTimeZone29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter6.withZone(dateTimeZone29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter33.withPivotYear(317);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        int int41 = partial38.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 0, chronology42);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.minus(readableDuration46);
        org.joda.time.Chronology chronology48 = dateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.monthOfYear();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(chronology48);
        org.joda.time.DateTimeField dateTimeField52 = chronology48.secondOfMinute();
        org.joda.time.DurationField durationField53 = chronology48.halfdays();
        org.joda.time.DurationField durationField54 = chronology48.hours();
        org.joda.time.DurationField durationField55 = chronology48.millis();
        org.joda.time.DateTimeField dateTimeField56 = chronology48.dayOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter35.withChronology(chronology48);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(dateTimeParser14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2000 + "'", int15 == 2000);
        org.junit.Assert.assertNull(chronology16);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
    }

    @Test
    public void test10279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10279");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime17 = dateTime11.withDurationAdded(readableDuration15, 1);
        org.joda.time.Instant instant18 = dateTime11.toInstant();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime11.plus(readableDuration19);
        org.joda.time.Instant instant21 = dateTime20.toInstant();
        org.joda.time.DateMidnight dateMidnight22 = dateTime20.toDateMidnight();
        org.joda.time.Instant instant23 = dateTime20.toInstant();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        int int29 = partial26.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = partial26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology30);
        org.joda.time.DateTime dateTime35 = dateTime33.withHourOfDay(0);
        int int36 = dateTime35.getCenturyOfEra();
        boolean boolean38 = dateTime35.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property39 = dateTime35.era();
        org.joda.time.DateTime.Property property40 = dateTime35.secondOfDay();
        org.joda.time.DateTime dateTime42 = dateTime35.minusHours(0);
        org.joda.time.DateTime dateTime44 = dateTime35.withYearOfEra(317);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        int int50 = partial47.compareTo((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = partial47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.Chronology chronology53 = chronology51.withZone(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) 0, chronology51);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.minus(readableDuration55);
        org.joda.time.Chronology chronology57 = dateTime54.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str59 = dateTimeFieldType58.getName();
        int int60 = dateTime54.get(dateTimeFieldType58);
        org.joda.time.DateTime dateTime62 = dateTime54.minusMinutes(4);
        org.joda.time.Instant instant63 = dateTime62.toInstant();
        org.joda.time.DateTime.Property property64 = dateTime62.weekyear();
        org.joda.time.DateTime dateTime66 = property64.addToCopy((long) (-292275054));
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = property64.getFieldType();
        org.joda.time.DateTime dateTime69 = dateTime35.withField(dateTimeFieldType67, (int) (short) 10);
        org.joda.time.DateTime dateTime71 = dateTime35.plusHours((int) (byte) 10);
        int int72 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime35);
        java.lang.Object obj73 = null;
        boolean boolean74 = dateTime35.equals(obj73);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 19 + "'", int36 == 19);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "halfdayOfDay" + "'", str59, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test10280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10280");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.centuries();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology12);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        int int21 = partial18.compareTo((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = partial18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Chronology chronology24 = chronology22.withZone(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 0, chronology22);
        org.joda.time.DateTime dateTime27 = dateTime25.withHourOfDay(0);
        org.joda.time.DateTime dateTime29 = dateTime27.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime29.toMutableDateTime();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        int int36 = partial33.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = partial33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 0, chronology37);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.minus(readableDuration41);
        org.joda.time.DateTime.Property property43 = dateTime42.millisOfSecond();
        boolean boolean44 = mutableDateTime30.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime46 = dateTime42.withWeekyear(19);
        org.joda.time.DateTime dateTime48 = dateTime46.minusDays(0);
        org.joda.time.DateTime dateTime49 = partial15.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField51 = partial15.getField(107);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 107");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test10281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10281");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        org.joda.time.DateTime dateTime13 = dateTime11.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTime();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readableDuration25);
        org.joda.time.DateTime.Property property27 = dateTime26.millisOfSecond();
        boolean boolean28 = mutableDateTime14.isBefore((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime30 = dateTime26.withWeekyear(19);
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays(0);
        org.joda.time.DateTime.Property property33 = dateTime32.millisOfSecond();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test10282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10282");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.clockhourOfHalfday();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        int int16 = partial13.compareTo((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        boolean boolean19 = partial15.isAfter((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial15.getFormatter();
        org.joda.time.Chronology chronology22 = partial15.getChronology();
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = partial15.getFields();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        int int28 = partial25.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = partial25.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.era();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        int int35 = partial32.compareTo((org.joda.time.ReadablePartial) partial34);
        int[] intArray37 = new int[] { 2 };
        int int38 = dateTimeField30.getMinimumValue((org.joda.time.ReadablePartial) partial32, intArray37);
        int int39 = partial32.size();
        int int40 = partial15.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.lang.String str43 = dateTimeFieldType42.getName();
        org.joda.time.Partial partial45 = new org.joda.time.Partial(dateTimeFieldType42, (int) (byte) 10);
        int[] intArray46 = partial45.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray48 = dateTimeField11.add((org.joda.time.ReadablePartial) partial15, 45, intArray46, (-27409539));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 45");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[2]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "secondOfDay" + "'", str43, "secondOfDay");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10]");
    }

    @Test
    public void test10283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10283");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.Chronology chronology8 = partial1.getChronology();
        org.joda.time.Partial partial9 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        int int14 = partial11.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = partial11.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean17 = partial11.isSupported(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = partial11.getChronology();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial11.plus(readablePeriod19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.minus(readableDuration31);
        org.joda.time.DateTime.Property property33 = dateTime32.millisOfSecond();
        org.joda.time.DateTime dateTime35 = dateTime32.minus((long) (short) 10);
        org.joda.time.DateTime dateTime37 = dateTime32.withWeekOfWeekyear(19);
        org.joda.time.DateTime dateTime38 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean39 = partial9.isEqual((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        int int45 = partial42.compareTo((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = partial42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = chronology46.withZone(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 0, chronology46);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.minus(readableDuration50);
        org.joda.time.Chronology chronology52 = dateTime49.getChronology();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        long long56 = chronology52.set((org.joda.time.ReadablePartial) partial54, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = partial54.getFieldTypes();
        boolean boolean58 = partial11.isMatch((org.joda.time.ReadablePartial) partial54);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.days();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        int int65 = partial62.compareTo((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Chronology chronology66 = partial62.getChronology();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.Chronology chronology68 = chronology66.withZone(dateTimeZone67);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) 0, chronology66);
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.DateTime dateTime71 = dateTime69.minus(readableDuration70);
        org.joda.time.Chronology chronology72 = dateTime69.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField74 = chronology72.dayOfWeek();
        org.joda.time.DurationField durationField75 = chronology72.seconds();
        org.joda.time.DurationField durationField76 = durationFieldType59.getField(chronology72);
        org.joda.time.DurationField durationField77 = chronology72.halfdays();
        org.joda.time.DateTimeField dateTimeField78 = chronology72.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField79 = chronology72.weekyear();
        org.joda.time.Partial partial80 = partial54.withChronologyRetainFields(chronology72);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray83 = chronology72.get(readablePeriod81, (-3300L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(partial80);
    }

    @Test
    public void test10284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10284");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.Chronology chronology2 = partial0.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = partial0.getFieldTypes();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        int int8 = partial5.compareTo((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        boolean boolean11 = partial7.isAfter((org.joda.time.ReadablePartial) partial10);
        java.lang.String str12 = partial10.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        org.joda.time.Partial partial14 = partial10.without(dateTimeFieldType13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial10.plus(readablePeriod15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        int int21 = partial18.compareTo((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        boolean boolean24 = partial20.isAfter((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = partial20.getFormatter();
        int int27 = partial16.compareTo((org.joda.time.ReadablePartial) partial20);
        int[] intArray28 = partial16.getValues();
        org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldTypeArray3, intArray28);
        org.joda.time.Chronology chronology30 = partial29.getChronology();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        int int35 = partial32.compareTo((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology36 = partial32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.Chronology chronology38 = chronology36.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField42 = chronology38.monthOfYear();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        int[] intArray45 = chronology38.get((org.joda.time.ReadablePartial) partial43, (-59106067200000L));
        org.joda.time.Chronology chronology46 = partial43.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone48 = chronology46.getZone();
        org.joda.time.Chronology chronology49 = chronology30.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField50 = chronology49.centuryOfEra();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(dateTimeFormatter26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test10285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10285");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.Chronology chronology14 = chronology12.withUTC();
        org.joda.time.Chronology chronology15 = chronology12.withUTC();
        org.joda.time.DurationField durationField16 = chronology15.centuries();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.clockhourOfDay();
        org.joda.time.DurationField durationField18 = dateTimeField17.getDurationField();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test10286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10286");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        int int18 = dateTime17.getSecondOfMinute();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        org.joda.time.DateTime dateTime32 = dateTime30.withYear((int) 'a');
        boolean boolean33 = dateTime30.isEqualNow();
        org.joda.time.DateMidnight dateMidnight34 = dateTime30.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone35 = dateMidnight34.getZone();
        org.joda.time.DateTime dateTime36 = dateTime17.withZoneRetainFields(dateTimeZone35);
        org.joda.time.DateTime.Property property37 = dateTime36.weekOfWeekyear();
        boolean boolean38 = dateTime36.isAfterNow();
        org.joda.time.DateTime dateTime39 = dateTime36.toDateTime();
        org.joda.time.DateTime.Property property40 = dateTime39.millisOfSecond();
        org.joda.time.DateTime dateTime42 = dateTime39.plusYears((int) (short) -1);
        org.joda.time.DateTime dateTime44 = dateTime39.withCenturyOfEra(1970);
        org.joda.time.DateTime.Property property45 = dateTime39.millisOfSecond();
        org.joda.time.DateTime.Property property46 = dateTime39.centuryOfEra();
        org.joda.time.DateTime dateTime48 = property46.addToCopy(170);
        boolean boolean49 = dateTime48.isEqualNow();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test10287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10287");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        boolean boolean7 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        int int14 = partial11.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = partial11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 0, chronology15);
        org.joda.time.DateTime dateTime20 = dateTime18.withHourOfDay(0);
        int int21 = dateTime20.getCenturyOfEra();
        boolean boolean23 = dateTime20.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime24 = dateTime20.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property25 = dateTime20.year();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        int int31 = partial28.compareTo((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology32 = partial28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 0, chronology32);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readableDuration36);
        org.joda.time.Chronology chronology38 = dateTime35.getChronology();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        int int43 = partial40.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = partial40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology44.withZone(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField47 = chronology46.weekOfWeekyear();
        int int49 = dateTimeField47.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        int int54 = partial51.compareTo((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        boolean boolean57 = partial53.isAfter((org.joda.time.ReadablePartial) partial56);
        java.lang.String str58 = partial56.toString();
        java.util.Locale locale60 = null;
        java.lang.String str61 = dateTimeField47.getAsShortText((org.joda.time.ReadablePartial) partial56, 53, locale60);
        long long63 = chronology38.set((org.joda.time.ReadablePartial) partial56, (long) 0);
        org.joda.time.MutableDateTime mutableDateTime64 = dateTime20.toMutableDateTime(chronology38);
        org.joda.time.DateTimeField dateTimeField65 = chronology38.hourOfDay();
        org.joda.time.DateTimeField dateTimeField66 = chronology38.weekyear();
        org.joda.time.DateTimeField dateTimeField67 = chronology38.dayOfYear();
        org.joda.time.DateTimeField dateTimeField68 = chronology38.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField69 = chronology38.weekyearOfCentury();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = new org.joda.time.Partial(chronology72);
        int int74 = partial71.compareTo((org.joda.time.ReadablePartial) partial73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = new org.joda.time.Partial(chronology75);
        boolean boolean77 = partial73.isAfter((org.joda.time.ReadablePartial) partial76);
        org.joda.time.Partial partial78 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial73);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = partial73.getFormatter();
        int[] intArray81 = chronology38.get((org.joda.time.ReadablePartial) partial73, (long) '#');
        boolean boolean82 = partial8.isBefore((org.joda.time.ReadablePartial) partial73);
        org.joda.time.Chronology chronology83 = partial8.getChronology();
        org.joda.time.DurationField durationField84 = chronology83.halfdays();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 19 + "'", int21 == 19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 53 + "'", int49 == 53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[]" + "'", str58, "[]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "53" + "'", str61, "53");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(dateTimeFormatter79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(durationField84);
    }

    @Test
    public void test10288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10288");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        boolean boolean7 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        int int14 = partial11.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = partial11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 0, chronology15);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.minus(readableDuration19);
        org.joda.time.DateTime.Property property21 = dateTime20.millisOfSecond();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        int int23 = property21.getMaximumTextLength(locale22);
        long long24 = property21.remainder();
        org.joda.time.Interval interval25 = property21.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property21.getFieldType();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getRangeDurationType();
        boolean boolean28 = partial8.isSupported(dateTimeFieldType26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = partial31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 0, chronology35);
        org.joda.time.DateTime dateTime40 = dateTime38.withHourOfDay(0);
        int int41 = dateTime40.getCenturyOfEra();
        boolean boolean43 = dateTime40.equals((java.lang.Object) '4');
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.DateTime dateTime45 = dateTime40.plus(readablePeriod44);
        org.joda.time.DateTime dateTime46 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        int int52 = partial49.compareTo((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = partial49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 0, chronology53);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.minus(readableDuration57);
        org.joda.time.Chronology chronology59 = dateTime56.getChronology();
        org.joda.time.Chronology chronology60 = chronology59.withUTC();
        org.joda.time.DateTimeField dateTimeField61 = chronology59.hourOfDay();
        org.joda.time.DurationField durationField62 = chronology59.millis();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(chronology59);
        org.joda.time.DateTimeField dateTimeField64 = chronology59.era();
        org.joda.time.DateTimeField dateTimeField65 = chronology59.weekyearOfCentury();
        org.joda.time.DateTime dateTime66 = dateTime46.toDateTime(chronology59);
        org.joda.time.DurationField durationField67 = chronology59.days();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 19 + "'", int41 == 19);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(durationField67);
    }

    @Test
    public void test10289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10289");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 0, chronology8);
        org.joda.time.DateTimeField dateTimeField12 = chronology8.millisOfDay();
        int int13 = dateTimeField12.getMinimumValue();
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = dateTimeField12.getAsShortText((long) (byte) -1, locale15);
        java.lang.String str17 = locale1.getDisplayCountry(locale15);
        java.lang.String str18 = locale15.getISO3Country();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "86399999" + "'", str16, "86399999");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test10290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10290");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DurationField durationField20 = durationFieldType13.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime11.withChronology(chronology19);
        org.joda.time.DateTime dateTime24 = dateTime11.plusWeeks((int) (short) 1);
        org.joda.time.DateTime.Property property25 = dateTime11.yearOfEra();
        boolean boolean27 = dateTime11.isEqual((long) 2);
        org.joda.time.DateTime dateTime29 = dateTime11.plusYears(2000);
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(31);
        org.joda.time.DateTime dateTime33 = dateTime29.minusMonths(13);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfYear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test10291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10291");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(10);
        org.joda.time.Instant instant14 = dateTime13.toInstant();
        org.joda.time.DateTime dateTime16 = dateTime13.plusMillis(23);
        org.joda.time.DateTime.Property property17 = dateTime13.year();
        java.lang.String str18 = property17.toString();
        java.lang.String str19 = property17.toString();
        org.joda.time.DateTime dateTime21 = property17.setCopy(1900);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology29.getZone();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        java.lang.String str35 = dateTime32.toString("86399980");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        int int41 = partial38.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 0, chronology42);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.minus(readableDuration46);
        org.joda.time.Chronology chronology48 = dateTime45.getChronology();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        long long52 = chronology48.set((org.joda.time.ReadablePartial) partial50, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = partial50.getFieldTypes();
        java.util.Locale locale54 = java.util.Locale.PRC;
        boolean boolean55 = partial50.equals((java.lang.Object) locale54);
        int int56 = partial50.size();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        int int62 = partial59.compareTo((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Chronology chronology63 = partial59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.Chronology chronology65 = chronology63.withZone(dateTimeZone64);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) 0, chronology63);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.DateTime dateTime68 = dateTime66.minus(readableDuration67);
        org.joda.time.DateTime dateTime70 = dateTime66.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime72 = dateTime66.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime74 = dateTime72.minusWeeks(19);
        org.joda.time.DateTime dateTime76 = dateTime72.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType77 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = new org.joda.time.Partial(chronology78);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Partial partial81 = new org.joda.time.Partial(chronology80);
        int int82 = partial79.compareTo((org.joda.time.ReadablePartial) partial81);
        org.joda.time.Chronology chronology83 = partial79.getChronology();
        org.joda.time.DurationField durationField84 = durationFieldType77.getField(chronology83);
        org.joda.time.DateTimeField dateTimeField85 = chronology83.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField86 = chronology83.dayOfMonth();
        org.joda.time.DateTime dateTime87 = dateTime76.toDateTime(chronology83);
        org.joda.time.Chronology chronology88 = chronology83.withUTC();
        org.joda.time.Partial partial89 = partial50.withChronologyRetainFields(chronology88);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean91 = partial89.isSupported(dateTimeFieldType90);
        org.joda.time.DurationFieldType durationFieldType92 = dateTimeFieldType90.getDurationType();
        org.joda.time.DateTime dateTime94 = dateTime32.withFieldAdded(durationFieldType92, 43200);
        boolean boolean95 = dateTime21.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime97 = dateTime32.plusMinutes(9178);
        int int98 = dateTime97.getYearOfEra();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Property[year]" + "'", str18, "Property[year]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Property[year]" + "'", str19, "Property[year]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-11T09:42:57.670Z" + "'", str33, "2022-02-11T09:42:57.670Z");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "86399980" + "'", str35, "86399980");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(partial89);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(durationFieldType92);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 2022 + "'", int98 == 2022);
    }

    @Test
    public void test10292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10292");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        org.joda.time.DateTime dateTime13 = dateTime11.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTime();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readableDuration25);
        org.joda.time.DateTime.Property property27 = dateTime26.millisOfSecond();
        boolean boolean28 = mutableDateTime14.isBefore((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime30 = dateTime26.withYear(0);
        int int31 = dateTime26.getDayOfMonth();
        org.joda.time.DateTime.Property property32 = dateTime26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = property32.getField();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = partial34.getFieldTypes();
        java.lang.String str36 = partial34.toString();
        org.joda.time.Partial partial37 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        int int43 = partial40.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        boolean boolean46 = partial42.isAfter((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial50 = partial45.withPeriodAdded(readablePeriod48, (int) (byte) 0);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        boolean boolean53 = partial45.isMatch((org.joda.time.ReadablePartial) partial52);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = partial45.getFieldTypes();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        int int60 = partial57.compareTo((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology61 = partial57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.Chronology chronology63 = chronology61.withZone(dateTimeZone62);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) 0, chronology61);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.DateTime dateTime66 = dateTime64.minus(readableDuration65);
        org.joda.time.DateTime dateTime68 = dateTime64.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime70 = dateTime64.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime72 = dateTime70.minusWeeks(19);
        org.joda.time.DateTime dateTime74 = dateTime70.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType75 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = new org.joda.time.Partial(chronology76);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = new org.joda.time.Partial(chronology78);
        int int80 = partial77.compareTo((org.joda.time.ReadablePartial) partial79);
        org.joda.time.Chronology chronology81 = partial77.getChronology();
        org.joda.time.DurationField durationField82 = durationFieldType75.getField(chronology81);
        org.joda.time.DateTimeField dateTimeField83 = chronology81.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField84 = chronology81.dayOfMonth();
        org.joda.time.DateTime dateTime85 = dateTime74.toDateTime(chronology81);
        org.joda.time.Chronology chronology86 = chronology81.withUTC();
        org.joda.time.DateTimeField dateTimeField87 = chronology81.hourOfDay();
        org.joda.time.DateTimeField dateTimeField88 = chronology81.dayOfMonth();
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.Partial partial90 = new org.joda.time.Partial(chronology89);
        org.joda.time.Chronology chronology91 = null;
        org.joda.time.Partial partial92 = new org.joda.time.Partial(chronology91);
        int int93 = partial90.compareTo((org.joda.time.ReadablePartial) partial92);
        java.lang.String str94 = partial90.toStringList();
        int[] intArray96 = chronology81.get((org.joda.time.ReadablePartial) partial90, (long) 1405);
        org.joda.time.Partial partial97 = new org.joda.time.Partial(dateTimeFieldTypeArray54, intArray96);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray99 = dateTimeField33.add((org.joda.time.ReadablePartial) partial34, 328, intArray96, 70);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 328");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[]" + "'", str94, "[]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[]");
    }

    @Test
    public void test10293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10293");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayLanguage();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 0, chronology8);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.minus(readableDuration12);
        org.joda.time.Chronology chronology14 = dateTime11.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str16 = dateTimeFieldType15.getName();
        int int17 = dateTime11.get(dateTimeFieldType15);
        org.joda.time.DateTime dateTime19 = dateTime11.minusMinutes(4);
        int int20 = dateTime11.getWeekyear();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime11.plus(readableDuration21);
        org.joda.time.DateTime.Property property23 = dateTime11.millisOfSecond();
        java.util.Locale locale25 = new java.util.Locale("minuteOfHour");
        java.lang.String str26 = property23.getAsText(locale25);
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("0120-01-01T00:00:00.000Z");
        java.lang.String str29 = property23.getAsText(locale28);
        java.lang.String str30 = locale0.getDisplayName(locale28);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\uc601\uc5b4" + "'", str1, "\uc601\uc5b4");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "halfdayOfDay" + "'", str16, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals(locale25.toString(), "minuteofhour");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0" + "'", str26, "0");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0" + "'", str29, "0");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "English (Canada)" + "'", str30, "English (Canada)");
    }

    @Test
    public void test10294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10294");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.era();
        org.joda.time.DurationField durationField7 = chronology5.weeks();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.DateTime dateTime11 = dateTime8.withCenturyOfEra(0);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = partial14.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.year();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology18.getZone();
        org.joda.time.DateTimeField dateTimeField23 = chronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = chronology18.yearOfEra();
        boolean boolean25 = dateTime11.equals((java.lang.Object) chronology18);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        int int30 = partial27.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = partial27.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.dayOfYear();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = chronology31.getZone();
        org.joda.time.DateTime dateTime37 = dateTime11.withZone(dateTimeZone36);
        org.joda.time.DateTime.Property property38 = dateTime11.centuryOfEra();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0022-02-11T09:42:57.754Z" + "'", str12, "0022-02-11T09:42:57.754Z");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test10295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10295");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DurationField durationField7 = durationFieldType0.getField(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.clockhourOfHalfday();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = null;
        org.joda.time.format.DateTimeParser dateTimeParser10 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter9, dateTimeParser10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter11.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser13 = dateTimeFormatter11.getParser();
        int int14 = dateTimeFormatter11.getDefaultYear();
        org.joda.time.Chronology chronology15 = dateTimeFormatter11.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = null;
        org.joda.time.format.DateTimeParser dateTimeParser17 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter16, dateTimeParser17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone28 = chronology26.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter18.withZone(dateTimeZone28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter11.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime33 = dateTime31.plusDays((int) (byte) 100);
        org.joda.time.format.DateTimePrinter dateTimePrinter34 = null;
        org.joda.time.format.DateTimeParser dateTimeParser35 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter34, dateTimeParser35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        int int41 = partial38.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField45 = chronology44.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone46 = chronology44.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter36.withZone(dateTimeZone46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        int int52 = partial49.compareTo((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = partial49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField56 = chronology55.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone57 = chronology55.getZone();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter36.withZone(dateTimeZone57);
        org.joda.time.format.DateTimePrinter dateTimePrinter60 = dateTimeFormatter59.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone61 = dateTimeFormatter59.getZone();
        org.joda.time.DateTime dateTime62 = dateTime33.withZone(dateTimeZone61);
        org.joda.time.Chronology chronology63 = chronology6.withZone(dateTimeZone61);
        java.lang.String str64 = chronology6.toString();
        org.joda.time.DateTimeField dateTimeField65 = chronology6.halfdayOfDay();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(chronology6);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(dateTimeParser13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2000 + "'", int14 == 2000);
        org.junit.Assert.assertNull(chronology15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNull(dateTimePrinter60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ISOChronology[UTC]" + "'", str64, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField65);
    }

    @Test
    public void test10296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10296");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        int int20 = dateTime19.getDayOfMonth();
        org.joda.time.DateTime dateTime22 = dateTime19.withWeekOfWeekyear(1);
        org.joda.time.DateTime dateTime24 = dateTime19.minusMillis((int) 'u');
        int int25 = dateTime24.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = dateTime24.withEra(34);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 59 + "'", int25 == 59);
    }

    @Test
    public void test10297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10297");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime15 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime17 = dateTime11.plusMonths((int) (short) 10);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) 'a');
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        boolean boolean27 = partial23.isAfter((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial26);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial31 = partial26.withPeriodAdded(readablePeriod29, (int) (byte) 0);
        org.joda.time.Chronology chronology32 = partial26.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = dateTimeField33.getType();
        org.joda.time.DateTime dateTime36 = dateTime17.withField(dateTimeFieldType34, 18);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readableDuration47);
        org.joda.time.DateTime dateTime50 = dateTime46.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property51 = dateTime50.dayOfYear();
        java.lang.String str52 = property51.getName();
        int int53 = property51.get();
        org.joda.time.DateTime dateTime55 = property51.addToCopy(10);
        boolean boolean57 = dateTime55.isAfter((-89L));
        org.joda.time.ReadablePartial readablePartial58 = null;
        org.joda.time.DateTime dateTime59 = dateTime55.withFields(readablePartial58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType60.getDurationType();
        boolean boolean62 = dateTime59.isSupported(dateTimeFieldType60);
        org.joda.time.DurationFieldType durationFieldType63 = dateTimeFieldType60.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType64 = dateTimeFieldType60.getRangeDurationType();
        int int65 = dateTime17.get(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "dayOfYear" + "'", str52, "dayOfYear");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test10298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10298");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        long long16 = chronology12.set((org.joda.time.ReadablePartial) partial14, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = partial14.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial14.getFormatter();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = partial14.toDateTime(readableInstant19);
        org.joda.time.DateTime.Property property21 = dateTime20.minuteOfDay();
        org.joda.time.DateTime dateTime23 = property21.setCopy((int) 'x');
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test10299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10299");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = partial0.getFieldTypes();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        boolean boolean9 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(0);
        org.joda.time.DateTime dateTime23 = dateTime21.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime23.toMutableDateTime();
        org.joda.time.DateTime dateTime25 = partial5.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean27 = partial5.isSupported(dateTimeFieldType26);
        int int28 = partial0.indexOf(dateTimeFieldType26);
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType26.getRangeDurationType();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        boolean boolean37 = partial33.isAfter((org.joda.time.ReadablePartial) partial36);
        java.lang.String str38 = partial36.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial36.getFieldTypes();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        int int45 = partial42.compareTo((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = partial42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = chronology46.withZone(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 0, chronology46);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.minus(readableDuration50);
        org.joda.time.DateTime dateTime53 = dateTime49.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime55 = dateTime49.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime57 = dateTime55.minusWeeks(19);
        org.joda.time.DateTime dateTime59 = dateTime55.plusMillis((int) '#');
        int int60 = dateTime59.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str62 = dateTimeFieldType61.getName();
        boolean boolean63 = dateTime59.isSupported(dateTimeFieldType61);
        org.joda.time.DateTime dateTime64 = partial36.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        int int70 = partial67.compareTo((org.joda.time.ReadablePartial) partial69);
        org.joda.time.Chronology chronology71 = partial67.getChronology();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.Chronology chronology73 = chronology71.withZone(dateTimeZone72);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) 0, chronology71);
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.DateTime dateTime76 = dateTime74.minus(readableDuration75);
        org.joda.time.Chronology chronology77 = dateTime74.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.dayOfMonth();
        org.joda.time.Chronology chronology79 = chronology77.withUTC();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.dayOfYear();
        org.joda.time.DateTime dateTime81 = dateTime59.toDateTime(chronology79);
        boolean boolean82 = dateTimeFieldType26.isSupported(chronology79);
        org.joda.time.DateTimeField dateTimeField83 = chronology79.minuteOfHour();
        java.lang.String str85 = dateTimeField83.getAsText((long) 42);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "halfdayOfDay" + "'", str62, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "0" + "'", str85, "0");
    }

    @Test
    public void test10300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10300");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str4 = locale3.getDisplayCountry();
        java.util.Locale.Builder builder5 = builder0.setLocale(locale3);
        java.util.Locale.Builder builder7 = builder5.setRegion("CA");
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale.Builder builder10 = builder7.setRegion("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder7.addUnicodeLocaleAttribute("0022-02-11T09:37:55.213Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 0022-02-11T09:37:55.213Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uce90\ub098\ub2e4" + "'", str4, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test10301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10301");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        boolean boolean7 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial3.getFormatter();
        org.joda.time.Chronology chronology10 = partial3.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.year();
        boolean boolean13 = dateTimeField12.isSupported();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test10302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10302");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        int int14 = partial11.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = partial11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter9.withZone(dateTimeZone19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withZone(dateTimeZone19);
        boolean boolean22 = dateTimeFormatter2.isPrinter();
        boolean boolean23 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter2.withZoneUTC();
        java.lang.Appendable appendable25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        int int30 = partial27.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = partial27.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean33 = partial27.isSupported(dateTimeFieldType32);
        java.lang.String str34 = partial27.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        int int39 = partial36.compareTo((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        boolean boolean42 = partial38.isAfter((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        int int48 = partial45.compareTo((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = partial45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 0, chronology49);
        org.joda.time.DateTime dateTime54 = dateTime52.withHourOfDay(0);
        org.joda.time.DateTime dateTime56 = dateTime54.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime56.toMutableDateTime();
        org.joda.time.DateTime dateTime58 = partial38.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        int int64 = partial61.compareTo((org.joda.time.ReadablePartial) partial63);
        org.joda.time.Chronology chronology65 = partial61.getChronology();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.Chronology chronology67 = chronology65.withZone(dateTimeZone66);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) 0, chronology65);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.DateTime dateTime70 = dateTime68.minus(readableDuration69);
        org.joda.time.DateTime dateTime72 = dateTime68.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime74 = dateTime68.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime76 = dateTime74.minusWeeks(19);
        org.joda.time.DateTime dateTime78 = dateTime74.plusMillis((int) '#');
        int int79 = dateTime78.getDayOfMonth();
        boolean boolean80 = partial38.equals((java.lang.Object) dateTime78);
        boolean boolean81 = partial27.isEqual((org.joda.time.ReadablePartial) partial38);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable25, (org.joda.time.ReadablePartial) partial38);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test10303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10303");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        org.joda.time.DateTime dateTime13 = dateTime11.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTime();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readableDuration25);
        org.joda.time.DateTime.Property property27 = dateTime26.millisOfSecond();
        boolean boolean28 = mutableDateTime14.isBefore((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime30 = dateTime26.withYear(0);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.hours();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(chronology31);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology31);
        org.joda.time.DateTimeField dateTimeField35 = chronology31.monthOfYear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test10304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10304");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder1.setVariant("");
        java.util.Locale.Builder builder5 = builder1.clearExtensions();
        java.util.Locale.Builder builder6 = builder1.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder1.setVariant("2022-02-11T09:39:26.925Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2022-02-11T09:39:26.925Z [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test10305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10305");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        org.joda.time.DateTime dateTime13 = dateTime11.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTime();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readableDuration25);
        org.joda.time.DateTime.Property property27 = dateTime26.millisOfSecond();
        boolean boolean28 = mutableDateTime14.isBefore((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime30 = dateTime26.withYear(0);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str33 = durationFieldType32.getName();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        int int39 = partial36.compareTo((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = partial36.getChronology();
        org.joda.time.DurationField durationField41 = durationFieldType34.getField(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField44 = chronology40.dayOfYear();
        boolean boolean45 = durationFieldType32.isSupported(chronology40);
        org.joda.time.DateTimeField dateTimeField46 = chronology40.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField47 = chronology40.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime30.toMutableDateTime(chronology40);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "seconds" + "'", str33, "seconds");
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
    }

    @Test
    public void test10306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10306");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        long long12 = dateTime11.getMillis();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        boolean boolean20 = partial16.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.DateTime dateTime32 = dateTime30.withHourOfDay(0);
        org.joda.time.DateTime dateTime34 = dateTime32.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime34.toMutableDateTime();
        org.joda.time.DateTime dateTime36 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readableDuration47);
        org.joda.time.DateTime dateTime50 = dateTime46.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime52 = dateTime46.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime54 = dateTime52.minusWeeks(19);
        org.joda.time.DateTime dateTime56 = dateTime52.plusMillis((int) '#');
        int int57 = dateTime56.getDayOfMonth();
        boolean boolean58 = partial16.equals((java.lang.Object) dateTime56);
        boolean boolean59 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime61 = dateTime56.plusSeconds(2);
        org.joda.time.DateTime.Property property62 = dateTime61.minuteOfHour();
        org.joda.time.DateTime dateTime63 = property62.getDateTime();
        int int64 = property62.getMaximumValue();
        org.joda.time.ReadableInstant readableInstant65 = null;
        int int66 = property62.getDifference(readableInstant65);
        java.lang.String str67 = property62.getAsText();
        org.joda.time.DateTime dateTime68 = property62.roundCeilingCopy();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 59 + "'", int64 == 59);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-27409542) + "'", int66 == (-27409542));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0" + "'", str67, "0");
        org.junit.Assert.assertNotNull(dateTime68);
    }

    @Test
    public void test10307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10307");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.lang.String str8 = locale6.getDisplayCountry(locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withLocale(locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withPivotYear((java.lang.Integer) 3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter9.withPivotYear((java.lang.Integer) 0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        int int19 = partial16.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = partial16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Chronology chronology22 = chronology20.withZone(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 0, chronology20);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.minus(readableDuration24);
        org.joda.time.Chronology chronology26 = dateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.dayOfWeek();
        org.joda.time.DurationField durationField29 = chronology26.seconds();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.millisOfSecond();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter13.withChronology(chronology26);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        int int43 = partial40.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = partial40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology44.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) 0, chronology44);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.minus(readableDuration48);
        org.joda.time.DateTime dateTime51 = dateTime47.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime53 = dateTime47.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime55 = dateTime53.minusWeeks(19);
        org.joda.time.DateTime dateTime57 = dateTime53.plusMillis((int) '#');
        int int58 = dateTime57.getDayOfMonth();
        org.joda.time.DateTime dateTime60 = dateTime57.plus((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone61 = dateTime57.getZone();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(366, 7, 7, 23, (int) ' ', 0, dateTimeZone61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter31.withZone(dateTimeZone61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter63.withPivotYear((java.lang.Integer) 999);
        int int66 = dateTimeFormatter65.getDefaultYear();
        java.util.Locale locale67 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale68 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str69 = locale67.getDisplayName(locale68);
        java.util.Locale locale70 = java.util.Locale.ENGLISH;
        java.lang.String str71 = locale68.getDisplayVariant(locale70);
        java.util.Locale locale72 = java.util.Locale.CHINA;
        java.lang.String str73 = locale68.getDisplayLanguage(locale72);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter65.withLocale(locale68);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter65.withPivotYear(39162);
        boolean boolean77 = dateTimeFormatter76.isPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2000 + "'", int66 == 2000);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "fran\347ais (Canada)" + "'", str69, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u6cd5\u6587" + "'", str73, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test10308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10308");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekOfWeekyear();
        int int10 = dateTimeField8.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        boolean boolean18 = partial14.isAfter((org.joda.time.ReadablePartial) partial17);
        java.lang.String str19 = partial17.toString();
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) partial17, 53, locale21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        int int27 = partial24.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        boolean boolean30 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        int int36 = partial33.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = partial33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 0, chronology37);
        org.joda.time.DateTime dateTime42 = dateTime40.withHourOfDay(0);
        org.joda.time.DateTime dateTime44 = dateTime42.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime44.toMutableDateTime();
        org.joda.time.DateTime dateTime46 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        int int52 = partial49.compareTo((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = partial49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 0, chronology53);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.minus(readableDuration57);
        org.joda.time.DateTime dateTime60 = dateTime56.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime62 = dateTime56.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime64 = dateTime62.minusWeeks(19);
        org.joda.time.DateTime dateTime66 = dateTime62.plusMillis((int) '#');
        int int67 = dateTime66.getDayOfMonth();
        boolean boolean68 = partial26.equals((java.lang.Object) dateTime66);
        boolean boolean69 = partial17.isEqual((org.joda.time.ReadablePartial) partial26);
        int int70 = partial26.size();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(chronology71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        int int75 = partial72.compareTo((org.joda.time.ReadablePartial) partial74);
        org.joda.time.Chronology chronology76 = partial72.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean78 = partial72.isSupported(dateTimeFieldType77);
        org.joda.time.Partial partial79 = partial26.without(dateTimeFieldType77);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Partial partial81 = new org.joda.time.Partial(chronology80);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Partial partial83 = new org.joda.time.Partial(chronology82);
        int int84 = partial81.compareTo((org.joda.time.ReadablePartial) partial83);
        org.joda.time.Chronology chronology85 = partial81.getChronology();
        org.joda.time.DateTimeField dateTimeField86 = chronology85.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField87 = chronology85.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField88 = chronology85.dayOfYear();
        org.joda.time.DateTimeField dateTimeField89 = chronology85.millisOfDay();
        org.joda.time.DateTimeField dateTimeField90 = chronology85.weekOfWeekyear();
        org.joda.time.DurationField durationField91 = chronology85.years();
        org.joda.time.DateTimeField dateTimeField92 = dateTimeFieldType77.getField(chronology85);
        boolean boolean94 = dateTimeField92.isLeap(863999119L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "53" + "'", str22, "53");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test10309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10309");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        int int14 = partial11.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = partial11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter9.withZone(dateTimeZone19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withZone(dateTimeZone19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        int int27 = partial24.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = partial24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 0, chronology28);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.minus(readableDuration32);
        org.joda.time.Chronology chronology34 = dateTime31.getChronology();
        org.joda.time.Chronology chronology35 = chronology34.withUTC();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfDay();
        org.joda.time.DurationField durationField37 = chronology34.millis();
        org.joda.time.DurationField durationField38 = chronology34.days();
        org.joda.time.DateTimeField dateTimeField39 = chronology34.yearOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter2.withChronology(chronology34);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        int int46 = partial43.compareTo((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology47 = partial43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 0, chronology47);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.minus(readableDuration51);
        org.joda.time.Chronology chronology53 = dateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.dayOfWeek();
        org.joda.time.DurationField durationField56 = chronology53.seconds();
        org.joda.time.DurationField durationField57 = chronology53.months();
        org.joda.time.DateTimeField dateTimeField58 = chronology53.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        long long62 = chronology53.add(readablePeriod59, (long) 43200, 97);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter2.withChronology(chronology53);
        java.lang.Appendable appendable64 = null;
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        int int69 = partial66.compareTo((org.joda.time.ReadablePartial) partial68);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        boolean boolean72 = partial68.isAfter((org.joda.time.ReadablePartial) partial71);
        java.lang.String str73 = partial71.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = null;
        org.joda.time.Partial partial75 = partial71.without(dateTimeFieldType74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.Partial partial77 = partial71.plus(readablePeriod76);
        java.lang.String str78 = partial77.toString();
        org.joda.time.Chronology chronology79 = partial77.getChronology();
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.Partial partial82 = partial77.withPeriodAdded(readablePeriod80, 70);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Partial partial84 = new org.joda.time.Partial(chronology83);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.Partial partial86 = new org.joda.time.Partial(chronology85);
        int int87 = partial84.compareTo((org.joda.time.ReadablePartial) partial86);
        org.joda.time.Chronology chronology88 = partial84.getChronology();
        org.joda.time.DateTimeField dateTimeField89 = chronology88.era();
        org.joda.time.DurationField durationField90 = chronology88.weeks();
        org.joda.time.DateTimeField dateTimeField91 = chronology88.weekyearOfCentury();
        boolean boolean92 = partial77.equals((java.lang.Object) chronology88);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable64, (org.joda.time.ReadablePartial) partial77);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 43200L + "'", long62 == 43200L);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[]" + "'", str73, "[]");
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[]" + "'", str78, "[]");
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test10310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10310");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        int int16 = property12.getLeapAmount();
        org.joda.time.DateTime dateTime17 = property12.withMinimumValue();
        org.joda.time.DateTime dateTime19 = dateTime17.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTime dateTime21 = dateTime19.withMillis(43200000L);
        java.util.Locale locale22 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        java.lang.String str25 = locale22.toLanguageTag();
        java.lang.String str26 = locale22.toLanguageTag();
        java.lang.String str27 = locale22.getDisplayScript();
        java.util.Calendar calendar28 = dateTime19.toCalendar(locale22);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = partial31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 0, chronology35);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.minus(readableDuration39);
        org.joda.time.DateTime dateTime42 = dateTime38.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime44 = dateTime38.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime46 = dateTime44.minusWeeks(19);
        org.joda.time.DateTime dateTime48 = dateTime44.plusMillis((int) '#');
        int int49 = dateTime48.getDayOfMonth();
        org.joda.time.DateTime dateTime51 = dateTime48.plus((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime52 = dateTime51.toMutableDateTime();
        int int53 = dateTime51.getSecondOfDay();
        org.joda.time.DateTime.Property property54 = dateTime51.year();
        int int55 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.DateTime dateTime57 = dateTime51.plus(readablePeriod56);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime59 = dateTime51.withWeekOfWeekyear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fran\347ais (Canada)" + "'", str24, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "fr-CA" + "'", str25, "fr-CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fr-CA" + "'", str26, "fr-CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-56802470400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=170,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test10311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10311");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        boolean boolean1 = locale0.hasExtensions();
        java.util.Locale.setDefault(locale0);
        java.lang.String str3 = locale0.getDisplayLanguage();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        int int9 = partial6.compareTo((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = partial6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Chronology chronology12 = chronology10.withZone(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 0, chronology10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readableDuration14);
        org.joda.time.Chronology chronology16 = dateTime13.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str18 = dateTimeFieldType17.getName();
        int int19 = dateTime13.get(dateTimeFieldType17);
        org.joda.time.DateTime dateTime21 = dateTime13.minusMinutes(4);
        int int22 = dateTime13.getWeekyear();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime13.plus(readableDuration23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.withDurationAdded(readableDuration25, (int) (short) -1);
        org.joda.time.DateTime dateTime28 = dateTime24.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property29 = dateTime24.centuryOfEra();
        org.joda.time.DateTime dateTime30 = property29.withMaximumValue();
        org.joda.time.DateTime dateTime31 = property29.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime32 = property29.withMaximumValue();
        boolean boolean33 = locale0.equals((java.lang.Object) dateTime32);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str3, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "halfdayOfDay" + "'", str18, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test10312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10312");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Instant instant13 = dateTime9.toInstant();
        org.joda.time.DateTime dateTime15 = dateTime9.withYear(97);
        org.joda.time.DateTime.Property property16 = dateTime9.dayOfWeek();
        org.joda.time.DateTime dateTime17 = property16.roundHalfFloorCopy();
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    public void test10313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10313");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        int int16 = property12.getLeapAmount();
        org.joda.time.DateTime dateTime17 = property12.withMinimumValue();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.Chronology chronology30 = dateTime27.getChronology();
        org.joda.time.DateTime dateTime32 = dateTime27.withWeekyear(23);
        long long33 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        int int39 = partial36.compareTo((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = partial36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.Chronology chronology42 = chronology40.withZone(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 0, chronology40);
        org.joda.time.DateTime dateTime45 = dateTime43.withHourOfDay(0);
        org.joda.time.DateTime dateTime47 = dateTime45.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime47.toMutableDateTime();
        org.joda.time.DateTime.Property property49 = dateTime47.weekyear();
        org.joda.time.DateTime dateTime50 = property49.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime51 = property49.withMinimumValue();
        boolean boolean52 = dateTime27.isBefore((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateTime dateTime54 = dateTime27.minus(readableDuration53);
        boolean boolean56 = dateTime27.isAfter((long) 1);
        org.joda.time.DateTime.Property property57 = dateTime27.minuteOfDay();
        java.lang.String str58 = property57.getAsShortText();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0" + "'", str58, "0");
    }

    @Test
    public void test10314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10314");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(0, 62035, 99, 0, 1969, (int) (byte) 10, 285);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10315");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = partial0.getFieldTypes();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        boolean boolean9 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(0);
        org.joda.time.DateTime dateTime23 = dateTime21.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime23.toMutableDateTime();
        org.joda.time.DateTime dateTime25 = partial5.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean27 = partial5.isSupported(dateTimeFieldType26);
        int int28 = partial0.indexOf(dateTimeFieldType26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        int int35 = partial32.compareTo((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology36 = partial32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.Chronology chronology38 = chronology36.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 0, chronology36);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.minus(readableDuration40);
        org.joda.time.Chronology chronology42 = dateTime39.getChronology();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        long long46 = chronology42.set((org.joda.time.ReadablePartial) partial44, (long) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        long long50 = chronology42.add(readablePeriod47, (long) (byte) 10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType29.getField(chronology42);
        boolean boolean52 = dateTimeFieldType26.isSupported(chronology42);
        org.joda.time.DurationField durationField53 = chronology42.seconds();
        java.lang.String str54 = chronology42.toString();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(chronology42);
        org.joda.time.DateTime dateTime57 = dateTime55.plusMillis(1970);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ISOChronology[UTC]" + "'", str54, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test10316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10316");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean14 = dateTime11.isSupported(dateTimeFieldType13);
        org.joda.time.DateTime.Property property15 = dateTime11.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = dateTime11.withSecondOfMinute(328);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 328 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test10317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10317");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(999L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = partial8.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean14 = partial8.isSupported(dateTimeFieldType13);
        boolean boolean15 = partial5.isEqual((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        int int21 = partial18.compareTo((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = partial18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Chronology chronology24 = chronology22.withZone(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 0, chronology22);
        org.joda.time.DateTime dateTime27 = dateTime25.withHourOfDay(0);
        int int28 = dateTime27.getCenturyOfEra();
        boolean boolean30 = dateTime27.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime31 = dateTime27.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property32 = dateTime27.year();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = partial35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 0, chronology39);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.minus(readableDuration43);
        org.joda.time.Chronology chronology45 = dateTime42.getChronology();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        int int50 = partial47.compareTo((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = partial47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.Chronology chronology53 = chronology51.withZone(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField54 = chronology53.weekOfWeekyear();
        int int56 = dateTimeField54.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        int int61 = partial58.compareTo((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        boolean boolean64 = partial60.isAfter((org.joda.time.ReadablePartial) partial63);
        java.lang.String str65 = partial63.toString();
        java.util.Locale locale67 = null;
        java.lang.String str68 = dateTimeField54.getAsShortText((org.joda.time.ReadablePartial) partial63, 53, locale67);
        long long70 = chronology45.set((org.joda.time.ReadablePartial) partial63, (long) 0);
        org.joda.time.MutableDateTime mutableDateTime71 = dateTime27.toMutableDateTime(chronology45);
        org.joda.time.DateTimeField dateTimeField72 = chronology45.weekyear();
        org.joda.time.Partial partial73 = partial5.withChronologyRetainFields(chronology45);
        int int74 = partial73.size();
        org.joda.time.DateTime dateTime75 = dateTime1.withFields((org.joda.time.ReadablePartial) partial73);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 19 + "'", int28 == 19);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 53 + "'", int56 == 53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[]" + "'", str65, "[]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "53" + "'", str68, "53");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(dateTime75);
    }

    @Test
    public void test10318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10318");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.DateTime dateTime26 = dateTime24.withHourOfDay(0);
        int int27 = dateTime26.getCenturyOfEra();
        boolean boolean29 = dateTime26.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime30 = dateTime26.withEarlierOffsetAtOverlap();
        boolean boolean31 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = dateTime30.minus((long) 3);
        org.joda.time.DateTime.Property property34 = dateTime30.minuteOfHour();
        long long35 = property34.remainder();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        int int41 = partial38.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 0, chronology42);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.minus(readableDuration46);
        org.joda.time.DateTime.Property property48 = dateTime47.millisOfSecond();
        org.joda.time.DateTime dateTime50 = dateTime47.minusMillis((int) (byte) -1);
        int int51 = dateTime50.getMinuteOfHour();
        org.joda.time.DateTime dateTime53 = dateTime50.withWeekOfWeekyear(31);
        java.util.Locale locale57 = new java.util.Locale("", "0022-02-11T09:36:30.397Z", "years");
        java.util.Calendar calendar58 = dateTime53.toCalendar(locale57);
        java.lang.String str59 = locale57.getISO3Language();
        java.lang.String str60 = property34.getAsText(locale57);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 19 + "'", int27 == 19);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertEquals(locale57.toString(), "_0022-02-11T09:36:30.397Z_years");
        org.junit.Assert.assertNotNull(calendar58);
        org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=18144000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=6,WEEK_OF_YEAR=31,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=211,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0" + "'", str60, "0");
    }

    @Test
    public void test10319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10319");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTime.Property property13 = dateTime9.weekyear();
        int int14 = dateTime9.getMinuteOfHour();
        boolean boolean16 = dateTime9.isBefore((long) (short) 0);
        org.joda.time.Chronology chronology17 = dateTime9.getChronology();
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder18.clearExtensions();
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        java.util.Locale.Builder builder22 = builder19.addUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder25 = builder19.setUnicodeLocaleKeyword("53", "");
        java.util.Locale.Builder builder27 = builder19.setLanguage("CN");
        java.util.Locale.Builder builder28 = builder19.clear();
        java.util.Locale.Builder builder30 = builder19.addUnicodeLocaleAttribute("italiano");
        java.util.Locale.Builder builder32 = builder19.setVariant("French");
        java.util.Locale.Builder builder33 = builder32.clearExtensions();
        boolean boolean34 = dateTime9.equals((java.lang.Object) builder33);
        java.util.Locale.Builder builder36 = builder33.setLanguage("japonais");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test10320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10320");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekOfWeekyear();
        org.joda.time.DurationField durationField9 = chronology7.days();
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology7);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = partial11.getFieldTypes();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        boolean boolean20 = partial16.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.DateTime dateTime32 = dateTime30.withHourOfDay(0);
        org.joda.time.DateTime dateTime34 = dateTime32.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime34.toMutableDateTime();
        org.joda.time.DateTime dateTime36 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean38 = partial16.isSupported(dateTimeFieldType37);
        int int39 = partial11.indexOf(dateTimeFieldType37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        int int46 = partial43.compareTo((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology47 = partial43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 0, chronology47);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.minus(readableDuration51);
        org.joda.time.Chronology chronology53 = dateTime50.getChronology();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        long long57 = chronology53.set((org.joda.time.ReadablePartial) partial55, (long) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        long long61 = chronology53.add(readablePeriod58, (long) (byte) 10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField62 = dateTimeFieldType40.getField(chronology53);
        boolean boolean63 = dateTimeFieldType37.isSupported(chronology53);
        org.joda.time.DurationField durationField64 = chronology53.seconds();
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology53);
        org.joda.time.Partial partial66 = partial10.withChronologyRetainFields(chronology53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField68 = partial10.getField(540);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 540");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10L + "'", long61 == 10L);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(partial66);
    }

    @Test
    public void test10321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10321");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withPivotYear(69);
        org.joda.time.format.DateTimeParser dateTimeParser12 = dateTimeFormatter11.getParser();
        boolean boolean13 = dateTimeFormatter11.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTimeFormatter11.parseDateTime("chinois");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(dateTimeParser12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test10322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10322");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str14 = dateTimeFieldType13.getName();
        int int15 = dateTime9.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime17 = dateTime9.minusMinutes(4);
        int int18 = dateTime9.getWeekyear();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime9.plus(readableDuration19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusMonths((int) '#');
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTimeISO();
        org.joda.time.Chronology chronology24 = dateTime23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.eras();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "halfdayOfDay" + "'", str14, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test10323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10323");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        int int16 = property12.getLeapAmount();
        org.joda.time.DateTime dateTime17 = property12.withMinimumValue();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.Chronology chronology30 = dateTime27.getChronology();
        org.joda.time.DateTime dateTime32 = dateTime27.withWeekyear(23);
        long long33 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        int int39 = partial36.compareTo((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = partial36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.Chronology chronology42 = chronology40.withZone(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 0, chronology40);
        org.joda.time.DateTime dateTime45 = dateTime43.withHourOfDay(0);
        org.joda.time.DateTime dateTime47 = dateTime45.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime47.toMutableDateTime();
        org.joda.time.DateTime.Property property49 = dateTime47.weekyear();
        org.joda.time.DateTime dateTime50 = property49.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime51 = property49.withMinimumValue();
        boolean boolean52 = dateTime27.isBefore((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        int int58 = partial55.compareTo((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology59 = partial55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.Chronology chronology61 = chronology59.withZone(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) 0, chronology59);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.DateTime dateTime64 = dateTime62.minus(readableDuration63);
        org.joda.time.DateTime dateTime66 = dateTime62.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property67 = dateTime66.dayOfYear();
        java.lang.String str68 = property67.getName();
        org.joda.time.DurationField durationField69 = property67.getRangeDurationField();
        java.lang.String str70 = property67.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = property67.getFieldType();
        org.joda.time.DurationFieldType durationFieldType72 = dateTimeFieldType71.getDurationType();
        org.joda.time.DateTime dateTime74 = dateTime51.withFieldAdded(durationFieldType72, 49);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "dayOfYear" + "'", str68, "dayOfYear");
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1" + "'", str70, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertNotNull(dateTime74);
    }

    @Test
    public void test10324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10324");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Set<java.lang.String> strSet17 = locale14.getUnicodeLocaleAttributes();
        org.joda.time.DateTime dateTime18 = property12.setCopy("1", locale14);
        org.joda.time.DateTime dateTime20 = property12.addToCopy(220924800001L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test10325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10325");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        org.joda.time.DateTime dateTime13 = dateTime11.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTime();
        org.joda.time.DateTime.Property property15 = dateTime13.weekyear();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime13.getZone();
        org.joda.time.DateTime dateTime17 = dateTime13.withLaterOffsetAtOverlap();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test10326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10326");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        long long16 = chronology12.set((org.joda.time.ReadablePartial) partial14, (long) (byte) -1);
        org.joda.time.DurationField durationField17 = chronology12.millis();
        org.joda.time.DateTimeField dateTimeField18 = chronology12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology12.yearOfEra();
        org.joda.time.DurationField durationField20 = chronology12.hours();
        org.joda.time.DateTimeField dateTimeField21 = chronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology12.millisOfDay();
        org.joda.time.DurationField durationField23 = chronology12.centuries();
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology12);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        int int30 = partial27.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = partial27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 0, chronology31);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.minus(readableDuration35);
        org.joda.time.DateTime dateTime38 = dateTime34.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime40 = dateTime34.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime42 = dateTime40.minusWeeks(19);
        int int43 = dateTime42.getSecondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str45 = dateTimeFieldType44.getName();
        boolean boolean46 = dateTime42.isSupported(dateTimeFieldType44);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        int int52 = partial49.compareTo((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = partial49.getChronology();
        org.joda.time.DurationField durationField54 = durationFieldType47.getField(chronology53);
        org.joda.time.DateTimeField dateTimeField55 = chronology53.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField57 = chronology53.weekyear();
        org.joda.time.DateTimeField dateTimeField58 = chronology53.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType44.getField(chronology53);
        org.joda.time.DurationFieldType durationFieldType60 = dateTimeFieldType44.getRangeDurationType();
        java.lang.String str61 = durationFieldType60.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial63 = partial24.withFieldAdded(durationFieldType60, 71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'days' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "halfdayOfDay" + "'", str45, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "days" + "'", str61, "days");
    }

    @Test
    public void test10327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10327");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.DateTime.Property property13 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime16 = dateTime11.withYearOfEra((int) 'u');
        int int17 = dateTime11.getSecondOfDay();
        int int18 = dateTime11.getYearOfEra();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
    }

    @Test
    public void test10328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10328");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTime.Property property13 = dateTime9.weekyear();
        int int14 = dateTime9.getMinuteOfHour();
        boolean boolean16 = dateTime9.isBefore((long) (short) 0);
        org.joda.time.Chronology chronology17 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.year();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.centuryOfEra();
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder22.clearExtensions();
        java.util.Locale.Builder builder24 = builder23.clearExtensions();
        java.util.Locale.Builder builder26 = builder23.addUnicodeLocaleAttribute("coreano");
        java.util.Locale.Category category27 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale28 = java.util.Locale.getDefault(category27);
        java.util.Locale.Builder builder29 = builder23.setLocale(locale28);
        java.util.Locale.Builder builder31 = builder23.setVariant("Italian");
        java.util.Locale locale33 = new java.util.Locale("CN");
        java.util.Locale.Builder builder34 = builder23.setLocale(locale33);
        java.util.Locale locale35 = builder34.build();
        java.lang.String str36 = dateTimeField20.getAsText(292278994, locale35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + category27 + "' != '" + java.util.Locale.Category.FORMAT + "'", category27.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals(locale33.toString(), "cn");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "cn");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "292278994" + "'", str36, "292278994");
    }

    @Test
    public void test10329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10329");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes((int) 'x');
        boolean boolean15 = dateTime13.isEqual((long) 86399999);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((long) 52);
        java.util.GregorianCalendar gregorianCalendar18 = dateTime17.toGregorianCalendar();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(gregorianCalendar18);
    }

    @Test
    public void test10330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10330");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        long long12 = dateTime11.getMillis();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        boolean boolean20 = partial16.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.DateTime dateTime32 = dateTime30.withHourOfDay(0);
        org.joda.time.DateTime dateTime34 = dateTime32.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime34.toMutableDateTime();
        org.joda.time.DateTime dateTime36 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readableDuration47);
        org.joda.time.DateTime dateTime50 = dateTime46.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime52 = dateTime46.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime54 = dateTime52.minusWeeks(19);
        org.joda.time.DateTime dateTime56 = dateTime52.plusMillis((int) '#');
        int int57 = dateTime56.getDayOfMonth();
        boolean boolean58 = partial16.equals((java.lang.Object) dateTime56);
        boolean boolean59 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime61 = dateTime56.plusSeconds(2);
        org.joda.time.DateTime dateTime63 = dateTime61.withMillisOfDay(2);
        org.joda.time.DateTime dateTime65 = dateTime63.withCenturyOfEra((int) (byte) 0);
        org.joda.time.DateTime dateTime67 = dateTime63.minus((long) 3);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.DateTime dateTime69 = dateTime67.minus(readableDuration68);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = new org.joda.time.Partial(chronology72);
        int int74 = partial71.compareTo((org.joda.time.ReadablePartial) partial73);
        org.joda.time.Chronology chronology75 = partial71.getChronology();
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.Chronology chronology77 = chronology75.withZone(dateTimeZone76);
        org.joda.time.DateTimeField dateTimeField78 = chronology77.hourOfDay();
        org.joda.time.DateTimeField dateTimeField79 = chronology77.minuteOfHour();
        int int80 = dateTimeField79.getMinimumValue();
        java.lang.String str82 = dateTimeField79.getAsShortText(252000010L);
        boolean boolean83 = dateTime69.equals((java.lang.Object) 252000010L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0" + "'", str82, "0");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test10331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10331");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.monthOfYear();
        org.joda.time.Chronology chronology15 = chronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.clockhourOfHalfday();
        int int19 = dateTimeField17.getLeapAmount((-10L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test10332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10332");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        int int8 = partial5.compareTo((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology9 = partial5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Chronology chronology11 = chronology9.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 0, chronology9);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.minus(readableDuration13);
        org.joda.time.Chronology chronology15 = dateTime12.getChronology();
        org.joda.time.DateTime.Property property16 = dateTime12.weekyear();
        int int17 = dateTime12.getMinuteOfHour();
        boolean boolean19 = dateTime12.isBefore((long) (short) 0);
        org.joda.time.Chronology chronology20 = dateTime12.getChronology();
        org.joda.time.DurationField durationField21 = durationFieldType2.getField(chronology20);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTime dateTime24 = dateTime22.plus((long) 3409);
        org.joda.time.DateTime dateTime26 = dateTime24.withMillisOfDay(18000000);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test10333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10333");
        java.util.Locale locale2 = new java.util.Locale("[]", "[]");
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        int int9 = partial6.compareTo((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = partial6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Chronology chronology12 = chronology10.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.weekOfWeekyear();
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        int int17 = dateTimeField13.getMaximumTextLength(locale15);
        java.util.Locale.setDefault(category3, locale15);
        java.util.Locale locale19 = java.util.Locale.getDefault(category3);
        java.util.Locale locale20 = java.util.Locale.getDefault(category3);
        java.lang.String str21 = locale2.getDisplayScript(locale20);
        java.util.Set<java.lang.String> strSet22 = locale2.getUnicodeLocaleKeys();
        org.junit.Assert.assertEquals(locale2.toString(), "[]_[]");
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fran\347ais (Canada)" + "'", str16, "fran\347ais (Canada)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strSet22);
    }

    @Test
    public void test10334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10334");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTimeField dateTimeField10 = chronology6.centuryOfEra();
        boolean boolean12 = dateTimeField10.isLeap(4L);
        long long15 = dateTimeField10.addWrapField(1850400032L, 43200);
        int int16 = dateTimeField10.getMaximumValue();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 136326034490400032L + "'", long15 == 136326034490400032L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2922789 + "'", int16 == 2922789);
    }

    @Test
    public void test10335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10335");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property2 = dateTime0.millisOfSecond();
        org.joda.time.DateTime.Property property3 = dateTime0.dayOfWeek();
        org.joda.time.DateTime dateTime4 = property3.roundCeilingCopy();
        org.joda.time.DateTime dateTime5 = dateTime4.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 6 + "'", int1 == 6);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test10336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10336");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.minuteOfHour();
        org.joda.time.DurationField durationField11 = chronology5.years();
        org.joda.time.DateTimeField dateTimeField12 = chronology5.halfdayOfDay();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology5);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test10337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10337");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 0, chronology19);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readableDuration23);
        org.joda.time.Chronology chronology25 = dateTime22.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str27 = dateTimeFieldType26.getName();
        int int28 = dateTime22.get(dateTimeFieldType26);
        org.joda.time.DateTime dateTime30 = dateTime22.minusMinutes(4);
        int int31 = dateTime22.getWeekyear();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime22.plus(readableDuration32);
        boolean boolean34 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime36 = dateTime11.minusWeeks((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int38 = dateTime36.get(dateTimeFieldType37);
        org.joda.time.DateTime dateTime39 = dateTime36.toDateTimeISO();
        org.joda.time.DateTime dateTime41 = dateTime36.withWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime42 = dateTime36.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean44 = dateTime42.isSupported(dateTimeFieldType43);
        java.lang.String str45 = dateTimeFieldType43.getName();
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType43.getRangeDurationType();
        java.lang.String str47 = durationFieldType46.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "halfdayOfDay" + "'", str27, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "secondOfMinute" + "'", str45, "secondOfMinute");
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "minutes" + "'", str47, "minutes");
    }

    @Test
    public void test10338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10338");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        org.joda.time.Interval interval16 = property12.toInterval();
        org.joda.time.DateTimeField dateTimeField17 = property12.getField();
        long long19 = dateTimeField17.roundHalfEven((-981L));
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int int25 = partial22.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = partial22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.Chronology chronology28 = chronology26.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 0, chronology26);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.minus(readableDuration30);
        org.joda.time.Chronology chronology32 = dateTime29.getChronology();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        long long36 = chronology32.set((org.joda.time.ReadablePartial) partial34, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = partial34.getFieldTypes();
        java.util.Locale locale38 = java.util.Locale.PRC;
        boolean boolean39 = partial34.equals((java.lang.Object) locale38);
        int int40 = partial34.size();
        java.util.Locale locale45 = new java.util.Locale("coreano", "dayOfYear", "italien");
        java.lang.String str46 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) partial34, 366, locale45);
        java.lang.String str47 = partial34.toString();
        int[] intArray48 = partial34.getValues();
        org.joda.time.format.DateTimePrinter dateTimePrinter49 = null;
        org.joda.time.format.DateTimeParser dateTimeParser50 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter49, dateTimeParser50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter51.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser53 = dateTimeFormatter51.getParser();
        int int54 = dateTimeFormatter51.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter51.withZoneUTC();
        org.joda.time.Chronology chronology56 = dateTimeFormatter55.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter55.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimePrinter dateTimePrinter59 = null;
        org.joda.time.format.DateTimeParser dateTimeParser60 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter59, dateTimeParser60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter61.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser63 = dateTimeFormatter61.getParser();
        int int64 = dateTimeFormatter61.getDefaultYear();
        org.joda.time.Chronology chronology65 = dateTimeFormatter61.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter66 = null;
        org.joda.time.format.DateTimeParser dateTimeParser67 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter66, dateTimeParser67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(chronology71);
        int int73 = partial70.compareTo((org.joda.time.ReadablePartial) partial72);
        org.joda.time.Chronology chronology74 = partial70.getChronology();
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.Chronology chronology76 = chronology74.withZone(dateTimeZone75);
        org.joda.time.DateTimeField dateTimeField77 = chronology76.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone78 = chronology76.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter68.withZone(dateTimeZone78);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter61.withZone(dateTimeZone78);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter81 = dateTimeFormatter55.withZone(dateTimeZone78);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str82 = partial34.toString(dateTimeFormatter55);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-981L) + "'", long19 == (-981L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals(locale45.toString(), "coreano_DAYOFYEAR_italien");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "366" + "'", str46, "366");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNull(dateTimeParser53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2000 + "'", int54 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertNull(dateTimeParser63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2000 + "'", int64 == 2000);
        org.junit.Assert.assertNull(chronology65);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
        org.junit.Assert.assertNotNull(dateTimeFormatter81);
    }

    @Test
    public void test10339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10339");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.minuteOfHour();
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        int int19 = partial16.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = partial16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Chronology chronology22 = chronology20.withZone(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 0, chronology20);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.minus(readableDuration24);
        org.joda.time.Chronology chronology26 = dateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.monthOfYear();
        java.util.Locale locale31 = new java.util.Locale("fran\347ais (Canada)");
        java.util.Locale.Category category32 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale33 = java.util.Locale.getDefault(category32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = partial35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.weekOfWeekyear();
        java.util.Locale locale43 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale44 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str45 = locale43.getDisplayName(locale44);
        int int46 = dateTimeField42.getMaximumTextLength(locale44);
        java.util.Locale.setDefault(category32, locale44);
        java.lang.String str48 = locale31.getDisplayVariant(locale44);
        java.lang.String str49 = dateTimeField28.getAsText(5443200012L, locale44);
        int int50 = property12.getMaximumTextLength(locale44);
        java.lang.String str51 = locale44.toLanguageTag();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals(locale31.toString(), "fran\347ais (canada)");
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.FORMAT + "'", category32.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "fran\347ais (Canada)" + "'", str45, "fran\347ais (Canada)");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "mars" + "'", str49, "mars");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "fr-CA" + "'", str51, "fr-CA");
    }

    @Test
    public void test10340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10340");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        org.joda.time.DateTime dateTime13 = dateTime11.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTime();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readableDuration25);
        org.joda.time.DateTime.Property property27 = dateTime26.millisOfSecond();
        boolean boolean28 = mutableDateTime14.isBefore((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime30 = dateTime26.minusWeeks(12);
        int int31 = dateTime30.getYear();
        org.joda.time.Instant instant32 = dateTime30.toInstant();
        org.joda.time.DateTime dateTime34 = dateTime30.withWeekyear(8);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        int int39 = partial36.compareTo((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        boolean boolean42 = partial38.isAfter((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        int int48 = partial45.compareTo((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = partial45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 0, chronology49);
        org.joda.time.DateTime dateTime54 = dateTime52.withHourOfDay(0);
        org.joda.time.DateTime dateTime56 = dateTime54.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime56.toMutableDateTime();
        org.joda.time.DateTime dateTime58 = partial38.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime60 = dateTime58.withMillis((-292275042L));
        org.joda.time.DateTime dateTime61 = dateTime60.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property62 = dateTime60.yearOfCentury();
        boolean boolean63 = dateTime30.equals((java.lang.Object) dateTime60);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1969 + "'", int31 == 1969);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test10341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10341");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.minus(readableDuration11);
        org.joda.time.Chronology chronology13 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.dayOfWeek();
        org.joda.time.DurationField durationField16 = chronology13.seconds();
        org.joda.time.DurationField durationField17 = durationFieldType0.getField(chronology13);
        org.joda.time.DurationField durationField18 = chronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = chronology13.weekyear();
        org.joda.time.Chronology chronology21 = chronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = chronology13.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology13.getZone();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
    }

    @Test
    public void test10342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10342");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Partial partial2 = new org.joda.time.Partial(dateTimeFieldType0, 12);
        java.lang.String str4 = partial2.toString("[]");
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial7 = partial2.withPeriodAdded(readablePeriod5, (-694733));
        int[] intArray8 = partial2.getValues();
        int int9 = partial2.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Partial partial12 = new org.joda.time.Partial(dateTimeFieldType10, (int) (short) 0);
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType10.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial15 = partial2.withFieldAdded(durationFieldType13, 38977195);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyears' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[12]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationFieldType13);
    }

    @Test
    public void test10343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10343");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.hourOfDay();
        long long19 = dateTimeField16.getDifferenceAsLong(43200L, 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-2562047788015L) + "'", long19 == (-2562047788015L));
    }

    @Test
    public void test10344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10344");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = chronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.yearOfCentury();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        int int21 = partial18.compareTo((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = partial18.getChronology();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        int int28 = partial25.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = partial25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Chronology chronology31 = chronology29.withZone(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 0, chronology29);
        org.joda.time.DateTime dateTime34 = dateTime32.withHourOfDay(0);
        org.joda.time.DateTime dateTime35 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        int int40 = partial37.compareTo((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        boolean boolean43 = partial39.isAfter((org.joda.time.ReadablePartial) partial42);
        java.lang.String str44 = partial42.toString();
        boolean boolean45 = partial18.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial18.minus(readablePeriod46);
        int int48 = dateTimeField16.getMaximumValue((org.joda.time.ReadablePartial) partial47);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType50 = partial47.getFieldType(5);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 99 + "'", int48 == 99);
    }

    @Test
    public void test10345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10345");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime17 = dateTime11.withDurationAdded(readableDuration15, 1);
        org.joda.time.Instant instant18 = dateTime11.toInstant();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime11.plus(readableDuration19);
        org.joda.time.DateTime.Property property21 = dateTime20.millisOfSecond();
        int int22 = property21.getMaximumValue();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 999 + "'", int22 == 999);
    }

    @Test
    public void test10346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10346");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        java.lang.Integer int5 = dateTimeFormatter4.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter4.withPivotYear(23);
        // The following exception was thrown during execution in test generation
        try {
            long long9 = dateTimeFormatter7.parseMillis("millis");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
    }

    @Test
    public void test10347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10347");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = durationFieldType1.getName();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        int int9 = partial6.compareTo((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = partial6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Chronology chronology12 = chronology10.withZone(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 0, chronology10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readableDuration14);
        org.joda.time.Chronology chronology16 = dateTime13.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.centuries();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1970, chronology16);
        org.joda.time.DateTimeField dateTimeField19 = chronology16.era();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        boolean boolean27 = partial23.isAfter((org.joda.time.ReadablePartial) partial26);
        java.lang.String str28 = partial26.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        org.joda.time.Partial partial30 = partial26.without(dateTimeFieldType29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial32 = partial26.plus(readablePeriod31);
        int[] intArray34 = chronology16.get((org.joda.time.ReadablePartial) partial26, (-19L));
        org.joda.time.Chronology chronology35 = chronology16.withUTC();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology16);
        org.joda.time.DurationField durationField37 = durationFieldType1.getField(chronology16);
        org.joda.time.DateTimeField dateTimeField38 = chronology16.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "centuries" + "'", str2, "centuries");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test10348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10348");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = chronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfDay();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime.Property property16 = dateTime15.hourOfDay();
        java.util.Locale.Category category17 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale18 = java.util.Locale.getDefault(category17);
        java.lang.String str19 = property16.getAsShortText(locale18);
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("und");
        java.lang.String str23 = locale21.getUnicodeLocaleType("ad");
        java.lang.String str24 = locale18.getDisplayLanguage(locale21);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + category17 + "' != '" + java.util.Locale.Category.FORMAT + "'", category17.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "9" + "'", str19, "9");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "French" + "'", str24, "French");
    }

    @Test
    public void test10349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10349");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DurationField durationField7 = durationFieldType0.getField(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = chronology6.add(readablePeriod10, (long) 4, 23);
        org.joda.time.DateTimeField dateTimeField14 = chronology6.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology6.getZone();
        org.joda.time.DateTimeField dateTimeField16 = chronology6.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology6.millisOfSecond();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 4L + "'", long13 == 4L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test10350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10350");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTime.Property property13 = dateTime9.weekyear();
        int int14 = dateTime9.getMinuteOfHour();
        boolean boolean16 = dateTime9.isBefore((long) (short) 0);
        org.joda.time.Chronology chronology17 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.millisOfSecond();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test10351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10351");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        boolean boolean21 = partial17.isAfter((org.joda.time.ReadablePartial) partial20);
        java.lang.String str22 = partial20.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial20.without(dateTimeFieldType23);
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.lang.String str29 = locale26.getDisplayVariant();
        java.util.Locale locale30 = locale26.stripExtensions();
        java.lang.String str31 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) partial20, 53, locale30);
        int int32 = partial20.size();
        int[] intArray33 = partial20.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = partial20.getFormatter();
        org.joda.time.Chronology chronology35 = partial20.getChronology();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        int int41 = partial38.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 0, chronology42);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.minus(readableDuration46);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMinutes((int) 'x');
        boolean boolean51 = dateTime49.isEqual((long) 86399999);
        org.joda.time.DateTime dateTime53 = dateTime49.minus((long) 52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        int int59 = partial56.compareTo((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology60 = partial56.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.Chronology chronology62 = chronology60.withZone(dateTimeZone61);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) 0, chronology60);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.DateTime dateTime65 = dateTime63.minus(readableDuration64);
        org.joda.time.Chronology chronology66 = dateTime63.getChronology();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        int int71 = partial68.compareTo((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = partial68.getChronology();
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.Chronology chronology74 = chronology72.withZone(dateTimeZone73);
        org.joda.time.DateTimeField dateTimeField75 = chronology74.weekOfWeekyear();
        int int77 = dateTimeField75.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = new org.joda.time.Partial(chronology78);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Partial partial81 = new org.joda.time.Partial(chronology80);
        int int82 = partial79.compareTo((org.joda.time.ReadablePartial) partial81);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Partial partial84 = new org.joda.time.Partial(chronology83);
        boolean boolean85 = partial81.isAfter((org.joda.time.ReadablePartial) partial84);
        java.lang.String str86 = partial84.toString();
        java.util.Locale locale88 = null;
        java.lang.String str89 = dateTimeField75.getAsShortText((org.joda.time.ReadablePartial) partial84, 53, locale88);
        long long91 = chronology66.set((org.joda.time.ReadablePartial) partial84, (long) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = org.joda.time.DateTimeFieldType.yearOfEra();
        int int93 = partial84.indexOf(dateTimeFieldType92);
        int int94 = dateTime49.get(dateTimeFieldType92);
        boolean boolean95 = partial20.isMatch((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime97 = dateTime49.withHourOfDay(21);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fran\347ais (Canada)" + "'", str28, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "53" + "'", str31, "53");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 53 + "'", int77 == 53);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "[]" + "'", str86, "[]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "53" + "'", str89, "53");
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1969 + "'", int94 == 1969);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    public void test10352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10352");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str8 = locale5.getExtension('a');
        java.util.Locale.setDefault(category3, locale5);
        java.lang.String str10 = locale5.getDisplayName();
        java.util.Locale.setDefault(category0, locale5);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 0, chronology19);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readableDuration23);
        org.joda.time.Chronology chronology25 = dateTime22.getChronology();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        long long29 = chronology25.set((org.joda.time.ReadablePartial) partial27, (long) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        long long33 = chronology25.add(readablePeriod30, (long) (byte) 10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType12.getField(chronology25);
        org.joda.time.DateTimeField dateTimeField35 = chronology25.clockhourOfHalfday();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        int int41 = partial38.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 0, chronology42);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.minus(readableDuration46);
        org.joda.time.Chronology chronology48 = dateTime45.getChronology();
        org.joda.time.DateTime.Property property49 = dateTime45.weekyear();
        int int50 = dateTime45.getMinuteOfHour();
        org.joda.time.DateTime dateTime52 = dateTime45.minusMinutes((int) '#');
        org.joda.time.DateTime.Property property53 = dateTime45.secondOfMinute();
        org.joda.time.DateTime dateTime54 = property53.getDateTime();
        org.joda.time.DurationField durationField55 = property53.getDurationField();
        java.util.Locale locale57 = new java.util.Locale("hi!");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        int int63 = partial60.compareTo((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Chronology chronology64 = partial60.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.Chronology chronology66 = chronology64.withZone(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) 0, chronology64);
        org.joda.time.DateTimeField dateTimeField68 = chronology64.millisOfDay();
        int int69 = dateTimeField68.getMinimumValue();
        java.util.Locale locale71 = java.util.Locale.ROOT;
        java.lang.String str72 = dateTimeField68.getAsShortText((long) (byte) -1, locale71);
        java.lang.String str73 = locale57.getDisplayCountry(locale71);
        int int74 = property53.getMaximumTextLength(locale57);
        java.util.Locale locale75 = java.util.Locale.ITALY;
        java.lang.String str76 = locale75.getScript();
        java.util.Set<java.lang.String> strSet77 = locale75.getUnicodeLocaleAttributes();
        java.lang.String str78 = locale57.getDisplayScript(locale75);
        int int79 = dateTimeField35.getMaximumTextLength(locale75);
        java.util.Set<java.lang.Character> charSet80 = locale75.getExtensionKeys();
        java.util.Locale.setDefault(category0, locale75);
        java.util.Locale locale82 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.Character> charSet83 = locale82.getExtensionKeys();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "zh" + "'", str6, "zh");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e2d\u6587" + "'", str10, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertEquals(locale57.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "86399999" + "'", str72, "86399999");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(charSet80);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "it_IT");
        org.junit.Assert.assertNotNull(charSet83);
    }

    @Test
    public void test10353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10353");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime15 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime17 = dateTime15.withCenturyOfEra(12);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        long long21 = dateTimeField19.roundFloor((-28314680206L));
        long long23 = dateTimeField19.roundFloor(675699L);
        org.joda.time.DurationField durationField24 = dateTimeField19.getLeapDurationField();
        long long27 = dateTimeField19.set((-18L), 34);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-28339200000L) + "'", long21 == (-28339200000L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNull(durationField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-28598400018L) + "'", long27 == (-28598400018L));
    }

    @Test
    public void test10354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10354");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        boolean boolean30 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime32 = dateTime29.withMillis((long) (short) 100);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = partial35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 0, chronology39);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.minus(readableDuration43);
        org.joda.time.DateTime dateTime46 = dateTime42.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime48 = dateTime42.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime50 = dateTime48.minusWeeks(19);
        org.joda.time.DateTime dateTime52 = dateTime48.plusMillis((int) '#');
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.DateTime dateTime54 = dateTime48.plus(readablePeriod53);
        boolean boolean55 = dateTime29.isBefore((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime58 = dateTime29.withDurationAdded((-259200000L), (int) (short) -1);
        org.joda.time.DateTime dateTime60 = dateTime29.minusSeconds(23);
        org.joda.time.DateTime dateTime61 = dateTime60.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        int int67 = partial64.compareTo((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = partial64.getChronology();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.Chronology chronology70 = chronology68.withZone(dateTimeZone69);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) 0, chronology68);
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.DateTime dateTime73 = dateTime71.minus(readableDuration72);
        org.joda.time.DateTime dateTime75 = dateTime71.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime77 = dateTime71.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime79 = dateTime77.minusWeeks(19);
        int int80 = dateTime77.getMonthOfYear();
        org.joda.time.DateTime dateTime81 = dateTime77.toDateTimeISO();
        org.joda.time.DateTime.Property property82 = dateTime81.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.DateTime dateTime84 = dateTime81.plus(readableDuration83);
        boolean boolean85 = dateTime60.isAfter((org.joda.time.ReadableInstant) dateTime81);
        int int86 = dateTime60.getDayOfMonth();
        org.joda.time.DateTime dateTime88 = dateTime60.plus(6953L);
        java.util.Date date89 = dateTime60.toDate();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 31 + "'", int86 == 31);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Wed Dec 31 23:59:37 UTC 1969");
    }

    @Test
    public void test10355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10355");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone12);
        int int14 = dateTimeFormatter13.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeFormatter13.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter13.withOffsetParsed();
        java.lang.StringBuffer stringBuffer17 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.DateTime.Property property30 = dateTime29.millisOfSecond();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        int int32 = property30.getMaximumTextLength(locale31);
        long long33 = property30.remainder();
        org.joda.time.Interval interval34 = property30.toInterval();
        org.joda.time.DateTime dateTime35 = property30.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime37 = dateTime35.withHourOfDay(2);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.plus(readableDuration38);
        org.joda.time.DateTime dateTime40 = dateTime39.withLaterOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter13.printTo(stringBuffer17, (org.joda.time.ReadableInstant) dateTime40);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2000 + "'", int14 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test10356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10356");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("hourOfDay", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=hourofday");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10357");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        boolean boolean7 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        int int13 = partial10.compareTo((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = partial10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Chronology chronology16 = chronology14.withZone(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 0, chronology14);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        int int20 = dateTime19.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DurationField durationField28 = durationFieldType21.getField(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.weekOfWeekyear();
        org.joda.time.DateTime dateTime30 = dateTime19.withChronology(chronology27);
        org.joda.time.DateTime dateTime32 = dateTime19.plusWeeks((int) (short) 1);
        boolean boolean33 = partial3.isMatch((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        int int39 = partial36.compareTo((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = partial36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.Chronology chronology42 = chronology40.withZone(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 0, chronology40);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTime dateTime45 = dateTime43.minus(readableDuration44);
        org.joda.time.DateTime dateTime47 = dateTime43.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime49 = dateTime43.withSecondOfMinute(0);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        int int54 = partial51.compareTo((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = partial51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.Chronology chronology57 = chronology55.withZone(dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField58 = chronology57.weekOfWeekyear();
        int int59 = dateTime49.get(dateTimeField58);
        org.joda.time.DateTime dateTime61 = dateTime49.plusMillis(19);
        org.joda.time.DateTime dateTime62 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime64 = dateTime62.withMonthOfYear(2);
        org.joda.time.DateTime.Property property65 = dateTime64.secondOfDay();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        int int71 = partial68.compareTo((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = partial68.getChronology();
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.Chronology chronology74 = chronology72.withZone(dateTimeZone73);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) 0, chronology72);
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.DateTime dateTime77 = dateTime75.minus(readableDuration76);
        org.joda.time.DateTime dateTime79 = dateTime75.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime81 = dateTime75.withSecondOfMinute(0);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Partial partial83 = new org.joda.time.Partial(chronology82);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Partial partial85 = new org.joda.time.Partial(chronology84);
        int int86 = partial83.compareTo((org.joda.time.ReadablePartial) partial85);
        org.joda.time.Chronology chronology87 = partial83.getChronology();
        org.joda.time.DateTimeZone dateTimeZone88 = null;
        org.joda.time.Chronology chronology89 = chronology87.withZone(dateTimeZone88);
        org.joda.time.DateTimeField dateTimeField90 = chronology89.weekOfWeekyear();
        int int91 = dateTime81.get(dateTimeField90);
        long long93 = dateTimeField90.roundHalfCeiling((-58380393600000L));
        int int94 = dateTime64.get(dateTimeField90);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 19 + "'", int20 == 19);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + (-58380393600000L) + "'", long93 == (-58380393600000L));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 5 + "'", int94 == 5);
    }

    @Test
    public void test10358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10358");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 0, chronology19);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readableDuration23);
        org.joda.time.Chronology chronology25 = dateTime22.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str27 = dateTimeFieldType26.getName();
        int int28 = dateTime22.get(dateTimeFieldType26);
        org.joda.time.DateTime dateTime30 = dateTime22.minusMinutes(4);
        int int31 = dateTime22.getWeekyear();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime22.plus(readableDuration32);
        boolean boolean34 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime36 = dateTime11.minusWeeks((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int38 = dateTime36.get(dateTimeFieldType37);
        org.joda.time.DateTime dateTime40 = dateTime36.minusMillis((int) (short) 100);
        org.joda.time.DateTime.Property property41 = dateTime36.year();
        boolean boolean42 = property41.isLeap();
        java.util.Locale.Category category43 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale44 = java.util.Locale.getDefault(category43);
        java.util.Locale locale45 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale46 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str47 = locale45.getDisplayName(locale46);
        java.lang.String str48 = locale45.toLanguageTag();
        java.lang.String str49 = locale45.getScript();
        java.lang.String str50 = locale44.getDisplayCountry(locale45);
        java.lang.String str51 = locale44.getISO3Country();
        int int52 = property41.getMaximumTextLength(locale44);
        java.util.Locale.Builder builder53 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder54 = builder53.clearExtensions();
        java.util.Locale.Builder builder55 = builder54.clearExtensions();
        java.util.Locale.Builder builder57 = builder54.setVariant("");
        java.util.Locale.Builder builder58 = builder54.clearExtensions();
        java.util.Locale.Builder builder59 = builder54.clearExtensions();
        java.util.Locale locale60 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder61 = builder54.setLocale(locale60);
        java.lang.String str62 = locale60.toLanguageTag();
        java.lang.String str63 = locale44.getDisplayScript(locale60);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "halfdayOfDay" + "'", str27, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + category43 + "' != '" + java.util.Locale.Category.FORMAT + "'", category43.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "fran\347ais (Canada)" + "'", str47, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "fr-CA" + "'", str48, "fr-CA");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "zh-CN" + "'", str62, "zh-CN");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
    }

    @Test
    public void test10359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10359");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        int int18 = dateTime17.getSecondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str20 = dateTimeFieldType19.getName();
        boolean boolean21 = dateTime17.isSupported(dateTimeFieldType19);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        int int27 = partial24.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = partial24.getChronology();
        org.joda.time.DurationField durationField29 = durationFieldType22.getField(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.weekyear();
        org.joda.time.DateTimeField dateTimeField33 = chronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType19.getField(chronology28);
        org.joda.time.DateTimeField dateTimeField35 = chronology28.yearOfEra();
        long long37 = dateTimeField35.roundCeiling((long) 35);
        long long39 = dateTimeField35.roundHalfFloor(26265600000L);
        long long41 = dateTimeField35.roundHalfFloor((long) (byte) 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "halfdayOfDay" + "'", str20, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 31536000000L + "'", long37 == 31536000000L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 31536000000L + "'", long39 == 31536000000L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
    }

    @Test
    public void test10360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10360");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        org.joda.time.DateTime dateTime14 = dateTime11.minus((long) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime11.withWeekOfWeekyear(19);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        int int22 = partial19.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = partial19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 0, chronology23);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.minus(readableDuration27);
        org.joda.time.Chronology chronology29 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.monthOfYear();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology29);
        org.joda.time.DateTimeField dateTimeField33 = chronology29.clockhourOfHalfday();
        org.joda.time.DurationField durationField34 = chronology29.years();
        org.joda.time.DateTimeField dateTimeField35 = chronology29.era();
        org.joda.time.DateTime dateTime36 = dateTime11.toDateTime(chronology29);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.DateTime dateTime48 = dateTime46.withHourOfDay(0);
        int int49 = dateTime48.getCenturyOfEra();
        boolean boolean51 = dateTime48.equals((java.lang.Object) '4');
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        int int57 = partial54.compareTo((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Chronology chronology58 = partial54.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 0, chronology58);
        org.joda.time.DateTime dateTime63 = dateTime61.withHourOfDay(0);
        int int64 = dateTime63.getCenturyOfEra();
        boolean boolean66 = dateTime63.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime67 = dateTime63.withEarlierOffsetAtOverlap();
        boolean boolean68 = dateTime48.isAfter((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime dateTime70 = dateTime67.minus((long) 3);
        org.joda.time.DateTime.Property property71 = dateTime67.minuteOfHour();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = new org.joda.time.Partial(chronology75);
        int int77 = partial74.compareTo((org.joda.time.ReadablePartial) partial76);
        org.joda.time.Chronology chronology78 = partial74.getChronology();
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.Chronology chronology80 = chronology78.withZone(dateTimeZone79);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((long) 0, chronology78);
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.DateTime dateTime83 = dateTime81.minus(readableDuration82);
        org.joda.time.Chronology chronology84 = dateTime81.getChronology();
        org.joda.time.Chronology chronology85 = chronology84.withUTC();
        org.joda.time.DateTimeField dateTimeField86 = chronology84.hourOfDay();
        org.joda.time.DurationField durationField87 = chronology84.millis();
        org.joda.time.DateTimeField dateTimeField88 = chronology84.clockhourOfDay();
        org.joda.time.DateTime dateTime89 = dateTime67.withChronology(chronology84);
        org.joda.time.DateTime dateTime90 = org.joda.time.DateTime.now(chronology84);
        org.joda.time.DurationField durationField91 = chronology84.years();
        org.joda.time.Chronology chronology92 = chronology84.withUTC();
        org.joda.time.DurationField durationField93 = chronology84.months();
        org.joda.time.DateTimeZone dateTimeZone94 = chronology84.getZone();
        org.joda.time.DateTime dateTime95 = dateTime36.withChronology(chronology84);
        org.joda.time.DateTimeField dateTimeField96 = chronology84.monthOfYear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 19 + "'", int49 == 19);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 19 + "'", int64 == 19);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(durationField93);
        org.junit.Assert.assertNotNull(dateTimeZone94);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(dateTimeField96);
    }

    @Test
    public void test10361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10361");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        boolean boolean19 = dateTime17.isBefore((long) '4');
        org.joda.time.DateTime dateTime21 = dateTime17.withCenturyOfEra((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime17.withWeekyear(69);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime17.plus(readableDuration24);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test10362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10362");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.DurationField durationField14 = dateTimeField13.getDurationField();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test10363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10363");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear(23);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readableDuration20);
        org.joda.time.Chronology chronology22 = dateTime19.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        int int27 = partial24.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = partial24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.weekOfWeekyear();
        int int33 = dateTimeField31.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        boolean boolean41 = partial37.isAfter((org.joda.time.ReadablePartial) partial40);
        java.lang.String str42 = partial40.toString();
        java.util.Locale locale44 = null;
        java.lang.String str45 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) partial40, 53, locale44);
        long long47 = chronology22.set((org.joda.time.ReadablePartial) partial40, (long) 0);
        org.joda.time.DateTimeField dateTimeField48 = chronology22.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter9.withChronology(chronology22);
        org.joda.time.Chronology chronology50 = dateTimeFormatter49.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter49.withDefaultYear(316);
        java.util.Locale locale54 = new java.util.Locale("fran\347ais (Canada)");
        java.util.Locale.Category category55 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale56 = java.util.Locale.getDefault(category55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        int int61 = partial58.compareTo((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology62 = partial58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.Chronology chronology64 = chronology62.withZone(dateTimeZone63);
        org.joda.time.DateTimeField dateTimeField65 = chronology64.weekOfWeekyear();
        java.util.Locale locale66 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale67 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str68 = locale66.getDisplayName(locale67);
        int int69 = dateTimeField65.getMaximumTextLength(locale67);
        java.util.Locale.setDefault(category55, locale67);
        java.lang.String str71 = locale54.getDisplayVariant(locale67);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter49.withLocale(locale67);
        org.joda.time.DateTimeZone dateTimeZone73 = dateTimeFormatter72.getZone();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 53 + "'", int33 == 53);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "53" + "'", str45, "53");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertEquals(locale54.toString(), "fran\347ais (canada)");
        org.junit.Assert.assertTrue("'" + category55 + "' != '" + java.util.Locale.Category.FORMAT + "'", category55.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "fran\347ais (Canada)" + "'", str68, "fran\347ais (Canada)");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertNull(dateTimeZone73);
    }

    @Test
    public void test10364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10364");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readableDuration20);
        org.joda.time.Chronology chronology22 = dateTime19.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        long long26 = chronology22.set((org.joda.time.ReadablePartial) partial24, (long) (byte) -1);
        int[] intArray28 = chronology6.get((org.joda.time.ReadablePartial) partial24, (long) ' ');
        org.joda.time.DurationField durationField29 = chronology6.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology6.dayOfYear();
        int int32 = dateTimeField30.getMinimumValue((-59106067200000L));
        java.lang.String str34 = dateTimeField30.getAsShortText(59L);
        long long37 = dateTimeField30.addWrapField(291078993L, (int) 'x');
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = dateTimeField30.getType();
        java.lang.String str39 = dateTimeFieldType38.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1" + "'", str34, "1");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10659078993L + "'", long37 == 10659078993L);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "dayOfYear" + "'", str39, "dayOfYear");
    }

    @Test
    public void test10365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10365");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        int int18 = dateTime17.getSecondOfMinute();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        org.joda.time.DateTime dateTime32 = dateTime30.withYear((int) 'a');
        boolean boolean33 = dateTime30.isEqualNow();
        org.joda.time.DateMidnight dateMidnight34 = dateTime30.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone35 = dateMidnight34.getZone();
        org.joda.time.DateTime dateTime36 = dateTime17.withZoneRetainFields(dateTimeZone35);
        org.joda.time.DateTime.Property property37 = dateTime36.weekOfWeekyear();
        boolean boolean38 = dateTime36.isAfterNow();
        org.joda.time.DateTime dateTime39 = dateTime36.toDateTime();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime42 = dateTime39.withPeriodAdded(readablePeriod40, 52);
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone44 = dateTime42.getZone();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
    }

    @Test
    public void test10366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10366");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime9.minus(readablePeriod14);
        org.joda.time.DateTime dateTime17 = dateTime9.withCenturyOfEra(22200);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        int int22 = partial19.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        boolean boolean25 = partial21.isAfter((org.joda.time.ReadablePartial) partial24);
        java.lang.String str26 = partial24.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        org.joda.time.Partial partial28 = partial24.without(dateTimeFieldType27);
        org.joda.time.Chronology chronology29 = partial24.getChronology();
        long long33 = chronology29.add((long) 52, (long) 31, 70);
        org.joda.time.DateTimeField dateTimeField34 = chronology29.monthOfYear();
        org.joda.time.Chronology chronology35 = chronology29.withUTC();
        org.joda.time.DurationField durationField36 = chronology29.millis();
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime17.toMutableDateTime(chronology29);
        org.joda.time.DateTime dateTime39 = dateTime17.plusWeeks(397069);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        int int45 = partial42.compareTo((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = partial42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = chronology46.withZone(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 0, chronology46);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.minus(readableDuration50);
        org.joda.time.DateTime dateTime53 = dateTime49.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime55 = dateTime49.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime57 = dateTime55.minusWeeks(19);
        boolean boolean59 = dateTime57.isBefore((long) '4');
        int int60 = dateTime57.getMinuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime61 = dateTime57.toMutableDateTime();
        boolean boolean62 = dateTime39.isBefore((org.joda.time.ReadableInstant) mutableDateTime61);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 2222L + "'", long33 == 2222L);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test10367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10367");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.DateTime dateTime15 = property14.withMinimumValue();
        boolean boolean16 = dateTime15.isAfterNow();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int18 = dateTime15.get(dateTimeFieldType17);
        org.joda.time.Chronology chronology19 = dateTime15.getChronology();
        org.joda.time.DateTime.Property property20 = dateTime15.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property20.getFieldType();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int int32 = partial29.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = partial29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 0, chronology33);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readableDuration37);
        org.joda.time.Chronology chronology39 = dateTime36.getChronology();
        org.joda.time.Chronology chronology40 = chronology39.withUTC();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.hourOfDay();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology39);
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology39);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(52, 6, 18, 0, 42, chronology39);
        org.joda.time.DurationField durationField45 = chronology39.years();
        org.joda.time.DateTimeField dateTimeField46 = chronology39.dayOfYear();
        boolean boolean47 = dateTimeFieldType21.isSupported(chronology39);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test10368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10368");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        int[] intArray2 = partial1.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean4 = partial1.isSupported(dateTimeFieldType3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial7 = partial1.withPeriodAdded(readablePeriod5, 233);
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = partial1.isMatch(readableInstant8);
        java.lang.String str10 = partial1.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField12 = partial1.getField(46800035);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 46800035");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
    }

    @Test
    public void test10369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10369");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        boolean boolean7 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        java.lang.String str8 = partial6.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = partial6.getFieldTypes();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readableDuration20);
        org.joda.time.DateTime dateTime23 = dateTime19.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime25 = dateTime19.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime27 = dateTime25.minusWeeks(19);
        org.joda.time.DateTime dateTime29 = dateTime25.plusMillis((int) '#');
        int int30 = dateTime29.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str32 = dateTimeFieldType31.getName();
        boolean boolean33 = dateTime29.isSupported(dateTimeFieldType31);
        org.joda.time.DateTime dateTime34 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime.Property property35 = dateTime34.millisOfSecond();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime38 = dateTime36.plusDays(1439);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime36.minus(readablePeriod39);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "halfdayOfDay" + "'", str32, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test10370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10370");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTimeField dateTimeField10 = chronology6.millisOfDay();
        int int11 = dateTimeField10.getMinimumValue();
        int int13 = dateTimeField10.getMaximumValue((long) 31);
        int int15 = dateTimeField10.getMinimumValue(5443200012L);
        java.util.Locale.Category category17 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale18 = java.util.Locale.getDefault(category17);
        java.util.Locale locale19 = java.util.Locale.getDefault(category17);
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale20.getDisplayScript(locale21);
        java.util.Locale locale26 = new java.util.Locale("fr-CA", "1", "86399999");
        java.util.Locale locale27 = locale26.stripExtensions();
        java.lang.String str28 = locale21.getDisplayScript(locale27);
        java.lang.String str29 = locale19.getDisplayVariant(locale21);
        java.lang.String str30 = dateTimeField10.getAsText(120, locale19);
        long long33 = dateTimeField10.add((-59005151913660L), 2044L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 86399999 + "'", int13 == 86399999);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + category17 + "' != '" + java.util.Locale.Category.FORMAT + "'", category17.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals(locale26.toString(), "fr-ca_1_86399999");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr-ca_1_86399999");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "120" + "'", str30, "120");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-59005151911616L) + "'", long33 == (-59005151911616L));
    }

    @Test
    public void test10371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10371");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2022-02-11T09:36:45.288Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:36:45.288z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10372");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1969-12-31T23:56:00.000Z");
        org.joda.time.DateTime dateTime3 = dateTime1.minusSeconds(2);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
    }

    @Test
    public void test10373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10373");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.lang.String str3 = locale0.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test10374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10374");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str14 = dateTimeFieldType13.getName();
        int int15 = dateTime9.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime17 = dateTime9.minusMinutes(4);
        org.joda.time.Instant instant18 = dateTime17.toInstant();
        org.joda.time.DateTime.Property property19 = dateTime17.weekyear();
        org.joda.time.DateTime dateTime20 = property19.roundHalfCeilingCopy();
        org.joda.time.Interval interval21 = property19.toInterval();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        int int27 = partial24.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = partial24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 0, chronology28);
        org.joda.time.DateTime dateTime33 = dateTime31.withHourOfDay(0);
        int int34 = dateTime33.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        int int40 = partial37.compareTo((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = partial37.getChronology();
        org.joda.time.DurationField durationField42 = durationFieldType35.getField(chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.weekOfWeekyear();
        org.joda.time.DateTime dateTime44 = dateTime33.withChronology(chronology41);
        org.joda.time.DateTime dateTime46 = dateTime33.plusWeeks((int) (short) 1);
        org.joda.time.DateTime.Property property47 = dateTime33.yearOfEra();
        org.joda.time.DateTime dateTime48 = property47.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property49 = dateTime48.weekyear();
        org.joda.time.DateTime dateTime51 = dateTime48.minusMillis((int) (byte) 0);
        java.util.Date date52 = dateTime51.toDate();
        org.joda.time.DateTime dateTime54 = dateTime51.withSecondOfMinute(2);
        int int55 = property19.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime.Property property56 = dateTime54.year();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "halfdayOfDay" + "'", str14, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 19 + "'", int34 == 19);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(property56);
    }

    @Test
    public void test10375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10375");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder1.addUnicodeLocaleAttribute("coreano");
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.getDefault(category5);
        java.util.Locale.Builder builder7 = builder1.setLocale(locale6);
        java.util.Locale.Builder builder9 = builder1.setVariant("Italian");
        java.util.Locale locale11 = new java.util.Locale("CN");
        java.util.Locale.Builder builder12 = builder1.setLocale(locale11);
        java.util.Locale locale13 = builder12.build();
        java.util.Locale.Builder builder14 = builder12.clearExtensions();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.DateTime dateTime26 = dateTime24.withHourOfDay(0);
        int int27 = dateTime26.getCenturyOfEra();
        boolean boolean29 = dateTime26.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property30 = dateTime26.era();
        int int31 = property30.getMaximumValue();
        org.joda.time.DateTime dateTime32 = property30.roundHalfCeilingCopy();
        org.joda.time.format.DateTimePrinter dateTimePrinter33 = null;
        org.joda.time.format.DateTimeParser dateTimeParser34 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter33, dateTimeParser34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter35.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser37 = dateTimeFormatter35.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = dateTimeFormatter35.getPrinter();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        boolean boolean40 = locale39.hasExtensions();
        java.lang.String str41 = locale39.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter35.withLocale(locale39);
        int int43 = property30.getMaximumTextLength(locale39);
        java.lang.String str44 = locale39.getVariant();
        java.util.Locale.Builder builder45 = builder12.setLocale(locale39);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder48 = builder12.setExtension('x', "0120-01-01T00:00:03.970Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 01T00:00:03.970Z [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals(locale11.toString(), "cn");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "cn");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 19 + "'", int27 == 19);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNull(dateTimeParser37);
        org.junit.Assert.assertNull(dateTimePrinter38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test10376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10376");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        boolean boolean7 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial3.getFormatter();
        org.joda.time.Chronology chronology10 = partial3.getChronology();
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = partial3.getFields();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        int int16 = partial13.compareTo((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        boolean boolean19 = partial15.isAfter((org.joda.time.ReadablePartial) partial18);
        java.lang.String str20 = partial18.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        org.joda.time.Partial partial22 = partial18.without(dateTimeFieldType21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial18.plus(readablePeriod23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial24.withPeriodAdded(readablePeriod25, 2000);
        boolean boolean28 = partial3.isAfter((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = partial27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.clockhourOfDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        int int35 = partial32.compareTo((org.joda.time.ReadablePartial) partial34);
        java.lang.String str36 = partial32.toString();
        org.joda.time.ReadableInstant readableInstant37 = null;
        boolean boolean38 = partial32.isMatch(readableInstant37);
        org.joda.time.DateTimeField[] dateTimeFieldArray39 = partial32.getFields();
        java.util.Locale.Builder builder40 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder41 = builder40.clearExtensions();
        java.util.Locale.Builder builder42 = builder40.clear();
        java.util.Locale locale43 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str44 = locale43.getDisplayCountry();
        java.util.Locale.Builder builder45 = builder40.setLocale(locale43);
        java.util.Locale.Builder builder47 = builder45.setRegion("CA");
        java.util.Locale.Builder builder48 = builder47.clearExtensions();
        java.util.Locale.Builder builder49 = builder48.clear();
        boolean boolean50 = partial32.equals((java.lang.Object) builder49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        int int55 = partial52.compareTo((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        boolean boolean58 = partial54.isAfter((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Partial partial59 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = partial54.getFormatter();
        org.joda.time.Chronology chronology61 = partial54.getChronology();
        org.joda.time.DateTimeField[] dateTimeFieldArray62 = partial54.getFields();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        int int67 = partial64.compareTo((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        boolean boolean70 = partial66.isAfter((org.joda.time.ReadablePartial) partial69);
        java.lang.String str71 = partial69.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = null;
        org.joda.time.Partial partial73 = partial69.without(dateTimeFieldType72);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.Partial partial75 = partial69.plus(readablePeriod74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.Partial partial78 = partial75.withPeriodAdded(readablePeriod76, 2000);
        boolean boolean79 = partial54.isAfter((org.joda.time.ReadablePartial) partial78);
        int[] intArray80 = partial78.getValues();
        chronology29.validate((org.joda.time.ReadablePartial) partial32, intArray80);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Canada" + "'", str44, "Canada");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(dateTimeFormatter60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeFieldArray62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[]" + "'", str71, "[]");
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
    }

    @Test
    public void test10377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10377");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekOfWeekyear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readableDuration20);
        org.joda.time.DateTime dateTime23 = dateTime19.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime25 = dateTime19.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime27 = dateTime25.minusWeeks(19);
        int int28 = dateTime27.getSecondOfMinute();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = partial31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 0, chronology35);
        org.joda.time.DateTime dateTime40 = dateTime38.withHourOfDay(0);
        org.joda.time.DateTime dateTime42 = dateTime40.withYear((int) 'a');
        boolean boolean43 = dateTime40.isEqualNow();
        org.joda.time.DateMidnight dateMidnight44 = dateTime40.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone45 = dateMidnight44.getZone();
        org.joda.time.DateTime dateTime46 = dateTime27.withZoneRetainFields(dateTimeZone45);
        org.joda.time.Chronology chronology47 = chronology7.withZone(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField48 = chronology47.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.year();
        org.joda.time.DurationField durationField50 = chronology47.days();
        org.joda.time.DateTimeField dateTimeField51 = chronology47.weekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test10378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10378");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property15 = dateTime11.era();
        java.lang.String str16 = property15.getAsString();
        org.joda.time.DateTime dateTime17 = property15.roundCeilingCopy();
        org.joda.time.DurationField durationField18 = property15.getRangeDurationField();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.DateTime.Property property31 = dateTime30.millisOfSecond();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        int int33 = property31.getMaximumTextLength(locale32);
        org.joda.time.DurationField durationField34 = property31.getRangeDurationField();
        int int35 = property31.get();
        org.joda.time.DateTime dateTime37 = property31.addToCopy((long) 0);
        int int38 = property31.getLeapAmount();
        org.joda.time.DateTime dateTime39 = property31.withMaximumValue();
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.halfdayOfDay();
        boolean boolean43 = property15.equals((java.lang.Object) chronology40);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        int int49 = partial46.compareTo((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = partial46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.Chronology chronology52 = chronology50.withZone(dateTimeZone51);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) 0, chronology50);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.DateTime dateTime55 = dateTime53.minus(readableDuration54);
        org.joda.time.Chronology chronology56 = dateTime53.getChronology();
        org.joda.time.Chronology chronology57 = chronology56.withUTC();
        org.joda.time.DateTimeField dateTimeField58 = chronology56.hourOfDay();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(chronology56);
        org.joda.time.DateTime.Property property60 = dateTime59.hourOfDay();
        java.util.Locale.Category category61 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale62 = java.util.Locale.getDefault(category61);
        java.util.Locale locale63 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale64 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str65 = locale63.getDisplayName(locale64);
        java.lang.String str66 = locale63.toLanguageTag();
        java.lang.String str67 = locale63.getScript();
        java.lang.String str68 = locale62.getDisplayCountry(locale63);
        int int69 = property60.getMaximumShortTextLength(locale62);
        java.lang.String str70 = property15.getAsText(locale62);
        java.lang.String str71 = locale62.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNull(durationField18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + category61 + "' != '" + java.util.Locale.Category.FORMAT + "'", category61.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "fran\347ais (Canada)" + "'", str65, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "fr-CA" + "'", str66, "fr-CA");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Canada" + "'", str68, "Canada");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ap. J.-C." + "'", str70, "ap. J.-C.");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "fr_CA" + "'", str71, "fr_CA");
    }

    @Test
    public void test10379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10379");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale1 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.lang.String str4 = locale1.getDisplayVariant(locale3);
        java.util.Locale locale5 = locale1.stripExtensions();
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("English (United States)");
        java.lang.String str8 = locale1.getDisplayScript(locale7);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fran\347ais (Canada)" + "'", str2, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test10380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10380");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        int int16 = property12.getLeapAmount();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property12.getFieldType();
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("Property[era]");
        int int20 = property12.getMaximumShortTextLength(locale19);
        org.joda.time.DateTimeField dateTimeField21 = property12.getField();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test10381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10381");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.lang.String str1 = dateTimeFieldType0.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "weekyearOfCentury" + "'", str1, "weekyearOfCentury");
    }

    @Test
    public void test10382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10382");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        int int20 = dateTime19.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.minus(readablePeriod21);
        org.joda.time.DateTime.Property property23 = dateTime19.secondOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfEvenCopy();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        int int30 = partial27.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = partial27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 0, chronology31);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.minus(readableDuration35);
        org.joda.time.Chronology chronology37 = dateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfDay();
        org.joda.time.DurationField durationField39 = chronology37.seconds();
        org.joda.time.DurationField durationField40 = chronology37.hours();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.era();
        org.joda.time.DateTime dateTime42 = dateTime24.toDateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField43 = chronology37.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField44 = chronology37.minuteOfHour();
        org.joda.time.Chronology chronology45 = chronology37.withUTC();
        long long49 = chronology45.add((-83L), 9L, 176);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1501L + "'", long49 == 1501L);
    }

    @Test
    public void test10383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10383");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.minus(readableDuration11);
        org.joda.time.Chronology chronology13 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfDay();
        org.joda.time.DurationField durationField15 = chronology13.seconds();
        org.joda.time.DurationField durationField16 = chronology13.hours();
        org.joda.time.DurationField durationField17 = durationFieldType0.getField(chronology13);
        org.joda.time.DurationField durationField18 = chronology13.days();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTimeField dateTimeField20 = chronology13.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test10384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10384");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter3.getParser();
        int int6 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.Chronology chronology7 = dateTimeFormatter3.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology18.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter10.withZone(dateTimeZone20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter3.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(73L, dateTimeZone20);
        org.joda.time.DateTime.Property property26 = dateTime25.year();
        java.util.Locale locale29 = new java.util.Locale("\u30ab\u30ca\u30c0", "DateTimeField[millisOfSecond]");
        int int30 = property26.getMaximumTextLength(locale29);
        int int31 = property26.get();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals(locale29.toString(), "\u30ab\u30ca\u30c0_DATETIMEFIELD[MILLISOFSECOND]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
    }

    @Test
    public void test10385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10385");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it_IT");
    }

    @Test
    public void test10386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10386");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        boolean boolean1 = locale0.hasExtensions();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.lang.String str3 = locale0.getDisplayLanguage();
        java.lang.String str4 = locale0.getCountry();
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Builder builder7 = builder5.clear();
        java.util.Locale.Builder builder9 = builder5.setLanguageTag("fra");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readableDuration20);
        org.joda.time.DateTime dateTime23 = dateTime19.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfYear();
        org.joda.time.DateTime dateTime25 = property24.withMinimumValue();
        boolean boolean26 = dateTime25.isAfterNow();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int28 = dateTime25.get(dateTimeFieldType27);
        java.util.Locale locale29 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale30 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str31 = locale29.getDisplayName(locale30);
        java.lang.String str32 = locale29.getDisplayName();
        java.util.Calendar calendar33 = dateTime25.toCalendar(locale29);
        java.util.Locale.Builder builder34 = builder5.setLocale(locale29);
        java.lang.String str35 = locale29.toLanguageTag();
        java.lang.String str36 = locale0.getDisplayLanguage(locale29);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "francese" + "'", str3, "francese");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CA" + "'", str4, "CA");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 12 + "'", int28 == 12);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "fran\347ais (Canada)" + "'", str31, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "francese (Canada)" + "'", str32, "francese (Canada)");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-58380393600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=120,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "fr-CA" + "'", str35, "fr-CA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "fran\347ais" + "'", str36, "fran\347ais");
    }

    @Test
    public void test10387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10387");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int int25 = partial22.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = partial22.getChronology();
        org.joda.time.DurationField durationField27 = durationFieldType20.getField(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfMonth();
        org.joda.time.DateTime dateTime30 = dateTime19.toDateTime(chronology26);
        org.joda.time.Chronology chronology31 = chronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = chronology26.yearOfEra();
        org.joda.time.DateTimeField dateTimeField33 = chronology26.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = chronology26.monthOfYear();
        boolean boolean36 = dateTimeField34.isLeap((-675699L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test10388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10388");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        org.joda.time.DateTime dateTime14 = dateTime11.minus((long) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.plus(readablePeriod15);
        org.joda.time.DateTime.Property property17 = dateTime14.millisOfSecond();
        org.joda.time.Instant instant18 = dateTime14.toInstant();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = partial31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 0, chronology35);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.minus(readableDuration39);
        org.joda.time.Chronology chronology41 = dateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.dayOfMonth();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        int int47 = partial44.compareTo((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        boolean boolean50 = partial46.isAfter((org.joda.time.ReadablePartial) partial49);
        java.lang.String str51 = partial49.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        org.joda.time.Partial partial53 = partial49.without(dateTimeFieldType52);
        java.util.Locale locale55 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale56 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str57 = locale55.getDisplayName(locale56);
        java.lang.String str58 = locale55.getDisplayVariant();
        java.util.Locale locale59 = locale55.stripExtensions();
        java.lang.String str60 = dateTimeField42.getAsText((org.joda.time.ReadablePartial) partial49, 53, locale59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        int int66 = partial63.compareTo((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology67 = partial63.getChronology();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.Chronology chronology69 = chronology67.withZone(dateTimeZone68);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) 0, chronology67);
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.DateTime dateTime72 = dateTime70.minus(readableDuration71);
        org.joda.time.DateTime dateTime74 = dateTime70.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime76 = dateTime70.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime78 = dateTime76.minusWeeks(19);
        boolean boolean79 = partial49.isMatch((org.joda.time.ReadableInstant) dateTime76);
        long long81 = chronology25.set((org.joda.time.ReadablePartial) partial49, (-62135596800000L));
        org.joda.time.DurationField durationField82 = chronology25.millis();
        org.joda.time.DateTime dateTime83 = dateTime14.withChronology(chronology25);
        org.joda.time.DateTime.Property property84 = dateTime14.weekyear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "fran\347ais (Canada)" + "'", str57, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "53" + "'", str60, "53");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-62135596800000L) + "'", long81 == (-62135596800000L));
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(property84);
    }

    @Test
    public void test10389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10389");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = partial8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology12);
        org.joda.time.DateTime dateTime17 = dateTime15.withHourOfDay(0);
        org.joda.time.DateTime dateTime18 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Instant instant19 = dateTime17.toInstant();
        org.joda.time.DateTime.Property property20 = dateTime17.yearOfEra();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int int25 = partial22.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        boolean boolean28 = partial24.isAfter((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = partial31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 0, chronology35);
        org.joda.time.DateTime dateTime40 = dateTime38.withHourOfDay(0);
        org.joda.time.DateTime dateTime42 = dateTime40.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime42.toMutableDateTime();
        org.joda.time.DateTime dateTime44 = partial24.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        int int50 = partial47.compareTo((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = partial47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.Chronology chronology53 = chronology51.withZone(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) 0, chronology51);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.minus(readableDuration55);
        org.joda.time.DateTime dateTime58 = dateTime54.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime60 = dateTime54.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime62 = dateTime60.minusWeeks(19);
        org.joda.time.DateTime dateTime64 = dateTime60.plusMillis((int) '#');
        int int65 = dateTime64.getDayOfMonth();
        boolean boolean66 = partial24.equals((java.lang.Object) dateTime64);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        int int71 = partial68.compareTo((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = partial68.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean74 = partial68.isSupported(dateTimeFieldType73);
        int int75 = dateTime64.get(dateTimeFieldType73);
        int int76 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.MutableDateTime mutableDateTime77 = dateTime64.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime79 = dateTime64.withCenturyOfEra((-712586));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -712586 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime77);
    }

    @Test
    public void test10390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10390");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.hourOfHalfday();
        org.joda.time.DurationField durationField10 = chronology7.centuries();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = dateTimeField12.add((long) 5706, (-58380394200000L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: -58380394200000 * 3600000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test10391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10391");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(10, 1974, 62035, 2016, 97, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2016 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10392");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str4 = locale3.getDisplayCountry();
        java.util.Locale.Builder builder5 = builder0.setLocale(locale3);
        java.util.Locale.Builder builder7 = builder5.setRegion("CA");
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale.Builder builder10 = builder7.setRegion("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder10.setLanguageTag("1428");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 1428 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Canada" + "'", str4, "Canada");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test10393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10393");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("jpn");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.Locale locale4 = java.util.Locale.ITALY;
        java.util.Locale locale5 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale6 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.lang.String str8 = locale4.getDisplayLanguage(locale5);
        java.lang.String str9 = locale5.getISO3Country();
        java.util.Set<java.lang.String> strSet10 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str11 = java.util.Locale.lookupTag(languageRangeList3, (java.util.Collection<java.lang.String>) strSet10);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fran\347ais (Canada)" + "'", str7, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "italien" + "'", str8, "italien");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CAN" + "'", str9, "CAN");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test10394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10394");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.minus(readableDuration11);
        org.joda.time.DateTime dateTime14 = dateTime10.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime16 = dateTime10.withSecondOfMinute(0);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime10.getZone();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 72, dateTimeZone17);
        org.joda.time.DateTime.Property property19 = dateTime18.millisOfSecond();
        org.joda.time.DateTime.Property property20 = dateTime18.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property20.getFieldType();
        int int22 = property20.getMinimumValue();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test10395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10395");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        java.lang.String str15 = property12.toString();
        org.joda.time.DateTime dateTime17 = property12.addToCopy(21168000L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        int int22 = partial19.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = partial19.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.millisOfDay();
        java.util.Locale locale30 = new java.util.Locale("[]");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        int int36 = partial33.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = partial33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 0, chronology37);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.minus(readableDuration41);
        org.joda.time.DateTime.Property property43 = dateTime42.millisOfSecond();
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        int int45 = property43.getMaximumTextLength(locale44);
        long long46 = property43.remainder();
        org.joda.time.Interval interval47 = property43.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property43.getFieldType();
        java.util.Locale locale49 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale50 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str51 = locale49.getDisplayName(locale50);
        java.lang.String str52 = locale49.getDisplayVariant();
        java.util.Locale locale53 = locale49.stripExtensions();
        int int54 = property43.getMaximumShortTextLength(locale49);
        java.lang.String str55 = locale30.getDisplayName(locale49);
        java.lang.String str56 = dateTimeField27.getAsText((int) (byte) 10, locale30);
        int int57 = property12.getMaximumTextLength(locale30);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = property12.getFieldType();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[millisOfSecond]" + "'", str15, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals(locale30.toString(), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "fran\347ais (Canada)" + "'", str51, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "10" + "'", str56, "10");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
    }

    @Test
    public void test10396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10396");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.Chronology chronology8 = partial1.getChronology();
        org.joda.time.Partial partial9 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        int int10 = partial1.size();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        int int16 = partial13.compareTo((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = partial13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 0, chronology17);
        org.joda.time.DateTime dateTime22 = dateTime20.withHourOfDay(0);
        org.joda.time.DateTime dateTime24 = dateTime22.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime24.toMutableDateTime();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        int int31 = partial28.compareTo((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology32 = partial28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 0, chronology32);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readableDuration36);
        org.joda.time.DateTime.Property property38 = dateTime37.millisOfSecond();
        boolean boolean39 = mutableDateTime25.isBefore((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime41 = dateTime37.withYear(0);
        org.joda.time.Chronology chronology42 = dateTime41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.hours();
        org.joda.time.Partial partial44 = partial1.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeField dateTimeField45 = chronology42.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology42.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long54 = chronology42.getDateTimeMillis(3819, 22200, 259874, (int) (byte) 100, 2922789, (int) (short) 1, 49);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
    }

    @Test
    public void test10397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10397");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property15 = dateTime11.era();
        org.joda.time.DateTime dateTime17 = dateTime11.withHourOfDay(12);
        org.joda.time.DateTime dateTime18 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime33 = dateTime28.withFieldAdded(durationFieldType31, 3);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.era();
        int int35 = dateTime28.get(dateTimeFieldType34);
        org.joda.time.DateTime dateTime37 = dateTime28.plusSeconds(3);
        org.joda.time.DateTime dateTime39 = dateTime28.withDayOfWeek(3);
        org.joda.time.DateTime dateTime41 = dateTime28.plusMillis((int) (short) 1);
        boolean boolean42 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime.Property property43 = dateTime11.dayOfYear();
        org.joda.time.DateTime dateTime45 = property43.addToCopy((-700699L));
        org.joda.time.DateTime dateTime47 = dateTime45.plusMonths(39);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test10398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10398");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        int int10 = partial7.compareTo((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readableDuration25);
        org.joda.time.Chronology chronology27 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfMonth();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        int int33 = partial30.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        boolean boolean36 = partial32.isAfter((org.joda.time.ReadablePartial) partial35);
        java.lang.String str37 = partial35.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        org.joda.time.Partial partial39 = partial35.without(dateTimeFieldType38);
        java.util.Locale locale41 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale42 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str43 = locale41.getDisplayName(locale42);
        java.lang.String str44 = locale41.getDisplayVariant();
        java.util.Locale locale45 = locale41.stripExtensions();
        java.lang.String str46 = dateTimeField28.getAsText((org.joda.time.ReadablePartial) partial35, 53, locale45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        int int52 = partial49.compareTo((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = partial49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 0, chronology53);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.minus(readableDuration57);
        org.joda.time.DateTime dateTime60 = dateTime56.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime62 = dateTime56.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime64 = dateTime62.minusWeeks(19);
        boolean boolean65 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime62);
        long long67 = chronology11.set((org.joda.time.ReadablePartial) partial35, (-62135596800000L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter3.withChronology(chronology11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter68.withDefaultYear(86340);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter70.withPivotYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter70.withZoneUTC();
        int int74 = dateTimeFormatter73.getDefaultYear();
        java.lang.Integer int75 = dateTimeFormatter73.getPivotYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "fran\347ais (Canada)" + "'", str43, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "53" + "'", str46, "53");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-62135596800000L) + "'", long67 == (-62135596800000L));
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 86340 + "'", int74 == 86340);
        org.junit.Assert.assertNull(int75);
    }

    @Test
    public void test10399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10399");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 0, chronology8);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.minus(readableDuration12);
        org.joda.time.Chronology chronology14 = dateTime11.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.centuries();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 1970, chronology14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(180100L, chronology14);
        org.joda.time.DurationField durationField18 = chronology14.minutes();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.year();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology14);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test10400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10400");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.era();
        org.joda.time.DurationField durationField7 = chronology5.weeks();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.DateTime dateTime11 = dateTime8.withCenturyOfEra(0);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-31533077211L));
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime14.toMutableDateTimeISO();
        boolean boolean16 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime14);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0022-02-11T09:43:00.837Z" + "'", str12, "0022-02-11T09:43:00.837Z");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test10401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10401");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale6.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withLocale(locale6);
        boolean boolean10 = dateTimeFormatter9.isPrinter();
        java.util.Locale locale11 = java.util.Locale.CHINA;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withLocale(locale11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter12.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter13.withPivotYear((java.lang.Integer) (-27409536));
        org.joda.time.Chronology chronology16 = dateTimeFormatter13.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(chronology16);
    }

    @Test
    public void test10402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10402");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        int int19 = partial16.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = partial16.getChronology();
        org.joda.time.DurationField durationField21 = durationFieldType14.getField(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.weekOfWeekyear();
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = dateTimeField22.getAsText(19, locale24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter13.withLocale(locale24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter26.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeFormatter27.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter27.withZoneUTC();
        java.lang.Appendable appendable30 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter29.printTo(appendable30, 946684800000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "19" + "'", str25, "19");
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
    }

    @Test
    public void test10403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10403");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        org.joda.time.DateTime dateTime13 = dateTime11.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTime();
        org.joda.time.DateTime.Property property15 = dateTime13.weekyear();
        org.joda.time.DateTime dateTime16 = property15.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime16.getZone();
        org.joda.time.DateTime dateTime19 = dateTime16.withYear(1439);
        org.joda.time.DateTime.Property property20 = dateTime19.secondOfDay();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test10404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10404");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        org.joda.time.DateTime dateTime16 = property12.addToCopy(1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        int int22 = partial19.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = partial19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 0, chronology23);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.minus(readableDuration27);
        org.joda.time.DateTime.Property property29 = dateTime28.millisOfSecond();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        int int31 = property29.getMaximumTextLength(locale30);
        org.joda.time.DurationField durationField32 = property29.getRangeDurationField();
        int int33 = property29.get();
        org.joda.time.DateTime dateTime35 = property29.addToCopy((long) 0);
        int int36 = property29.getLeapAmount();
        org.joda.time.DateTime dateTime37 = property29.withMaximumValue();
        java.lang.String str38 = property29.getAsShortText();
        org.joda.time.DateTime dateTime39 = property29.withMaximumValue();
        org.joda.time.DateTime.Property property40 = dateTime39.year();
        org.joda.time.DateTime.Property property41 = dateTime39.millisOfSecond();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        int int47 = partial44.compareTo((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology48 = partial44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) 0, chronology48);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.DateTime dateTime53 = dateTime51.minus(readableDuration52);
        org.joda.time.DateTime dateTime55 = dateTime51.withYearOfEra((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.DateTime dateTime57 = dateTime51.minus(readablePeriod56);
        int int58 = dateTime57.getDayOfWeek();
        org.joda.time.DateTime dateTime60 = dateTime57.minusYears(35);
        org.joda.time.DateTime.Property property61 = dateTime60.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = property61.getFieldType();
        boolean boolean63 = dateTime39.isSupported(dateTimeFieldType62);
        org.joda.time.DateTime dateTime65 = dateTime16.withField(dateTimeFieldType62, 700);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0" + "'", str38, "0");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test10405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10405");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str1 = dateTimeFieldType0.getName();
        java.lang.String str2 = dateTimeFieldType0.getName();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType0.getDurationType();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        int int8 = partial5.compareTo((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology9 = partial5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Chronology chronology11 = chronology9.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.hourOfHalfday();
        boolean boolean14 = durationFieldType3.isSupported(chronology11);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readableDuration25);
        org.joda.time.Chronology chronology27 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.secondOfDay();
        org.joda.time.DurationField durationField29 = chronology27.weeks();
        org.joda.time.DurationField durationField30 = durationFieldType3.getField(chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = chronology27.hourOfHalfday();
        org.joda.time.DurationField durationField33 = chronology27.hours();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "halfdayOfDay" + "'", str1, "halfdayOfDay");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "halfdayOfDay" + "'", str2, "halfdayOfDay");
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test10406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10406");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        int int20 = dateTime19.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str22 = dateTimeFieldType21.getName();
        boolean boolean23 = dateTime19.isSupported(dateTimeFieldType21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        int int29 = partial26.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = partial26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        int int39 = partial36.compareTo((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = partial36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.Chronology chronology42 = chronology40.withZone(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 0, chronology40);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTime dateTime45 = dateTime43.minus(readableDuration44);
        org.joda.time.Chronology chronology46 = dateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.dayOfMonth();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        int int52 = partial49.compareTo((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        boolean boolean55 = partial51.isAfter((org.joda.time.ReadablePartial) partial54);
        java.lang.String str56 = partial54.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        org.joda.time.Partial partial58 = partial54.without(dateTimeFieldType57);
        java.util.Locale locale60 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale61 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str62 = locale60.getDisplayName(locale61);
        java.lang.String str63 = locale60.getDisplayVariant();
        java.util.Locale locale64 = locale60.stripExtensions();
        java.lang.String str65 = dateTimeField47.getAsText((org.joda.time.ReadablePartial) partial54, 53, locale64);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        int int71 = partial68.compareTo((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = partial68.getChronology();
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.Chronology chronology74 = chronology72.withZone(dateTimeZone73);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) 0, chronology72);
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.DateTime dateTime77 = dateTime75.minus(readableDuration76);
        org.joda.time.DateTime dateTime79 = dateTime75.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime81 = dateTime75.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime83 = dateTime81.minusWeeks(19);
        boolean boolean84 = partial54.isMatch((org.joda.time.ReadableInstant) dateTime81);
        long long86 = chronology30.set((org.joda.time.ReadablePartial) partial54, (-62135596800000L));
        org.joda.time.DateTimeField dateTimeField87 = dateTimeFieldType21.getField(chronology30);
        org.joda.time.DurationFieldType durationFieldType88 = dateTimeFieldType21.getDurationType();
        java.lang.String str89 = durationFieldType88.getName();
        org.joda.time.Partial partial90 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter91 = partial90.getFormatter();
        org.joda.time.Chronology chronology92 = partial90.getChronology();
        org.joda.time.DurationField durationField93 = durationFieldType88.getField(chronology92);
        org.joda.time.DurationField durationField94 = chronology92.hours();
        org.joda.time.DateTimeField dateTimeField95 = chronology92.minuteOfDay();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "halfdayOfDay" + "'", str22, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "fran\347ais (Canada)" + "'", str62, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "53" + "'", str65, "53");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + (-62135596800000L) + "'", long86 == (-62135596800000L));
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(durationFieldType88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "halfdays" + "'", str89, "halfdays");
        org.junit.Assert.assertNull(dateTimeFormatter91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(durationField93);
        org.junit.Assert.assertNotNull(durationField94);
        org.junit.Assert.assertNotNull(dateTimeField95);
    }

    @Test
    public void test10407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10407");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfDay();
        org.joda.time.DurationField durationField14 = chronology12.weeks();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.era();
        org.joda.time.DurationField durationField16 = chronology12.years();
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology12);
        org.joda.time.DateTimeField dateTimeField18 = chronology12.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test10408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10408");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        int int14 = partial11.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = partial11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter9.withZone(dateTimeZone19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withZone(dateTimeZone19);
        boolean boolean22 = dateTimeFormatter2.isPrinter();
        boolean boolean23 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology24 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter2.withDefaultYear(1);
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale28 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.lang.String str30 = locale27.toLanguageTag();
        java.lang.String str31 = locale27.toLanguageTag();
        boolean boolean32 = locale27.hasExtensions();
        java.util.Locale locale33 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str34 = locale33.getCountry();
        java.lang.String str35 = locale33.getISO3Country();
        java.lang.String str36 = locale33.getISO3Country();
        java.lang.String str37 = locale27.getDisplayScript(locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter26.withLocale(locale27);
        org.joda.time.format.DateTimeParser dateTimeParser39 = dateTimeFormatter38.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter38.withPivotYear((java.lang.Integer) 579);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter41.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime44 = dateTimeFormatter42.parseDateTime("317");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "fran\347ais (Canada)" + "'", str29, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "fr-CA" + "'", str30, "fr-CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "fr-CA" + "'", str31, "fr-CA");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "CA" + "'", str34, "CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "CAN" + "'", str35, "CAN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "CAN" + "'", str36, "CAN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNull(dateTimeParser39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
    }

    @Test
    public void test10409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10409");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear(2022);
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate8 = dateTimeFormatter2.parseLocalDate("3570-01-01T00:00:00.100Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(chronology6);
    }

    @Test
    public void test10410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10410");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property15 = dateTime11.era();
        int int16 = property15.getMaximumValue();
        long long17 = property15.remainder();
        int int18 = property15.getMinimumValue();
        org.joda.time.DateTime dateTime19 = property15.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime20 = property15.roundCeilingCopy();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        int int27 = partial24.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = partial24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 0, chronology28);
        org.joda.time.DateTime dateTime33 = dateTime31.withHourOfDay(0);
        org.joda.time.DateTime dateTime35 = dateTime33.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime35.toMutableDateTime();
        org.joda.time.DateTime.Property property37 = dateTime35.weekyear();
        org.joda.time.DateTime dateTime38 = property37.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime38.getZone();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 0, dateTimeZone39);
        org.joda.time.DateTime dateTime41 = dateTime20.toDateTime(dateTimeZone39);
        org.joda.time.DateTime.Property property42 = dateTime20.millisOfDay();
        boolean boolean44 = dateTime20.isEqual(31535980966L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 62135596800000L + "'", long17 == 62135596800000L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test10411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10411");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = chronology6.minutes();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100, chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = chronology6.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = chronology6.centuryOfEra();
        long long15 = dateTimeField13.roundHalfCeiling(62135596800097L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 60904915200000L + "'", long15 == 60904915200000L);
    }

    @Test
    public void test10412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10412");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime15 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean17 = dateTime11.isSupported(dateTimeFieldType16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.DateTime.Property property30 = dateTime29.millisOfSecond();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        int int32 = property30.getMaximumTextLength(locale31);
        long long33 = property30.remainder();
        org.joda.time.Interval interval34 = property30.toInterval();
        org.joda.time.DateTimeField dateTimeField35 = property30.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property30.getFieldType();
        int int37 = dateTime11.get(dateTimeFieldType36);
        org.joda.time.DateTime dateTime39 = dateTime11.withYearOfCentury(72);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.minus(readableDuration40);
        org.joda.time.DateTime dateTime43 = dateTime39.minus((long) 52);
        org.joda.time.DateTime.Property property44 = dateTime43.era();
        org.joda.time.DurationField durationField45 = property44.getRangeDurationField();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        int int51 = partial48.compareTo((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Chronology chronology52 = partial48.getChronology();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.Chronology chronology54 = chronology52.withZone(dateTimeZone53);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) 0, chronology52);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.DateTime dateTime57 = dateTime55.minus(readableDuration56);
        org.joda.time.DateTime.Property property58 = dateTime57.millisOfSecond();
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        int int60 = property58.getMaximumTextLength(locale59);
        long long61 = property58.remainder();
        org.joda.time.Interval interval62 = property58.toInterval();
        org.joda.time.DateTime dateTime63 = property58.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime65 = dateTime63.withHourOfDay(2);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.DateTime dateTime67 = dateTime65.plus(readableDuration66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.DateTime dateTime69 = dateTime67.minus(readablePeriod68);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(chronology71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        int int75 = partial72.compareTo((org.joda.time.ReadablePartial) partial74);
        org.joda.time.Chronology chronology76 = partial72.getChronology();
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.Chronology chronology78 = chronology76.withZone(dateTimeZone77);
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((long) 0, chronology76);
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.DateTime dateTime81 = dateTime79.minus(readableDuration80);
        org.joda.time.Chronology chronology82 = dateTime79.getChronology();
        org.joda.time.DateTime.Property property83 = dateTime79.weekyear();
        int int84 = dateTime79.getMinuteOfHour();
        boolean boolean86 = dateTime79.isBefore((long) (short) 0);
        org.joda.time.Chronology chronology87 = dateTime79.getChronology();
        org.joda.time.DateTimeField dateTimeField88 = chronology87.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField89 = chronology87.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone90 = chronology87.getZone();
        org.joda.time.MutableDateTime mutableDateTime91 = dateTime69.toMutableDateTime(dateTimeZone90);
        int int92 = property44.compareTo((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime94 = dateTime69.minusSeconds(666);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNull(durationField45);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertNotNull(mutableDateTime91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(dateTime94);
    }

    @Test
    public void test10413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10413");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekOfWeekyear();
        int int25 = dateTime15.get(dateTimeField24);
        org.joda.time.DateTime dateTime27 = dateTime15.withWeekyear(100);
        org.joda.time.DateTime dateTime30 = dateTime15.withDurationAdded((long) 1, (int) (byte) -1);
        org.joda.time.DateTime.Property property31 = dateTime30.yearOfEra();
        org.joda.time.DateTime dateTime33 = dateTime30.withMillisOfSecond((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test10414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10414");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.minus(readableDuration11);
        org.joda.time.Chronology chronology13 = dateTime10.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.centuries();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 1970, chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.era();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.hourOfDay();
        org.joda.time.DurationField durationField18 = dateTimeField17.getDurationField();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test10415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10415");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology7 = partial6.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField9 = partial6.getField(292278993);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 292278993");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(chronology7);
    }

    @Test
    public void test10416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10416");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.minus(readableDuration11);
        org.joda.time.Chronology chronology13 = dateTime10.getChronology();
        org.joda.time.Chronology chronology14 = chronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.hourOfDay();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology13);
        boolean boolean18 = durationFieldType0.isSupported(chronology13);
        java.lang.String str19 = durationFieldType0.toString();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "minutes" + "'", str19, "minutes");
    }

    @Test
    public void test10417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10417");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTime.Property property13 = dateTime9.weekyear();
        int int14 = dateTime9.getMinuteOfHour();
        boolean boolean16 = dateTime9.isBefore((long) (short) 0);
        org.joda.time.Chronology chronology17 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.minuteOfHour();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test10418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10418");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology21.getZone();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone23);
        org.joda.time.format.DateTimePrinter dateTimePrinter26 = dateTimeFormatter25.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter25.withPivotYear(999);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = partial31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 0, chronology35);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.minus(readableDuration39);
        org.joda.time.Chronology chronology41 = dateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.dayOfMonth();
        org.joda.time.Chronology chronology43 = chronology41.withUTC();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.dayOfYear();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        java.lang.String str47 = partial46.toString();
        java.util.Locale locale49 = null;
        java.lang.String str50 = dateTimeField44.getAsShortText((org.joda.time.ReadablePartial) partial46, (int) 'u', locale49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial46.plus(readablePeriod51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        int int58 = partial55.compareTo((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology59 = partial55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.Chronology chronology61 = chronology59.withZone(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) 0, chronology59);
        org.joda.time.DateTime dateTime64 = dateTime62.withHourOfDay(0);
        org.joda.time.DateTime dateTime66 = dateTime62.withYear(10);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        int int71 = partial68.compareTo((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = partial68.getChronology();
        java.lang.String str73 = partial68.toString();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = new org.joda.time.Partial(chronology75);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Partial partial78 = new org.joda.time.Partial(chronology77);
        int int79 = partial76.compareTo((org.joda.time.ReadablePartial) partial78);
        org.joda.time.Chronology chronology80 = partial76.getChronology();
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.Chronology chronology82 = chronology80.withZone(dateTimeZone81);
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime((long) 0, chronology80);
        org.joda.time.DateTime dateTime85 = dateTime83.withHourOfDay(0);
        int int86 = dateTime85.getCenturyOfEra();
        boolean boolean88 = dateTime85.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property89 = dateTime85.era();
        org.joda.time.DateTime dateTime91 = dateTime85.withHourOfDay(12);
        org.joda.time.DateTime dateTime92 = partial68.toDateTime((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.DateTime dateTime93 = dateTime62.withFields((org.joda.time.ReadablePartial) partial68);
        org.joda.time.DateTime dateTime95 = dateTime62.minusMillis(2);
        int int96 = dateTime62.getYearOfEra();
        org.joda.time.DateTime.Property property97 = dateTime62.era();
        boolean boolean98 = partial52.isMatch((org.joda.time.ReadableInstant) dateTime62);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str99 = dateTimeFormatter28.print((org.joda.time.ReadablePartial) partial52);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNull(dateTimePrinter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "117" + "'", str50, "117");
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[]" + "'", str73, "[]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 19 + "'", int86 == 19);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1970 + "'", int96 == 1970);
        org.junit.Assert.assertNotNull(property97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test10419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10419");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 39);
    }

    @Test
    public void test10420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10420");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        java.lang.String str6 = partial1.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.DateTime dateTime18 = dateTime16.withHourOfDay(0);
        int int19 = dateTime18.getCenturyOfEra();
        boolean boolean21 = dateTime18.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property22 = dateTime18.era();
        org.joda.time.DateTime dateTime24 = dateTime18.withHourOfDay(12);
        org.joda.time.DateTime dateTime25 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.lang.String str27 = dateTimeFieldType26.getName();
        org.joda.time.DateTime dateTime29 = dateTime25.withField(dateTimeFieldType26, 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        int int35 = partial32.compareTo((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology36 = partial32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.Chronology chronology38 = chronology36.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 0, chronology36);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.minus(readableDuration40);
        org.joda.time.DateTime dateTime43 = dateTime39.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime45 = dateTime39.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime47 = dateTime45.minusWeeks(19);
        int int48 = dateTime47.getSecondOfMinute();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        int int54 = partial51.compareTo((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = partial51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.Chronology chronology57 = chronology55.withZone(dateTimeZone56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 0, chronology55);
        org.joda.time.DateTime dateTime60 = dateTime58.withHourOfDay(0);
        org.joda.time.DateTime dateTime62 = dateTime60.withYear((int) 'a');
        boolean boolean63 = dateTime60.isEqualNow();
        org.joda.time.DateMidnight dateMidnight64 = dateTime60.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone65 = dateMidnight64.getZone();
        org.joda.time.DateTime dateTime66 = dateTime47.withZoneRetainFields(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = dateTime29.toDateTime(dateTimeZone65);
        org.joda.time.DateTime dateTime69 = dateTime67.withMillisOfSecond((int) (byte) 0);
        org.joda.time.DateTime dateTime71 = dateTime67.plusMonths(366);
        org.joda.time.DateTime dateTime73 = dateTime67.withDayOfYear((int) ' ');
        org.joda.time.DateTime.Property property74 = dateTime73.weekOfWeekyear();
        org.joda.time.DateTime dateTime75 = dateTime73.toDateTime();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 19 + "'", int19 == 19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "secondOfDay" + "'", str27, "secondOfDay");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTime75);
    }

    @Test
    public void test10421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10421");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int int25 = partial22.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = partial22.getChronology();
        org.joda.time.DurationField durationField27 = durationFieldType20.getField(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfMonth();
        org.joda.time.DateTime dateTime30 = dateTime19.toDateTime(chronology26);
        org.joda.time.Chronology chronology31 = chronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = chronology26.yearOfEra();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = partial35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 0, chronology39);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.minus(readableDuration43);
        org.joda.time.Chronology chronology45 = dateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.dayOfMonth();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        int int51 = partial48.compareTo((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        boolean boolean54 = partial50.isAfter((org.joda.time.ReadablePartial) partial53);
        java.lang.String str55 = partial53.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        org.joda.time.Partial partial57 = partial53.without(dateTimeFieldType56);
        java.util.Locale locale59 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale60 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str61 = locale59.getDisplayName(locale60);
        java.lang.String str62 = locale59.getDisplayVariant();
        java.util.Locale locale63 = locale59.stripExtensions();
        java.lang.String str64 = dateTimeField46.getAsText((org.joda.time.ReadablePartial) partial53, 53, locale63);
        int int65 = partial53.size();
        int[] intArray66 = partial53.getValues();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        int int71 = partial68.compareTo((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = partial68.getChronology();
        java.lang.String str73 = partial68.toString();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = new org.joda.time.Partial(chronology75);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Partial partial78 = new org.joda.time.Partial(chronology77);
        int int79 = partial76.compareTo((org.joda.time.ReadablePartial) partial78);
        org.joda.time.Chronology chronology80 = partial76.getChronology();
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.Chronology chronology82 = chronology80.withZone(dateTimeZone81);
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime((long) 0, chronology80);
        org.joda.time.DateTime dateTime85 = dateTime83.withHourOfDay(0);
        int int86 = dateTime85.getCenturyOfEra();
        boolean boolean88 = dateTime85.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property89 = dateTime85.era();
        org.joda.time.DateTime dateTime91 = dateTime85.withHourOfDay(12);
        org.joda.time.DateTime dateTime92 = partial68.toDateTime((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.MutableDateTime mutableDateTime93 = dateTime92.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime95 = dateTime92.plusSeconds((int) 'x');
        boolean boolean96 = partial53.equals((java.lang.Object) dateTime92);
        long long98 = chronology26.set((org.joda.time.ReadablePartial) partial53, 86400000L);
        org.joda.time.Chronology chronology99 = chronology26.withUTC();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "fran\347ais (Canada)" + "'", str61, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "53" + "'", str64, "53");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[]" + "'", str73, "[]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 19 + "'", int86 == 19);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(mutableDateTime93);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 86400000L + "'", long98 == 86400000L);
        org.junit.Assert.assertNotNull(chronology99);
    }

    @Test
    public void test10422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10422");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        boolean boolean30 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology31 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.secondOfDay();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = partial34.getChronology();
        java.lang.String str39 = partial34.toStringList();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        int int45 = partial42.compareTo((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = partial42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = chronology46.withZone(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 0, chronology46);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.minus(readableDuration50);
        org.joda.time.DateTime dateTime53 = dateTime49.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime55 = dateTime49.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime57 = dateTime55.minusWeeks(19);
        org.joda.time.DateTime dateTime59 = dateTime55.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        int int65 = partial62.compareTo((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Chronology chronology66 = partial62.getChronology();
        org.joda.time.DurationField durationField67 = durationFieldType60.getField(chronology66);
        org.joda.time.DateTimeField dateTimeField68 = chronology66.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField69 = chronology66.dayOfMonth();
        org.joda.time.DateTime dateTime70 = dateTime59.toDateTime(chronology66);
        org.joda.time.DateTime dateTime71 = partial34.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        int[] intArray72 = null;
        int int73 = dateTimeField32.getMaximumValue((org.joda.time.ReadablePartial) partial34, intArray72);
        java.util.Locale.Category category75 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale76 = java.util.Locale.getDefault(category75);
        java.lang.String str77 = dateTimeField32.getAsShortText((long) (-1), locale76);
        java.util.Set<java.lang.String> strSet78 = locale76.getUnicodeLocaleKeys();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 86399 + "'", int73 == 86399);
        org.junit.Assert.assertTrue("'" + category75 + "' != '" + java.util.Locale.Category.FORMAT + "'", category75.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "86399" + "'", str77, "86399");
        org.junit.Assert.assertNotNull(strSet78);
    }

    @Test
    public void test10423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10423");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.months();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.monthOfYear();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DurationField durationField17 = chronology12.days();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test10424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10424");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime15 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime17 = dateTime15.withCenturyOfEra((int) '#');
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.weekyears();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test10425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10425");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        org.joda.time.Chronology chronology5 = dateTimeFormatter3.getChronolgy();
        int int6 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter3.getParser();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        int int13 = partial10.compareTo((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = partial10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Chronology chronology16 = chronology14.withZone(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 0, chronology14);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        int int20 = dateTime19.getCenturyOfEra();
        boolean boolean22 = dateTime19.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime23 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean25 = dateTime19.isSupported(dateTimeFieldType24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        int int31 = partial28.compareTo((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology32 = partial28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 0, chronology32);
        org.joda.time.DateTime dateTime37 = dateTime35.withHourOfDay(0);
        org.joda.time.DateTime dateTime39 = dateTime37.withYear((int) 'a');
        boolean boolean40 = dateTime37.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime37.getZone();
        org.joda.time.DateTime dateTime42 = dateTime19.withZoneRetainFields(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter3.withZone(dateTimeZone41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter44.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long47 = dateTimeFormatter45.parseMillis("712586");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNull(dateTimeParser7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 19 + "'", int20 == 19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
    }

    @Test
    public void test10426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10426");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str14 = dateTimeFieldType13.getName();
        int int15 = dateTime9.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime17 = dateTime9.minusMinutes(4);
        int int18 = dateTime9.getWeekyear();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime9.plus(readableDuration19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.withDurationAdded(readableDuration21, (int) (short) -1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        int int29 = partial26.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = partial26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology30);
        org.joda.time.DateTime dateTime35 = dateTime33.withHourOfDay(0);
        int int36 = dateTime35.getCenturyOfEra();
        boolean boolean38 = dateTime35.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property39 = dateTime35.era();
        org.joda.time.DateTime dateTime41 = dateTime35.withHourOfDay(12);
        org.joda.time.DateTime dateTime42 = dateTime35.withEarlierOffsetAtOverlap();
        java.lang.String str43 = dateTime42.toString();
        int int44 = dateTime23.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime46 = dateTime23.withMillis(998L);
        java.lang.String str47 = dateTime46.toString();
        int int48 = dateTime46.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime50 = dateTime46.withSecondOfMinute(540);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 540 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "halfdayOfDay" + "'", str14, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 19 + "'", int36 == 19);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str43, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-01-01T00:00:00.998Z" + "'", str47, "1970-01-01T00:00:00.998Z");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test10427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10427");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = partial14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekOfWeekyear();
        int int23 = dateTimeField21.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        int int28 = partial25.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        boolean boolean31 = partial27.isAfter((org.joda.time.ReadablePartial) partial30);
        java.lang.String str32 = partial30.toString();
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeField21.getAsShortText((org.joda.time.ReadablePartial) partial30, 53, locale34);
        long long37 = chronology12.set((org.joda.time.ReadablePartial) partial30, (long) 0);
        org.joda.time.DateTimeField dateTimeField38 = chronology12.weekOfWeekyear();
        int int40 = dateTimeField38.getLeapAmount((long) 53);
        java.util.Locale locale41 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str42 = locale41.getCountry();
        java.lang.String str43 = locale41.getISO3Country();
        java.lang.String str44 = locale41.getISO3Country();
        int int45 = dateTimeField38.getMaximumShortTextLength(locale41);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = dateTimeField38.getType();
        long long48 = dateTimeField38.roundHalfEven((long) 935);
        org.joda.time.DurationField durationField49 = dateTimeField38.getLeapDurationField();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53 + "'", int23 == 53);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "53" + "'", str35, "53");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "CA" + "'", str42, "CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "CAN" + "'", str43, "CAN");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "CAN" + "'", str44, "CAN");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-259200000L) + "'", long48 == (-259200000L));
        org.junit.Assert.assertNull(durationField49);
    }

    @Test
    public void test10428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10428");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property15 = dateTime11.era();
        int int16 = property15.getMaximumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.plus(readablePeriod18);
        org.joda.time.DateTime dateTime21 = dateTime17.withMinuteOfHour(6);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        int int27 = partial24.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = partial24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 0, chronology28);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.minus(readableDuration32);
        org.joda.time.DateTime dateTime35 = dateTime31.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime37 = dateTime31.withSecondOfMinute(0);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.weekOfWeekyear();
        int int47 = dateTime37.get(dateTimeField46);
        java.lang.String str49 = dateTimeField46.getAsText((long) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = dateTimeField46.getType();
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType50.getDurationType();
        java.lang.String str52 = durationFieldType51.toString();
        org.joda.time.DateTime dateTime54 = dateTime21.withFieldAdded(durationFieldType51, 9);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        int int59 = partial56.compareTo((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology60 = partial56.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField62 = chronology60.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField63 = chronology60.year();
        org.joda.time.DateTimeZone dateTimeZone64 = chronology60.getZone();
        org.joda.time.DateTimeField dateTimeField65 = chronology60.hourOfHalfday();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        int int71 = partial68.compareTo((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = partial68.getChronology();
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.Chronology chronology74 = chronology72.withZone(dateTimeZone73);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) 0, chronology72);
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.DateTime dateTime77 = dateTime75.minus(readableDuration76);
        org.joda.time.Chronology chronology78 = dateTime75.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.secondOfDay();
        org.joda.time.DurationField durationField80 = chronology78.weeks();
        org.joda.time.DateTimeZone dateTimeZone81 = chronology78.getZone();
        org.joda.time.Chronology chronology82 = chronology60.withZone(dateTimeZone81);
        boolean boolean83 = durationFieldType51.isSupported(chronology82);
        org.joda.time.DateTimeField dateTimeField84 = chronology82.weekyear();
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray88 = chronology82.get(readablePeriod85, 2960L, (long) 18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1" + "'", str49, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "weeks" + "'", str52, "weeks");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(dateTimeField84);
    }

    @Test
    public void test10429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10429");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = partial0.getFieldTypes();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        boolean boolean9 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(0);
        org.joda.time.DateTime dateTime23 = dateTime21.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime23.toMutableDateTime();
        org.joda.time.DateTime dateTime25 = partial5.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean27 = partial5.isSupported(dateTimeFieldType26);
        int int28 = partial0.indexOf(dateTimeFieldType26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        int int33 = partial30.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        boolean boolean36 = partial32.isAfter((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.DateTime dateTime48 = dateTime46.withHourOfDay(0);
        org.joda.time.DateTime dateTime50 = dateTime48.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime50.toMutableDateTime();
        org.joda.time.DateTime dateTime52 = partial32.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        int int58 = partial55.compareTo((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology59 = partial55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.Chronology chronology61 = chronology59.withZone(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) 0, chronology59);
        org.joda.time.DateTime dateTime64 = dateTime62.withHourOfDay(0);
        int int65 = dateTime64.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        int int71 = partial68.compareTo((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = partial68.getChronology();
        org.joda.time.DurationField durationField73 = durationFieldType66.getField(chronology72);
        org.joda.time.DateTimeField dateTimeField74 = chronology72.weekOfWeekyear();
        org.joda.time.DateTime dateTime75 = dateTime64.withChronology(chronology72);
        java.util.Date date76 = dateTime75.toDate();
        boolean boolean77 = partial32.equals((java.lang.Object) dateTime75);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray78 = partial32.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.Partial partial81 = partial32.withPeriodAdded(readablePeriod79, 70);
        int int82 = partial0.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.Partial partial84 = partial0.plus(readablePeriod83);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType86 = partial0.getFieldType(12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 12");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 19 + "'", int65 == 19);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray78);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(partial84);
    }

    @Test
    public void test10430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10430");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property15 = dateTime11.era();
        int int16 = property15.getMaximumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property15.getFieldType();
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType18.getDurationType();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = chronology27.year();
        org.joda.time.DurationField durationField33 = durationFieldType19.getField(chronology27);
        org.joda.time.DateTimeField dateTimeField34 = chronology27.millisOfSecond();
        org.joda.time.Chronology chronology35 = chronology27.withUTC();
        org.joda.time.DateTimeField dateTimeField36 = chronology27.minuteOfHour();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test10431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10431");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.year();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology5.getZone();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.hourOfHalfday();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        int int16 = partial13.compareTo((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = partial13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 0, chronology17);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.minus(readableDuration21);
        org.joda.time.Chronology chronology23 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.secondOfDay();
        org.joda.time.DurationField durationField25 = chronology23.weeks();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology23.getZone();
        org.joda.time.Chronology chronology27 = chronology5.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.clockhourOfDay();
        java.util.Locale locale33 = new java.util.Locale("italien");
        java.lang.String str34 = dateTimeField30.getAsText(102, locale33);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals(locale33.toString(), "italien");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "102" + "'", str34, "102");
    }

    @Test
    public void test10432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10432");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.minus(readableDuration11);
        org.joda.time.Chronology chronology13 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.dayOfWeek();
        org.joda.time.DurationField durationField16 = chronology13.seconds();
        org.joda.time.DurationField durationField17 = durationFieldType0.getField(chronology13);
        org.joda.time.DurationField durationField18 = chronology13.weekyears();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.Chronology chronology31 = dateTime28.getChronology();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        long long35 = chronology31.set((org.joda.time.ReadablePartial) partial33, (long) (byte) -1);
        long long37 = chronology13.set((org.joda.time.ReadablePartial) partial33, (long) 86399999);
        org.joda.time.DateTimeField[] dateTimeFieldArray38 = partial33.getFields();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial33.plus(readablePeriod39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        int int46 = partial43.compareTo((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology47 = partial43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 0, chronology47);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.minus(readableDuration51);
        org.joda.time.Chronology chronology53 = dateTime50.getChronology();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        int int58 = partial55.compareTo((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology59 = partial55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.Chronology chronology61 = chronology59.withZone(dateTimeZone60);
        org.joda.time.DateTimeField dateTimeField62 = chronology61.weekOfWeekyear();
        int int64 = dateTimeField62.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        int int69 = partial66.compareTo((org.joda.time.ReadablePartial) partial68);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        boolean boolean72 = partial68.isAfter((org.joda.time.ReadablePartial) partial71);
        java.lang.String str73 = partial71.toString();
        java.util.Locale locale75 = null;
        java.lang.String str76 = dateTimeField62.getAsShortText((org.joda.time.ReadablePartial) partial71, 53, locale75);
        long long78 = chronology53.set((org.joda.time.ReadablePartial) partial71, (long) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.yearOfEra();
        int int80 = partial71.indexOf(dateTimeFieldType79);
        boolean boolean81 = partial40.isEqual((org.joda.time.ReadablePartial) partial71);
        org.joda.time.Partial partial82 = new org.joda.time.Partial();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray83 = partial82.getFieldTypes();
        java.lang.String str84 = partial82.toString();
        java.lang.String str85 = partial82.toStringList();
        boolean boolean86 = partial40.isBefore((org.joda.time.ReadablePartial) partial82);
        int int87 = partial82.size();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 86399999L + "'", long37 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldArray38);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 53 + "'", int64 == 53);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[]" + "'", str73, "[]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "53" + "'", str76, "53");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "[]" + "'", str84, "[]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "[]" + "'", str85, "[]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test10433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10433");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property15 = dateTime11.era();
        java.lang.String str16 = property15.getAsString();
        org.joda.time.DateTime dateTime17 = property15.getDateTime();
        int int18 = property15.getMinimumValue();
        org.joda.time.DateTime dateTime19 = property15.roundCeilingCopy();
        org.joda.time.DateTime dateTime21 = dateTime19.withMillis((long) 5706);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test10434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10434");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        boolean boolean7 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        java.lang.String str8 = partial6.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        org.joda.time.Partial partial10 = partial6.without(dateTimeFieldType9);
        org.joda.time.Chronology chronology11 = partial6.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.minuteOfHour();
        org.joda.time.DurationField durationField13 = chronology11.hours();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.millisOfSecond();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test10435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10435");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.monthOfYear();
        org.joda.time.Chronology chronology15 = chronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = null;
        org.joda.time.format.DateTimeParser dateTimeParser18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser21 = dateTimeFormatter19.getParser();
        int int22 = dateTimeFormatter19.getDefaultYear();
        org.joda.time.Chronology chronology23 = dateTimeFormatter19.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter24 = null;
        org.joda.time.format.DateTimeParser dateTimeParser25 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter24, dateTimeParser25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        int int31 = partial28.compareTo((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology32 = partial28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone36 = chronology34.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter26.withZone(dateTimeZone36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter19.withZone(dateTimeZone36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        int int44 = partial41.compareTo((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = partial41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Chronology chronology47 = chronology45.withZone(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 0, chronology45);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.minus(readableDuration49);
        org.joda.time.Chronology chronology51 = dateTime48.getChronology();
        org.joda.time.Chronology chronology52 = chronology51.withUTC();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.hourOfDay();
        org.joda.time.DurationField durationField54 = chronology51.millis();
        org.joda.time.DurationField durationField55 = chronology51.days();
        org.joda.time.DateTimeField dateTimeField56 = chronology51.yearOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter19.withChronology(chronology51);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        int int63 = partial60.compareTo((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Chronology chronology64 = partial60.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.Chronology chronology66 = chronology64.withZone(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) 0, chronology64);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.DateTime dateTime69 = dateTime67.minus(readableDuration68);
        org.joda.time.Chronology chronology70 = dateTime67.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField72 = chronology70.dayOfWeek();
        org.joda.time.DurationField durationField73 = chronology70.seconds();
        org.joda.time.DurationField durationField74 = chronology70.months();
        org.joda.time.DateTimeField dateTimeField75 = chronology70.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        long long79 = chronology70.add(readablePeriod76, (long) 43200, 97);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter19.withChronology(chronology70);
        org.joda.time.DateTimeZone dateTimeZone81 = chronology70.getZone();
        org.joda.time.Chronology chronology82 = chronology15.withZone(dateTimeZone81);
        org.joda.time.DateTime dateTime83 = org.joda.time.DateTime.now(dateTimeZone81);
        int int84 = dateTime83.getMillisOfDay();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(dateTimeParser21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2000 + "'", int22 == 2000);
        org.junit.Assert.assertNull(chronology23);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 43200L + "'", long79 == 43200L);
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTime83);
// flaky:         org.junit.Assert.assertTrue("'" + int84 + "' != '" + 34981737 + "'", int84 == 34981737);
    }

    @Test
    public void test10436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10436");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.centuryOfEra();
        long long18 = dateTimeField15.getDifferenceAsLong(0L, 283034304000000L);
        int int21 = dateTimeField15.getDifference(0L, (long) 86399);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        boolean boolean29 = partial25.isAfter((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        int int35 = partial32.compareTo((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology36 = partial32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.Chronology chronology38 = chronology36.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 0, chronology36);
        org.joda.time.DateTimeField dateTimeField40 = chronology36.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField41 = chronology36.yearOfCentury();
        long long43 = dateTimeField41.roundHalfFloor((long) 0);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        int int48 = partial45.compareTo((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        int int53 = partial50.compareTo((org.joda.time.ReadablePartial) partial52);
        org.joda.time.Chronology chronology54 = partial50.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean56 = partial50.isSupported(dateTimeFieldType55);
        boolean boolean57 = partial47.isEqual((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        int int64 = partial61.compareTo((org.joda.time.ReadablePartial) partial63);
        org.joda.time.Chronology chronology65 = partial61.getChronology();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.Chronology chronology67 = chronology65.withZone(dateTimeZone66);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) 0, chronology65);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.DateTime dateTime70 = dateTime68.minus(readableDuration69);
        org.joda.time.Chronology chronology71 = dateTime68.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.dayOfMonth();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = new org.joda.time.Partial(chronology75);
        int int77 = partial74.compareTo((org.joda.time.ReadablePartial) partial76);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = new org.joda.time.Partial(chronology78);
        boolean boolean80 = partial76.isAfter((org.joda.time.ReadablePartial) partial79);
        java.lang.String str81 = partial79.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = null;
        org.joda.time.Partial partial83 = partial79.without(dateTimeFieldType82);
        java.util.Locale locale85 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale86 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str87 = locale85.getDisplayName(locale86);
        java.lang.String str88 = locale85.getDisplayVariant();
        java.util.Locale locale89 = locale85.stripExtensions();
        java.lang.String str90 = dateTimeField72.getAsText((org.joda.time.ReadablePartial) partial79, 53, locale89);
        int int91 = partial79.size();
        int[] intArray92 = partial79.getValues();
        int[] intArray94 = dateTimeField41.addWrapPartial((org.joda.time.ReadablePartial) partial47, 52, intArray92, (int) (short) 0);
        int int95 = dateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial25, intArray92);
        java.util.Locale locale98 = new java.util.Locale("French (Canada)");
        java.lang.String str99 = dateTimeField15.getAsText(259200000L, locale98);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-89L) + "'", long18 == (-89L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[]" + "'", str81, "[]");
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "fran\347ais (Canada)" + "'", str87, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "53" + "'", str90, "53");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertEquals(locale98.toString(), "french (canada)");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "19" + "'", str99, "19");
    }

    @Test
    public void test10437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10437");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone12);
        boolean boolean14 = dateTimeFormatter13.isPrinter();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readableDuration25);
        org.joda.time.Chronology chronology27 = dateTime24.getChronology();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        long long31 = chronology27.set((org.joda.time.ReadablePartial) partial29, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = partial29.getFieldTypes();
        java.util.Locale locale33 = java.util.Locale.PRC;
        boolean boolean34 = partial29.equals((java.lang.Object) locale33);
        int int35 = partial29.size();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        int int41 = partial38.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 0, chronology42);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.minus(readableDuration46);
        org.joda.time.DateTime dateTime49 = dateTime45.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime51 = dateTime45.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime53 = dateTime51.minusWeeks(19);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        int int61 = partial58.compareTo((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology62 = partial58.getChronology();
        org.joda.time.DurationField durationField63 = durationFieldType56.getField(chronology62);
        org.joda.time.DateTimeField dateTimeField64 = chronology62.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.dayOfMonth();
        org.joda.time.DateTime dateTime66 = dateTime55.toDateTime(chronology62);
        org.joda.time.Chronology chronology67 = chronology62.withUTC();
        org.joda.time.Partial partial68 = partial29.withChronologyRetainFields(chronology67);
        org.joda.time.Chronology chronology69 = partial68.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter13.withChronology(chronology69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(chronology71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        int int75 = partial72.compareTo((org.joda.time.ReadablePartial) partial74);
        org.joda.time.Chronology chronology76 = partial72.getChronology();
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.Chronology chronology78 = chronology76.withZone(dateTimeZone77);
        org.joda.time.DateTimeField dateTimeField79 = chronology78.hourOfDay();
        org.joda.time.DateTimeField dateTimeField80 = chronology78.minuteOfHour();
        int int82 = dateTimeField80.getMinimumValue((long) (byte) 0);
        java.util.Locale locale84 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str85 = locale84.getDisplayScript();
        java.lang.String str86 = dateTimeField80.getAsShortText((int) '4', locale84);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter87 = dateTimeFormatter13.withLocale(locale84);
        java.util.Locale locale88 = locale84.stripExtensions();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "52" + "'", str86, "52");
        org.junit.Assert.assertNotNull(dateTimeFormatter87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "fr_CA");
    }

    @Test
    public void test10438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10438");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) 'a');
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours(53);
        org.joda.time.DateTime dateTime21 = dateTime19.withMillisOfSecond(999);
        int int22 = dateTime21.getSecondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = dateTime21.withWeekOfWeekyear(174);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 174 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 18000 + "'", int22 == 18000);
    }

    @Test
    public void test10439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10439");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        int int20 = dateTime19.getDayOfMonth();
        org.joda.time.DateTime dateTime22 = dateTime19.plus((long) (short) -1);
        int int23 = dateTime19.getHourOfDay();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        int int29 = partial26.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = partial26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology30);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.minus(readableDuration34);
        org.joda.time.DateTime.Property property36 = dateTime35.millisOfSecond();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        int int38 = property36.getMaximumTextLength(locale37);
        org.joda.time.DurationField durationField39 = property36.getRangeDurationField();
        int int40 = property36.get();
        org.joda.time.DateTime dateTime42 = property36.addToCopy((long) 0);
        int int43 = property36.getLeapAmount();
        org.joda.time.DateTime dateTime44 = property36.withMaximumValue();
        long long45 = dateTime44.getMillis();
        org.joda.time.DateTime dateTime48 = dateTime44.withDurationAdded(86400000L, 8);
        org.joda.time.DateTime dateTime49 = dateTime44.toDateTimeISO();
        boolean boolean50 = dateTime19.isAfter((org.joda.time.ReadableInstant) dateTime49);
        java.lang.Object obj51 = null;
        boolean boolean52 = dateTime19.equals(obj51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        int int58 = partial55.compareTo((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology59 = partial55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.Chronology chronology61 = chronology59.withZone(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) 0, chronology59);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.DateTime dateTime64 = dateTime62.minus(readableDuration63);
        org.joda.time.Chronology chronology65 = dateTime62.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str67 = dateTimeFieldType66.getName();
        int int68 = dateTime62.get(dateTimeFieldType66);
        org.joda.time.DateTime dateTime70 = dateTime62.minusMinutes(4);
        int int71 = dateTime62.getWeekyear();
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.DateTime dateTime73 = dateTime62.plus(readableDuration72);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.DateTime dateTime76 = dateTime62.withPeriodAdded(readablePeriod74, 8);
        org.joda.time.DateTimeZone dateTimeZone77 = dateTime62.getZone();
        org.joda.time.DateTime dateTime78 = dateTime19.withZoneRetainFields(dateTimeZone77);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 999L + "'", long45 == 999L);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "halfdayOfDay" + "'", str67, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1970 + "'", int71 == 1970);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test10440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10440");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        long long16 = chronology12.set((org.joda.time.ReadablePartial) partial14, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = partial14.getFieldTypes();
        java.util.Locale locale18 = java.util.Locale.PRC;
        boolean boolean19 = partial14.equals((java.lang.Object) locale18);
        int int20 = partial14.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int22 = partial14.indexOf(dateTimeFieldType21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial23.getFieldTypes();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        int int30 = partial27.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = partial27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 0, chronology31);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.minus(readableDuration35);
        org.joda.time.Chronology chronology37 = dateTime34.getChronology();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        long long41 = chronology37.set((org.joda.time.ReadablePartial) partial39, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = partial39.getFieldTypes();
        java.util.Locale locale43 = java.util.Locale.PRC;
        boolean boolean44 = partial39.equals((java.lang.Object) locale43);
        int int45 = partial39.size();
        org.joda.time.Chronology chronology46 = partial39.getChronology();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial39.minus(readablePeriod47);
        int[] intArray49 = partial39.getValues();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        int int55 = partial52.compareTo((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Chronology chronology56 = partial52.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.Chronology chronology58 = chronology56.withZone(dateTimeZone57);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) 0, chronology56);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.DateTime dateTime61 = dateTime59.minus(readableDuration60);
        org.joda.time.Chronology chronology62 = dateTime59.getChronology();
        org.joda.time.DurationField durationField63 = chronology62.centuries();
        org.joda.time.DurationField durationField64 = chronology62.millis();
        org.joda.time.Partial partial65 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray49, chronology62);
        java.lang.String str66 = partial65.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray67 = partial65.getFieldTypes();
        int[] intArray68 = new int[] {};
        org.joda.time.Partial partial69 = new org.joda.time.Partial(dateTimeFieldTypeArray67, intArray68);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray70 = partial69.getFieldTypes();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[]" + "'", str66, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray70);
    }

    @Test
    public void test10441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10441");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) 'a');
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours(53);
        org.joda.time.DateTime dateTime21 = dateTime19.withMillisOfSecond(999);
        org.joda.time.DateTime.Property property22 = dateTime19.yearOfEra();
        long long23 = property22.remainder();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 190800000L + "'", long23 == 190800000L);
    }

    @Test
    public void test10442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10442");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronolgy();
        boolean boolean8 = dateTimeFormatter6.isParser();
        boolean boolean9 = dateTimeFormatter6.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withPivotYear(317);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter11.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withPivotYear(834);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = dateTimeFormatter12.parseMillis("Korean");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
    }

    @Test
    public void test10443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10443");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        org.joda.time.Chronology chronology5 = dateTimeFormatter3.getChronolgy();
        boolean boolean6 = dateTimeFormatter3.isPrinter();
        boolean boolean7 = dateTimeFormatter3.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter3.withDefaultYear(0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        int int14 = partial11.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        boolean boolean17 = partial13.isAfter((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial16);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial21 = partial16.withPeriodAdded(readablePeriod19, (int) (byte) 0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        boolean boolean24 = partial16.isMatch((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial16.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter3.withChronology(chronology25);
        boolean boolean28 = dateTimeFormatter3.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter3.withPivotYear(3970);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
    }

    @Test
    public void test10444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10444");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int int25 = partial22.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = partial22.getChronology();
        org.joda.time.DurationField durationField27 = durationFieldType20.getField(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfMonth();
        org.joda.time.DateTime dateTime30 = dateTime19.toDateTime(chronology26);
        org.joda.time.Chronology chronology31 = chronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = chronology26.hourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology26.millisOfSecond();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = partial35.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean41 = partial35.isSupported(dateTimeFieldType40);
        org.joda.time.Chronology chronology42 = partial35.getChronology();
        org.joda.time.Partial partial43 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        int int50 = partial47.compareTo((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = partial47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.Chronology chronology53 = chronology51.withZone(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) 0, chronology51);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        int int60 = partial57.compareTo((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology61 = partial57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.Chronology chronology63 = chronology61.withZone(dateTimeZone62);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) 0, chronology61);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.DateTime dateTime66 = dateTime64.minus(readableDuration65);
        org.joda.time.Chronology chronology67 = dateTime64.getChronology();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        long long71 = chronology67.set((org.joda.time.ReadablePartial) partial69, (long) (byte) -1);
        int[] intArray73 = chronology51.get((org.joda.time.ReadablePartial) partial69, (long) ' ');
        int[] intArray75 = dateTimeField33.addWrapPartial((org.joda.time.ReadablePartial) partial35, (int) (short) 0, intArray73, (int) (byte) 0);
        int[] intArray76 = partial35.getValues();
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.Partial partial79 = partial35.withPeriodAdded(readablePeriod77, 1971);
        java.util.Locale locale83 = new java.util.Locale("[]", "[]");
        java.lang.String str84 = locale83.getVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = partial35.toString("minuteofhour", locale83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L) + "'", long71 == (-1L));
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertEquals(locale83.toString(), "[]_[]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
    }

    @Test
    public void test10445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10445");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        int int20 = dateTime19.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.minus(readablePeriod21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        int int28 = partial25.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = partial25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Chronology chronology31 = chronology29.withZone(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 0, chronology29);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.minus(readableDuration33);
        org.joda.time.DateTime dateTime36 = dateTime32.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property37 = dateTime36.dayOfYear();
        org.joda.time.DateTime dateTime38 = property37.withMinimumValue();
        boolean boolean39 = dateTime38.isAfterNow();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime42 = dateTime38.withDurationAdded(readableDuration40, 99);
        org.joda.time.DateTime dateTime44 = dateTime42.plusMonths(12);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.plus(readablePeriod45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        int int52 = partial49.compareTo((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = partial49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 0, chronology53);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.minus(readableDuration57);
        org.joda.time.Chronology chronology59 = dateTime56.getChronology();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        long long63 = chronology59.set((org.joda.time.ReadablePartial) partial61, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray64 = partial61.getFieldTypes();
        java.util.Locale locale65 = java.util.Locale.PRC;
        boolean boolean66 = partial61.equals((java.lang.Object) locale65);
        int int67 = partial61.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int69 = partial61.indexOf(dateTimeFieldType68);
        boolean boolean70 = dateTime44.isSupported(dateTimeFieldType68);
        org.joda.time.DateTime.Property property71 = dateTime19.property(dateTimeFieldType68);
        org.joda.time.DateTime.Property property72 = dateTime19.secondOfDay();
        java.util.GregorianCalendar gregorianCalendar73 = dateTime19.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime75 = dateTime19.withMonthOfYear(2016);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2016 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(gregorianCalendar73);
    }

    @Test
    public void test10446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10446");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        int int18 = dateTime17.getSecondOfMinute();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        org.joda.time.DateTime dateTime32 = dateTime30.withYear((int) 'a');
        boolean boolean33 = dateTime30.isEqualNow();
        org.joda.time.DateMidnight dateMidnight34 = dateTime30.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone35 = dateMidnight34.getZone();
        org.joda.time.DateTime dateTime36 = dateTime17.withZoneRetainFields(dateTimeZone35);
        org.joda.time.DateTime.Property property37 = dateTime36.weekOfWeekyear();
        boolean boolean38 = dateTime36.isAfterNow();
        org.joda.time.DateTime dateTime39 = dateTime36.toDateTime();
        org.joda.time.DateTime dateTime40 = dateTime36.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        int int46 = partial43.compareTo((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology47 = partial43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 0, chronology47);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.minus(readableDuration51);
        org.joda.time.Chronology chronology53 = dateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.secondOfDay();
        org.joda.time.DurationField durationField55 = chronology53.seconds();
        org.joda.time.DurationField durationField56 = chronology53.hours();
        long long60 = chronology53.add(86399999L, (long) (-10), 72);
        org.joda.time.DateTime dateTime61 = dateTime40.withChronology(chronology53);
        org.joda.time.DateTime dateTime62 = dateTime40.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 86399279L + "'", long60 == 86399279L);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test10447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10447");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        int int18 = dateTime17.getSecondOfMinute();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        org.joda.time.DateTime dateTime32 = dateTime30.withYear((int) 'a');
        boolean boolean33 = dateTime30.isEqualNow();
        org.joda.time.DateMidnight dateMidnight34 = dateTime30.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone35 = dateMidnight34.getZone();
        org.joda.time.DateTime dateTime36 = dateTime17.withZoneRetainFields(dateTimeZone35);
        org.joda.time.DateTime.Property property37 = dateTime36.weekOfWeekyear();
        java.lang.String str38 = property37.getAsShortText();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        int int44 = partial41.compareTo((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = partial41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Chronology chronology47 = chronology45.withZone(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 0, chronology45);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.minus(readableDuration49);
        org.joda.time.DateTime dateTime52 = dateTime48.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime54 = dateTime48.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime56 = dateTime54.minusWeeks(19);
        org.joda.time.DateTime dateTime58 = dateTime54.plusMillis((int) '#');
        int int59 = dateTime58.getDayOfMonth();
        org.joda.time.DateTime dateTime61 = dateTime58.plus((long) (short) -1);
        long long62 = property37.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime63 = property37.withMinimumValue();
        java.lang.String str64 = property37.getAsShortText();
        org.joda.time.DateTime dateTime65 = property37.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime67 = property37.addWrapFieldToCopy(1320);
        org.joda.time.DateTime dateTime69 = dateTime67.withMinuteOfHour(52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "34" + "'", str38, "34");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-19L) + "'", long62 == (-19L));
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "34" + "'", str64, "34");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test10448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10448");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.minus(readableDuration11);
        org.joda.time.Chronology chronology13 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.dayOfWeek();
        org.joda.time.DurationField durationField16 = chronology13.seconds();
        org.joda.time.DurationField durationField17 = durationFieldType0.getField(chronology13);
        org.joda.time.DateTimeField dateTimeField18 = chronology13.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray21 = chronology13.get(readablePeriod19, (-86398030L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test10449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10449");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder1.setVariant("");
        java.util.Locale locale5 = builder1.build();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = null;
        org.joda.time.format.DateTimeParser dateTimeParser7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser10 = dateTimeFormatter8.getParser();
        int int11 = dateTimeFormatter8.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter8.withZoneUTC();
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.lang.String str14 = locale13.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter12.withLocale(locale13);
        java.lang.String str16 = locale13.getLanguage();
        java.util.Set<java.lang.String> strSet17 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str18 = locale13.getLanguage();
        java.util.Locale.Builder builder19 = builder1.setLocale(locale13);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder19.setRegion("\u661f\u671f\u56db");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ??? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimeParser10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2000 + "'", int11 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CN" + "'", str14, "CN");
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh" + "'", str16, "zh");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zh" + "'", str18, "zh");
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test10450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10450");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        org.joda.time.DateTime dateTime21 = dateTime19.minusSeconds(68);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test10451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10451");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = partial12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readableDuration20);
        org.joda.time.Chronology chronology22 = dateTime19.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        long long26 = chronology22.set((org.joda.time.ReadablePartial) partial24, (long) (byte) -1);
        int[] intArray28 = chronology6.get((org.joda.time.ReadablePartial) partial24, (long) ' ');
        org.joda.time.DurationField durationField29 = chronology6.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology6.dayOfYear();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        int int35 = partial32.compareTo((org.joda.time.ReadablePartial) partial34);
        java.lang.String str36 = partial32.toString();
        org.joda.time.Partial partial37 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial32);
        java.util.Locale.Category category39 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale40 = java.util.Locale.getDefault(category39);
        java.util.Locale locale41 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale42 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str43 = locale41.getDisplayName(locale42);
        java.lang.String str44 = locale41.toLanguageTag();
        java.lang.String str45 = locale41.getScript();
        java.lang.String str46 = locale40.getDisplayCountry(locale41);
        java.lang.String str47 = dateTimeField30.getAsText((org.joda.time.ReadablePartial) partial32, 52, locale40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray48 = partial32.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Partial partial51 = new org.joda.time.Partial(dateTimeFieldType49, 12);
        org.joda.time.Chronology chronology52 = partial51.getChronology();
        int[] intArray53 = partial51.getValues();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        int int58 = partial55.compareTo((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology59 = partial55.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean61 = partial55.isSupported(dateTimeFieldType60);
        org.joda.time.Chronology chronology62 = partial55.getChronology();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial55.plus(readablePeriod63);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean66 = partial55.isSupported(dateTimeFieldType65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        int int72 = partial69.compareTo((org.joda.time.ReadablePartial) partial71);
        org.joda.time.Chronology chronology73 = partial69.getChronology();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.Chronology chronology75 = chronology73.withZone(dateTimeZone74);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) 0, chronology73);
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.DateTime dateTime78 = dateTime76.minus(readableDuration77);
        org.joda.time.Chronology chronology79 = dateTime76.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.secondOfDay();
        org.joda.time.DurationField durationField81 = chronology79.seconds();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Partial partial83 = new org.joda.time.Partial(chronology82);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Partial partial85 = new org.joda.time.Partial(chronology84);
        int int86 = partial83.compareTo((org.joda.time.ReadablePartial) partial85);
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.Partial partial88 = new org.joda.time.Partial(chronology87);
        boolean boolean89 = partial85.isAfter((org.joda.time.ReadablePartial) partial88);
        int[] intArray91 = chronology79.get((org.joda.time.ReadablePartial) partial85, (long) 10);
        org.joda.time.DurationField durationField92 = chronology79.hours();
        org.joda.time.DateTimeField dateTimeField93 = chronology79.halfdayOfDay();
        org.joda.time.Partial partial94 = partial55.withChronologyRetainFields(chronology79);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial95 = new org.joda.time.Partial(dateTimeFieldTypeArray48, intArray53, chronology79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Values array must be the same length as the types array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.FORMAT + "'", category39.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "fran\347ais (Canada)" + "'", str43, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fr-CA" + "'", str44, "fr-CA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Canada" + "'", str46, "Canada");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "52" + "'", str47, "52");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[12]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(partial94);
    }

    @Test
    public void test10452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10452");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime15 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property16 = dateTime11.year();
        org.joda.time.DateTime dateTime17 = property16.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime18 = property16.getDateTime();
        int int19 = property16.getMinimumValue();
        org.joda.time.DateTime dateTime21 = property16.addToCopy((long) '4');
        long long22 = property16.remainder();
        java.lang.String str23 = property16.getAsShortText();
        org.joda.time.DateTime dateTime24 = property16.roundCeilingCopy();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-292275054) + "'", int19 == (-292275054));
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970" + "'", str23, "1970");
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test10453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10453");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        int int12 = partial9.compareTo((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.DateTime dateTime18 = dateTime16.withHourOfDay(0);
        org.joda.time.DateTime dateTime20 = dateTime18.withYear((int) 'a');
        boolean boolean21 = dateTime18.isEqualNow();
        org.joda.time.DateMidnight dateMidnight22 = dateTime18.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone23 = dateMidnight22.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter2.withZone(dateTimeZone23);
        org.joda.time.format.DateTimePrinter dateTimePrinter25 = dateTimeFormatter24.getPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = dateTimeFormatter24.parseLocalDateTime("\u97d3\u56fd\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(dateTimePrinter25);
    }

    @Test
    public void test10454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10454");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        int int14 = dateTime13.getWeekOfWeekyear();
        org.joda.time.Instant instant15 = dateTime13.toInstant();
        org.joda.time.DateTime dateTime17 = dateTime13.withMillis(180100L);
        int int18 = dateTime13.getYearOfEra();
        org.joda.time.DateTime dateTime20 = dateTime13.minusMinutes(0);
        java.util.GregorianCalendar gregorianCalendar21 = dateTime13.toGregorianCalendar();
        org.joda.time.DateTime.Property property22 = dateTime13.year();
        org.joda.time.DateTime dateTime23 = property22.roundHalfCeilingCopy();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120 + "'", int18 == 120);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(gregorianCalendar21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test10455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10455");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.minus(readableDuration11);
        org.joda.time.Chronology chronology13 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.dayOfWeek();
        org.joda.time.DurationField durationField16 = chronology13.seconds();
        org.joda.time.DurationField durationField17 = durationFieldType0.getField(chronology13);
        org.joda.time.DurationField durationField18 = chronology13.weekyears();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.Chronology chronology31 = dateTime28.getChronology();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        long long35 = chronology31.set((org.joda.time.ReadablePartial) partial33, (long) (byte) -1);
        long long37 = chronology13.set((org.joda.time.ReadablePartial) partial33, (long) 86399999);
        org.joda.time.DateTimeField[] dateTimeFieldArray38 = partial33.getFields();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial33.plus(readablePeriod39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        int int46 = partial43.compareTo((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology47 = partial43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 0, chronology47);
        org.joda.time.DateTimeField dateTimeField51 = chronology47.millisOfDay();
        org.joda.time.DateTimeField dateTimeField52 = chronology47.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = dateTimeField52.getType();
        org.joda.time.Partial partial54 = partial33.without(dateTimeFieldType53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial57 = partial33.withField(dateTimeFieldType55, (-23));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfSecond' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 86399999L + "'", long37 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldArray38);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
    }

    @Test
    public void test10456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10456");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        boolean boolean14 = dateTime11.equals((java.lang.Object) '4');
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        int int20 = partial17.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = partial17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.DateTime dateTime26 = dateTime24.withHourOfDay(0);
        int int27 = dateTime26.getCenturyOfEra();
        boolean boolean29 = dateTime26.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime30 = dateTime26.withEarlierOffsetAtOverlap();
        boolean boolean31 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = dateTime30.minus((long) 3);
        org.joda.time.DateTime.Property property34 = dateTime30.minuteOfHour();
        org.joda.time.DateTime.Property property35 = dateTime30.dayOfYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter36 = null;
        org.joda.time.format.DateTimeParser dateTimeParser37 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter36, dateTimeParser37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter38.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter38.withZoneUTC();
        int int41 = dateTimeFormatter38.getDefaultYear();
        boolean boolean42 = dateTime30.equals((java.lang.Object) dateTimeFormatter38);
        org.joda.time.DateTime dateTime44 = dateTime30.minusHours(19);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 19 + "'", int27 == 19);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2000 + "'", int41 == 2000);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test10457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10457");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        int int9 = partial6.compareTo((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = partial6.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean12 = partial6.isSupported(dateTimeFieldType11);
        boolean boolean13 = partial3.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial6.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes((int) 'x');
        boolean boolean32 = partial15.isMatch((org.joda.time.ReadableInstant) dateTime31);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = partial15.getValue(38977195);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 38977195");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test10458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10458");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\ud55c\uad6d\uc5b4)");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test10459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10459");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        int int20 = dateTime19.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.minus(readablePeriod21);
        org.joda.time.DateTime.Property property23 = dateTime19.secondOfDay();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        int int29 = partial26.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = partial26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology30);
        org.joda.time.DateTime dateTime35 = dateTime33.withHourOfDay(0);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear(10);
        boolean boolean38 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime33);
        int int39 = dateTime19.getMinuteOfDay();
        org.joda.time.DateTime.Property property40 = dateTime19.yearOfCentury();
        org.joda.time.DateTime.Property property41 = dateTime19.minuteOfHour();
        org.joda.time.DateTime dateTime43 = property41.addToCopy((long) 366);
        org.joda.time.DateTime dateTime45 = property41.addWrapFieldToCopy((-694733));
        org.joda.time.DateTime.Property property46 = dateTime45.dayOfWeek();
        org.joda.time.DateTime.Property property47 = dateTime45.minuteOfHour();
        org.joda.time.DateTime dateTime49 = property47.addToCopy((int) 'x');
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test10460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10460");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        int int14 = partial11.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = partial11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter9.withZone(dateTimeZone19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withZone(dateTimeZone19);
        boolean boolean22 = dateTimeFormatter2.isPrinter();
        boolean boolean23 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter2.withZoneUTC();
        java.util.Locale locale25 = dateTimeFormatter2.getLocale();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str27 = dateTimeFieldType26.getName();
        java.lang.String str28 = dateTimeFieldType26.getName();
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType26.getDurationType();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int int34 = partial31.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = partial31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.hourOfHalfday();
        boolean boolean40 = durationFieldType29.isSupported(chronology37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter2.withChronology(chronology37);
        java.lang.Integer int42 = dateTimeFormatter2.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeFormatter2.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime45 = dateTimeFormatter2.parseLocalTime("52");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(locale25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "halfdayOfDay" + "'", str27, "halfdayOfDay");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "halfdayOfDay" + "'", str28, "halfdayOfDay");
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNull(dateTimeZone43);
    }

    @Test
    public void test10461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10461");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DurationField durationField20 = durationFieldType13.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime11.withChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfWeek();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        int int28 = partial25.compareTo((org.joda.time.ReadablePartial) partial27);
        java.lang.String str29 = partial25.toString();
        org.joda.time.Partial partial30 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        int int36 = partial33.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = partial33.getChronology();
        org.joda.time.DurationField durationField38 = durationFieldType31.getField(chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.weekyearOfCentury();
        org.joda.time.DurationField durationField41 = dateTimeField40.getLeapDurationField();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        int int46 = partial43.compareTo((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology47 = partial43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField50 = chronology49.weekOfWeekyear();
        int int52 = dateTimeField50.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        int int57 = partial54.compareTo((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        boolean boolean60 = partial56.isAfter((org.joda.time.ReadablePartial) partial59);
        java.lang.String str61 = partial59.toString();
        java.util.Locale locale63 = null;
        java.lang.String str64 = dateTimeField50.getAsShortText((org.joda.time.ReadablePartial) partial59, 53, locale63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        int int69 = partial66.compareTo((org.joda.time.ReadablePartial) partial68);
        org.joda.time.Chronology chronology70 = partial66.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.era();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = new org.joda.time.Partial(chronology72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        int int76 = partial73.compareTo((org.joda.time.ReadablePartial) partial75);
        int[] intArray78 = new int[] { 2 };
        int int79 = dateTimeField71.getMinimumValue((org.joda.time.ReadablePartial) partial73, intArray78);
        int int80 = dateTimeField40.getMaximumValue((org.joda.time.ReadablePartial) partial59, intArray78);
        int int81 = dateTimeField23.getMinimumValue((org.joda.time.ReadablePartial) partial30, intArray78);
        int int82 = dateTimeField23.getMinimumValue();
        long long84 = dateTimeField23.roundHalfCeiling((long) '4');
        int int87 = dateTimeField23.getDifference((long) 259874, 3970L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNull(durationField41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 53 + "'", int52 == 53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "53" + "'", str64, "53");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[2]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 99 + "'", int80 == 99);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test10462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10462");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test10463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10463");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) '4');
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        org.joda.time.Interval interval3 = property2.toInterval();
        long long4 = property2.remainder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        int int9 = partial6.compareTo((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = partial6.getChronology();
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str12 = locale11.getDisplayCountry();
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleAttributes();
        boolean boolean14 = partial6.equals((java.lang.Object) locale11);
        java.lang.String str15 = property2.getAsShortText(locale11);
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale.Builder builder20 = builder17.addUnicodeLocaleAttribute("coreano");
        java.util.Locale.Category category21 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale22 = java.util.Locale.getDefault(category21);
        java.util.Locale.Builder builder23 = builder17.setLocale(locale22);
        java.util.Locale.Builder builder25 = builder17.setVariant("Italian");
        java.util.Locale locale27 = new java.util.Locale("CN");
        java.util.Locale.Builder builder28 = builder17.setLocale(locale27);
        java.util.Locale locale29 = builder28.build();
        java.util.Locale.Builder builder30 = builder28.clearExtensions();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        int int36 = partial33.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = partial33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 0, chronology37);
        org.joda.time.DateTime dateTime42 = dateTime40.withHourOfDay(0);
        int int43 = dateTime42.getCenturyOfEra();
        boolean boolean45 = dateTime42.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property46 = dateTime42.era();
        int int47 = property46.getMaximumValue();
        org.joda.time.DateTime dateTime48 = property46.roundHalfCeilingCopy();
        org.joda.time.format.DateTimePrinter dateTimePrinter49 = null;
        org.joda.time.format.DateTimeParser dateTimeParser50 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter49, dateTimeParser50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter51.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser53 = dateTimeFormatter51.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter54 = dateTimeFormatter51.getPrinter();
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        boolean boolean56 = locale55.hasExtensions();
        java.lang.String str57 = locale55.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter51.withLocale(locale55);
        int int59 = property46.getMaximumTextLength(locale55);
        java.lang.String str60 = locale55.getVariant();
        java.util.Locale.Builder builder61 = builder28.setLocale(locale55);
        java.util.Set<java.lang.String> strSet62 = locale55.getUnicodeLocaleKeys();
        java.lang.String str63 = locale11.getDisplayScript(locale55);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Canada" + "'", str12, "Canada");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "52" + "'", str15, "52");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.FORMAT + "'", category21.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals(locale27.toString(), "cn");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "cn");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 19 + "'", int43 == 19);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNull(dateTimeParser53);
        org.junit.Assert.assertNull(dateTimePrinter54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
    }

    @Test
    public void test10464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10464");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DurationField durationField20 = durationFieldType13.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime11.withChronology(chronology19);
        org.joda.time.DateTime dateTime24 = dateTime11.plusWeeks((int) (short) 1);
        org.joda.time.DateTime.Property property25 = dateTime11.yearOfEra();
        boolean boolean27 = dateTime11.isEqual((long) 2);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int int32 = partial29.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = partial29.getChronology();
        java.lang.String str34 = partial29.toStringList();
        org.joda.time.DateTime dateTime35 = dateTime11.withFields((org.joda.time.ReadablePartial) partial29);
        boolean boolean36 = dateTime35.isBeforeNow();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime39 = dateTime35.withPeriodAdded(readablePeriod37, (int) (byte) 100);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        int int45 = partial42.compareTo((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = partial42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = chronology46.withZone(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 0, chronology46);
        org.joda.time.DateTime dateTime51 = dateTime49.withHourOfDay(0);
        int int52 = dateTime51.getCenturyOfEra();
        boolean boolean54 = dateTime51.equals((java.lang.Object) '4');
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        int int60 = partial57.compareTo((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology61 = partial57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.Chronology chronology63 = chronology61.withZone(dateTimeZone62);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) 0, chronology61);
        org.joda.time.DateTime dateTime66 = dateTime64.withHourOfDay(0);
        int int67 = dateTime66.getCenturyOfEra();
        boolean boolean69 = dateTime66.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime70 = dateTime66.withEarlierOffsetAtOverlap();
        boolean boolean71 = dateTime51.isAfter((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime73 = dateTime70.minus((long) 3);
        org.joda.time.DateTime.Property property74 = dateTime70.minuteOfHour();
        org.joda.time.DateTime.Property property75 = dateTime70.dayOfYear();
        boolean boolean76 = dateTime39.isEqual((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime dateTime79 = dateTime39.withField(dateTimeFieldType77, 1970);
        long long80 = dateTime79.getMillis();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 19 + "'", int52 == 19);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 19 + "'", int67 == 19);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 6156761356800000L + "'", long80 == 6156761356800000L);
    }

    @Test
    public void test10465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10465");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        int int16 = property12.getLeapAmount();
        org.joda.time.DateTime dateTime17 = property12.withMinimumValue();
        org.joda.time.DateTime dateTime19 = dateTime17.withCenturyOfEra((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTime dateTime22 = dateTime19.withFieldAdded(durationFieldType20, 1970);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        int int28 = partial25.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = partial25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Chronology chronology31 = chronology29.withZone(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 0, chronology29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        int int38 = partial35.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = partial35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 0, chronology39);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.minus(readableDuration43);
        org.joda.time.Chronology chronology45 = dateTime42.getChronology();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        long long49 = chronology45.set((org.joda.time.ReadablePartial) partial47, (long) (byte) -1);
        int[] intArray51 = chronology29.get((org.joda.time.ReadablePartial) partial47, (long) ' ');
        org.joda.time.DateTime dateTime52 = dateTime22.withChronology(chronology29);
        org.joda.time.DateTimeField dateTimeField53 = chronology29.clockhourOfHalfday();
        org.joda.time.DurationField durationField54 = chronology29.hours();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
    }

    @Test
    public void test10466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10466");
        java.util.Locale locale1 = new java.util.Locale("-3");
        org.junit.Assert.assertEquals(locale1.toString(), "-3");
    }

    @Test
    public void test10467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10467");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = partial14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekOfWeekyear();
        int int23 = dateTimeField21.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        int int28 = partial25.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        boolean boolean31 = partial27.isAfter((org.joda.time.ReadablePartial) partial30);
        java.lang.String str32 = partial30.toString();
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeField21.getAsShortText((org.joda.time.ReadablePartial) partial30, 53, locale34);
        long long37 = chronology12.set((org.joda.time.ReadablePartial) partial30, (long) 0);
        org.joda.time.DateTimeField dateTimeField38 = chronology12.weekOfWeekyear();
        int int40 = dateTimeField38.getLeapAmount((long) 53);
        org.joda.time.DurationField durationField41 = dateTimeField38.getLeapDurationField();
        long long43 = dateTimeField38.roundCeiling(36000032L);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        int int48 = partial45.compareTo((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        boolean boolean51 = partial47.isAfter((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Partial partial52 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = partial47.getFormatter();
        int int54 = dateTimeField38.getMaximumValue((org.joda.time.ReadablePartial) partial47);
        int int55 = dateTimeField38.getMinimumValue();
        boolean boolean56 = dateTimeField38.isSupported();
        long long58 = dateTimeField38.roundCeiling((-864961506720000000L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53 + "'", int23 == 53);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "53" + "'", str35, "53");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(durationField41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 345600000L + "'", long43 == 345600000L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(dateTimeFormatter53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 53 + "'", int54 == 53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-864961506720000000L) + "'", long58 == (-864961506720000000L));
    }

    @Test
    public void test10468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10468");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        int int11 = partial8.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = partial8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology12);
        org.joda.time.DateTime dateTime17 = dateTime15.withHourOfDay(0);
        org.joda.time.DateTime dateTime18 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateMidnight dateMidnight19 = dateTime17.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone20 = dateMidnight19.getZone();
        int int21 = dateMidnight19.getYear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
    }

    @Test
    public void test10469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10469");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        java.lang.String str15 = property14.getName();
        org.joda.time.Interval interval16 = property14.toInterval();
        org.joda.time.Interval interval17 = property14.toInterval();
        org.joda.time.DateTimeField dateTimeField18 = property14.getField();
        org.joda.time.DateTime dateTime19 = property14.roundHalfCeilingCopy();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "dayOfYear" + "'", str15, "dayOfYear");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test10470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10470");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        int int16 = property12.getLeapAmount();
        org.joda.time.DateTime dateTime17 = property12.withMinimumValue();
        org.joda.time.DateTime dateTime19 = dateTime17.withCenturyOfEra((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTime dateTime22 = dateTime19.withFieldAdded(durationFieldType20, 1970);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str24 = dateTimeFieldType23.getName();
        java.lang.String str25 = dateTimeFieldType23.getName();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType23.getDurationType();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        int int31 = partial28.compareTo((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology32 = partial28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfHalfday();
        boolean boolean37 = durationFieldType26.isSupported(chronology34);
        boolean boolean38 = durationFieldType20.isSupported(chronology34);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        int int43 = partial40.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = partial40.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.dayOfYear();
        org.joda.time.DateTimeField dateTimeField48 = chronology44.centuryOfEra();
        org.joda.time.DurationField durationField49 = durationFieldType20.getField(chronology44);
        org.joda.time.DateTimeField dateTimeField50 = chronology44.secondOfMinute();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "halfdayOfDay" + "'", str24, "halfdayOfDay");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "halfdayOfDay" + "'", str25, "halfdayOfDay");
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test10471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10471");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        org.joda.time.Interval interval16 = property12.toInterval();
        org.joda.time.DateTimeField dateTimeField17 = property12.getField();
        long long19 = dateTimeField17.roundHalfEven((-981L));
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int int25 = partial22.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = partial22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.Chronology chronology28 = chronology26.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 0, chronology26);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.minus(readableDuration30);
        org.joda.time.Chronology chronology32 = dateTime29.getChronology();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        long long36 = chronology32.set((org.joda.time.ReadablePartial) partial34, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = partial34.getFieldTypes();
        java.util.Locale locale38 = java.util.Locale.PRC;
        boolean boolean39 = partial34.equals((java.lang.Object) locale38);
        int int40 = partial34.size();
        java.util.Locale locale45 = new java.util.Locale("coreano", "dayOfYear", "italien");
        java.lang.String str46 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) partial34, 366, locale45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        int int52 = partial49.compareTo((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = partial49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField56 = chronology55.hourOfDay();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.minuteOfHour();
        int int59 = dateTimeField57.getMinimumValue((long) (byte) 0);
        java.util.Locale locale61 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str62 = locale61.getDisplayScript();
        java.lang.String str63 = dateTimeField57.getAsShortText((int) '4', locale61);
        java.lang.String str64 = dateTimeField17.getAsText(712586, locale61);
        java.util.Locale locale68 = new java.util.Locale("AM", "9");
        java.lang.String str69 = locale68.getScript();
        java.lang.String str70 = dateTimeField17.getAsShortText((long) 24, locale68);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-981L) + "'", long19 == (-981L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals(locale45.toString(), "coreano_DAYOFYEAR_italien");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "366" + "'", str46, "366");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "52" + "'", str63, "52");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "712586" + "'", str64, "712586");
        org.junit.Assert.assertEquals(locale68.toString(), "am_9");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "24" + "'", str70, "24");
    }

    @Test
    public void test10472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10472");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime9.minus(readablePeriod14);
        int int16 = dateTime15.getDayOfWeek();
        org.joda.time.DateTime dateTime18 = dateTime15.minusYears(35);
        org.joda.time.DateTime.Property property19 = dateTime18.weekyear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int int25 = partial22.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = partial22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.Chronology chronology28 = chronology26.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 0, chronology26);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.minus(readableDuration30);
        org.joda.time.DateTime.Property property32 = dateTime31.millisOfSecond();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        int int34 = property32.getMaximumTextLength(locale33);
        long long35 = property32.remainder();
        int int36 = property32.getLeapAmount();
        org.joda.time.DateTime dateTime37 = property32.withMinimumValue();
        org.joda.time.DateTime dateTime39 = dateTime37.withCenturyOfEra((int) (short) 1);
        boolean boolean40 = dateTime18.isEqual((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime42 = dateTime37.plus(readableDuration41);
        org.joda.time.DateTime dateTime43 = dateTime37.withTimeAtStartOfDay();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test10473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10473");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        java.lang.String str16 = property12.getAsText();
        org.joda.time.DateTime dateTime17 = property12.roundCeilingCopy();
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfCentury((int) '#');
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.hourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.minuteOfHour();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTime.Property property31 = dateTime30.weekyear();
        boolean boolean32 = dateTime17.isBefore((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime.Property property33 = dateTime17.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime37 = dateTime17.withDate((-3), (-52), 3970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -52 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test10474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10474");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        int int25 = partial22.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = partial22.getChronology();
        org.joda.time.DurationField durationField27 = durationFieldType20.getField(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfMonth();
        org.joda.time.DateTime dateTime30 = dateTime19.toDateTime(chronology26);
        org.joda.time.DateTime dateTime32 = dateTime19.plusMonths((int) 'u');
        org.joda.time.DateTime dateTime34 = dateTime32.withWeekOfWeekyear(22);
        org.joda.time.DateTime dateTime36 = dateTime32.minus((long) (byte) 100);
        org.joda.time.DateTime.Property property37 = dateTime32.dayOfMonth();
        org.joda.time.DateTime dateTime38 = property37.roundHalfFloorCopy();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test10475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10475");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.minus(readableDuration11);
        org.joda.time.DateTime dateTime14 = dateTime10.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime16 = dateTime10.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks(19);
        org.joda.time.DateTime dateTime20 = dateTime16.plusMillis((int) '#');
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DurationField durationField28 = durationFieldType21.getField(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.dayOfMonth();
        org.joda.time.DateTime dateTime31 = dateTime20.toDateTime(chronology27);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(obj0, chronology27);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property35 = dateTime32.dayOfMonth();
        org.joda.time.DateTime dateTime36 = property35.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime37 = property35.getDateTime();
        org.joda.time.DateTime.Property property38 = dateTime37.secondOfMinute();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test10476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10476");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        int int8 = partial5.compareTo((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology9 = partial5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Chronology chronology11 = chronology9.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = chronology11.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter3.withZone(dateTimeZone13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        int int19 = partial16.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = partial16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Chronology chronology22 = chronology20.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology22.getZone();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter3.withZone(dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter26.withDefaultYear((-1));
        org.joda.time.format.DateTimePrinter dateTimePrinter29 = dateTimeFormatter28.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter28.withPivotYear((java.lang.Integer) 22200);
        boolean boolean32 = dateTimeFormatter31.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.parse("dim.", dateTimeFormatter31);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(dateTimePrinter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test10477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10477");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.DateTime dateTime15 = property14.withMinimumValue();
        boolean boolean16 = dateTime15.isAfterNow();
        java.util.GregorianCalendar gregorianCalendar17 = dateTime15.toGregorianCalendar();
        boolean boolean19 = dateTime15.isBefore((long) 2000);
        org.joda.time.DateTime dateTime21 = dateTime15.plusMinutes(59);
        org.joda.time.DateTime.Property property22 = dateTime15.year();
        org.joda.time.DateTime dateTime23 = property22.roundHalfCeilingCopy();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test10478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10478");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        org.joda.time.DurationField durationField15 = property12.getRangeDurationField();
        int int16 = property12.get();
        org.joda.time.DateTime dateTime18 = property12.addToCopy((long) 0);
        int int19 = property12.getLeapAmount();
        org.joda.time.DateTime dateTime20 = property12.roundCeilingCopy();
        org.joda.time.DateTime dateTime22 = property12.addToCopy(365);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        org.joda.time.DateTime dateTime26 = dateTime22.withFieldAdded(durationFieldType24, 34);
        java.lang.String str27 = durationFieldType24.getName();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        int int33 = partial30.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = partial30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 0, chronology34);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.minus(readableDuration38);
        long long40 = dateTime39.getMillis();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        int int45 = partial42.compareTo((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        boolean boolean48 = partial44.isAfter((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        int int54 = partial51.compareTo((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = partial51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.Chronology chronology57 = chronology55.withZone(dateTimeZone56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 0, chronology55);
        org.joda.time.DateTime dateTime60 = dateTime58.withHourOfDay(0);
        org.joda.time.DateTime dateTime62 = dateTime60.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime63 = dateTime62.toMutableDateTime();
        org.joda.time.DateTime dateTime64 = partial44.toDateTime((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        int int70 = partial67.compareTo((org.joda.time.ReadablePartial) partial69);
        org.joda.time.Chronology chronology71 = partial67.getChronology();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.Chronology chronology73 = chronology71.withZone(dateTimeZone72);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) 0, chronology71);
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.DateTime dateTime76 = dateTime74.minus(readableDuration75);
        org.joda.time.DateTime dateTime78 = dateTime74.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime80 = dateTime74.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime82 = dateTime80.minusWeeks(19);
        org.joda.time.DateTime dateTime84 = dateTime80.plusMillis((int) '#');
        int int85 = dateTime84.getDayOfMonth();
        boolean boolean86 = partial44.equals((java.lang.Object) dateTime84);
        boolean boolean87 = dateTime39.isBefore((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTime dateTime89 = dateTime84.plusSeconds(2);
        org.joda.time.Chronology chronology90 = dateTime84.getChronology();
        org.joda.time.DurationField durationField91 = durationFieldType24.getField(chronology90);
        org.joda.time.Chronology chronology92 = null;
        org.joda.time.DurationField durationField93 = durationFieldType24.getField(chronology92);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hours" + "'", str27, "hours");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertNotNull(durationField93);
    }

    @Test
    public void test10479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10479");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.year();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology5.getZone();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = chronology5.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = chronology5.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = dateTimeField12.getType();
        long long15 = dateTimeField12.roundFloor((-950400000L));
        long long18 = dateTimeField12.add(292279092L, 0L);
        boolean boolean19 = dateTimeField12.isLenient();
        long long22 = dateTimeField12.addWrapField(60L, 100);
        java.lang.String str24 = dateTimeField12.getAsShortText(252528969600035L);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        int int29 = partial26.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        boolean boolean32 = partial28.isAfter((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial31);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial36 = partial31.withPeriodAdded(readablePeriod34, (int) (byte) 0);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        boolean boolean39 = partial31.isMatch((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        int int44 = partial41.compareTo((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = partial41.getChronology();
        java.lang.String str46 = partial41.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        int int52 = partial49.compareTo((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = partial49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 0, chronology53);
        org.joda.time.DateTime dateTime58 = dateTime56.withHourOfDay(0);
        int int59 = dateTime58.getCenturyOfEra();
        boolean boolean61 = dateTime58.equals((java.lang.Object) '4');
        org.joda.time.DateTime.Property property62 = dateTime58.era();
        org.joda.time.DateTime dateTime64 = dateTime58.withHourOfDay(12);
        org.joda.time.DateTime dateTime65 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = partial41.toString(dateTimeFormatter66);
        int[] intArray68 = partial41.getValues();
        int[] intArray69 = partial41.getValues();
        int int70 = dateTimeField12.getMinimumValue((org.joda.time.ReadablePartial) partial31, intArray69);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-950400000L) + "'", long15 == (-950400000L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 292279092L + "'", long18 == 292279092L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 14400060L + "'", long22 == 14400060L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 19 + "'", int59 == 19);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test10480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10480");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.DateTime.Property property13 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime16 = dateTime11.withYearOfEra((int) 'u');
        long long17 = dateTime11.getMillis();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test10481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10481");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        int int10 = partial7.compareTo((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime14.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime20 = dateTime14.withSecondOfMinute(0);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime14.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter2.withZone(dateTimeZone21);
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter25.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser27 = dateTimeFormatter25.getParser();
        int int28 = dateTimeFormatter25.getDefaultYear();
        org.joda.time.Chronology chronology29 = dateTimeFormatter25.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = null;
        org.joda.time.format.DateTimeParser dateTimeParser31 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter30, dateTimeParser31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = partial34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology40.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter32.withZone(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter25.withZone(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter22.withZone(dateTimeZone42);
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("AD");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter22.withLocale(locale48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        int int55 = partial52.compareTo((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Chronology chronology56 = partial52.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.Chronology chronology58 = chronology56.withZone(dateTimeZone57);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) 0, chronology56);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.DateTime dateTime61 = dateTime59.minus(readableDuration60);
        org.joda.time.Chronology chronology62 = dateTime59.getChronology();
        org.joda.time.DurationField durationField63 = chronology62.months();
        org.joda.time.DateTimeField dateTimeField64 = chronology62.hourOfDay();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField66 = chronology62.clockhourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter49.withChronology(chronology62);
        org.joda.time.DateTimeField dateTimeField68 = chronology62.secondOfMinute();
        int int70 = dateTimeField68.getMaximumValue(5L);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(dateTimeParser27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2000 + "'", int28 == 2000);
        org.junit.Assert.assertNull(chronology29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ad");
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 59 + "'", int70 == 59);
    }

    @Test
    public void test10482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10482");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekOfWeekyear();
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale12 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str13 = locale11.getDisplayName(locale12);
        int int14 = dateTimeField10.getMaximumTextLength(locale12);
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale locale17 = new java.util.Locale("CA");
        java.lang.String str18 = locale17.getLanguage();
        java.util.Locale.setDefault(category0, locale17);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fran\347ais (Canada)" + "'", str13, "fran\347ais (Canada)");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertEquals(locale17.toString(), "ca");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ca" + "'", str18, "ca");
    }

    @Test
    public void test10483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10483");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekOfWeekyear();
        long long14 = chronology7.getDateTimeMillis(762, 9, 18, 97);
        org.joda.time.DurationField durationField15 = chronology7.months();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-38098339199903L) + "'", long14 == (-38098339199903L));
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test10484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10484");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekOfWeekyear();
        int int10 = dateTimeField8.getMinimumValue(0L);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        int int15 = partial12.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        boolean boolean18 = partial14.isAfter((org.joda.time.ReadablePartial) partial17);
        java.lang.String str19 = partial17.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial17.getFieldTypes();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.minus(readableDuration31);
        org.joda.time.DateTime dateTime34 = dateTime30.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime36 = dateTime30.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime38 = dateTime36.minusWeeks(19);
        org.joda.time.DateTime dateTime40 = dateTime36.plusMillis((int) '#');
        int int41 = dateTime40.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str43 = dateTimeFieldType42.getName();
        boolean boolean44 = dateTime40.isSupported(dateTimeFieldType42);
        org.joda.time.DateTime dateTime45 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        int[] intArray48 = partial47.getValues();
        int int49 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) partial17, intArray48);
        org.joda.time.Chronology chronology50 = partial17.getChronology();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        int int56 = partial53.compareTo((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Chronology chronology57 = partial53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.Chronology chronology59 = chronology57.withZone(dateTimeZone58);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 0, chronology57);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.DateTime dateTime62 = dateTime60.minus(readableDuration61);
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime65 = dateTime60.withFieldAdded(durationFieldType63, 3);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.era();
        int int67 = dateTime60.get(dateTimeFieldType66);
        int int68 = partial17.indexOf(dateTimeFieldType66);
        java.lang.String str69 = dateTimeFieldType66.toString();
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType66.getDurationType();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "halfdayOfDay" + "'", str43, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "era" + "'", str69, "era");
        org.junit.Assert.assertNotNull(durationFieldType70);
    }

    @Test
    public void test10485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10485");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter3.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withDefaultYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter3.getPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.parse("86332665", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimePrinter8);
    }

    @Test
    public void test10486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10486");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekOfWeekyear();
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale12 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str13 = locale11.getDisplayName(locale12);
        int int14 = dateTimeField10.getMaximumTextLength(locale12);
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale locale16 = java.util.Locale.getDefault(category0);
        java.util.Locale locale17 = java.util.Locale.getDefault(category0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        int int23 = partial20.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = partial20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.DateTime.Property property30 = dateTime29.millisOfSecond();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        int int32 = property30.getMaximumTextLength(locale31);
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale33.getDisplayScript(locale34);
        java.lang.String str36 = locale31.getDisplayLanguage(locale33);
        java.lang.String str37 = locale33.getVariant();
        java.util.Locale.setDefault(category0, locale33);
        java.util.Locale locale39 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleKeys();
        java.lang.String str41 = locale39.getDisplayScript();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ca");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fran\347ais (Canada)" + "'", str13, "fran\347ais (Canada)");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "coreano" + "'", str36, "coreano");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test10487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10487");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str14 = dateTimeFieldType13.getName();
        int int15 = dateTime9.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime17 = dateTime9.minusMinutes(4);
        org.joda.time.Instant instant18 = dateTime17.toInstant();
        int int19 = dateTime17.getYearOfCentury();
        org.joda.time.Instant instant20 = dateTime17.toInstant();
        org.joda.time.Instant instant21 = instant20.toInstant();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "halfdayOfDay" + "'", str14, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 69 + "'", int19 == 69);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant21);
    }

    @Test
    public void test10488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10488");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        long long12 = dateTime11.getMillis();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        int int17 = partial14.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        boolean boolean20 = partial16.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.DateTime dateTime32 = dateTime30.withHourOfDay(0);
        org.joda.time.DateTime dateTime34 = dateTime32.withYear((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime34.toMutableDateTime();
        org.joda.time.DateTime dateTime36 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        int int42 = partial39.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = partial39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readableDuration47);
        org.joda.time.DateTime dateTime50 = dateTime46.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime52 = dateTime46.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime54 = dateTime52.minusWeeks(19);
        org.joda.time.DateTime dateTime56 = dateTime52.plusMillis((int) '#');
        int int57 = dateTime56.getDayOfMonth();
        boolean boolean58 = partial16.equals((java.lang.Object) dateTime56);
        boolean boolean59 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime56);
        long long60 = dateTime11.getMillis();
        java.lang.String str61 = dateTime11.toString();
        org.joda.time.DateTime.Property property62 = dateTime11.yearOfEra();
        java.lang.String str63 = property62.getAsString();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        int int69 = partial66.compareTo((org.joda.time.ReadablePartial) partial68);
        org.joda.time.Chronology chronology70 = partial66.getChronology();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.Chronology chronology72 = chronology70.withZone(dateTimeZone71);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) 0, chronology70);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.DateTime dateTime75 = dateTime73.minus(readableDuration74);
        org.joda.time.DateTime dateTime77 = dateTime73.withYearOfEra((int) 'x');
        org.joda.time.DateTime.Property property78 = dateTime77.dayOfYear();
        org.joda.time.DateTime dateTime79 = property78.withMinimumValue();
        java.lang.String str80 = dateTime79.toString();
        long long81 = property62.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DurationField durationField82 = property62.getDurationField();
        org.joda.time.DateTime dateTime83 = property62.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime84 = property62.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime85 = property62.withMinimumValue();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str61, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1970" + "'", str63, "1970");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "0120-01-01T00:00:00.000Z" + "'", str80, "0120-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1850L + "'", long81 == 1850L);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
    }

    @Test
    public void test10489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10489");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfYear();
        org.joda.time.DateTime dateTime18 = dateTime15.plus(62898076800000L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test10490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10490");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        int int14 = property12.getMaximumTextLength(locale13);
        long long15 = property12.remainder();
        java.lang.String str16 = property12.getAsText();
        org.joda.time.DateTime dateTime17 = property12.roundCeilingCopy();
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfCentury((int) '#');
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.hourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.minuteOfHour();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTime.Property property31 = dateTime30.weekyear();
        boolean boolean32 = dateTime17.isBefore((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime.Property property33 = dateTime17.minuteOfDay();
        org.joda.time.DurationField durationField34 = property33.getLeapDurationField();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNull(durationField34);
    }

    @Test
    public void test10491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10491");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        int int18 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = partial15.getChronology();
        org.joda.time.DurationField durationField20 = durationFieldType13.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime11.withChronology(chronology19);
        org.joda.time.DateTime dateTime24 = dateTime11.plusWeeks((int) (short) 1);
        org.joda.time.DateTime.Property property25 = dateTime11.yearOfEra();
        boolean boolean27 = dateTime11.isEqual((long) 2);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        int int32 = partial29.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = partial29.getChronology();
        java.lang.String str34 = partial29.toStringList();
        org.joda.time.DateTime dateTime35 = dateTime11.withFields((org.joda.time.ReadablePartial) partial29);
        org.joda.time.DateTime.Property property36 = dateTime11.monthOfYear();
        org.joda.time.DateTime dateTime38 = dateTime11.minusDays(0);
        org.joda.time.DateTime.Property property39 = dateTime38.weekOfWeekyear();
        org.joda.time.DateTime dateTime41 = property39.setCopy(3);
        int int42 = dateTime41.getDayOfMonth();
        org.joda.time.DateTime.Property property43 = dateTime41.monthOfYear();
        long long44 = property43.remainder();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 15 + "'", int42 == 15);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1209600000L + "'", long44 == 1209600000L);
    }

    @Test
    public void test10492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10492");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) 'a');
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours(53);
        int int20 = dateTime17.getMillisOfDay();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DurationField durationField28 = durationFieldType21.getField(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        long long34 = chronology27.add(readablePeriod31, (long) 4, 23);
        org.joda.time.DateTimeField dateTimeField35 = chronology27.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone36 = chronology27.getZone();
        org.joda.time.DateTimeField dateTimeField37 = chronology27.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime17.toMutableDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField39 = chronology27.year();
        long long42 = dateTimeField39.getDifferenceAsLong(92067779661L, (long) 120);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 2L + "'", long42 == 2L);
    }

    @Test
    public void test10493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10493");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int int6 = partial3.compareTo((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.minus(readableDuration11);
        org.joda.time.DateTime dateTime14 = dateTime10.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime16 = dateTime10.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime18 = dateTime16.minusYears((int) 'a');
        org.joda.time.DateTime dateTime20 = dateTime18.plusHours(53);
        int int21 = dateTime18.getMillisOfDay();
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        int int27 = partial24.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = partial24.getChronology();
        org.joda.time.DurationField durationField29 = durationFieldType22.getField(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        long long35 = chronology28.add(readablePeriod32, (long) 4, 23);
        org.joda.time.DateTimeField dateTimeField36 = chronology28.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone37 = chronology28.getZone();
        org.joda.time.DateTimeField dateTimeField38 = chronology28.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime18.toMutableDateTime(chronology28);
        org.joda.time.DateTimeField dateTimeField40 = chronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = chronology28.weekyearOfCentury();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 120, chronology28);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        long long46 = chronology28.add(readablePeriod43, (long) 70, 35);
        org.joda.time.DateTimeField dateTimeField47 = chronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField48 = chronology28.weekyearOfCentury();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 4L + "'", long35 == 4L);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 70L + "'", long46 == 70L);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test10494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10494");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear(23);
        java.lang.StringBuffer stringBuffer10 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        int int16 = partial13.compareTo((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = partial13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 0, chronology17);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.minus(readableDuration31);
        org.joda.time.Chronology chronology33 = dateTime30.getChronology();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        long long37 = chronology33.set((org.joda.time.ReadablePartial) partial35, (long) (byte) -1);
        int[] intArray39 = chronology17.get((org.joda.time.ReadablePartial) partial35, (long) ' ');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = partial35.getFieldTypes();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        int[] intArray43 = partial42.getValues();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(dateTimeFieldTypeArray40, intArray43, chronology44);
        java.lang.String str47 = partial45.toString("\uce90\ub098\ub2e4");
        org.joda.time.DateTimeField[] dateTimeFieldArray48 = partial45.getFields();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter9.printTo(stringBuffer10, (org.joda.time.ReadablePartial) partial45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\uce90\ub098\ub2e4" + "'", str47, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(dateTimeFieldArray48);
    }

    @Test
    public void test10495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10495");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '#');
        org.joda.time.DateTime dateTime21 = dateTime15.withHourOfDay(0);
        org.joda.time.DateTime dateTime23 = dateTime15.plusMonths(999);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        int int29 = partial26.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = partial26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology30);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.minus(readableDuration34);
        org.joda.time.DateTime.Property property36 = dateTime35.millisOfSecond();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        int int38 = property36.getMaximumTextLength(locale37);
        org.joda.time.DurationField durationField39 = property36.getRangeDurationField();
        int int40 = property36.get();
        org.joda.time.DateTime dateTime42 = property36.addToCopy((long) 0);
        int int43 = property36.getLeapAmount();
        org.joda.time.DateTime dateTime44 = property36.withMaximumValue();
        org.joda.time.Chronology chronology45 = dateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.clockhourOfHalfday();
        org.joda.time.Chronology chronology47 = chronology45.withUTC();
        org.joda.time.DateTime dateTime48 = dateTime15.withChronology(chronology47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMinutes(59);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test10496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10496");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        int int7 = partial4.compareTo((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = partial4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withDefaultYear(99);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter16.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter16.withZoneUTC();
        java.lang.StringBuffer stringBuffer19 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter16.printTo(stringBuffer19, (long) 68);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
    }

    @Test
    public void test10497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10497");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime9.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(19);
        int int18 = dateTime17.getSecondOfMinute();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        int int24 = partial21.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = partial21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        org.joda.time.DateTime dateTime32 = dateTime30.withYear((int) 'a');
        boolean boolean33 = dateTime30.isEqualNow();
        org.joda.time.DateMidnight dateMidnight34 = dateTime30.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone35 = dateMidnight34.getZone();
        org.joda.time.DateTime dateTime36 = dateTime17.withZoneRetainFields(dateTimeZone35);
        org.joda.time.DateTime.Property property37 = dateTime36.weekOfWeekyear();
        boolean boolean38 = dateTime36.isAfterNow();
        org.joda.time.DateTime dateTime39 = dateTime36.toDateTime();
        org.joda.time.DateTime.Property property40 = dateTime39.millisOfSecond();
        org.joda.time.DateTime dateTime42 = dateTime39.plusYears((int) (short) -1);
        org.joda.time.DateTime dateTime44 = dateTime39.withCenturyOfEra(1970);
        org.joda.time.DateTime.Property property45 = dateTime44.dayOfMonth();
        long long46 = property45.remainder();
        java.util.Locale locale47 = java.util.Locale.ENGLISH;
        int int48 = property45.getMaximumTextLength(locale47);
        org.joda.time.DateTime dateTime49 = property45.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test10498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10498");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toString();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        int int14 = partial11.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = partial11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 0, chronology15);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.minus(readableDuration19);
        org.joda.time.Chronology chronology21 = dateTime18.getChronology();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        int int26 = partial23.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.weekOfWeekyear();
        int int32 = dateTimeField30.getMaximumValue((long) ' ');
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        int int37 = partial34.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        boolean boolean40 = partial36.isAfter((org.joda.time.ReadablePartial) partial39);
        java.lang.String str41 = partial39.toString();
        java.util.Locale locale43 = null;
        java.lang.String str44 = dateTimeField30.getAsShortText((org.joda.time.ReadablePartial) partial39, 53, locale43);
        long long46 = chronology21.set((org.joda.time.ReadablePartial) partial39, (long) 0);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        int int52 = partial49.compareTo((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = partial49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 0, chronology53);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.minus(readableDuration57);
        org.joda.time.Chronology chronology59 = dateTime56.getChronology();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        long long63 = chronology59.set((org.joda.time.ReadablePartial) partial61, (long) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray64 = partial61.getFieldTypes();
        java.util.Locale locale65 = java.util.Locale.PRC;
        boolean boolean66 = partial61.equals((java.lang.Object) locale65);
        int int67 = partial61.size();
        boolean boolean68 = partial39.isMatch((org.joda.time.ReadablePartial) partial61);
        boolean boolean69 = partial1.isAfter((org.joda.time.ReadablePartial) partial39);
        java.util.Locale.Builder builder70 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder71 = builder70.clearExtensions();
        java.util.Locale.Builder builder72 = builder71.clearExtensions();
        boolean boolean73 = partial39.equals((java.lang.Object) builder71);
        int[] intArray74 = partial39.getValues();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 53 + "'", int32 == 53);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "53" + "'", str44, "53");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
    }

    @Test
    public void test10499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10499");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        int int4 = partial1.compareTo((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.monthOfYear();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        int[] intArray14 = chronology7.get((org.joda.time.ReadablePartial) partial12, (-59106067200000L));
        org.joda.time.Chronology chronology15 = partial12.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.dayOfYear();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.era();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test10500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10500");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        int int5 = partial2.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology6 = partial2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        org.joda.time.DateTime dateTime14 = dateTime11.minusMillis((int) (byte) -1);
        int int15 = dateTime14.getMinuteOfHour();
        java.lang.String str16 = dateTime14.toString();
        org.joda.time.Chronology chronology17 = dateTime14.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.months();
        org.joda.time.DurationField durationField19 = chronology17.millis();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.001Z" + "'", str16, "1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest11 {

    public static boolean debug = false;

    @Test
    public void test05501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05501");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long4 = dateTimeField2.roundFloor((long) (-1));
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("und");
        java.util.Locale locale8 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        java.lang.String str11 = locale9.getDisplayName();
        java.util.Locale.Builder builder12 = builder7.setLocale(locale9);
        int int13 = dateTimeField2.getMaximumShortTextLength(locale9);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.ReadableInstant readableInstant19 = null;
        long long20 = property18.getDifferenceAsLong(readableInstant19);
        org.joda.time.DurationField durationField21 = property18.getLeapDurationField();
        java.lang.String str22 = property18.getAsString();
        org.joda.time.LocalDateTime localDateTime23 = property18.roundFloorCopy();
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet26 = locale24.getUnicodeLocaleAttributes();
        java.lang.String str27 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localDateTime23, locale24);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str34 = dateTimeZone32.getShortName((long) (short) 10);
        long long36 = dateTimeZone32.convertUTCToLocal((long) ' ');
        java.lang.String str37 = dateTimeZone32.toString();
        boolean boolean39 = dateTimeZone32.equals((java.lang.Object) (short) 100);
        java.util.Locale locale41 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str42 = dateTimeZone32.getShortName((long) (-1), locale41);
        int int43 = dateTimeField31.getMaximumShortTextLength(locale41);
        java.util.Locale locale45 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale46 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str47 = locale45.getDisplayCountry(locale46);
        java.util.Locale locale48 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale49 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str50 = locale48.getDisplayCountry(locale49);
        java.lang.String str51 = locale45.getDisplayVariant(locale48);
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale53 = locale52.stripExtensions();
        java.lang.String str54 = locale45.getDisplayLanguage(locale53);
        java.lang.String str55 = dateTimeField31.getAsText(0, locale53);
        int int56 = dateTimeField2.getMaximumShortTextLength(locale53);
        org.joda.time.ReadablePartial readablePartial57 = null;
        java.util.Locale locale59 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleAttributes();
        java.util.Locale locale61 = java.util.Locale.US;
        java.lang.String str62 = locale59.getDisplayName(locale61);
        java.lang.String str63 = dateTimeField2.getAsShortText(readablePartial57, 1, locale59);
        int int64 = dateTimeField2.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-22088L) + "'", long4 == (-22088L));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Canada" + "'", str10, "Canada");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "French (Canada)" + "'", str11, "French (Canada)");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+07:10:22.088" + "'", str16, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 25822088L + "'", long20 == 25822088L);
        org.junit.Assert.assertNull(durationField21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "52299417" + "'", str22, "52299417");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(strSet26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "871" + "'", str27, "871");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+07:10:22.088" + "'", str34, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 25822120L + "'", long36 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+07:10:22.088" + "'", str37, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+07:10:22.088" + "'", str42, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Canada" + "'", str47, "Canada");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Canada" + "'", str50, "Canada");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "fran\347ais" + "'", str54, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "AM" + "'", str55, "AM");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Chinese (China)" + "'", str62, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1" + "'", str63, "1");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test05502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05502");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("und");
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale4.getDisplayName();
        java.util.Locale.Builder builder7 = builder2.setLocale(locale4);
        java.util.Locale locale8 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale12 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str13 = locale11.getDisplayCountry(locale12);
        java.lang.String str14 = locale8.getDisplayVariant(locale11);
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale16 = locale15.stripExtensions();
        java.lang.String str17 = locale8.getDisplayLanguage(locale16);
        java.util.Locale.Builder builder18 = builder2.setLocale(locale16);
        java.util.Locale locale19 = builder2.build();
        java.util.Locale.Builder builder20 = builder2.clearExtensions();
        java.util.Locale.Builder builder22 = builder2.removeUnicodeLocaleAttribute("26194467");
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        java.lang.String str25 = locale23.toLanguageTag();
        java.lang.String str26 = locale23.getScript();
        java.util.Locale.Builder builder27 = builder2.setLocale(locale23);
        java.util.Locale.Builder builder30 = builder2.setExtension('x', "");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder32 = builder2.setLanguage("26466533");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 26466533 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Canada" + "'", str5, "Canada");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "French (Canada)" + "'", str6, "French (Canada)");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Canada" + "'", str10, "Canada");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Canada" + "'", str13, "Canada");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "fran\347ais" + "'", str17, "fran\347ais");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "und" + "'", str25, "und");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test05503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05503");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("und");
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale4.getDisplayName();
        java.util.Locale.Builder builder7 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder9 = builder2.setScript("");
        java.util.Locale locale10 = builder2.build();
        java.util.Locale locale11 = builder2.build();
        java.util.Locale.Builder builder13 = builder2.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder2.setRegion("2022-02-22T07:20:38.409");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2022-02-22T07:20:38.409 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Canada" + "'", str5, "Canada");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "French (Canada)" + "'", str6, "French (Canada)");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test05504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05504");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("26243926");
        timeZone1.setRawOffset(67);
        java.time.ZoneId zoneId4 = timeZone1.toZoneId();
        int int5 = timeZone1.getRawOffset();
        java.util.TimeZone.setDefault(timeZone1);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, (int) '#');
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.era();
        int int12 = localDateTime7.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withWeekOfWeekyear((int) (byte) 1);
        int int15 = localDateTime7.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.plusMillis(53);
        java.util.Date date18 = localDateTime17.toDate();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.fromDateFields(date18);
        boolean boolean20 = timeZone1.inDaylightTime(date18);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 67 + "'", int5 == 67);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 14 + "'", int15 == 14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Tue Feb 22 14:31:40 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test05505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05505");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str7 = dateTimeZone5.getShortName((long) (short) 10);
        long long9 = dateTimeZone5.convertUTCToLocal((long) ' ');
        java.lang.String str10 = dateTimeZone5.toString();
        boolean boolean12 = dateTimeZone5.equals((java.lang.Object) (short) 100);
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str15 = dateTimeZone5.getShortName((long) (-1), locale14);
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Locale[] localeArray18 = new java.util.Locale[] { locale3, locale4, locale14, locale16, locale17 };
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.Locale locale21 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList19);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray24 = strSet23.toArray();
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet23);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray28 = strSet27.toArray();
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        boolean boolean31 = strSet27.removeAll((java.util.Collection<java.lang.String>) strSet30);
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet27);
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleAttributes();
        boolean boolean36 = strSet27.retainAll((java.util.Collection<java.lang.String>) strSet35);
        java.util.stream.Stream<java.lang.String> strStream37 = strSet27.stream();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.weekyears();
        org.joda.time.DurationField durationField42 = chronology40.centuries();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.minuteOfDay();
        java.lang.String str45 = dateTimeField43.getAsText((long) 915);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withDurationAdded(readableDuration48, (int) '#');
        org.joda.time.LocalDateTime.Property property51 = localDateTime47.era();
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale53 = locale52.stripExtensions();
        java.lang.String str54 = locale52.getVariant();
        java.lang.String str55 = locale52.getLanguage();
        java.util.Locale locale58 = new java.util.Locale("fra", "fran\347ais (Canada)");
        java.lang.String str59 = locale52.getDisplayName(locale58);
        java.lang.String str60 = property51.getAsShortText(locale52);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str63 = dateTimeZone61.getShortName((long) (short) 10);
        long long65 = dateTimeZone61.convertUTCToLocal((long) ' ');
        java.util.Locale locale67 = java.util.Locale.ROOT;
        java.lang.String str68 = dateTimeZone61.getName((long) (short) 0, locale67);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str71 = dateTimeZone69.getShortName((long) (short) 10);
        long long73 = dateTimeZone69.convertUTCToLocal((long) ' ');
        java.lang.String str74 = dateTimeZone69.toString();
        boolean boolean76 = dateTimeZone69.equals((java.lang.Object) (short) 100);
        java.util.Locale locale78 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str79 = dateTimeZone69.getShortName((long) (-1), locale78);
        java.lang.String str80 = locale67.getDisplayVariant(locale78);
        java.lang.String str81 = locale52.getDisplayScript(locale67);
        java.lang.String str82 = locale52.getVariant();
        java.lang.String str83 = dateTimeField43.getAsShortText((-1010874240L), locale52);
        java.util.Set<java.lang.String> strSet84 = locale52.getUnicodeLocaleKeys();
        boolean boolean85 = strSet27.removeAll((java.util.Collection<java.lang.String>) strSet84);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+07:10:22.088" + "'", str7, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 25822120L + "'", long9 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+07:10:22.088" + "'", str10, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+07:10:22.088" + "'", str15, "+07:10:22.088");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(locale21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strStream37);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0" + "'", str45, "0");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "fr" + "'", str55, "fr");
        org.junit.Assert.assertEquals(locale58.toString(), "fra_FRAN\347AIS (CANADA)");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "French (Canada)" + "'", str59, "French (Canada)");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ap. J.-C." + "'", str60, "ap. J.-C.");
        org.junit.Assert.assertNotNull(dateTimeZone61);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+07:10:22.088" + "'", str63, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + 25822120L + "'", long65 == 25822120L);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+07:10:22.088" + "'", str68, "+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTimeZone69);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+07:10:22.088" + "'", str71, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 25822120L + "'", long73 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+07:10:22.088" + "'", str74, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+07:10:22.088" + "'", str79, "+07:10:22.088");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "432" + "'", str83, "432");
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test05506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05506");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.hours();
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.era();
        org.joda.time.DurationField durationField7 = chronology2.hours();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withDurationAdded(readableDuration11, (int) '#');
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.weekyear();
        int int15 = property14.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField16 = property14.getField();
        boolean boolean17 = property14.isLeap();
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder18.addUnicodeLocaleAttribute("und");
        java.util.Locale locale21 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale22 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str23 = locale21.getDisplayCountry(locale22);
        java.lang.String str24 = locale22.getDisplayName();
        java.util.Locale.Builder builder25 = builder20.setLocale(locale22);
        java.util.Locale.Builder builder27 = builder20.setScript("");
        java.util.Locale locale28 = builder20.build();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType36.getField(chronology37);
        long long40 = dateTimeField38.roundFloor((long) (-1));
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder41.addUnicodeLocaleAttribute("und");
        java.util.Locale locale44 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale45 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str46 = locale44.getDisplayCountry(locale45);
        java.lang.String str47 = locale45.getDisplayName();
        java.util.Locale.Builder builder48 = builder43.setLocale(locale45);
        int int49 = dateTimeField38.getMaximumShortTextLength(locale45);
        java.lang.String str50 = dateTimeField34.getAsShortText((long) 'a', locale45);
        java.lang.String str51 = locale28.getDisplayLanguage(locale45);
        java.util.Locale locale52 = locale45.stripExtensions();
        int int53 = property14.getMaximumTextLength(locale52);
        java.lang.String str54 = dateTimeField8.getAsText(1645629536584L, locale52);
        java.lang.String str56 = dateTimeField8.getAsText((long) (-115199985));
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Canada" + "'", str23, "Canada");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "French (Canada)" + "'", str24, "French (Canada)");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTimeField38);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-22088L) + "'", long40 == (-22088L));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Canada" + "'", str46, "Canada");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "French (Canada)" + "'", str47, "French (Canada)");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "97" + "'", str50, "97");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "fran\347ais" + "'", str51, "fran\347ais");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "15" + "'", str54, "15");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "16" + "'", str56, "16");
    }

    @Test
    public void test05507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05507");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.seconds();
        org.joda.time.DurationField durationField5 = chronology2.seconds();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.millisOfDay();
        long long9 = dateTimeField6.add((long) 26206, (-1414162664240411401L));
        boolean boolean10 = dateTimeField6.isLenient();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1414162664240385195L) + "'", long9 == (-1414162664240385195L));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test05508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05508");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("und");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet6 = locale4.getUnicodeLocaleAttributes();
        java.lang.String str7 = locale4.getVariant();
        java.util.Locale.Builder builder8 = builder2.setLocale(locale4);
        java.lang.String str10 = locale4.getExtension('a');
        java.lang.String str11 = locale4.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test05509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05509");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray2 = strSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        boolean boolean5 = strSet1.removeAll((java.util.Collection<java.lang.String>) strSet4);
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = new org.joda.time.DurationFieldType[] { durationFieldType8, durationFieldType9 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = strSet7.toArray(durationFieldTypeArray10);
        boolean boolean12 = strSet1.containsAll((java.util.Collection<java.lang.String>) strSet7);
        java.lang.Object[] objArray13 = strSet7.toArray();
        int int14 = strSet7.size();
        int int15 = strSet7.size();
        int int16 = strSet7.size();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = strSet7.add("2022-02-22T07:17:31.459");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test05510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05510");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        java.lang.String str3 = dateTimeZone1.getShortName((long) 86399999);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        java.lang.String str5 = timeZone4.getID();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("0100-02-22T07:16:18.996");
        boolean boolean8 = timeZone4.hasSameRules(timeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getShortName((long) (short) 10);
        long long13 = dateTimeZone9.convertUTCToLocal((long) ' ');
        java.lang.String str14 = dateTimeZone9.toString();
        long long17 = dateTimeZone9.adjustOffset((long) 'a', true);
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = dateTimeZone9.getOffset(readableInstant18);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        java.util.TimeZone timeZone21 = dateTimeZone9.toTimeZone();
        boolean boolean22 = timeZone7.hasSameRules(timeZone21);
        boolean boolean23 = timeZone7.observesDaylightTime();
        timeZone7.setID("0100-02-22T07:20:05.116");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.097" + "'", str3, "+00:00:00.097");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.097" + "'", str5, "+00:00:00.097");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+07:10:22.088" + "'", str11, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 25822120L + "'", long13 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+07:10:22.088" + "'", str14, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 97L + "'", long17 == 97L);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 25822088 + "'", int19 == 25822088);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+07:10");
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test05511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05511");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.yearOfCentury();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.year();
        int int7 = property6.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
    }

    @Test
    public void test05512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05512");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime8.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minusMillis(0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withWeekyear(1970);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusDays(26147585);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusSeconds(26224);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusSeconds(26445639);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test05513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05513");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(locale2);
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale locale8 = builder7.build();
        java.lang.String str9 = locale8.toLanguageTag();
        java.lang.String str10 = locale2.getDisplayCountry(locale8);
        java.util.Locale.Builder builder11 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder12 = builder0.clearExtensions();
        java.util.Locale.Builder builder14 = builder0.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder15 = builder0.clear();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "und" + "'", str9, "und");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test05514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05514");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(1645629390019L, dateTimeZone1);
        int[] intArray3 = localDateTime2.getValues();
        org.junit.Assert.assertNotNull(intArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2022, 2, 23, 80812107]");
    }

    @Test
    public void test05515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05515");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.DurationField durationField3 = dateTimeField2.getRangeDurationField();
        long long5 = durationField3.getValueAsLong(2273361897600000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 26312059L + "'", long5 == 26312059L);
    }

    @Test
    public void test05516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05516");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale2 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray4 = strSet3.toArray();
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        boolean boolean7 = strSet3.removeAll((java.util.Collection<java.lang.String>) strSet6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray12 = new org.joda.time.DurationFieldType[] { durationFieldType10, durationFieldType11 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray13 = strSet9.toArray(durationFieldTypeArray12);
        boolean boolean14 = strSet3.containsAll((java.util.Collection<java.lang.String>) strSet9);
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray17 = strSet16.toArray();
        boolean boolean18 = strSet3.addAll((java.util.Collection<java.lang.String>) strSet16);
        boolean boolean19 = strSet1.retainAll((java.util.Collection<java.lang.String>) strSet3);
        java.util.Spliterator<java.lang.String> strSpliterator20 = strSet1.spliterator();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder21.addUnicodeLocaleAttribute("und");
        java.util.Locale locale24 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale25 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str26 = locale24.getDisplayCountry(locale25);
        java.lang.String str27 = locale25.getDisplayName();
        java.util.Locale.Builder builder28 = builder23.setLocale(locale25);
        java.util.Locale.Builder builder30 = builder23.setScript("");
        java.util.Locale locale31 = builder23.build();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType39.getField(chronology40);
        long long43 = dateTimeField41.roundFloor((long) (-1));
        java.util.Locale.Builder builder44 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder46 = builder44.addUnicodeLocaleAttribute("und");
        java.util.Locale locale47 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale48 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str49 = locale47.getDisplayCountry(locale48);
        java.lang.String str50 = locale48.getDisplayName();
        java.util.Locale.Builder builder51 = builder46.setLocale(locale48);
        int int52 = dateTimeField41.getMaximumShortTextLength(locale48);
        java.lang.String str53 = dateTimeField37.getAsShortText((long) 'a', locale48);
        java.lang.String str54 = locale31.getDisplayLanguage(locale48);
        java.util.Set<java.lang.String> strSet55 = locale31.getUnicodeLocaleKeys();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType56.getField(chronology57);
        java.util.Locale locale60 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale61 = locale60.stripExtensions();
        java.lang.String str62 = dateTimeField58.getAsShortText(100, locale61);
        int int64 = dateTimeField58.getLeapAmount((long) (short) 100);
        org.joda.time.DurationField durationField65 = dateTimeField58.getRangeDurationField();
        boolean boolean66 = dateTimeField58.isLenient();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = dateTimeField58.getType();
        boolean boolean68 = strSet55.contains((java.lang.Object) dateTimeFieldType67);
        boolean boolean69 = strSet1.removeAll((java.util.Collection<java.lang.String>) strSet55);
        strSet1.clear();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = strSet1.add("26401112");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(durationFieldTypeArray12);
        org.junit.Assert.assertNotNull(durationFieldTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSpliterator20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Canada" + "'", str26, "Canada");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Franz\366sisch (Kanada)" + "'", str27, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeField41);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-22088L) + "'", long43 == (-22088L));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Canada" + "'", str49, "Canada");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Franz\366sisch (Kanada)" + "'", str50, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "97" + "'", str53, "97");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "fran\347ais" + "'", str54, "fran\347ais");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "100" + "'", str62, "100");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test05517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05517");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale7.getISO3Language();
        java.lang.String str9 = property4.getAsShortText(locale7);
        org.joda.time.DurationField durationField10 = property4.getDurationField();
        long long13 = durationField10.add((long) 1, 10);
        int int15 = durationField10.getValue((long) 0);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str18 = dateTimeZone16.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.ReadableInstant readableInstant21 = null;
        long long22 = property20.getDifferenceAsLong(readableInstant21);
        int int23 = property20.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime24 = property20.roundHalfEvenCopy();
        org.joda.time.DurationField durationField25 = property20.getRangeDurationField();
        int int26 = durationField10.compareTo(durationField25);
        long long28 = durationField25.getMillis(0L);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.millisOfDay();
        org.joda.time.DurationField durationField36 = chronology31.hours();
        boolean boolean37 = durationField36.isSupported();
        long long40 = durationField36.add((-27399730L), 19043L);
        int int41 = durationField25.compareTo(durationField36);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 25822088L + "'", long6 == 25822088L);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "52299974" + "'", str9, "52299974");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 11L + "'", long13 == 11L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+07:10:22.088" + "'", str18, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 25822088L + "'", long22 == 25822088L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 86399999 + "'", int23 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 68527400270L + "'", long40 == 68527400270L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test05518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05518");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = property4.addToCopy(0L);
        java.lang.String str9 = property4.getAsString();
        org.joda.time.LocalDateTime localDateTime10 = property4.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime11 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime13 = property4.addToCopy(1645629357222L);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        long long18 = dateTimeField16.roundFloor((long) (-1));
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder19.addUnicodeLocaleAttribute("und");
        java.util.Locale locale22 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str24 = locale22.getDisplayCountry(locale23);
        java.lang.String str25 = locale23.getDisplayName();
        java.util.Locale.Builder builder26 = builder21.setLocale(locale23);
        int int27 = dateTimeField16.getMaximumShortTextLength(locale23);
        int int29 = dateTimeField16.getMaximumValue(1645629352137L);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str33 = dateTimeZone31.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.millisOfDay();
        java.lang.String str36 = property35.getName();
        int int37 = property35.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property35.getFieldType();
        org.joda.time.LocalDateTime localDateTime39 = property35.roundFloorCopy();
        java.util.Locale locale40 = java.util.Locale.US;
        java.lang.String str41 = property35.getAsShortText(locale40);
        java.lang.String str42 = dateTimeField16.getAsText((int) (short) -1, locale40);
        java.util.Locale.setDefault(locale40);
        int int44 = property4.getMaximumShortTextLength(locale40);
        org.joda.time.LocalDateTime localDateTime45 = property4.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str48 = dateTimeZone46.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.millisOfDay();
        java.lang.String str51 = property50.getName();
        org.joda.time.LocalDateTime localDateTime52 = property50.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean54 = localDateTime52.isSupported(dateTimeFieldType53);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str57 = dateTimeZone55.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now(dateTimeZone55);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.centuries();
        boolean boolean61 = localDateTime58.equals((java.lang.Object) durationFieldType60);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray62 = localDateTime58.getFieldTypes();
        java.lang.String str63 = localDateTime58.toString();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime58.plusMillis(22);
        boolean boolean66 = localDateTime52.isBefore((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.plus(readableDuration67);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.LocalDateTime localDateTime71 = localDateTime68.withDurationAdded(readableDuration69, 26169);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.LocalDateTime localDateTime73 = localDateTime68.plus(readablePeriod72);
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.era();
        int int75 = localDateTime45.compareTo((org.joda.time.ReadablePartial) localDateTime73);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "52300027" + "'", str9, "52300027");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-22088L) + "'", long18 == (-22088L));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Canada" + "'", str24, "Canada");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Franz\366sisch (Kanada)" + "'", str25, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1439 + "'", int29 == 1439);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+07:10:22.088" + "'", str33, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "millisOfDay" + "'", str36, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 86399999 + "'", int37 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "52300027" + "'", str41, "52300027");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-1" + "'", str42, "-1");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+07:10:22.088" + "'", str48, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "millisOfDay" + "'", str51, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+07:10:22.088" + "'", str57, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray62);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2022-02-22T14:31:40.027" + "'", str63, "2022-02-22T14:31:40.027");
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
    }

    @Test
    public void test05519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05519");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.hours();
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, (int) '#');
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str18 = dateTimeZone16.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.centuries();
        boolean boolean22 = localDateTime19.equals((java.lang.Object) durationFieldType21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime19.getFieldTypes();
        java.lang.String str24 = localDateTime19.toString();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean28 = localDateTime19.isSupported(dateTimeFieldType27);
        int int29 = localDateTime15.indexOf(dateTimeFieldType27);
        int[] intArray31 = chronology2.get((org.joda.time.ReadablePartial) localDateTime15, 1645629358650L);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime15.plusWeeks(26149500);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withMillisOfSecond((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.dayOfWeek();
        org.joda.time.Interval interval37 = property36.toInterval();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.lang.String str40 = locale38.getLanguage();
        java.lang.String str41 = locale38.toLanguageTag();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.hours();
        java.lang.String str46 = chronology44.toString();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.clockhourOfDay();
        int int49 = dateTimeField47.get(1645629354990L);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str52 = dateTimeZone50.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(dateTimeZone50);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.centuries();
        boolean boolean56 = localDateTime53.equals((java.lang.Object) durationFieldType55);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = localDateTime53.getFieldTypes();
        java.lang.String str58 = localDateTime53.toString();
        java.util.Locale locale59 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str60 = dateTimeField47.getAsText((org.joda.time.ReadablePartial) localDateTime53, locale59);
        java.lang.String str61 = locale59.getDisplayVariant();
        java.lang.String str62 = locale59.getDisplayVariant();
        java.lang.String str63 = locale38.getDisplayScript(locale59);
        int int64 = property36.getMaximumShortTextLength(locale59);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+07:10:22.088" + "'", str18, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T14:31:40.056" + "'", str24, "2022-02-22T14:31:40.056");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2022, 2, 23, 54958650]");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "und" + "'", str41, "und");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ISOChronology[UTC]" + "'", str46, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 15 + "'", int49 == 15);
        org.junit.Assert.assertNotNull(dateTimeZone50);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+07:10:22.088" + "'", str52, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022-02-22T14:31:40.056" + "'", str58, "2022-02-22T14:31:40.056");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "14" + "'", str60, "14");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
    }

    @Test
    public void test05520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05520");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(strSet1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Englisch" + "'", str2, "Englisch");
    }

    @Test
    public void test05521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05521");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime3.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str10 = dateTimeZone8.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.secondOfMinute();
        boolean boolean22 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime3.withYear(32);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfMonth();
        int[] intArray26 = localDateTime24.getValues();
        int int27 = localDateTime24.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+07:10:22.088" + "'", str10, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(intArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, 2, 22, 52300139]");
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 31 + "'", int27 == 31);
    }

    @Test
    public void test05522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05522");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-22T07:20:59.795");
        java.lang.String str2 = locale1.getLanguage();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test05523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05523");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.lang.String str2 = locale1.getDisplayName();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test05524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05524");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        java.lang.String str1 = durationFieldType0.getName();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        org.joda.time.DurationField durationField6 = chronology4.centuries();
        org.joda.time.DurationField durationField7 = chronology4.hours();
        org.joda.time.DurationField durationField8 = chronology4.seconds();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.secondOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.minuteOfDay();
        org.joda.time.DurationField durationField11 = durationFieldType0.getField(chronology4);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str14 = dateTimeZone12.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        java.lang.String str17 = property16.getName();
        org.joda.time.LocalDateTime localDateTime18 = property16.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusHours(0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusMonths(22);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withCenturyOfEra(3);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.minus(readableDuration25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        java.util.Locale locale31 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale32 = locale31.stripExtensions();
        java.lang.String str33 = dateTimeField29.getAsShortText(100, locale32);
        int int35 = dateTimeField29.getLeapAmount((long) (short) 100);
        java.lang.String str36 = dateTimeField29.getName();
        long long39 = dateTimeField29.add((long) (short) 1, 0);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str42 = dateTimeZone40.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(dateTimeZone40);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.millisOfDay();
        org.joda.time.ReadableInstant readableInstant45 = null;
        long long46 = property44.getDifferenceAsLong(readableInstant45);
        org.joda.time.DurationField durationField47 = property44.getLeapDurationField();
        java.lang.String str48 = property44.getAsString();
        org.joda.time.LocalDateTime localDateTime49 = property44.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.weekyears();
        boolean boolean56 = dateTimeFieldType51.isSupported(chronology54);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        java.lang.String str58 = localDateTime57.toString();
        int int59 = localDateTime57.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.minusMonths(2);
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str65 = dateTimeZone63.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now(dateTimeZone63);
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.millisOfDay();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime66.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime66.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = localDateTime71.toDateTime(readableInstant72);
        long long74 = dateTime73.getMillis();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str77 = dateTimeZone75.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.now(dateTimeZone75);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = localDateTime78.getFieldType((int) (short) 0);
        boolean boolean81 = dateTime73.isSupported(dateTimeFieldType80);
        org.joda.time.DateTime dateTime82 = localDateTime61.toDateTime((org.joda.time.ReadableInstant) dateTime73);
        int[] intArray84 = chronology54.get((org.joda.time.ReadablePartial) localDateTime61, 11L);
        int[] intArray86 = dateTimeField29.add((org.joda.time.ReadablePartial) localDateTime49, (int) (short) 10, intArray84, (int) (byte) 0);
        chronology4.validate((org.joda.time.ReadablePartial) localDateTime22, intArray86);
        org.joda.time.DurationField durationField88 = chronology4.weeks();
        long long91 = durationField88.add(1645629554906L, 26368704);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "minutes" + "'", str1, "minutes");
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+07:10:22.088" + "'", str14, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "millisOfDay" + "'", str17, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "100" + "'", str33, "100");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "minuteOfDay" + "'", str36, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+07:10:22.088" + "'", str42, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 25822088L + "'", long46 == 25822088L);
        org.junit.Assert.assertNull(durationField47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "52300219" + "'", str48, "52300219");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022-02-22T14:31:40.219" + "'", str58, "2022-02-22T14:31:40.219");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 20 + "'", int59 == 20);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+07:10:22.088" + "'", str65, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1645629678131L + "'", long74 == 1645629678131L);
        org.junit.Assert.assertNotNull(dateTimeZone75);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+07:10:22.088" + "'", str77, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 15949437808754906L + "'", long91 == 15949437808754906L);
    }

    @Test
    public void test05525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05525");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        boolean boolean7 = dateTimeZone0.equals((java.lang.Object) (short) 100);
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = dateTimeZone0.getShortName((long) (-1), locale9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withField(dateTimeFieldType12, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.weekyears();
        org.joda.time.DurationField durationField19 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.minuteOfDay();
        long long24 = chronology17.add((long) 2, (long) 21, (int) '4');
        boolean boolean25 = dateTimeFieldType12.isSupported(chronology17);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str28 = dateTimeZone26.getShortName((long) (short) 10);
        long long30 = dateTimeZone26.convertUTCToLocal((long) ' ');
        java.lang.String str31 = dateTimeZone26.toString();
        long long33 = dateTimeZone26.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.Chronology chronology35 = chronology17.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfDay();
        java.util.Locale locale37 = java.util.Locale.GERMANY;
        java.lang.String str38 = locale37.getCountry();
        java.lang.String str39 = locale37.toLanguageTag();
        int int40 = dateTimeField36.getMaximumShortTextLength(locale37);
        java.lang.String str41 = locale37.getLanguage();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 25822120L + "'", long4 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+07:10:22.088" + "'", str5, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+07:10:22.088" + "'", str10, "+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1094L + "'", long24 == 1094L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+07:10:22.088" + "'", str28, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 25822120L + "'", long30 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+07:10:22.088" + "'", str31, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 32L + "'", long33 == 32L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "DE" + "'", str38, "DE");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "de-DE" + "'", str39, "de-DE");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "de" + "'", str41, "de");
    }

    @Test
    public void test05526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05526");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("1970-01-01T00:00:00.100");
        java.util.Locale locale4 = new java.util.Locale("26166632", "era");
        java.lang.String str5 = locale4.getDisplayCountry();
        java.lang.String str6 = locale1.getDisplayCountry(locale4);
        java.lang.String str7 = locale1.toLanguageTag();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.weekyears();
        org.joda.time.DurationField durationField13 = chronology11.centuries();
        org.joda.time.DurationField durationField14 = chronology11.minutes();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology11);
        boolean boolean16 = dateTimeFieldType8.isSupported(chronology11);
        org.joda.time.DateTimeZone dateTimeZone17 = chronology11.getZone();
        org.joda.time.DateTimeField dateTimeField18 = chronology11.weekyear();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.lang.String str21 = locale20.getScript();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        long long26 = dateTimeField24.roundFloor((long) (-1));
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder27.addUnicodeLocaleAttribute("und");
        java.util.Locale locale30 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale31 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str32 = locale30.getDisplayCountry(locale31);
        java.lang.String str33 = locale31.getDisplayName();
        java.util.Locale.Builder builder34 = builder29.setLocale(locale31);
        int int35 = dateTimeField24.getMaximumShortTextLength(locale31);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str38 = dateTimeZone36.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfDay();
        org.joda.time.ReadableInstant readableInstant41 = null;
        long long42 = property40.getDifferenceAsLong(readableInstant41);
        org.joda.time.DurationField durationField43 = property40.getLeapDurationField();
        java.lang.String str44 = property40.getAsString();
        org.joda.time.LocalDateTime localDateTime45 = property40.roundFloorCopy();
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet48 = locale46.getUnicodeLocaleAttributes();
        java.lang.String str49 = dateTimeField24.getAsShortText((org.joda.time.ReadablePartial) localDateTime45, locale46);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str56 = dateTimeZone54.getShortName((long) (short) 10);
        long long58 = dateTimeZone54.convertUTCToLocal((long) ' ');
        java.lang.String str59 = dateTimeZone54.toString();
        boolean boolean61 = dateTimeZone54.equals((java.lang.Object) (short) 100);
        java.util.Locale locale63 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str64 = dateTimeZone54.getShortName((long) (-1), locale63);
        int int65 = dateTimeField53.getMaximumShortTextLength(locale63);
        java.util.Locale locale67 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale68 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str69 = locale67.getDisplayCountry(locale68);
        java.util.Locale locale70 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale71 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str72 = locale70.getDisplayCountry(locale71);
        java.lang.String str73 = locale67.getDisplayVariant(locale70);
        java.util.Locale locale74 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale75 = locale74.stripExtensions();
        java.lang.String str76 = locale67.getDisplayLanguage(locale75);
        java.lang.String str77 = dateTimeField53.getAsText(0, locale75);
        int int78 = dateTimeField24.getMaximumShortTextLength(locale75);
        java.lang.String str79 = locale20.getDisplayLanguage(locale75);
        java.lang.String str80 = dateTimeField18.getAsText((int) (byte) 0, locale75);
        java.util.Set<java.lang.String> strSet81 = locale75.getUnicodeLocaleAttributes();
        java.lang.String str82 = locale75.getDisplayLanguage();
        java.lang.String str83 = locale1.getDisplayName(locale75);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals(locale4.toString(), "26166632_ERA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ERA" + "'", str5, "ERA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "und" + "'", str7, "und");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-22088L) + "'", long26 == (-22088L));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Canada" + "'", str32, "Canada");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Franz\366sisch (Kanada)" + "'", str33, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+07:10:22.088" + "'", str38, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 25822088L + "'", long42 == 25822088L);
        org.junit.Assert.assertNull(durationField43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "52300278" + "'", str44, "52300278");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(strSet48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "871" + "'", str49, "871");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+07:10:22.088" + "'", str56, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 25822120L + "'", long58 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+07:10:22.088" + "'", str59, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+07:10:22.088" + "'", str64, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Canada" + "'", str69, "Canada");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Canada" + "'", str72, "Canada");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "fran\347ais" + "'", str76, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "AM" + "'", str77, "AM");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 4 + "'", int78 == 4);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "0" + "'", str80, "0");
        org.junit.Assert.assertNotNull(strSet81);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Franz\366sisch" + "'", str82, "Franz\366sisch");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
    }

    @Test
    public void test05527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05527");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str6 = dateTimeZone4.getShortName((long) (short) 10);
        long long8 = dateTimeZone4.convertUTCToLocal((long) ' ');
        java.lang.String str9 = dateTimeZone4.toString();
        boolean boolean11 = dateTimeZone4.equals((java.lang.Object) (short) 100);
        java.util.Locale locale13 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str14 = dateTimeZone4.getShortName((long) (-1), locale13);
        long long16 = dateTimeZone0.getMillisKeepLocal(dateTimeZone4, (long) (byte) -1);
        long long19 = dateTimeZone0.adjustOffset((long) 500, true);
        int int21 = dateTimeZone0.getStandardOffset(1645660800000L);
        java.lang.String str23 = dateTimeZone0.getNameKey(1645629453760L);
        long long26 = dateTimeZone0.adjustOffset(439L, false);
        java.lang.String str27 = dateTimeZone0.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+07:10:22.088" + "'", str6, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 25822120L + "'", long8 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+07:10:22.088" + "'", str9, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+07:10:22.088" + "'", str14, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 25822088 + "'", int21 == 25822088);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 439L + "'", long26 == 439L);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+07:10:22.088" + "'", str27, "+07:10:22.088");
    }

    @Test
    public void test05528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05528");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long4 = dateTimeField2.roundFloor((long) (-1));
        boolean boolean5 = dateTimeField2.isLenient();
        long long7 = dateTimeField2.remainder(0L);
        int int9 = dateTimeField2.getMinimumValue((long) (short) 1);
        boolean boolean11 = dateTimeField2.isLeap(1645629515000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-22088L) + "'", long4 == (-22088L));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 22088L + "'", long7 == 22088L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test05529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05529");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(52L);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str4 = dateTimeZone2.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusHours((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime10.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.minusMillis(0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withWeekyear((int) ' ');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime1.minusHours(54976760);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+07:10:22.088" + "'", str4, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test05530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05530");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.lang.String str1 = locale0.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test05531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05531");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.minutes();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.DateTimeField dateTimeField7 = chronology2.hourOfHalfday();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test05532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05532");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str5 = dateTimeZone3.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone3);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(readableInstant12);
        int int14 = dateTimeZone1.getOffset(readableInstant12);
        java.util.TimeZone timeZone15 = dateTimeZone1.toTimeZone();
        java.util.TimeZone.setDefault(timeZone15);
        java.util.TimeZone.setDefault(timeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str20 = dateTimeZone18.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusHours((int) (short) 10);
        int int29 = localDateTime26.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.minusMinutes(0);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime26.plus(readablePeriod32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.dayOfYear();
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.util.Locale locale37 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str38 = locale37.getVariant();
        java.lang.String str39 = locale35.getDisplayScript(locale37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType40.getField(chronology41);
        java.util.Locale.Category category44 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category44, locale45);
        java.lang.String str47 = locale45.toLanguageTag();
        java.lang.String str48 = dateTimeField42.getAsText((long) 26149, locale45);
        java.util.Locale locale49 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleAttributes();
        java.lang.String str52 = locale49.getDisplayCountry(locale50);
        java.lang.String str53 = locale45.getDisplayLanguage(locale50);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.weekyears();
        org.joda.time.DurationField durationField58 = chronology56.centuries();
        org.joda.time.DurationField durationField59 = chronology56.hours();
        org.joda.time.DurationField durationField60 = chronology56.seconds();
        org.joda.time.DateTimeField dateTimeField61 = chronology56.dayOfYear();
        int int63 = dateTimeField61.getLeapAmount(500L);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.lang.String str67 = dateTimeZone65.getNameKey((long) 2);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str71 = dateTimeZone69.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime72 = org.joda.time.LocalDateTime.now(dateTimeZone69);
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.millisOfDay();
        java.lang.String str74 = property73.getName();
        int int75 = property73.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = property73.getFieldType();
        java.util.Locale locale77 = java.util.Locale.getDefault();
        java.lang.String str78 = locale77.getISO3Language();
        java.lang.String str79 = property73.getAsText(locale77);
        java.util.Set<java.lang.String> strSet80 = locale77.getUnicodeLocaleKeys();
        java.lang.String str81 = dateTimeZone65.getName(0L, locale77);
        int int82 = dateTimeField61.getMaximumShortTextLength(locale77);
        java.lang.String str83 = locale45.getDisplayScript(locale77);
        java.lang.String str84 = locale37.getDisplayName(locale77);
        java.lang.String str85 = property34.getAsShortText(locale77);
        java.util.Locale locale86 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale87 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet88 = locale87.getUnicodeLocaleAttributes();
        java.lang.String str89 = locale86.getDisplayCountry(locale87);
        java.util.Locale locale90 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet91 = locale90.getUnicodeLocaleAttributes();
        java.util.Locale locale92 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str93 = locale92.getVariant();
        java.lang.String str94 = locale90.getDisplayVariant(locale92);
        java.lang.String str95 = locale86.getDisplayLanguage(locale92);
        java.lang.String str96 = locale86.getCountry();
        java.lang.String str97 = locale77.getDisplayVariant(locale86);
        java.lang.String str98 = timeZone15.getDisplayName(locale86);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+32:00" + "'", str2, "+32:00");
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+07:10:22.088" + "'", str5, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 115200000 + "'", int14 == 115200000);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+07:10:22.088" + "'", str20, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 31 + "'", int29 == 31);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + category44 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category44.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "fr" + "'", str47, "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "430" + "'", str48, "430");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "China" + "'", str52, "China");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "French" + "'", str53, "French");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(dateTimeZone69);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+07:10:22.088" + "'", str71, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "millisOfDay" + "'", str74, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 86399999 + "'", int75 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(locale77);
// flaky:         org.junit.Assert.assertEquals(locale77.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "deu" + "'", str78, "deu");
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "52300384" + "'", str79, "52300384");
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00:00.052" + "'", str81, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 3 + "'", int82 == 3);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Chinesisch (Taiwan)" + "'", str84, "Chinesisch (Taiwan)");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "54" + "'", str85, "54");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "");
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "China" + "'", str89, "China");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "en");
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "\u4e2d\u6587" + "'", str95, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "CN" + "'", str96, "CN");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4" + "'", str98, "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
    }

    @Test
    public void test05533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05533");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime3.getFieldTypes();
        java.lang.String str8 = localDateTime3.toString();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.withField(dateTimeFieldType11, 2);
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType11.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.weekyears();
        boolean boolean22 = dateTimeFieldType17.isSupported(chronology20);
        org.joda.time.DurationField durationField23 = chronology20.centuries();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.year();
        boolean boolean25 = durationFieldType16.isSupported(chronology20);
        org.joda.time.DurationField durationField26 = chronology20.months();
        org.joda.time.DateTimeField dateTimeField27 = chronology20.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str30 = dateTimeZone28.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = property32.addToCopy(500);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withYearOfEra(16);
        int int37 = localDateTime34.getMonthOfYear();
        int int38 = localDateTime34.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.hours();
        java.lang.String str44 = chronology42.toString();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.clockhourOfDay();
        int int47 = dateTimeField45.get(1645629354990L);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str50 = dateTimeZone48.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now(dateTimeZone48);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.centuries();
        boolean boolean54 = localDateTime51.equals((java.lang.Object) durationFieldType53);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = localDateTime51.getFieldTypes();
        java.lang.String str56 = localDateTime51.toString();
        java.util.Locale locale57 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str58 = dateTimeField45.getAsText((org.joda.time.ReadablePartial) localDateTime51, locale57);
        org.joda.time.Chronology chronology59 = localDateTime51.getChronology();
        org.joda.time.DurationField durationField60 = chronology59.centuries();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(1645629478080L, chronology59);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.withDurationAdded(readableDuration62, 55041013);
        boolean boolean65 = localDateTime34.isAfter((org.joda.time.ReadablePartial) localDateTime64);
        int int66 = dateTimeField27.getMinimumValue((org.joda.time.ReadablePartial) localDateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T14:31:40.430" + "'", str8, "2022-02-22T14:31:40.430");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+07:10:22.088" + "'", str30, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ISOChronology[UTC]" + "'", str44, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 15 + "'", int47 == 15);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+07:10:22.088" + "'", str50, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-22T14:31:40.430" + "'", str56, "2022-02-22T14:31:40.430");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "14" + "'", str58, "14");
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test05534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05534");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDateTime8.toDateTime(readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        long long15 = dateTimeZone11.convertUTCToLocal((long) ' ');
        java.lang.String str16 = dateTimeZone11.toString();
        long long18 = dateTimeZone11.previousTransition(32L);
        long long21 = dateTimeZone11.convertLocalToUTC(97L, false);
        boolean boolean22 = dateTime10.equals((java.lang.Object) false);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str25 = dateTimeZone23.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime(readableInstant32);
        long long34 = dateTime33.getMillis();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str37 = dateTimeZone35.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = localDateTime38.getFieldType((int) (short) 0);
        boolean boolean41 = dateTime33.isSupported(dateTimeFieldType40);
        boolean boolean42 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTime33.getZone();
        long long44 = dateTime33.getMillis();
        org.joda.time.Chronology chronology45 = dateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.millisOfDay();
        org.joda.time.DurationField durationField48 = dateTimeField47.getRangeDurationField();
        java.lang.String str49 = durationField48.toString();
        long long52 = durationField48.getDifferenceAsLong(1645629620004L, 1908343029290L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+07:10:22.088" + "'", str13, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 25822120L + "'", long15 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+07:10:22.088" + "'", str16, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-25821991L) + "'", long21 == (-25821991L));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+07:10:22.088" + "'", str25, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645629678390L + "'", long34 == 1645629678390L);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+07:10:22.088" + "'", str37, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645629678390L + "'", long44 == 1645629678390L);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "DurationField[days]" + "'", str49, "DurationField[days]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-3040L) + "'", long52 == (-3040L));
    }

    @Test
    public void test05535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05535");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((-100L), chronology3);
        org.joda.time.DateTimeField dateTimeField7 = chronology3.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = chronology3.getDateTimeMillis(1645629431411L, 26449059, 51, 27427157, 26287632);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26449059 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test05536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05536");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale7.getISO3Language();
        java.lang.String str9 = property4.getAsShortText(locale7);
        org.joda.time.DurationField durationField10 = property4.getDurationField();
        long long13 = durationField10.add((long) 1, 10);
        boolean boolean14 = durationField10.isPrecise();
        int int16 = durationField10.getValue((long) 26149500);
        int int19 = durationField10.getValue((long) (short) 10, 0L);
        long long22 = durationField10.add((long) 'a', (long) (byte) 100);
        int int25 = durationField10.getDifference(1645629509772L, 1645629565854L);
        boolean boolean26 = durationField10.isPrecise();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 25822088L + "'", long6 == 25822088L);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "52300505" + "'", str9, "52300505");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 11L + "'", long13 == 11L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 26149500 + "'", int16 == 26149500);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 197L + "'", long22 == 197L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-56082) + "'", int25 == (-56082));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test05537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05537");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str3 = dateTimeZone1.getShortName((long) (short) 10);
        long long5 = dateTimeZone1.convertUTCToLocal((long) ' ');
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = dateTimeZone1.getName((long) (short) 0, locale7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(1645629356616L, dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDateTime9.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusHours((int) (byte) 0);
        int int13 = localDateTime9.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusSeconds(9);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withCenturyOfEra(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.property(dateTimeFieldType22);
        boolean boolean24 = localDateTime9.isSupported(dateTimeFieldType22);
        java.lang.String str25 = dateTimeFieldType22.toString();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str28 = dateTimeZone26.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(readableInstant35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str39 = dateTimeZone37.getShortName((long) (short) 10);
        long long41 = dateTimeZone37.convertUTCToLocal((long) ' ');
        java.lang.String str42 = dateTimeZone37.toString();
        long long44 = dateTimeZone37.previousTransition(32L);
        long long47 = dateTimeZone37.convertLocalToUTC(97L, false);
        boolean boolean48 = dateTime36.equals((java.lang.Object) false);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str51 = dateTimeZone49.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(dateTimeZone49);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.millisOfDay();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime52.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDateTime57.toDateTime(readableInstant58);
        long long60 = dateTime59.getMillis();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str63 = dateTimeZone61.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now(dateTimeZone61);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = localDateTime64.getFieldType((int) (short) 0);
        boolean boolean67 = dateTime59.isSupported(dateTimeFieldType66);
        boolean boolean68 = dateTime36.isAfter((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean70 = dateTime59.isSupported(dateTimeFieldType69);
        org.joda.time.Chronology chronology71 = dateTime59.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = dateTimeFieldType22.getField(chronology71);
        org.joda.time.DateTimeField dateTimeField73 = chronology71.weekyear();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis((-52));
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime(dateTimeZone75);
        org.joda.time.Chronology chronology77 = chronology71.withZone(dateTimeZone75);
        java.lang.String str79 = dateTimeZone75.getNameKey(1645629676236L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+07:10:22.088" + "'", str3, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 25822120L + "'", long5 == 25822120L);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+07:10:22.088" + "'", str8, "+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 23 + "'", int13 == 23);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "centuryOfEra" + "'", str25, "centuryOfEra");
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+07:10:22.088" + "'", str28, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+07:10:22.088" + "'", str39, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 25822120L + "'", long41 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+07:10:22.088" + "'", str42, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 32L + "'", long44 == 32L);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-25821991L) + "'", long47 == (-25821991L));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+07:10:22.088" + "'", str51, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1645629678464L + "'", long60 == 1645629678464L);
        org.junit.Assert.assertNotNull(dateTimeZone61);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+07:10:22.088" + "'", str63, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNull(str79);
    }

    @Test
    public void test05538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05538");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        boolean boolean7 = dateTimeZone0.equals((java.lang.Object) (short) 100);
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = dateTimeZone0.getShortName((long) (-1), locale9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withField(dateTimeFieldType12, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.weekyears();
        org.joda.time.DurationField durationField19 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.minuteOfDay();
        long long24 = chronology17.add((long) 2, (long) 21, (int) '4');
        boolean boolean25 = dateTimeFieldType12.isSupported(chronology17);
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField27 = chronology17.halfdays();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str30 = dateTimeZone28.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusHours((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = localDateTime36.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.minusMillis(0);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withWeekyear(1970);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusDays(15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = localDateTime43.toString(dateTimeFormatter46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.withHourOfDay(15);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusMillis(1645629378);
        long long53 = chronology17.set((org.joda.time.ReadablePartial) localDateTime49, 1645629417380L);
        org.joda.time.LocalDateTime.Property property54 = localDateTime49.hourOfDay();
        org.joda.time.DurationField durationField55 = property54.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 25822120L + "'", long4 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+07:10:22.088" + "'", str5, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+07:10:22.088" + "'", str10, "+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1094L + "'", long24 == 1094L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+07:10:22.088" + "'", str30, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-02-18T22:31:40.577" + "'", str47, "1970-02-18T22:31:40.577");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 4203100577L + "'", long53 == 4203100577L);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(durationField55);
    }

    @Test
    public void test05539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05539");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.DurationField durationField6 = chronology3.hours();
        boolean boolean7 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField8 = chronology3.weekyears();
        org.joda.time.DurationField durationField9 = chronology3.hours();
        java.lang.String str10 = durationField9.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DurationField[hours]" + "'", str10, "DurationField[hours]");
    }

    @Test
    public void test05540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05540");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DateTimeField dateTimeField7 = chronology3.halfdayOfDay();
        int int10 = dateTimeField7.getDifference(11L, 0L);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        java.lang.String str12 = localDateTime11.toString();
        int int13 = localDateTime11.getCenturyOfEra();
        int int14 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.minusMillis((-115200000));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((java.lang.Object) (-115200000));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T14:31:40.653" + "'", str12, "2022-02-22T14:31:40.653");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20 + "'", int13 == 20);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test05541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05541");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        java.lang.String str7 = chronology5.toString();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.clockhourOfDay();
        int int10 = dateTimeField8.get(1645629354990L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.centuries();
        boolean boolean17 = localDateTime14.equals((java.lang.Object) durationFieldType16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = localDateTime14.getFieldTypes();
        java.lang.String str19 = localDateTime14.toString();
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str21 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDateTime14, locale20);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str25 = dateTimeZone23.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        java.lang.String str28 = property27.getName();
        int int29 = property27.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property27.getFieldType();
        org.joda.time.LocalDateTime localDateTime31 = property27.roundFloorCopy();
        java.util.Locale locale32 = java.util.Locale.US;
        java.lang.String str33 = property27.getAsShortText(locale32);
        java.lang.String str34 = dateTimeField8.getAsShortText((long) (byte) 0, locale32);
        java.util.Locale.Builder builder35 = builder0.setLocale(locale32);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder37 = builder35.setVariant("0100-02-22T07:17:09.290");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 0100-02-22T07:17:09.290 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[UTC]" + "'", str7, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+07:10:22.088" + "'", str13, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T14:31:40.689" + "'", str19, "2022-02-22T14:31:40.689");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "14" + "'", str21, "14");
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+07:10:22.088" + "'", str25, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "millisOfDay" + "'", str28, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 86399999 + "'", int29 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "52300689" + "'", str33, "52300689");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "24" + "'", str34, "24");
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test05542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05542");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        java.lang.String str14 = localDateTime13.toString();
        boolean boolean15 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray18 = strSet17.toArray();
        boolean boolean19 = strSet17.isEmpty();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray22 = strSet21.toArray();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        boolean boolean25 = strSet21.removeAll((java.util.Collection<java.lang.String>) strSet24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray30 = new org.joda.time.DurationFieldType[] { durationFieldType28, durationFieldType29 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray31 = strSet27.toArray(durationFieldTypeArray30);
        boolean boolean32 = strSet21.containsAll((java.util.Collection<java.lang.String>) strSet27);
        java.lang.Object[] objArray33 = strSet27.toArray();
        boolean boolean34 = strSet17.removeAll((java.util.Collection<java.lang.String>) strSet27);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray37 = strSet36.toArray();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        boolean boolean40 = strSet36.removeAll((java.util.Collection<java.lang.String>) strSet39);
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray45 = new org.joda.time.DurationFieldType[] { durationFieldType43, durationFieldType44 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray46 = strSet42.toArray(durationFieldTypeArray45);
        boolean boolean47 = strSet36.containsAll((java.util.Collection<java.lang.String>) strSet42);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray50 = strSet49.toArray();
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        boolean boolean53 = strSet49.removeAll((java.util.Collection<java.lang.String>) strSet52);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray58 = new org.joda.time.DurationFieldType[] { durationFieldType56, durationFieldType57 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray59 = strSet55.toArray(durationFieldTypeArray58);
        boolean boolean60 = strSet49.containsAll((java.util.Collection<java.lang.String>) strSet55);
        java.lang.Object[] objArray61 = strSet55.toArray();
        boolean boolean62 = strSet36.retainAll((java.util.Collection<java.lang.String>) strSet55);
        boolean boolean63 = strSet27.addAll((java.util.Collection<java.lang.String>) strSet55);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean65 = strSet55.remove((java.lang.Object) dateTimeFieldType64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime3.property(dateTimeFieldType64);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology70 = localDateTime69.getChronology();
        org.joda.time.DurationField durationField71 = chronology70.weekyears();
        org.joda.time.DurationField durationField72 = chronology70.centuries();
        org.joda.time.DurationField durationField73 = durationFieldType67.getField(chronology70);
        boolean boolean74 = dateTimeFieldType64.isSupported(chronology70);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str77 = dateTimeZone75.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.now(dateTimeZone75);
        org.joda.time.LocalDateTime.Property property79 = localDateTime78.millisOfDay();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime78.plusMonths((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.plus(readablePeriod82);
        long long85 = chronology70.set((org.joda.time.ReadablePartial) localDateTime83, 864000010L);
        org.joda.time.DurationField durationField86 = chronology70.halfdays();
        org.joda.time.DateTimeField dateTimeField87 = chronology70.minuteOfDay();
        org.joda.time.DurationField durationField88 = chronology70.minutes();
        org.joda.time.DateTimeField dateTimeField89 = chronology70.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long93 = chronology70.add(1645629484801L, 1640157581621L, 27425804);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1640157581621 * 27425804");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+07:10:22.088" + "'", str9, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0100-02-22T14:31:40.704" + "'", str14, "0100-02-22T14:31:40.704");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(durationFieldTypeArray30);
        org.junit.Assert.assertNotNull(durationFieldTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(durationFieldTypeArray45);
        org.junit.Assert.assertNotNull(durationFieldTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(durationFieldTypeArray58);
        org.junit.Assert.assertNotNull(durationFieldTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTimeZone75);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+07:10:22.088" + "'", str77, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
// flaky:         org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1908369100704L + "'", long85 == 1908369100704L);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
    }

    @Test
    public void test05543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05543");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DurationField durationField5 = durationFieldType0.getField(chronology3);
        org.joda.time.DateTimeField dateTimeField6 = chronology3.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(2022);
        int int17 = localDateTime13.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.weekyears();
        org.joda.time.DurationField durationField23 = chronology21.centuries();
        org.joda.time.DurationField durationField24 = chronology21.minutes();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withDurationAdded(readableDuration26, (int) '#');
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.weekyear();
        java.lang.String str30 = property29.getAsString();
        org.joda.time.LocalDateTime localDateTime32 = property29.setCopy(67);
        org.joda.time.LocalDateTime localDateTime33 = property29.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.dayOfWeek();
        int[] intArray36 = chronology21.get((org.joda.time.ReadablePartial) localDateTime33, 1645629356L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray38 = dateTimeField6.addWrapField((org.joda.time.ReadablePartial) localDateTime13, 26462, intArray36, 2030);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26462");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+07:10:22.088" + "'", str9, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022" + "'", str30, "2022");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1970, 1, 20, 4029356]");
    }

    @Test
    public void test05544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05544");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        int int7 = property4.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str10 = dateTimeZone8.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime(readableInstant17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str21 = dateTimeZone19.getShortName((long) (short) 10);
        long long23 = dateTimeZone19.convertUTCToLocal((long) ' ');
        java.lang.String str24 = dateTimeZone19.toString();
        long long26 = dateTimeZone19.previousTransition(32L);
        long long29 = dateTimeZone19.convertLocalToUTC(97L, false);
        boolean boolean30 = dateTime18.equals((java.lang.Object) false);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str33 = dateTimeZone31.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.millisOfDay();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDateTime39.toDateTime(readableInstant40);
        long long42 = dateTime41.getMillis();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str45 = dateTimeZone43.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = localDateTime46.getFieldType((int) (short) 0);
        boolean boolean49 = dateTime41.isSupported(dateTimeFieldType48);
        boolean boolean50 = dateTime18.isAfter((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str53 = dateTimeZone51.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now(dateTimeZone51);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.millisOfDay();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime54.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localDateTime59.toDateTime(readableInstant60);
        long long62 = dateTime61.getMillis();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str65 = dateTimeZone63.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now(dateTimeZone63);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = localDateTime66.getFieldType((int) (short) 0);
        boolean boolean69 = dateTime61.isSupported(dateTimeFieldType68);
        boolean boolean70 = dateTime18.isAfter((org.joda.time.ReadableInstant) dateTime61);
        int int71 = property4.compareTo((org.joda.time.ReadableInstant) dateTime18);
        java.lang.String str72 = property4.getAsShortText();
        org.joda.time.LocalDateTime localDateTime73 = property4.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime74 = property4.roundHalfFloorCopy();
        int int75 = localDateTime74.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime74.plusMinutes(26385);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 25822088L + "'", long6 == 25822088L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 86399999 + "'", int7 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+07:10:22.088" + "'", str10, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+07:10:22.088" + "'", str21, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 25822120L + "'", long23 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+07:10:22.088" + "'", str24, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 32L + "'", long26 == 32L);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-25821991L) + "'", long29 == (-25821991L));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+07:10:22.088" + "'", str33, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1645629678666L + "'", long42 == 1645629678666L);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+07:10:22.088" + "'", str45, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+07:10:22.088" + "'", str53, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
// flaky:         org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1645629678666L + "'", long62 == 1645629678666L);
        org.junit.Assert.assertNotNull(dateTimeZone63);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+07:10:22.088" + "'", str65, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "52300754" + "'", str72, "52300754");
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(localDateTime77);
    }

    @Test
    public void test05545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05545");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        int int6 = property4.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property4.getFieldType();
        org.joda.time.LocalDateTime localDateTime8 = property4.withMinimumValue();
        long long9 = property4.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property4.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 86399999 + "'", int6 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test05546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05546");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        boolean boolean7 = dateTimeZone0.equals((java.lang.Object) (short) 100);
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = dateTimeZone0.getShortName((long) (-1), locale9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone0);
        java.lang.String str13 = dateTimeZone0.getName((long) 26149);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getShortName((long) (short) 10);
        long long18 = dateTimeZone14.convertUTCToLocal((long) ' ');
        java.lang.String str19 = dateTimeZone14.toString();
        long long21 = dateTimeZone14.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone14);
        long long24 = dateTimeZone0.getMillisKeepLocal(dateTimeZone14, 0L);
        long long26 = dateTimeZone0.previousTransition(2022L);
        boolean boolean27 = dateTimeZone0.isFixed();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.weekyears();
        boolean boolean35 = dateTimeFieldType30.isSupported(chronology33);
        org.joda.time.DurationField durationField36 = chronology33.centuries();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (byte) 1, chronology33);
        org.joda.time.DateTimeField dateTimeField38 = chronology33.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.weekyears();
        org.joda.time.DurationField durationField43 = chronology41.centuries();
        org.joda.time.DurationField durationField44 = chronology41.hours();
        org.joda.time.DurationField durationField45 = chronology41.seconds();
        org.joda.time.DateTimeField dateTimeField46 = chronology41.dayOfYear();
        int int48 = dateTimeField46.getLeapAmount(500L);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.lang.String str52 = dateTimeZone50.getNameKey((long) 2);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str56 = dateTimeZone54.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(dateTimeZone54);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.millisOfDay();
        java.lang.String str59 = property58.getName();
        int int60 = property58.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property58.getFieldType();
        java.util.Locale locale62 = java.util.Locale.getDefault();
        java.lang.String str63 = locale62.getISO3Language();
        java.lang.String str64 = property58.getAsText(locale62);
        java.util.Set<java.lang.String> strSet65 = locale62.getUnicodeLocaleKeys();
        java.lang.String str66 = dateTimeZone50.getName(0L, locale62);
        int int67 = dateTimeField46.getMaximumShortTextLength(locale62);
        int int68 = dateTimeField38.getMaximumTextLength(locale62);
        java.util.Locale locale69 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet70 = locale69.getUnicodeLocaleAttributes();
        java.lang.String str71 = locale62.getDisplayVariant(locale69);
        java.lang.String str72 = dateTimeZone0.getName((long) 26428, locale62);
        boolean boolean74 = dateTimeZone0.equals((java.lang.Object) "26153615");
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 25822120L + "'", long4 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+07:10:22.088" + "'", str5, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+07:10:22.088" + "'", str10, "+07:10:22.088");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+07:10:22.088" + "'", str13, "+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+07:10:22.088" + "'", str16, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 25822120L + "'", long18 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+07:10:22.088" + "'", str19, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 32L + "'", long21 == 32L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 2022L + "'", long26 == 2022L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+07:10:22.088" + "'", str56, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "millisOfDay" + "'", str59, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 86399999 + "'", int60 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(locale62);
// flaky:         org.junit.Assert.assertEquals(locale62.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "deu" + "'", str63, "deu");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "52300826" + "'", str64, "52300826");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00:00.052" + "'", str66, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+07:10:22.088" + "'", str72, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test05547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05547");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("26381906");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=26381906");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05548");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        int int11 = localDateTime8.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minusMinutes(0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis(2022);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusMillis(56);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plus(readablePeriod18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.withYearOfCentury(74);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 31 + "'", int11 == 31);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test05549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05549");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.seconds();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str7 = dateTimeZone5.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType19.getField(chronology20);
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale24 = locale23.stripExtensions();
        java.lang.String str25 = dateTimeField21.getAsShortText(100, locale24);
        int int27 = dateTimeField21.getLeapAmount((long) (short) 100);
        java.lang.String str28 = dateTimeField21.getName();
        long long31 = dateTimeField21.add((long) (short) 1, 0);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str34 = dateTimeZone32.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        org.joda.time.ReadableInstant readableInstant37 = null;
        long long38 = property36.getDifferenceAsLong(readableInstant37);
        org.joda.time.DurationField durationField39 = property36.getLeapDurationField();
        java.lang.String str40 = property36.getAsString();
        org.joda.time.LocalDateTime localDateTime41 = property36.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.weekyears();
        boolean boolean48 = dateTimeFieldType43.isSupported(chronology46);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        java.lang.String str50 = localDateTime49.toString();
        int int51 = localDateTime49.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.minusMonths(2);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str57 = dateTimeZone55.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now(dateTimeZone55);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.millisOfDay();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime58.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localDateTime63.toDateTime(readableInstant64);
        long long66 = dateTime65.getMillis();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str69 = dateTimeZone67.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime70 = org.joda.time.LocalDateTime.now(dateTimeZone67);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = localDateTime70.getFieldType((int) (short) 0);
        boolean boolean73 = dateTime65.isSupported(dateTimeFieldType72);
        org.joda.time.DateTime dateTime74 = localDateTime53.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        int[] intArray76 = chronology46.get((org.joda.time.ReadablePartial) localDateTime53, 11L);
        int[] intArray78 = dateTimeField21.add((org.joda.time.ReadablePartial) localDateTime41, (int) (short) 10, intArray76, (int) (byte) 0);
        chronology2.validate((org.joda.time.ReadablePartial) localDateTime17, intArray76);
        org.joda.time.LocalDateTime localDateTime80 = org.joda.time.LocalDateTime.now(chronology2);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+07:10:22.088" + "'", str7, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "100" + "'", str25, "100");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "minuteOfDay" + "'", str28, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+07:10:22.088" + "'", str34, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 25822088L + "'", long38 == 25822088L);
        org.junit.Assert.assertNull(durationField39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "52300916" + "'", str40, "52300916");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-22T14:31:40.916" + "'", str50, "2022-02-22T14:31:40.916");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 20 + "'", int51 == 20);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+07:10:22.088" + "'", str57, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1645629678828L + "'", long66 == 1645629678828L);
        org.junit.Assert.assertNotNull(dateTimeZone67);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+07:10:22.088" + "'", str69, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(localDateTime80);
    }

    @Test
    public void test05550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05550");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DurationField durationField8 = chronology3.months();
        org.joda.time.DurationField durationField9 = chronology3.days();
        long long12 = durationField9.add(1645629665073L, (long) 26206);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3909828065073L + "'", long12 == 3909828065073L);
    }

    @Test
    public void test05551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05551");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        int int5 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekOfWeekyear((int) (byte) 1);
        int int8 = localDateTime0.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.plusDays(500);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        java.lang.String str12 = durationFieldType11.toString();
        boolean boolean13 = localDateTime10.isSupported(durationFieldType11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.weekyears();
        boolean boolean19 = dateTimeFieldType14.isSupported(chronology17);
        org.joda.time.DurationField durationField20 = durationFieldType11.getField(chronology17);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = chronology17.add(readablePeriod21, (long) 27427155, (int) (byte) 0);
        org.joda.time.DurationField durationField25 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekyearOfCentury();
        org.joda.time.DurationField durationField27 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology17.dayOfYear();
        java.lang.String str30 = dateTimeField29.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 14 + "'", int8 == 14);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "days" + "'", str12, "days");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 27427155L + "'", long24 == 27427155L);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "DateTimeField[dayOfYear]" + "'", str30, "DateTimeField[dayOfYear]");
    }

    @Test
    public void test05552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05552");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = dateTimeField2.getAsShortText(100, locale5);
        int int8 = dateTimeField2.getLeapAmount((long) (short) 100);
        java.lang.String str9 = dateTimeField2.getName();
        long long12 = dateTimeField2.add((long) (short) 1, 0);
        int int14 = dateTimeField2.get((long) 86399999);
        int int16 = dateTimeField2.get((long) ' ');
        int int18 = dateTimeField2.getMaximumValue(97L);
        long long21 = dateTimeField2.set(1645629374450L, 20);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleAttributes();
        java.lang.String str26 = locale23.getVariant();
        java.lang.String str27 = dateTimeField2.getAsText(1645629532248L, locale23);
        int int29 = dateTimeField2.getLeapAmount((long) 29);
        org.joda.time.tz.NameProvider nameProvider31 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Category category32 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category32, locale33);
        java.lang.String str35 = locale33.toLanguageTag();
        java.lang.String str36 = locale33.getLanguage();
        java.lang.String str39 = nameProvider31.getShortName(locale33, "days", "26149261");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider31);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider31);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType42.getField(chronology43);
        long long46 = dateTimeField44.roundFloor((long) (-1));
        org.joda.time.DurationField durationField47 = dateTimeField44.getDurationField();
        java.lang.String str49 = dateTimeField44.getAsText(0L);
        long long51 = dateTimeField44.roundHalfCeiling(1645629364123L);
        long long53 = dateTimeField44.roundHalfCeiling((-31L));
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet57 = locale55.getUnicodeLocaleAttributes();
        java.lang.String str58 = locale55.getVariant();
        java.lang.String str59 = locale55.getDisplayLanguage();
        java.lang.String str60 = dateTimeField44.getAsText(31795200000L, locale55);
        java.lang.String str63 = nameProvider31.getShortName(locale55, "weekyearOfCentury", "26186144");
        java.util.Set<java.lang.String> strSet64 = locale55.getUnicodeLocaleKeys();
        java.lang.String str65 = dateTimeField2.getAsText(55, locale55);
        org.joda.time.DurationField durationField66 = dateTimeField2.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "100" + "'", str6, "100");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "minuteOfDay" + "'", str9, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 430 + "'", int14 == 430);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 430 + "'", int16 == 430);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1439 + "'", int18 == 1439);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645549814450L + "'", long21 == 1645549814450L);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1349" + "'", str27, "1349");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(nameProvider31);
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category32.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "fr" + "'", str35, "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "fr" + "'", str36, "fr");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTimeField44);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-22088L) + "'", long46 == (-22088L));
        org.junit.Assert.assertNotNull(durationField47);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "430" + "'", str49, "430");
// flaky:         org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1645629337912L + "'", long51 == 1645629337912L);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-22088L) + "'", long53 == (-22088L));
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "430" + "'", str60, "430");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "55" + "'", str65, "55");
        org.junit.Assert.assertNotNull(durationField66);
    }

    @Test
    public void test05553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05553");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds(9);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withCenturyOfEra(2);
        org.joda.time.LocalDateTime.Property property8 = localDateTime1.secondOfMinute();
        org.joda.time.LocalDateTime.Property property9 = localDateTime1.year();
        int int10 = property9.get();
        long long11 = property9.remainder();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 25822188L + "'", long11 == 25822188L);
    }

    @Test
    public void test05554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05554");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str7 = dateTimeZone5.getShortName((long) (short) 10);
        long long9 = dateTimeZone5.convertUTCToLocal((long) ' ');
        java.lang.String str10 = dateTimeZone5.toString();
        boolean boolean12 = dateTimeZone5.equals((java.lang.Object) (short) 100);
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str15 = dateTimeZone5.getShortName((long) (-1), locale14);
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Locale[] localeArray18 = new java.util.Locale[] { locale3, locale4, locale14, locale16, locale17 };
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.Locale locale21 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList19);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray24 = strSet23.toArray();
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet23);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray28 = strSet27.toArray();
        boolean boolean29 = strSet27.isEmpty();
        java.lang.String str30 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap31 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList32 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap31);
        java.util.Locale locale36 = new java.util.Locale("2022-02-22T07:16:13.657", "0100-02-22T07:16:04.074", "2022-02-22T07:16:14.450");
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags(languageRangeList32, (java.util.Collection<java.lang.String>) strSet37);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap39 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList40 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList32, strMap39);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+07:10:22.088" + "'", str7, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 25822120L + "'", long9 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+07:10:22.088" + "'", str10, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+07:10:22.088" + "'", str15, "+07:10:22.088");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(locale21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(languageRangeList32);
        org.junit.Assert.assertEquals(locale36.toString(), "2022-02-22t07:16:13.657_0100-02-22T07:16:04.074_2022-02-22T07:16:14.450");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(languageRangeList40);
    }

    @Test
    public void test05555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05555");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        int int5 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minusMillis(0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime0.minuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test05556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05556");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getShortName((long) (short) 10);
        long long13 = dateTimeZone9.convertUTCToLocal((long) ' ');
        java.lang.String str14 = dateTimeZone9.toString();
        java.lang.String str15 = dateTimeZone9.toString();
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale21 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str22 = locale20.getDisplayCountry(locale21);
        java.lang.String str23 = locale17.getDisplayVariant(locale20);
        java.util.Locale locale24 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale25 = locale24.stripExtensions();
        java.lang.String str26 = locale17.getDisplayLanguage(locale25);
        java.lang.String str27 = dateTimeZone9.getName((long) 67, locale25);
        int int28 = dateTimeField8.getMaximumTextLength(locale25);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withDurationAdded(readableDuration30, (int) '#');
        org.joda.time.LocalDateTime.Property property33 = localDateTime29.era();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.weekyears();
        org.joda.time.DurationField durationField40 = chronology38.centuries();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology38);
        org.joda.time.DateTimeField dateTimeField42 = chronology38.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology38.clockhourOfHalfday();
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet47 = locale45.getUnicodeLocaleAttributes();
        java.lang.String str48 = dateTimeField43.getAsShortText((int) (byte) 0, locale45);
        java.lang.String str49 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDateTime34, locale45);
        long long52 = dateTimeField8.add(1645629425773L, (-27427156));
        int int53 = dateTimeField8.getMaximumValue();
        java.lang.String str55 = dateTimeField8.getAsText(1645629453158L);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withDurationAdded(readableDuration57, (int) '#');
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withYear(0);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minus(readableDuration62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime61.withDayOfYear(67);
        int int66 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localDateTime65);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+07:10:22.088" + "'", str11, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 25822120L + "'", long13 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+07:10:22.088" + "'", str14, "+07:10:22.088");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+07:10:22.088" + "'", str15, "+07:10:22.088");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Canada" + "'", str19, "Canada");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Canada" + "'", str22, "Canada");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fran\347ais" + "'", str26, "fran\347ais");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+07:10:22.088" + "'", str27, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0" + "'", str48, "0");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 65773L + "'", long52 == 65773L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1439 + "'", int53 == 1439);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "917" + "'", str55, "917");
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1439 + "'", int66 == 1439);
    }

    @Test
    public void test05557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05557");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        boolean boolean7 = dateTimeZone0.equals((java.lang.Object) (short) 100);
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = dateTimeZone0.getShortName((long) (-1), locale9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withField(dateTimeFieldType12, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.weekyears();
        org.joda.time.DurationField durationField19 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.minuteOfDay();
        long long24 = chronology17.add((long) 2, (long) 21, (int) '4');
        boolean boolean25 = dateTimeFieldType12.isSupported(chronology17);
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField27 = chronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology17.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 25822120L + "'", long4 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+07:10:22.088" + "'", str5, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+07:10:22.088" + "'", str10, "+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1094L + "'", long24 == 1094L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test05558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05558");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.seconds();
        long long7 = durationField4.getValueAsLong(1645629369702L, 28L);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        java.util.Locale locale12 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.lang.String str14 = dateTimeField10.getAsShortText(100, locale13);
        int int16 = dateTimeField10.getLeapAmount((long) (short) 100);
        org.joda.time.DurationField durationField17 = dateTimeField10.getRangeDurationField();
        long long20 = durationField17.add(1645629359098L, (int) (byte) 0);
        long long22 = durationField17.getMillis((long) 8);
        int int23 = durationField4.compareTo(durationField17);
        long long26 = durationField17.add(6L, 1645629378);
        long long28 = durationField17.getValueAsLong(1645629369056L);
        long long31 = durationField17.getMillis(27427157, 1645629374450L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645629369L + "'", long7 == 1645629369L);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "100" + "'", str14, "100");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645629359098L + "'", long20 == 1645629359098L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 691200000L + "'", long22 == 691200000L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 142182378259200006L + "'", long26 == 142182378259200006L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 19046L + "'", long28 == 19046L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 2369706364800000L + "'", long31 == 2369706364800000L);
    }

    @Test
    public void test05559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05559");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = dateTimeField2.getAsShortText(100, locale5);
        int int8 = dateTimeField2.getLeapAmount((long) (short) 100);
        java.lang.String str9 = dateTimeField2.getName();
        long long12 = dateTimeField2.add((long) (short) 1, 0);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str15 = dateTimeZone13.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.ReadableInstant readableInstant18 = null;
        long long19 = property17.getDifferenceAsLong(readableInstant18);
        org.joda.time.DurationField durationField20 = property17.getLeapDurationField();
        java.lang.String str21 = property17.getAsString();
        org.joda.time.LocalDateTime localDateTime22 = property17.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.weekyears();
        boolean boolean29 = dateTimeFieldType24.isSupported(chronology27);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        java.lang.String str31 = localDateTime30.toString();
        int int32 = localDateTime30.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.minusMonths(2);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str38 = dateTimeZone36.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfDay();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime44.toDateTime(readableInstant45);
        long long47 = dateTime46.getMillis();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str50 = dateTimeZone48.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now(dateTimeZone48);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = localDateTime51.getFieldType((int) (short) 0);
        boolean boolean54 = dateTime46.isSupported(dateTimeFieldType53);
        org.joda.time.DateTime dateTime55 = localDateTime34.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        int[] intArray57 = chronology27.get((org.joda.time.ReadablePartial) localDateTime34, 11L);
        int[] intArray59 = dateTimeField2.add((org.joda.time.ReadablePartial) localDateTime22, (int) (short) 10, intArray57, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime22.minusMinutes(0);
        org.joda.time.LocalDateTime.Property property62 = localDateTime22.dayOfMonth();
        int int63 = localDateTime22.getYear();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime22.minusWeeks(26429952);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "100" + "'", str6, "100");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "minuteOfDay" + "'", str9, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+07:10:22.088" + "'", str15, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 25822088L + "'", long19 == 25822088L);
        org.junit.Assert.assertNull(durationField20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "52301329" + "'", str21, "52301329");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-22T14:31:41.329" + "'", str31, "2022-02-22T14:31:41.329");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20 + "'", int32 == 20);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+07:10:22.088" + "'", str38, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645629679241L + "'", long47 == 1645629679241L);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+07:10:22.088" + "'", str50, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2022 + "'", int63 == 2022);
        org.junit.Assert.assertNotNull(localDateTime65);
    }

    @Test
    public void test05560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05560");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        boolean boolean5 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.DateTimeField dateTimeField6 = chronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        long long11 = chronology3.add((long) 54974408, 0L, (int) (short) 10);
        org.joda.time.DateTimeField dateTimeField12 = chronology3.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str15 = dateTimeZone13.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.ReadableInstant readableInstant18 = null;
        long long19 = property17.getDifferenceAsLong(readableInstant18);
        org.joda.time.DurationField durationField20 = property17.getLeapDurationField();
        java.lang.String str21 = property17.getAsString();
        org.joda.time.LocalDateTime localDateTime23 = property17.addToCopy(1645629357222L);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.millisOfDay();
        int int25 = localDateTime23.getSecondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.withPeriodAdded(readablePeriod26, 26149);
        long long30 = chronology3.set((org.joda.time.ReadablePartial) localDateTime23, (long) 40);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray33 = chronology3.get(readablePeriod31, 190415000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 54974408L + "'", long11 == 54974408L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+07:10:22.088" + "'", str15, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 25822088L + "'", long19 == 25822088L);
        org.junit.Assert.assertNull(durationField20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "52301390" + "'", str21, "52301390");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 38 + "'", int25 == 38);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3291169658612L + "'", long30 == 3291169658612L);
    }

    @Test
    public void test05561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05561");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plus(readablePeriod2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths(356);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.dayOfWeek();
        org.joda.time.DurationField durationField8 = chronology6.months();
        org.joda.time.DurationField durationField9 = chronology6.centuries();
        org.joda.time.DurationField durationField10 = chronology6.halfdays();
        long long13 = durationField10.add(1645629624712L, (long) (-55));
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1643253624712L + "'", long13 == 1643253624712L);
    }

    @Test
    public void test05562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05562");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-22T14:31:34.748");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-22t14:31:34.748");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05563");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        long long5 = property4.remainder();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property4.getFieldType();
        org.joda.time.LocalDateTime localDateTime8 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = property4.addToCopy((long) 1970);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test05564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05564");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.DurationField durationField6 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 26163523, chronology3);
        org.joda.time.DurationField durationField10 = chronology3.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology3.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = chronology3.getDateTimeMillis(54974408, 0, 43230480, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test05565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05565");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DurationField durationField8 = chronology3.months();
        org.joda.time.DurationField durationField9 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology3.secondOfDay();
        org.joda.time.DurationField durationField12 = chronology3.months();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray15 = chronology3.get(readablePeriod13, (long) 26364);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test05566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05566");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        int int5 = property4.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusHours((int) (short) 10);
        int int18 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDateTime17);
        int int21 = dateTimeField6.getDifference((long) 26151696, 1645629423775L);
        org.joda.time.DurationField durationField22 = dateTimeField6.getLeapDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.weekyears();
        org.joda.time.DurationField durationField29 = chronology27.centuries();
        boolean boolean30 = durationFieldType24.isSupported(chronology27);
        org.joda.time.DurationField durationField31 = chronology27.halfdays();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology33 = chronology27.withZone(dateTimeZone32);
        boolean boolean35 = dateTimeZone32.isStandardOffset((long) (-292275054));
        java.lang.String str36 = dateTimeZone32.getID();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str39 = dateTimeZone37.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(dateTimeZone37);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.millisOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withYear((int) (short) 100);
        java.lang.String str44 = localDateTime43.toString();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.minus(readableDuration45);
        java.lang.String str47 = localDateTime46.toString();
        org.joda.time.LocalDateTime.Property property48 = localDateTime46.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime49 = property48.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plusMillis(8);
        boolean boolean52 = dateTimeZone32.isLocalDateTimeGap(localDateTime49);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str56 = dateTimeZone54.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(dateTimeZone54);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.millisOfDay();
        java.lang.String str59 = property58.getName();
        org.joda.time.LocalDateTime localDateTime60 = property58.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusYears(7);
        int int63 = localDateTime62.getEra();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str66 = dateTimeZone64.getShortName((long) (short) 10);
        long long68 = dateTimeZone64.convertUTCToLocal((long) ' ');
        java.lang.String str69 = dateTimeZone64.toString();
        java.lang.String str70 = dateTimeZone64.toString();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime62, dateTimeZone64);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime62.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime62.withYearOfCentury((int) (byte) 10);
        int int76 = localDateTime75.getYearOfCentury();
        int[] intArray77 = localDateTime75.getValues();
        int[] intArray79 = dateTimeField6.add((org.joda.time.ReadablePartial) localDateTime49, 0, intArray77, 635);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime49.minusWeeks(65);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime49.minusHours(605);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime88 = localDateTime83.withTime(2720, 26306790, 55118112, (-52));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2720 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 292278993 + "'", int5 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+07:10:22.088" + "'", str9, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-292275054) + "'", int18 == (-292275054));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-52) + "'", int21 == (-52));
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+07:10:22.088" + "'", str39, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0100-02-22T14:31:41.535" + "'", str44, "0100-02-22T14:31:41.535");
        org.junit.Assert.assertNotNull(localDateTime46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0100-02-22T14:31:41.535" + "'", str47, "0100-02-22T14:31:41.535");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeZone54);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+07:10:22.088" + "'", str56, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "millisOfDay" + "'", str59, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone64);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+07:10:22.088" + "'", str66, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 25822120L + "'", long68 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+07:10:22.088" + "'", str69, "+07:10:22.088");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+07:10:22.088" + "'", str70, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertNotNull(intArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[2645, 2, 22, 52301535]");
        org.junit.Assert.assertNotNull(intArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[2645, 2, 22, 52301535]");
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
    }

    @Test
    public void test05567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05567");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str10 = dateTimeZone8.getShortName((long) (short) 10);
        long long12 = dateTimeZone8.convertUTCToLocal((long) ' ');
        java.lang.String str13 = dateTimeZone8.toString();
        boolean boolean15 = dateTimeZone8.equals((java.lang.Object) (short) 100);
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str18 = dateTimeZone8.getShortName((long) (-1), locale17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withField(dateTimeFieldType20, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.weekyears();
        org.joda.time.DurationField durationField27 = chronology25.centuries();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.minuteOfDay();
        long long32 = chronology25.add((long) 2, (long) 21, (int) '4');
        boolean boolean33 = dateTimeFieldType20.isSupported(chronology25);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str36 = dateTimeZone34.getShortName((long) (short) 10);
        long long38 = dateTimeZone34.convertUTCToLocal((long) ' ');
        java.lang.String str39 = dateTimeZone34.toString();
        long long41 = dateTimeZone34.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone34);
        org.joda.time.Chronology chronology43 = chronology25.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField44 = chronology43.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(35L, chronology43);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str48 = dateTimeZone46.getShortName((long) (short) 10);
        long long50 = dateTimeZone46.convertUTCToLocal((long) ' ');
        java.lang.String str51 = dateTimeZone46.toString();
        boolean boolean53 = dateTimeZone46.equals((java.lang.Object) (short) 100);
        java.util.Locale locale55 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str56 = dateTimeZone46.getShortName((long) (-1), locale55);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(dateTimeZone46);
        int int59 = dateTimeZone46.getOffset((long) (short) 10);
        java.util.TimeZone timeZone60 = dateTimeZone46.toTimeZone();
        java.lang.String str61 = dateTimeZone46.getID();
        java.lang.String str63 = dateTimeZone46.getShortName(1645629456968L);
        org.joda.time.Chronology chronology64 = chronology43.withZone(dateTimeZone46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(25842433, 26314, 14, 0, (-55), 55162270, 0, chronology43);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -55 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+07:10:22.088" + "'", str10, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 25822120L + "'", long12 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+07:10:22.088" + "'", str13, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+07:10:22.088" + "'", str18, "+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1094L + "'", long32 == 1094L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+07:10:22.088" + "'", str36, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 25822120L + "'", long38 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+07:10:22.088" + "'", str39, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 32L + "'", long41 == 32L);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+07:10:22.088" + "'", str48, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 25822120L + "'", long50 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+07:10:22.088" + "'", str51, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+07:10:22.088" + "'", str56, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 25822088 + "'", int59 == 25822088);
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "GMT+07:10");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+07:10:22.088" + "'", str61, "+07:10:22.088");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+07:10:22.088" + "'", str63, "+07:10:22.088");
        org.junit.Assert.assertNotNull(chronology64);
    }

    @Test
    public void test05568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05568");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = property4.addToCopy(500);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYearOfEra(16);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withPeriodAdded(readablePeriod9, 27427155);
        java.util.Date date12 = localDateTime6.toDate();
        org.joda.time.LocalDateTime.Property property13 = localDateTime6.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Feb 22 14:31:42 GMT 2022");
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test05569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05569");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(26251, 2922789, 52477744, 276, 26387450, 920, 26181236);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 276 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05570");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.hours();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.halfdayOfDay();
        boolean boolean10 = dateTimeField9.isSupported();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusSeconds(9);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.withCenturyOfEra(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.property(dateTimeFieldType19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.hours();
        java.lang.String str28 = chronology26.toString();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.clockhourOfDay();
        int int31 = dateTimeField29.get(1645629354990L);
        java.util.Locale locale35 = new java.util.Locale("und", "+00:00:00.097");
        boolean boolean36 = locale35.hasExtensions();
        java.lang.String str37 = dateTimeField29.getAsShortText((long) 26169, locale35);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str40 = dateTimeZone38.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(dateTimeZone38);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.millisOfDay();
        org.joda.time.ReadableInstant readableInstant43 = null;
        long long44 = property42.getDifferenceAsLong(readableInstant43);
        java.util.Locale locale46 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleKeys();
        org.joda.time.LocalDateTime localDateTime48 = property42.setCopy("26153615", locale46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusYears((-997));
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.weekyears();
        org.joda.time.DurationField durationField56 = chronology54.seconds();
        org.joda.time.DurationField durationField57 = chronology54.seconds();
        org.joda.time.DurationField durationField58 = chronology54.seconds();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str61 = dateTimeZone59.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now(dateTimeZone59);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.millisOfDay();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime62.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusHours((int) (short) 10);
        int int70 = localDateTime67.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime67.minus(readablePeriod71);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str75 = dateTimeZone73.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime76 = org.joda.time.LocalDateTime.now(dateTimeZone73);
        org.joda.time.LocalDateTime.Property property77 = localDateTime76.millisOfDay();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime76.withYear((int) (short) 100);
        int int80 = localDateTime79.getCenturyOfEra();
        boolean boolean81 = localDateTime67.isBefore((org.joda.time.ReadablePartial) localDateTime79);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime79.plusMinutes(0);
        int[] intArray85 = chronology54.get((org.joda.time.ReadablePartial) localDateTime83, 2022L);
        int[] intArray87 = dateTimeField29.add((org.joda.time.ReadablePartial) localDateTime50, 55, intArray85, 0);
        int[] intArray88 = localDateTime50.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray90 = dateTimeField9.set((org.joda.time.ReadablePartial) localDateTime22, 273, intArray88, (-330821279));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -330821279 for halfdayOfDay must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ISOChronology[UTC]" + "'", str28, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 15 + "'", int31 == 15);
        org.junit.Assert.assertEquals(locale35.toString(), "und_+00:00:00.097");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "24" + "'", str37, "24");
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+07:10:22.088" + "'", str40, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 25822088L + "'", long44 == 25822088L);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+07:10:22.088" + "'", str61, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 31 + "'", int70 == 31);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+07:10:22.088" + "'", str75, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1970, 1, 1, 2022]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1970, 1, 1, 2022]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1025, 2, 22, 26153615]");
    }

    @Test
    public void test05571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05571");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        int int11 = localDateTime8.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minus(readablePeriod12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withYear((int) (short) 100);
        int int21 = localDateTime20.getCenturyOfEra();
        boolean boolean22 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        int int23 = localDateTime20.getDayOfYear();
        int int24 = localDateTime20.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str27 = dateTimeZone25.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        java.lang.String str30 = property29.getName();
        org.joda.time.LocalDateTime localDateTime31 = property29.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime33 = property29.addToCopy(0L);
        java.lang.String str34 = property29.getAsString();
        org.joda.time.LocalDateTime localDateTime35 = property29.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withWeekyear(56);
        int int38 = localDateTime20.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime20.plusMinutes((-1));
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str44 = dateTimeZone42.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(dateTimeZone42);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.centuries();
        boolean boolean48 = localDateTime45.equals((java.lang.Object) durationFieldType47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.withWeekOfWeekyear((int) (byte) 10);
        int int51 = localDateTime50.getDayOfYear();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.plus(readablePeriod52);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.dayOfWeek();
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(locale55);
        java.util.Locale.Builder builder57 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder59 = builder57.addUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder60 = builder59.clear();
        java.util.Locale locale61 = builder60.build();
        java.lang.String str62 = locale61.toLanguageTag();
        java.lang.String str63 = locale55.getDisplayCountry(locale61);
        java.lang.String str64 = property54.getAsText(locale55);
        java.lang.String str65 = locale55.getDisplayLanguage();
        java.lang.String str66 = property41.getAsShortText(locale55);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 31 + "'", int11 == 31);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+07:10:22.088" + "'", str16, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53 + "'", int23 == 53);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+07:10:22.088" + "'", str27, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "millisOfDay" + "'", str30, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "52301668" + "'", str34, "52301668");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+07:10:22.088" + "'", str44, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 67 + "'", int51 == 67);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "und" + "'", str62, "und");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Dienstag" + "'", str64, "Dienstag");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Deutsch" + "'", str65, "Deutsch");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "8" + "'", str66, "8");
    }

    @Test
    public void test05572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05572");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        int int5 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy(365);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYearOfCentury(4);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test05573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05573");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = dateTimeField2.getAsShortText(100, locale5);
        int int8 = dateTimeField2.getLeapAmount((long) (short) 100);
        java.lang.String str9 = dateTimeField2.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField2.getType();
        int int12 = dateTimeField2.getLeapAmount(1645629530361L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "100" + "'", str6, "100");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "minuteOfDay" + "'", str9, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test05574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05574");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYear(0);
        int int6 = localDateTime5.getDayOfYear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.minuteOfHour();
        int int17 = property16.get();
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.lang.String str19 = locale18.getDisplayCountry();
        int int20 = property16.getMaximumShortTextLength(locale18);
        org.joda.time.LocalDateTime localDateTime21 = property16.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime22 = localDateTime21.toDateTime();
        org.joda.time.DateTime dateTime23 = localDateTime5.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(26149500L);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusSeconds(1439);
        org.joda.time.DateTime dateTime28 = localDateTime25.toDateTime();
        boolean boolean29 = dateTime23.isAfter((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str32 = dateTimeZone30.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.millisOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(readableInstant39);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str44 = dateTimeZone42.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(dateTimeZone42);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = localDateTime45.getFieldType((int) (short) 0);
        boolean boolean48 = dateTime40.isSupported(dateTimeFieldType47);
        long long49 = dateTime40.getMillis();
        org.joda.time.Instant instant50 = dateTime40.toInstant();
        org.joda.time.Chronology chronology51 = dateTime40.getChronology();
        boolean boolean52 = dateTime28.isBefore((org.joda.time.ReadableInstant) dateTime40);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+07:10:22.088" + "'", str11, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 31 + "'", int17 == 31);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Deutschland" + "'", str19, "Deutschland");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+07:10:22.088" + "'", str32, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1645629679671L + "'", long41 == 1645629679671L);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+07:10:22.088" + "'", str44, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1645629679671L + "'", long49 == 1645629679671L);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test05575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05575");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        int int7 = property4.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = property4.roundHalfEvenCopy();
        org.joda.time.DurationField durationField9 = property4.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime10 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime11 = property4.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime12 = property4.roundHalfFloorCopy();
        int int13 = localDateTime12.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withWeekyear(4001);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime12.withEra(26388563);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26388563 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 25822088L + "'", long6 == 25822088L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 86399999 + "'", int7 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test05576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05576");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("hours");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        java.lang.String str5 = languageRange1.getRange();
        double double6 = languageRange1.getWeight();
        double double7 = languageRange1.getWeight();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withDurationAdded(readableDuration9, (int) '#');
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.millis();
        boolean boolean14 = languageRange1.equals((java.lang.Object) durationField13);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hours" + "'", str2, "hours");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hours" + "'", str4, "hours");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hours" + "'", str5, "hours");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test05577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05577");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long4 = dateTimeField2.roundFloor((long) (-1));
        boolean boolean5 = dateTimeField2.isLenient();
        long long7 = dateTimeField2.remainder(0L);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withDurationAdded(readableDuration10, (int) '#');
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale19 = locale18.stripExtensions();
        java.lang.String str20 = dateTimeField16.getAsShortText(100, locale19);
        int int21 = property13.getMaximumShortTextLength(locale19);
        java.lang.String str22 = locale19.getDisplayLanguage();
        java.util.Locale locale23 = locale19.stripExtensions();
        java.lang.String str24 = dateTimeField2.getAsText((int) (short) 100, locale19);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str27 = dateTimeZone25.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusHours((int) (short) 10);
        int int36 = localDateTime33.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.minusMinutes(0);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str40 = durationFieldType39.toString();
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.weekyears();
        org.joda.time.DurationField durationField46 = chronology44.centuries();
        org.joda.time.DurationField durationField47 = durationFieldType41.getField(chronology44);
        boolean boolean48 = durationFieldType39.isSupported(chronology44);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime33.withFieldAdded(durationFieldType39, (-1));
        int int51 = localDateTime50.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.hours();
        java.lang.String str56 = chronology54.toString();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField58 = chronology54.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.withDurationAdded(readableDuration60, (int) '#');
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.weekyear();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property66 = localDateTime62.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime67 = property66.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str70 = dateTimeZone68.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now(dateTimeZone68);
        org.joda.time.LocalDateTime.Property property72 = localDateTime71.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType73 = org.joda.time.DurationFieldType.centuries();
        boolean boolean74 = localDateTime71.equals((java.lang.Object) durationFieldType73);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray75 = localDateTime71.getFieldTypes();
        java.lang.String str76 = localDateTime71.toString();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime71.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean80 = localDateTime71.isSupported(dateTimeFieldType79);
        int int81 = localDateTime67.indexOf(dateTimeFieldType79);
        int[] intArray83 = chronology54.get((org.joda.time.ReadablePartial) localDateTime67, 1645629358650L);
        int int84 = dateTimeField2.getMaximumValue((org.joda.time.ReadablePartial) localDateTime50, intArray83);
        org.joda.time.LocalDateTime.Property property85 = localDateTime50.dayOfWeek();
        int int86 = property85.getMinimumValueOverall();
        org.joda.time.DateTimeField dateTimeField87 = property85.getField();
        java.lang.String str88 = property85.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-22088L) + "'", long4 == (-22088L));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 22088L + "'", long7 == 22088L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 7 + "'", int21 == 7);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "French" + "'", str22, "French");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+07:10:22.088" + "'", str27, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 31 + "'", int36 == 31);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "weekyears" + "'", str40, "weekyears");
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 8 + "'", int51 == 8);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ISOChronology[UTC]" + "'", str56, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+07:10:22.088" + "'", str70, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray75);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "2022-02-22T14:31:41.850" + "'", str76, "2022-02-22T14:31:41.850");
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[2022, 2, 23, 54958650]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1439 + "'", int84 == 1439);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "dayOfWeek" + "'", str88, "dayOfWeek");
    }

    @Test
    public void test05578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05578");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType1.getDurationType();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.DurationField durationField7 = chronology5.centuries();
        boolean boolean8 = durationFieldType2.isSupported(chronology5);
        org.joda.time.DurationField durationField9 = chronology5.halfdays();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology11 = chronology5.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(1645629555258L, chronology11);
        org.joda.time.DurationField durationField14 = chronology11.months();
        org.joda.time.DurationField durationField15 = chronology11.millis();
        int int17 = durationField15.getValue((long) 549744);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 549744 + "'", int17 == 549744);
    }

    @Test
    public void test05579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05579");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withWeekOfWeekyear((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.plusDays(67);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDateTime10.toDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.minutes();
        long long15 = durationField14.getUnitMillis();
        int int17 = durationField14.getValue(1645629475991L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 60000L + "'", long15 == 60000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 27427157 + "'", int17 == 27427157);
    }

    @Test
    public void test05580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05580");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 56);
        java.lang.String str4 = dateTimeZone0.getName(1645629384219L);
        boolean boolean6 = dateTimeZone0.isStandardOffset((long) 100);
        long long9 = dateTimeZone0.adjustOffset(1645629560854L, false);
        long long12 = dateTimeZone0.convertLocalToUTC((long) 4, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+07:10:22.088" + "'", str4, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645629560854L + "'", long9 == 1645629560854L);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-25822084L) + "'", long12 == (-25822084L));
    }

    @Test
    public void test05581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05581");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weekyears();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.DurationField durationField12 = durationFieldType5.getField(chronology9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str15 = dateTimeZone13.getShortName((long) (short) 10);
        long long17 = dateTimeZone13.convertUTCToLocal((long) ' ');
        java.lang.String str18 = dateTimeZone13.toString();
        long long21 = dateTimeZone13.adjustOffset((long) (short) 100, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.Chronology chronology23 = chronology9.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField24 = chronology9.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology9.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+07:10:22.088" + "'", str15, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 25822120L + "'", long17 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+07:10:22.088" + "'", str18, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test05582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05582");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYear(0);
        int int6 = localDateTime5.getDayOfYear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.weekOfWeekyear();
        int int8 = localDateTime5.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
    }

    @Test
    public void test05583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05583");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2022-02-22T07:18:50.841");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-22t07:18:50.841");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05584");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.centuryOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.LocalDateTime localDateTime4 = property2.withMinimumValue();
        boolean boolean5 = property2.isLeap();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test05585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05585");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("und");
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale4.getDisplayName();
        java.util.Locale.Builder builder7 = builder2.setLocale(locale4);
        java.util.Locale locale8 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale12 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str13 = locale11.getDisplayCountry(locale12);
        java.lang.String str14 = locale8.getDisplayVariant(locale11);
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale16 = locale15.stripExtensions();
        java.lang.String str17 = locale8.getDisplayLanguage(locale16);
        java.util.Locale.Builder builder18 = builder2.setLocale(locale16);
        java.util.Locale.Builder builder19 = builder18.clear();
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        java.util.Locale locale21 = builder19.build();
        java.util.Locale.Builder builder22 = builder19.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder22.setLanguageTag("26357250");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 26357250 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Canada" + "'", str5, "Canada");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "French (Canada)" + "'", str6, "French (Canada)");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Canada" + "'", str10, "Canada");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Canada" + "'", str13, "Canada");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "fran\347ais" + "'", str17, "fran\347ais");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test05586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05586");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra((int) (byte) 0);
        int int13 = localDateTime10.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.withCenturyOfEra(0);
        int int16 = localDateTime10.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 54 + "'", int16 == 54);
    }

    @Test
    public void test05587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05587");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        long long5 = property4.remainder();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundFloorCopy();
        java.lang.String str7 = property4.getAsShortText();
        java.lang.String str8 = property4.getAsString();
        int int9 = property4.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime10 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear(51);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "52302132" + "'", str7, "52302132");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "52302132" + "'", str8, "52302132");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 86399999 + "'", int9 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test05588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05588");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category0, locale1);
        java.lang.String str3 = locale1.getDisplayName();
        boolean boolean4 = locale1.hasExtensions();
        java.lang.String str5 = locale1.getISO3Country();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fran\347ais" + "'", str3, "fran\347ais");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test05589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05589");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        java.lang.String str14 = localDateTime13.toString();
        boolean boolean15 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray18 = strSet17.toArray();
        boolean boolean19 = strSet17.isEmpty();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray22 = strSet21.toArray();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        boolean boolean25 = strSet21.removeAll((java.util.Collection<java.lang.String>) strSet24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray30 = new org.joda.time.DurationFieldType[] { durationFieldType28, durationFieldType29 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray31 = strSet27.toArray(durationFieldTypeArray30);
        boolean boolean32 = strSet21.containsAll((java.util.Collection<java.lang.String>) strSet27);
        java.lang.Object[] objArray33 = strSet27.toArray();
        boolean boolean34 = strSet17.removeAll((java.util.Collection<java.lang.String>) strSet27);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray37 = strSet36.toArray();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        boolean boolean40 = strSet36.removeAll((java.util.Collection<java.lang.String>) strSet39);
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray45 = new org.joda.time.DurationFieldType[] { durationFieldType43, durationFieldType44 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray46 = strSet42.toArray(durationFieldTypeArray45);
        boolean boolean47 = strSet36.containsAll((java.util.Collection<java.lang.String>) strSet42);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray50 = strSet49.toArray();
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        boolean boolean53 = strSet49.removeAll((java.util.Collection<java.lang.String>) strSet52);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray58 = new org.joda.time.DurationFieldType[] { durationFieldType56, durationFieldType57 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray59 = strSet55.toArray(durationFieldTypeArray58);
        boolean boolean60 = strSet49.containsAll((java.util.Collection<java.lang.String>) strSet55);
        java.lang.Object[] objArray61 = strSet55.toArray();
        boolean boolean62 = strSet36.retainAll((java.util.Collection<java.lang.String>) strSet55);
        boolean boolean63 = strSet27.addAll((java.util.Collection<java.lang.String>) strSet55);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean65 = strSet55.remove((java.lang.Object) dateTimeFieldType64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime3.property(dateTimeFieldType64);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology70 = localDateTime69.getChronology();
        org.joda.time.DurationField durationField71 = chronology70.weekyears();
        org.joda.time.DurationField durationField72 = chronology70.centuries();
        org.joda.time.DurationField durationField73 = durationFieldType67.getField(chronology70);
        boolean boolean74 = dateTimeFieldType64.isSupported(chronology70);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str77 = dateTimeZone75.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.now(dateTimeZone75);
        org.joda.time.LocalDateTime.Property property79 = localDateTime78.millisOfDay();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime78.plusMonths((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.plus(readablePeriod82);
        long long85 = chronology70.set((org.joda.time.ReadablePartial) localDateTime83, 864000010L);
        org.joda.time.DurationField durationField86 = chronology70.weekyears();
        org.joda.time.DateTimeField dateTimeField87 = chronology70.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField88 = chronology70.weekyear();
        int int90 = dateTimeField88.getMaximumValue((long) 55032254);
        org.joda.time.DurationField durationField91 = dateTimeField88.getDurationField();
        long long93 = dateTimeField88.roundHalfFloor(1645629490783L);
        int int94 = dateTimeField88.getMinimumValue();
        java.lang.String str96 = dateTimeField88.getAsShortText(188L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+07:10:22.088" + "'", str9, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0100-02-22T14:31:42.152" + "'", str14, "0100-02-22T14:31:42.152");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(durationFieldTypeArray30);
        org.junit.Assert.assertNotNull(durationFieldTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(durationFieldTypeArray45);
        org.junit.Assert.assertNotNull(durationFieldTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(durationFieldTypeArray58);
        org.junit.Assert.assertNotNull(durationFieldTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTimeZone75);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+07:10:22.088" + "'", str77, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
// flaky:         org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1908369102152L + "'", long85 == 1908369102152L);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 292278993 + "'", int90 == 292278993);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1641168000000L + "'", long93 == 1641168000000L);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-292275054) + "'", int94 == (-292275054));
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "1970" + "'", str96, "1970");
    }

    @Test
    public void test05590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05590");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder3.addUnicodeLocaleAttribute("und");
        java.util.Locale locale6 = builder5.build();
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale locale8 = java.util.Locale.getDefault(category0);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.weekyears();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.minuteOfDay();
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale15 = locale14.stripExtensions();
        int int16 = dateTimeField13.getMaximumShortTextLength(locale15);
        java.util.Locale.setDefault(category0, locale15);
        java.util.Locale locale18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(category0, locale18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Can't set default locale to NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
    }

    @Test
    public void test05591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05591");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = durationFieldType1.getName();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.hours();
        org.joda.time.DurationField durationField8 = durationFieldType3.getField(chronology6);
        org.joda.time.Chronology chronology9 = chronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.era();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str14 = dateTimeZone12.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        java.lang.String str17 = property16.getName();
        org.joda.time.LocalDateTime localDateTime18 = property16.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean20 = localDateTime18.isSupported(dateTimeFieldType19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str23 = dateTimeZone21.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.centuries();
        boolean boolean27 = localDateTime24.equals((java.lang.Object) durationFieldType26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = localDateTime24.getFieldTypes();
        java.lang.String str29 = localDateTime24.toString();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime24.plusMillis(22);
        boolean boolean32 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.plus(readableDuration33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withDurationAdded(readableDuration35, 26169);
        org.joda.time.DateTime dateTime38 = localDateTime34.toDateTime();
        int[] intArray40 = chronology9.get((org.joda.time.ReadablePartial) localDateTime34, 1645629355285L);
        org.joda.time.DurationField durationField41 = durationFieldType1.getField(chronology9);
        java.lang.String str42 = chronology9.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "years" + "'", str2, "years");
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+07:10:22.088" + "'", str14, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "millisOfDay" + "'", str17, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+07:10:22.088" + "'", str23, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T14:31:42.228" + "'", str29, "2022-02-22T14:31:42.228");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[2022, 2, 23, 54955285]");
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ISOChronology[UTC]" + "'", str42, "ISOChronology[UTC]");
    }

    @Test
    public void test05592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05592");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        int int5 = localDateTime0.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str8 = dateTimeZone6.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.secondOfMinute();
        int int20 = property19.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime21 = property19.roundHalfFloorCopy();
        boolean boolean22 = localDateTime0.isAfter((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.plusWeeks(26483059);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+07:10:22.088" + "'", str8, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test05593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05593");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withWeekOfWeekyear((int) (byte) 10);
        int int9 = localDateTime8.getDayOfYear();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plus(readablePeriod10);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        int int15 = durationField13.getValue(1645629414076L);
        boolean boolean16 = durationField13.isPrecise();
        long long19 = durationField13.getMillis(26393979, 1645629525848L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 67 + "'", int9 == 67);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 832913528400000000L + "'", long19 == 832913528400000000L);
    }

    @Test
    public void test05594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05594");
        java.util.Locale locale2 = new java.util.Locale("26153539", "2022-02-22T07:16:24.942");
        org.junit.Assert.assertEquals(locale2.toString(), "26153539_2022-02-22T07:16:24.942");
    }

    @Test
    public void test05595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05595");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minusMinutes(12);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(81249905);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.yearOfEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test05596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05596");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        int int4 = localDateTime3.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMinuteOfHour(2);
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.plusMillis(31);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusSeconds(97);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test05597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05597");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime3.getFieldTypes();
        java.lang.String str8 = localDateTime3.toString();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.withField(dateTimeFieldType11, 2);
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType11.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.weekyears();
        boolean boolean22 = dateTimeFieldType17.isSupported(chronology20);
        org.joda.time.DurationField durationField23 = chronology20.centuries();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.year();
        boolean boolean25 = durationFieldType16.isSupported(chronology20);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((-100L), chronology29);
        org.joda.time.DateTimeField dateTimeField33 = chronology29.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.dayOfWeek();
        boolean boolean35 = durationFieldType16.isSupported(chronology29);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.weekyears();
        org.joda.time.DurationField durationField40 = chronology38.seconds();
        org.joda.time.DurationField durationField41 = chronology38.seconds();
        org.joda.time.DurationField durationField42 = chronology38.seconds();
        org.joda.time.DateTimeField dateTimeField43 = chronology38.secondOfDay();
        org.joda.time.DateTimeField dateTimeField44 = chronology38.secondOfMinute();
        boolean boolean45 = durationFieldType16.isSupported(chronology38);
        org.joda.time.DateTimeField dateTimeField46 = chronology38.weekyearOfCentury();
        long long48 = dateTimeField46.roundHalfFloor(1908343038948L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T14:31:42.325" + "'", str8, "2022-02-22T14:31:42.325");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1893456000000L + "'", long48 == 1893456000000L);
    }

    @Test
    public void test05598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05598");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str3 = dateTimeZone1.getShortName((long) (short) 10);
        long long5 = dateTimeZone1.convertUTCToLocal((long) ' ');
        java.lang.String str6 = dateTimeZone1.toString();
        boolean boolean8 = dateTimeZone1.equals((java.lang.Object) (short) 100);
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = dateTimeZone1.getShortName((long) (-1), locale10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone1);
        java.lang.String str14 = dateTimeZone1.getName((long) 26149);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str17 = dateTimeZone15.getShortName((long) (short) 10);
        long long19 = dateTimeZone15.convertUTCToLocal((long) ' ');
        java.lang.String str20 = dateTimeZone15.toString();
        long long22 = dateTimeZone15.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(dateTimeZone15);
        long long25 = dateTimeZone1.getMillisKeepLocal(dateTimeZone15, 0L);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone15);
        java.lang.String str27 = dateTimeZone15.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str31 = dateTimeZone29.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime(readableInstant38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str42 = dateTimeZone40.getShortName((long) (short) 10);
        long long44 = dateTimeZone40.convertUTCToLocal((long) ' ');
        java.lang.String str45 = dateTimeZone40.toString();
        long long47 = dateTimeZone40.previousTransition(32L);
        long long50 = dateTimeZone40.convertLocalToUTC(97L, false);
        boolean boolean51 = dateTime39.equals((java.lang.Object) false);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str54 = dateTimeZone52.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now(dateTimeZone52);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.millisOfDay();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime55.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = localDateTime60.toDateTime(readableInstant61);
        long long63 = dateTime62.getMillis();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str66 = dateTimeZone64.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now(dateTimeZone64);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = localDateTime67.getFieldType((int) (short) 0);
        boolean boolean70 = dateTime62.isSupported(dateTimeFieldType69);
        boolean boolean71 = dateTime39.isAfter((org.joda.time.ReadableInstant) dateTime62);
        java.lang.String str72 = dateTime39.toString();
        boolean boolean74 = dateTime39.equals((java.lang.Object) (short) 1);
        int int75 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology76 = dateTime39.getChronology();
        org.joda.time.Chronology chronology77 = dateTime39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone78 = chronology77.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+07:10:22.088" + "'", str3, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 25822120L + "'", long5 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+07:10:22.088" + "'", str6, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+07:10:22.088" + "'", str11, "+07:10:22.088");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+07:10:22.088" + "'", str14, "+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+07:10:22.088" + "'", str17, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 25822120L + "'", long19 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+07:10:22.088" + "'", str20, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32L + "'", long22 == 32L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+07:10:22.088" + "'", str27, "+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+07:10:22.088" + "'", str31, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+07:10:22.088" + "'", str42, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 25822120L + "'", long44 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+07:10:22.088" + "'", str45, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 32L + "'", long47 == 32L);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-25821991L) + "'", long50 == (-25821991L));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeZone52);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+07:10:22.088" + "'", str54, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1645629680256L + "'", long63 == 1645629680256L);
        org.junit.Assert.assertNotNull(dateTimeZone64);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+07:10:22.088" + "'", str66, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022-02-23T22:31:42.344+07:10:22.088" + "'", str72, "2022-02-23T22:31:42.344+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 25822088 + "'", int75 == 25822088);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
    }

    @Test
    public void test05599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05599");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("und");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet6 = locale4.getUnicodeLocaleAttributes();
        java.lang.String str7 = locale4.getVariant();
        java.util.Locale.Builder builder8 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder11 = builder8.addUnicodeLocaleAttribute("26283758");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder8.removeUnicodeLocaleAttribute("2022-02-22T07:19:16.106");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-22T07:19:16.106 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test05600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05600");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long4 = dateTimeField2.roundFloor((long) (-1));
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("und");
        java.util.Locale locale8 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        java.lang.String str11 = locale9.getDisplayName();
        java.util.Locale.Builder builder12 = builder7.setLocale(locale9);
        int int13 = dateTimeField2.getMaximumShortTextLength(locale9);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.ReadableInstant readableInstant19 = null;
        long long20 = property18.getDifferenceAsLong(readableInstant19);
        org.joda.time.DurationField durationField21 = property18.getLeapDurationField();
        java.lang.String str22 = property18.getAsString();
        org.joda.time.LocalDateTime localDateTime23 = property18.roundFloorCopy();
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet26 = locale24.getUnicodeLocaleAttributes();
        java.lang.String str27 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localDateTime23, locale24);
        long long30 = dateTimeField2.add(0L, 26329236);
        long long32 = dateTimeField2.remainder(59930L);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str35 = dateTimeZone33.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.millisOfDay();
        java.lang.String str38 = property37.getName();
        org.joda.time.LocalDateTime localDateTime39 = property37.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime41 = property37.addToCopy(0L);
        java.lang.String str42 = property37.getAsString();
        org.joda.time.LocalDateTime localDateTime43 = property37.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusMinutes((int) (short) 10);
        int int46 = dateTimeField2.getMaximumValue((org.joda.time.ReadablePartial) localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-22088L) + "'", long4 == (-22088L));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Canada" + "'", str10, "Canada");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fran\347ais (Canada)" + "'", str11, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+07:10:22.088" + "'", str16, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 25822088L + "'", long20 == 25822088L);
        org.junit.Assert.assertNull(durationField21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "52302450" + "'", str22, "52302450");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(strSet26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "871" + "'", str27, "871");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1579754160000L + "'", long30 == 1579754160000L);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 22018L + "'", long32 == 22018L);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+07:10:22.088" + "'", str35, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "millisOfDay" + "'", str38, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "52302450" + "'", str42, "52302450");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1439 + "'", int46 == 1439);
    }

    @Test
    public void test05601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05601");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        int int11 = localDateTime8.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minus(readablePeriod12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDateTime13.getFieldTypes();
        int int15 = localDateTime13.getEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 31 + "'", int11 == 31);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test05602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05602");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DurationField durationField8 = chronology3.months();
        org.joda.time.DurationField durationField9 = chronology3.halfdays();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        long long14 = dateTimeZone10.convertUTCToLocal((long) ' ');
        java.lang.String str15 = dateTimeZone10.toString();
        boolean boolean17 = dateTimeZone10.equals((java.lang.Object) (short) 100);
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str20 = dateTimeZone10.getShortName((long) (-1), locale19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withField(dateTimeFieldType22, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.weekyears();
        org.joda.time.DurationField durationField29 = chronology27.centuries();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.minuteOfDay();
        long long34 = chronology27.add((long) 2, (long) 21, (int) '4');
        boolean boolean35 = dateTimeFieldType22.isSupported(chronology27);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str38 = dateTimeZone36.getShortName((long) (short) 10);
        long long40 = dateTimeZone36.convertUTCToLocal((long) ' ');
        java.lang.String str41 = dateTimeZone36.toString();
        long long43 = dateTimeZone36.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(dateTimeZone36);
        org.joda.time.Chronology chronology45 = chronology27.withZone(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.Chronology chronology48 = chronology27.withZone(dateTimeZone47);
        org.joda.time.Chronology chronology49 = chronology3.withZone(dateTimeZone47);
        int int51 = dateTimeZone47.getOffset(1645629409296L);
        java.util.TimeZone timeZone52 = dateTimeZone47.toTimeZone();
        java.util.TimeZone timeZone53 = dateTimeZone47.toTimeZone();
        int int55 = timeZone53.getOffset(1645629364123L);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+07:10:22.088" + "'", str12, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 25822120L + "'", long14 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+07:10:22.088" + "'", str15, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+07:10:22.088" + "'", str20, "+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1094L + "'", long34 == 1094L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+07:10:22.088" + "'", str38, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 25822120L + "'", long40 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+07:10:22.088" + "'", str41, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 32L + "'", long43 == 32L);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
    }

    @Test
    public void test05603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05603");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str7 = dateTimeZone5.getShortName((long) (short) 10);
        long long9 = dateTimeZone5.convertUTCToLocal((long) ' ');
        java.lang.String str10 = dateTimeZone5.toString();
        boolean boolean12 = dateTimeZone5.equals((java.lang.Object) (short) 100);
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str15 = dateTimeZone5.getShortName((long) (-1), locale14);
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Locale[] localeArray18 = new java.util.Locale[] { locale3, locale4, locale14, locale16, locale17 };
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.Locale locale21 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList19);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray24 = strSet23.toArray();
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet23);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray28 = strSet27.toArray();
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        boolean boolean31 = strSet27.removeAll((java.util.Collection<java.lang.String>) strSet30);
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet27);
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleAttributes();
        boolean boolean36 = strSet27.retainAll((java.util.Collection<java.lang.String>) strSet35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType37.getField(chronology38);
        java.util.Locale locale41 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale42 = locale41.stripExtensions();
        java.lang.String str43 = dateTimeField39.getAsShortText(100, locale42);
        int int45 = dateTimeField39.getLeapAmount((long) (short) 100);
        org.joda.time.DurationField durationField46 = dateTimeField39.getRangeDurationField();
        boolean boolean47 = dateTimeField39.isLenient();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = dateTimeField39.getType();
        int int50 = dateTimeField39.get(1645629354990L);
        boolean boolean51 = strSet27.contains((java.lang.Object) int50);
        java.util.Iterator<java.lang.String> strItor52 = strSet27.iterator();
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray55 = strSet54.toArray();
        java.util.Locale locale56 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleAttributes();
        boolean boolean58 = strSet54.removeAll((java.util.Collection<java.lang.String>) strSet57);
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray63 = new org.joda.time.DurationFieldType[] { durationFieldType61, durationFieldType62 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray64 = strSet60.toArray(durationFieldTypeArray63);
        boolean boolean65 = strSet54.containsAll((java.util.Collection<java.lang.String>) strSet60);
        java.util.Locale locale66 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet67 = locale66.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray68 = strSet67.toArray();
        java.util.Locale locale69 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet70 = locale69.getUnicodeLocaleAttributes();
        boolean boolean71 = strSet67.removeAll((java.util.Collection<java.lang.String>) strSet70);
        java.util.Locale locale72 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet73 = locale72.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType74 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType75 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray76 = new org.joda.time.DurationFieldType[] { durationFieldType74, durationFieldType75 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray77 = strSet73.toArray(durationFieldTypeArray76);
        boolean boolean78 = strSet67.containsAll((java.util.Collection<java.lang.String>) strSet73);
        java.lang.Object[] objArray79 = strSet73.toArray();
        boolean boolean80 = strSet54.retainAll((java.util.Collection<java.lang.String>) strSet73);
        boolean boolean82 = strSet54.remove((java.lang.Object) "0100-02-22T07:16:17.921");
        boolean boolean83 = strSet27.retainAll((java.util.Collection<java.lang.String>) strSet54);
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str86 = dateTimeZone84.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime87 = org.joda.time.LocalDateTime.now(dateTimeZone84);
        org.joda.time.LocalDateTime.Property property88 = localDateTime87.millisOfDay();
        org.joda.time.LocalDateTime localDateTime90 = localDateTime87.plusMonths((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod91 = null;
        org.joda.time.LocalDateTime localDateTime92 = localDateTime90.plus(readablePeriod91);
        boolean boolean93 = strSet27.remove((java.lang.Object) localDateTime92);
        strSet27.clear();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+07:10:22.088" + "'", str7, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 25822120L + "'", long9 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+07:10:22.088" + "'", str10, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+07:10:22.088" + "'", str15, "+07:10:22.088");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(locale21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "100" + "'", str43, "100");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1346 + "'", int50 == 1346);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strItor52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(durationFieldTypeArray63);
        org.junit.Assert.assertNotNull(durationFieldTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertNotNull(durationFieldTypeArray76);
        org.junit.Assert.assertNotNull(durationFieldTypeArray77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTimeZone84);
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+07:10:22.088" + "'", str86, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test05604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05604");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        int int7 = property4.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime9 = property4.roundCeilingCopy();
        java.util.Locale locale10 = java.util.Locale.PRC;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = property4.getAsText(locale10);
        java.lang.String str13 = locale10.toLanguageTag();
        java.lang.String str14 = locale10.getISO3Language();
        java.lang.String str15 = locale10.getDisplayName();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 25822088L + "'", long6 == 25822088L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 86399999 + "'", int7 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "zh" + "'", str11, "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "52302587" + "'", str12, "52302587");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zh-CN" + "'", str13, "zh-CN");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zho" + "'", str14, "zho");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "chinois (Chine)" + "'", str15, "chinois (Chine)");
    }

    @Test
    public void test05605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05605");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test05606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05606");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.hours();
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.era();
        org.joda.time.DurationField durationField7 = chronology2.hours();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.clockhourOfDay();
        org.joda.time.Chronology chronology9 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = chronology2.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = dateTimeField10.getType();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
    }

    @Test
    public void test05607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05607");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfEvenCopy();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder6.addUnicodeLocaleAttribute("und");
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = locale9.getDisplayCountry(locale10);
        java.lang.String str12 = locale10.getDisplayName();
        java.util.Locale.Builder builder13 = builder8.setLocale(locale10);
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str16 = locale14.getDisplayCountry(locale15);
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.lang.String str20 = locale14.getDisplayVariant(locale17);
        java.util.Locale locale21 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale22 = locale21.stripExtensions();
        java.lang.String str23 = locale14.getDisplayLanguage(locale22);
        java.util.Locale.Builder builder24 = builder8.setLocale(locale22);
        java.util.Locale.Builder builder25 = builder24.clearExtensions();
        java.util.Locale.Builder builder26 = builder24.clear();
        java.util.Locale.Builder builder27 = builder26.clear();
        java.util.Locale locale28 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str29 = locale28.getISO3Language();
        java.lang.String str30 = locale28.getDisplayScript();
        java.util.Locale.Builder builder31 = builder26.setLocale(locale28);
        int int32 = property4.getMaximumShortTextLength(locale28);
        int int33 = property4.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property4.getFieldType();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Canada" + "'", str11, "Canada");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "fran\347ais (Canada)" + "'", str12, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Canada" + "'", str16, "Canada");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Canada" + "'", str19, "Canada");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "fran\347ais" + "'", str23, "fran\347ais");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "fra" + "'", str29, "fra");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
    }

    @Test
    public void test05608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05608");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = dateTimeField2.getAsShortText(100, locale5);
        int int8 = dateTimeField2.getLeapAmount((long) (short) 100);
        java.lang.String str9 = dateTimeField2.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField2.getType();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minusMonths(2022);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMinuteOfHour((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.plusWeeks((int) 'x');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.withWeekyear(24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime20.minusSeconds((int) (byte) 1);
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        java.lang.String str31 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localDateTime28, locale29);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str34 = dateTimeZone32.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.centuries();
        boolean boolean38 = localDateTime35.equals((java.lang.Object) durationFieldType37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = localDateTime35.getFieldTypes();
        java.lang.String str40 = localDateTime35.toString();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime35.plusMillis(22);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str45 = dateTimeZone43.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.centuries();
        boolean boolean49 = localDateTime46.equals((java.lang.Object) durationFieldType48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime42.withFieldAdded(durationFieldType48, 0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusHours(292278993);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withMillisOfDay((int) 'a');
        java.util.Locale locale57 = null;
        java.lang.String str58 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localDateTime53, 55032254, locale57);
        org.joda.time.DurationField durationField59 = dateTimeField2.getLeapDurationField();
        long long61 = dateTimeField2.roundCeiling(1645629381157L);
        boolean boolean62 = dateTimeField2.isSupported();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "100" + "'", str6, "100");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "minuteOfDay" + "'", str9, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+07:10:22.088" + "'", str13, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(strSet30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "871" + "'", str31, "871");
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+07:10:22.088" + "'", str34, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T14:31:42.635" + "'", str40, "2022-02-22T14:31:42.635");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+07:10:22.088" + "'", str45, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "55032254" + "'", str58, "55032254");
        org.junit.Assert.assertNull(durationField59);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1645629397912L + "'", long61 == 1645629397912L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test05609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05609");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.DurationField durationField6 = chronology3.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology3);
        boolean boolean8 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.DateTimeField dateTimeField9 = chronology3.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.dayOfWeek();
        java.util.Locale.Category category12 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category12, locale13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType15.getField(chronology16);
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale20 = locale19.stripExtensions();
        java.lang.String str21 = dateTimeField17.getAsShortText(100, locale20);
        java.util.Locale.setDefault(category12, locale20);
        java.lang.String str23 = dateTimeField10.getAsShortText((long) 15, locale20);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = dateTimeField10.getType();
        java.lang.String str25 = dateTimeFieldType24.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category12.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "jeu." + "'", str23, "jeu.");
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "dayOfWeek" + "'", str25, "dayOfWeek");
    }

    @Test
    public void test05610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05610");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.yearOfCentury();
        java.lang.String str6 = chronology2.toString();
        org.joda.time.DurationField durationField7 = chronology2.centuries();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField9 = chronology2.dayOfWeek();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[UTC]" + "'", str6, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test05611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05611");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale.Builder builder1 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder1.addUnicodeLocaleAttribute("und");
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale5 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.lang.String str7 = locale5.getDisplayName();
        java.util.Locale.Builder builder8 = builder3.setLocale(locale5);
        java.util.Locale.Builder builder10 = builder3.setScript("");
        java.util.Locale locale11 = builder3.build();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType19.getField(chronology20);
        long long23 = dateTimeField21.roundFloor((long) (-1));
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder26 = builder24.addUnicodeLocaleAttribute("und");
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale28 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str29 = locale27.getDisplayCountry(locale28);
        java.lang.String str30 = locale28.getDisplayName();
        java.util.Locale.Builder builder31 = builder26.setLocale(locale28);
        int int32 = dateTimeField21.getMaximumShortTextLength(locale28);
        java.lang.String str33 = dateTimeField17.getAsShortText((long) 'a', locale28);
        java.lang.String str34 = locale11.getDisplayLanguage(locale28);
        java.util.Locale locale35 = locale28.stripExtensions();
        java.util.Locale.setDefault(category0, locale28);
        boolean boolean38 = locale28.equals((java.lang.Object) "DateTimeField[dayOfWeek]");
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Canada" + "'", str6, "Canada");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fran\347ais (Canada)" + "'", str7, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeField21);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-22088L) + "'", long23 == (-22088L));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Canada" + "'", str29, "Canada");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "fran\347ais (Canada)" + "'", str30, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "97" + "'", str33, "97");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "fran\347ais" + "'", str34, "fran\347ais");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test05612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05612");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.secondOfMinute();
        java.lang.String str14 = property13.getAsShortText();
        int int15 = property13.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withDurationAdded(readableDuration17, (int) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.era();
        int int21 = property13.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        int int22 = localDateTime16.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime16.plusDays(2021);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime16.withYear((int) '#');
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.weekOfWeekyear();
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray30 = strSet29.toArray();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str33 = dateTimeZone31.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.centuries();
        boolean boolean37 = localDateTime34.equals((java.lang.Object) durationFieldType36);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = localDateTime34.getFieldTypes();
        java.lang.String str39 = localDateTime34.toString();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime34.plusMillis(22);
        org.joda.time.LocalDateTime.Property property42 = localDateTime34.monthOfYear();
        boolean boolean43 = strSet29.remove((java.lang.Object) property42);
        java.util.Locale.Builder builder44 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder46 = builder44.setRegion("");
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology49 = localDateTime48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.hours();
        java.lang.String str51 = chronology49.toString();
        org.joda.time.DateTimeField dateTimeField52 = chronology49.clockhourOfDay();
        int int54 = dateTimeField52.get(1645629354990L);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str57 = dateTimeZone55.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now(dateTimeZone55);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.centuries();
        boolean boolean61 = localDateTime58.equals((java.lang.Object) durationFieldType60);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray62 = localDateTime58.getFieldTypes();
        java.lang.String str63 = localDateTime58.toString();
        java.util.Locale locale64 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str65 = dateTimeField52.getAsText((org.joda.time.ReadablePartial) localDateTime58, locale64);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str69 = dateTimeZone67.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime70 = org.joda.time.LocalDateTime.now(dateTimeZone67);
        org.joda.time.LocalDateTime.Property property71 = localDateTime70.millisOfDay();
        java.lang.String str72 = property71.getName();
        int int73 = property71.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = property71.getFieldType();
        org.joda.time.LocalDateTime localDateTime75 = property71.roundFloorCopy();
        java.util.Locale locale76 = java.util.Locale.US;
        java.lang.String str77 = property71.getAsShortText(locale76);
        java.lang.String str78 = dateTimeField52.getAsShortText((long) (byte) 0, locale76);
        java.util.Locale.Builder builder79 = builder44.setLocale(locale76);
        java.lang.String str80 = locale76.getScript();
        java.lang.String str81 = property42.getAsShortText(locale76);
        java.lang.String str82 = property27.getAsText(locale76);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "42" + "'", str14, "42");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+07:10:22.088" + "'", str33, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-22T14:31:42.775" + "'", str39, "2022-02-22T14:31:42.775");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ISOChronology[UTC]" + "'", str51, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 15 + "'", int54 == 15);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+07:10:22.088" + "'", str57, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray62);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2022-02-22T14:31:42.775" + "'", str63, "2022-02-22T14:31:42.775");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "14" + "'", str65, "14");
        org.junit.Assert.assertNotNull(dateTimeZone67);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+07:10:22.088" + "'", str69, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "millisOfDay" + "'", str72, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 86399999 + "'", int73 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "52302775" + "'", str77, "52302775");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "24" + "'", str78, "24");
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Feb" + "'", str81, "Feb");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "8" + "'", str82, "8");
    }

    @Test
    public void test05613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05613");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYear(0);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minus(readableDuration6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (short) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.secondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test05614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05614");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = dateTimeField2.getAsShortText(100, locale5);
        int int8 = dateTimeField2.getLeapAmount((long) (short) 100);
        java.lang.String str9 = dateTimeField2.getName();
        long long12 = dateTimeField2.add((long) (short) 1, 0);
        int int14 = dateTimeField2.get((long) 86399999);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str17 = dateTimeZone15.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.millisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.minusMonths(2022);
        int int25 = localDateTime21.getDayOfMonth();
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.lang.String str28 = locale26.toLanguageTag();
        java.lang.String str29 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localDateTime21, locale26);
        org.joda.time.LocalDateTime.Property property30 = localDateTime21.era();
        int int31 = localDateTime21.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property32 = localDateTime21.centuryOfEra();
        java.lang.String str33 = property32.getAsText();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "100" + "'", str6, "100");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "minuteOfDay" + "'", str9, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 430 + "'", int14 == 430);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+07:10:22.088" + "'", str17, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 22 + "'", int25 == 22);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "und" + "'", str28, "und");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "871" + "'", str29, "871");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
    }

    @Test
    public void test05615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05615");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        int int8 = property7.get();
        org.joda.time.LocalDateTime localDateTime10 = property7.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.minuteOfHour();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.weekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str15 = dateTimeZone13.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        java.lang.String str18 = property17.getName();
        org.joda.time.LocalDateTime localDateTime19 = property17.roundHalfCeilingCopy();
        boolean boolean20 = property12.equals((java.lang.Object) localDateTime19);
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder24 = builder22.addUnicodeLocaleAttribute("und");
        java.util.Locale locale25 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.lang.String str28 = locale26.getDisplayName();
        java.util.Locale.Builder builder29 = builder24.setLocale(locale26);
        java.util.Locale.Builder builder31 = builder24.setScript("");
        java.util.Locale locale32 = builder24.build();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType40.getField(chronology41);
        long long44 = dateTimeField42.roundFloor((long) (-1));
        java.util.Locale.Builder builder45 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder47 = builder45.addUnicodeLocaleAttribute("und");
        java.util.Locale locale48 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale49 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str50 = locale48.getDisplayCountry(locale49);
        java.lang.String str51 = locale49.getDisplayName();
        java.util.Locale.Builder builder52 = builder47.setLocale(locale49);
        int int53 = dateTimeField42.getMaximumShortTextLength(locale49);
        java.lang.String str54 = dateTimeField38.getAsShortText((long) 'a', locale49);
        java.lang.String str55 = locale32.getDisplayLanguage(locale49);
        java.util.Set<java.lang.String> strSet56 = locale32.getUnicodeLocaleKeys();
        java.lang.String str57 = localDateTime19.toString("26287127", locale32);
        org.joda.time.LocalDateTime.Property property58 = localDateTime19.millisOfDay();
        int int59 = property58.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+07:10:22.088" + "'", str15, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "millisOfDay" + "'", str18, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Canada" + "'", str27, "Canada");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fran\347ais (Canada)" + "'", str28, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(dateTimeField42);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-22088L) + "'", long44 == (-22088L));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Canada" + "'", str50, "Canada");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "fran\347ais (Canada)" + "'", str51, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "97" + "'", str54, "97");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "fran\347ais" + "'", str55, "fran\347ais");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "26287127" + "'", str57, "26287127");
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test05616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05616");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2022-02-22T07:18:58.249", (double) (-763678195259990L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-7.6367819525999E14");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05617");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("26202156");
        timeZone1.setRawOffset(242);
        boolean boolean4 = timeZone1.observesDaylightTime();
        boolean boolean5 = timeZone1.observesDaylightTime();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.hours();
        org.joda.time.DurationField durationField11 = durationFieldType6.getField(chronology9);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.hourOfHalfday();
        long long14 = dateTimeField12.roundHalfEven((long) (short) 0);
        long long16 = dateTimeField12.remainder((long) 100);
        long long18 = dateTimeField12.remainder((-27427140000L));
        boolean boolean19 = dateTimeField12.isLenient();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder21.addUnicodeLocaleAttribute("und");
        java.util.Locale locale24 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale25 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str26 = locale24.getDisplayCountry(locale25);
        java.lang.String str27 = locale25.getDisplayName();
        java.util.Locale.Builder builder28 = builder23.setLocale(locale25);
        java.util.Locale.Builder builder30 = builder23.setScript("");
        java.util.Locale locale31 = builder23.build();
        java.lang.String str32 = dateTimeField12.getAsShortText(1645629362661L, locale31);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str35 = dateTimeZone33.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.millisOfDay();
        long long38 = property37.remainder();
        org.joda.time.LocalDateTime localDateTime39 = property37.roundFloorCopy();
        java.lang.String str40 = property37.getAsShortText();
        java.lang.String str41 = property37.getAsString();
        int int42 = property37.getMaximumValueOverall();
        org.joda.time.DurationField durationField43 = property37.getLeapDurationField();
        org.joda.time.DurationField durationField44 = property37.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime45 = property37.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime46 = property37.withMaximumValue();
        java.util.Locale.Category category48 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category48, locale49);
        java.lang.String str51 = locale49.getDisplayName();
        java.lang.String str52 = locale49.getDisplayName();
        java.lang.String str53 = locale49.getDisplayName();
        java.lang.String str54 = locale49.getISO3Country();
        java.lang.String str55 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localDateTime46, 915, locale49);
        java.util.Date date56 = localDateTime46.toDate();
        boolean boolean57 = timeZone1.inDaylightTime(date56);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1260000L + "'", long18 == 1260000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Canada" + "'", str26, "Canada");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "fran\347ais (Canada)" + "'", str27, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "3" + "'", str32, "3");
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+07:10:22.088" + "'", str35, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(localDateTime39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "52302919" + "'", str40, "52302919");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "52302919" + "'", str41, "52302919");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 86399999 + "'", int42 == 86399999);
        org.junit.Assert.assertNull(durationField43);
        org.junit.Assert.assertNull(durationField44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + category48 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category48.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "fran\347ais" + "'", str51, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "fran\347ais" + "'", str52, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "fran\347ais" + "'", str53, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "915" + "'", str55, "915");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Tue Feb 22 23:59:59 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test05618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05618");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("und");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet6 = locale4.getUnicodeLocaleAttributes();
        java.lang.String str7 = locale4.getVariant();
        java.util.Locale.Builder builder8 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.setLanguageTag("26151980");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 26151980 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test05619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05619");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        boolean boolean5 = dateTimeZone0.equals((java.lang.Object) "2022-02-22T07:16:14.450");
        java.lang.String str6 = dateTimeZone0.getID();
        int int8 = dateTimeZone0.getOffsetFromLocal(1645629517479L);
        java.util.TimeZone timeZone9 = dateTimeZone0.toTimeZone();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withDurationAdded(readableDuration17, (int) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        java.util.Locale locale25 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.lang.String str27 = dateTimeField23.getAsShortText(100, locale26);
        int int28 = property20.getMaximumShortTextLength(locale26);
        java.lang.String str29 = dateTimeField14.getAsShortText(1645629361507L, locale26);
        java.lang.String str30 = timeZone9.getDisplayName(locale26);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+07:10:22.088" + "'", str6, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 25822088 + "'", int8 == 25822088);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+07:10");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100" + "'", str27, "100");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 7 + "'", int28 == 7);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "54961507" + "'", str29, "54961507");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GMT+07:10" + "'", str30, "GMT+07:10");
    }

    @Test
    public void test05620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05620");
        java.util.Locale locale3 = new java.util.Locale("903", "26270262", "26452914");
        org.junit.Assert.assertEquals(locale3.toString(), "903_26270262_26452914");
    }

    @Test
    public void test05621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05621");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.weekyears();
        org.joda.time.DurationField durationField14 = chronology12.centuries();
        org.joda.time.DurationField durationField15 = chronology12.hours();
        boolean boolean16 = durationFieldType9.isSupported(chronology12);
        org.joda.time.DateTimeField dateTimeField17 = chronology12.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withDurationAdded(readableDuration19, (int) '#');
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.weekyear();
        int int23 = property22.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField24 = property22.getField();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str27 = dateTimeZone25.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusHours((int) (short) 10);
        int int36 = dateTimeField24.getMinimumValue((org.joda.time.ReadablePartial) localDateTime35);
        java.util.Locale locale38 = java.util.Locale.PRC;
        java.lang.String str39 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) localDateTime35, (-1), locale38);
        int int40 = dateTimeField8.getMaximumTextLength(locale38);
        long long43 = dateTimeField8.add(197L, 22);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str47 = dateTimeZone45.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(dateTimeZone45);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.millisOfDay();
        java.lang.String str50 = property49.getName();
        int int51 = property49.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withDurationAdded(readableDuration53, (int) '#');
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.weekyear();
        int int57 = property56.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField58 = property56.getField();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str61 = dateTimeZone59.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now(dateTimeZone59);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.millisOfDay();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime62.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusHours((int) (short) 10);
        int int70 = dateTimeField58.getMinimumValue((org.joda.time.ReadablePartial) localDateTime69);
        java.lang.String str72 = dateTimeField58.getAsText((long) (-292275054));
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str75 = dateTimeZone73.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime76 = org.joda.time.LocalDateTime.now(dateTimeZone73);
        org.joda.time.LocalDateTime.Property property77 = localDateTime76.millisOfDay();
        org.joda.time.ReadableInstant readableInstant78 = null;
        long long79 = property77.getDifferenceAsLong(readableInstant78);
        java.util.Locale locale80 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str81 = locale80.getISO3Language();
        java.lang.String str82 = property77.getAsShortText(locale80);
        int int83 = dateTimeField58.getMaximumShortTextLength(locale80);
        long long85 = dateTimeField58.roundHalfFloor(0L);
        java.util.Locale locale87 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale88 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str89 = locale87.getDisplayCountry(locale88);
        java.lang.String str90 = locale88.getDisplayName();
        java.lang.String str91 = dateTimeField58.getAsText(19, locale88);
        int int92 = property49.getMaximumTextLength(locale88);
        java.lang.String str93 = dateTimeField8.getAsText(26233287, locale88);
        java.util.Set<java.lang.Character> charSet94 = locale88.getExtensionKeys();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 292278993 + "'", int23 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+07:10:22.088" + "'", str27, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-292275054) + "'", int36 == (-292275054));
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-1" + "'", str39, "-1");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1320197L + "'", long43 == 1320197L);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+07:10:22.088" + "'", str47, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "millisOfDay" + "'", str50, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 86399999 + "'", int51 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 292278993 + "'", int57 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+07:10:22.088" + "'", str61, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-292275054) + "'", int70 == (-292275054));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "1969" + "'", str72, "1969");
        org.junit.Assert.assertNotNull(dateTimeZone73);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+07:10:22.088" + "'", str75, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
// flaky:         org.junit.Assert.assertTrue("'" + long79 + "' != '" + 25822088L + "'", long79 == 25822088L);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "fra" + "'", str81, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "52303065" + "'", str82, "52303065");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 9 + "'", int83 == 9);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-259200000L) + "'", long85 == (-259200000L));
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Canada" + "'", str89, "Canada");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "fran\347ais (Canada)" + "'", str90, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "19" + "'", str91, "19");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 8 + "'", int92 == 8);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "26233287" + "'", str93, "26233287");
        org.junit.Assert.assertNotNull(charSet94);
    }

    @Test
    public void test05622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05622");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-457), 441);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 441");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05623");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.secondOfMinute();
        java.lang.String str14 = property13.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property13.getFieldType();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.weekyears();
        org.joda.time.DurationField durationField20 = chronology18.seconds();
        org.joda.time.DurationField durationField21 = chronology18.seconds();
        org.joda.time.DurationField durationField22 = chronology18.seconds();
        org.joda.time.DateTimeField dateTimeField23 = chronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology18.centuryOfEra();
        boolean boolean25 = dateTimeFieldType15.isSupported(chronology18);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.weekyears();
        org.joda.time.DurationField durationField30 = chronology28.centuries();
        org.joda.time.DurationField durationField31 = chronology28.hours();
        org.joda.time.DurationField durationField32 = chronology28.seconds();
        org.joda.time.DateTimeField dateTimeField33 = chronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField34 = chronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType15.getField(chronology28);
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType15.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.weekyears();
        boolean boolean43 = dateTimeFieldType38.isSupported(chronology41);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        java.lang.String str45 = localDateTime44.toString();
        int int46 = localDateTime44.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.minusMonths(2);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str52 = dateTimeZone50.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(dateTimeZone50);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.millisOfDay();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        long long61 = dateTime60.getMillis();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str64 = dateTimeZone62.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now(dateTimeZone62);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = localDateTime65.getFieldType((int) (short) 0);
        boolean boolean68 = dateTime60.isSupported(dateTimeFieldType67);
        org.joda.time.DateTime dateTime69 = localDateTime48.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        int[] intArray71 = chronology41.get((org.joda.time.ReadablePartial) localDateTime48, 11L);
        org.joda.time.DateTimeField dateTimeField72 = chronology41.centuryOfEra();
        org.joda.time.DurationField durationField73 = chronology41.minutes();
        boolean boolean74 = durationFieldType37.isSupported(chronology41);
        java.lang.String str75 = durationFieldType37.toString();
        java.lang.String str76 = durationFieldType37.getName();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[secondOfMinute]" + "'", str14, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-22T14:31:43.225" + "'", str45, "2022-02-22T14:31:43.225");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20 + "'", int46 == 20);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+07:10:22.088" + "'", str52, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1645629681137L + "'", long61 == 1645629681137L);
        org.junit.Assert.assertNotNull(dateTimeZone62);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+07:10:22.088" + "'", str64, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "seconds" + "'", str75, "seconds");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "seconds" + "'", str76, "seconds");
    }

    @Test
    public void test05624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05624");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusYears(7);
        int int9 = localDateTime8.getEra();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.centuries();
        boolean boolean16 = localDateTime13.equals((java.lang.Object) durationFieldType15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = localDateTime13.getFieldTypes();
        java.lang.String str18 = localDateTime13.toString();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime13.withField(dateTimeFieldType21, 2);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime8.withField(dateTimeFieldType21, 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.year();
        java.lang.String str29 = property28.toString();
        java.lang.String str30 = property28.getName();
        java.util.Locale.Builder builder31 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder33 = builder31.addUnicodeLocaleAttribute("und");
        java.util.Locale locale34 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale35 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str36 = locale34.getDisplayCountry(locale35);
        java.lang.String str37 = locale35.getDisplayName();
        java.util.Locale.Builder builder38 = builder33.setLocale(locale35);
        java.util.Locale locale39 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale40 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str41 = locale39.getDisplayCountry(locale40);
        java.util.Locale locale42 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale43 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str44 = locale42.getDisplayCountry(locale43);
        java.lang.String str45 = locale39.getDisplayVariant(locale42);
        java.util.Locale locale46 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale47 = locale46.stripExtensions();
        java.lang.String str48 = locale39.getDisplayLanguage(locale47);
        java.util.Locale.Builder builder49 = builder33.setLocale(locale47);
        java.util.Locale.Builder builder50 = builder49.clear();
        java.util.Locale.Builder builder52 = builder49.addUnicodeLocaleAttribute("26185191");
        java.util.Locale locale53 = builder49.build();
        java.lang.String str54 = property28.getAsText(locale53);
        java.util.Locale locale55 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale56 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str57 = locale55.getDisplayCountry(locale56);
        java.lang.String str58 = locale56.getCountry();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.withDurationAdded(readableDuration60, (int) '#');
        org.joda.time.LocalDateTime.Property property63 = localDateTime59.era();
        java.util.Locale locale64 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet65 = locale64.getUnicodeLocaleAttributes();
        int int66 = property63.getMaximumTextLength(locale64);
        java.lang.String str67 = locale56.getDisplayName(locale64);
        java.lang.String str68 = locale53.getDisplayLanguage(locale64);
        java.util.Locale.setDefault(locale53);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+07:10:22.088" + "'", str12, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T14:31:43.252" + "'", str18, "2022-02-22T14:31:43.252");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Property[year]" + "'", str29, "Property[year]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "year" + "'", str30, "year");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Canada" + "'", str36, "Canada");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Franz\366sisch (Kanada)" + "'", str37, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Canada" + "'", str41, "Canada");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Canada" + "'", str44, "Canada");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "fran\347ais" + "'", str48, "fran\347ais");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2015" + "'", str54, "2015");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Canada" + "'", str57, "Canada");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "CA" + "'", str58, "CA");
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "French (Canada)" + "'", str67, "French (Canada)");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
    }

    @Test
    public void test05625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05625");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        org.joda.time.DurationField durationField7 = property4.getLeapDurationField();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale8.getLanguage();
        java.lang.String str11 = locale8.toLanguageTag();
        java.lang.String str12 = property4.getAsShortText(locale8);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        java.lang.String str14 = localDateTime13.toString();
        int int15 = localDateTime13.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minusMonths(2);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str21 = dateTimeZone19.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str33 = dateTimeZone31.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = localDateTime34.getFieldType((int) (short) 0);
        boolean boolean37 = dateTime29.isSupported(dateTimeFieldType36);
        org.joda.time.DateTime dateTime38 = localDateTime17.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        long long39 = property4.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTimeField dateTimeField40 = property4.getField();
        int int41 = property4.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField42 = property4.getField();
        // The following exception was thrown during execution in test generation
        try {
            long long45 = dateTimeField42.set(1645514404546L, "2022-02-22T07:20:11.157");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:20:11.157\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 25822088L + "'", long6 == 25822088L);
        org.junit.Assert.assertNull(durationField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "52303291" + "'", str12, "52303291");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T14:31:43.291" + "'", str14, "2022-02-22T14:31:43.291");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+07:10:22.088" + "'", str21, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645629681203L + "'", long30 == 1645629681203L);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+07:10:22.088" + "'", str33, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 5382622088L + "'", long39 == 5382622088L);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 86399999 + "'", int41 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test05626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05626");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusHours(0);
        int int7 = localDateTime3.getWeekyear();
        org.joda.time.Chronology chronology8 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.minuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test05627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05627");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        int int5 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekOfWeekyear((int) (byte) 1);
        int int8 = localDateTime0.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.plusDays(500);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        java.lang.String str12 = durationFieldType11.toString();
        boolean boolean13 = localDateTime10.isSupported(durationFieldType11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.weekyears();
        boolean boolean19 = dateTimeFieldType14.isSupported(chronology17);
        org.joda.time.DurationField durationField20 = durationFieldType11.getField(chronology17);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = chronology17.add(readablePeriod21, (long) 27427155, (int) (byte) 0);
        org.joda.time.DurationField durationField25 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfYear();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str35 = dateTimeZone33.getShortName((long) (short) 10);
        long long37 = dateTimeZone33.convertUTCToLocal((long) ' ');
        java.lang.String str38 = dateTimeZone33.toString();
        long long40 = dateTimeZone33.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withWeekyear(22);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str46 = dateTimeZone44.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(dateTimeZone44);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.millisOfDay();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.withFields((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.hours();
        java.lang.String str55 = chronology53.toString();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.clockhourOfDay();
        int int58 = dateTimeField56.get(1645629354990L);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str61 = dateTimeZone59.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now(dateTimeZone59);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.centuries();
        boolean boolean65 = localDateTime62.equals((java.lang.Object) durationFieldType64);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray66 = localDateTime62.getFieldTypes();
        java.lang.String str67 = localDateTime62.toString();
        java.util.Locale locale68 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str69 = dateTimeField56.getAsText((org.joda.time.ReadablePartial) localDateTime62, locale68);
        java.lang.String str70 = dateTimeField32.getAsText((org.joda.time.ReadablePartial) localDateTime47, 0, locale68);
        java.util.Locale locale71 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(locale71);
        java.util.Locale locale73 = java.util.Locale.CANADA;
        boolean boolean74 = locale73.hasExtensions();
        java.lang.String str75 = locale71.getDisplayScript(locale73);
        java.util.Set<java.lang.Character> charSet76 = locale73.getExtensionKeys();
        java.lang.String str77 = locale68.getDisplayScript(locale73);
        java.lang.String str78 = dateTimeField26.getAsText((long) 12, locale73);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 14 + "'", int8 == 14);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "days" + "'", str12, "days");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 27427155L + "'", long24 == 27427155L);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+07:10:22.088" + "'", str35, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 25822120L + "'", long37 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+07:10:22.088" + "'", str38, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 32L + "'", long40 == 32L);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+07:10:22.088" + "'", str46, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ISOChronology[UTC]" + "'", str55, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 15 + "'", int58 == 15);
        org.junit.Assert.assertNotNull(dateTimeZone59);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+07:10:22.088" + "'", str61, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray66);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2022-02-22T14:31:43.384" + "'", str67, "2022-02-22T14:31:43.384");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "14" + "'", str69, "14");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0" + "'", str70, "0");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(charSet76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "0" + "'", str78, "0");
    }

    @Test
    public void test05628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05628");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.hours();
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.yearOfCentury();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test05629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05629");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.DurationField durationField6 = chronology3.hours();
        boolean boolean7 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.DateTimeField dateTimeField8 = chronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.dayOfWeek();
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.lang.String str12 = locale11.getISO3Language();
        java.util.Locale.setDefault(category10, locale11);
        java.util.Locale locale14 = java.util.Locale.getDefault(category10);
        int int15 = dateTimeField9.getMaximumTextLength(locale14);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str18 = dateTimeZone16.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.minuteOfHour();
        int int24 = property23.get();
        org.joda.time.LocalDateTime localDateTime26 = property23.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.minuteOfHour();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.weekyear();
        int int29 = localDateTime26.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.plusSeconds(9);
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime32.withCenturyOfEra(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.property(dateTimeFieldType39);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str43 = dateTimeZone41.getShortName((long) (short) 10);
        long long45 = dateTimeZone41.convertUTCToLocal((long) ' ');
        java.lang.String str46 = dateTimeZone41.toString();
        boolean boolean48 = dateTimeZone41.equals((java.lang.Object) (short) 100);
        java.util.Locale locale50 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str51 = dateTimeZone41.getShortName((long) (-1), locale50);
        org.joda.time.DateTime dateTime52 = localDateTime38.toDateTime(dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((java.lang.Object) 1645629375880L, dateTimeZone41);
        boolean boolean54 = localDateTime26.isBefore((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.weekyears();
        org.joda.time.DurationField durationField59 = chronology57.centuries();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.minuteOfDay();
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(locale61);
        java.util.Locale locale63 = java.util.Locale.CANADA;
        boolean boolean64 = locale63.hasExtensions();
        java.lang.String str65 = locale61.getDisplayScript(locale63);
        int int66 = dateTimeField60.getMaximumTextLength(locale63);
        java.lang.String str67 = locale63.getDisplayName();
        java.lang.String str68 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime53, locale63);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime53.withMillisOfSecond(309);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "deu" + "'", str12, "deu");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 21 + "'", int24 == 21);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 32L + "'", long45 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Englisch (Kanada)" + "'", str67, "Englisch (Kanada)");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Wednesday" + "'", str68, "Wednesday");
        org.junit.Assert.assertNotNull(localDateTime70);
    }

    @Test
    public void test05630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05630");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        int int5 = property4.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusHours((int) (short) 10);
        int int18 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDateTime17);
        java.lang.String str20 = dateTimeField6.getAsText((long) (-292275054));
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str23 = dateTimeZone21.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.millisOfDay();
        org.joda.time.ReadableInstant readableInstant26 = null;
        long long27 = property25.getDifferenceAsLong(readableInstant26);
        java.util.Locale locale28 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str29 = locale28.getISO3Language();
        java.lang.String str30 = property25.getAsShortText(locale28);
        int int31 = dateTimeField6.getMaximumShortTextLength(locale28);
        long long33 = dateTimeField6.roundHalfFloor(0L);
        java.util.Locale locale35 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale36 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str37 = locale35.getDisplayCountry(locale36);
        java.lang.String str38 = locale36.getDisplayName();
        java.lang.String str39 = dateTimeField6.getAsText(19, locale36);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str42 = dateTimeZone40.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(dateTimeZone40);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.millisOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusHours((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = localDateTime48.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.withMillisOfDay((int) '4');
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plusYears(51);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusWeeks((int) (byte) -1);
        int int58 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.withDayOfMonth(13);
        int[] intArray61 = localDateTime57.getValues();
        int int62 = localDateTime57.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 292278993 + "'", int5 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-292275054) + "'", int18 == (-292275054));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1969" + "'", str20, "1969");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "fra" + "'", str29, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "26481418" + "'", str30, "26481418");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-259200000L) + "'", long33 == (-259200000L));
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Canada" + "'", str37, "Canada");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Franz\366sisch (Kanada)" + "'", str38, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "19" + "'", str39, "19");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-292275054) + "'", int58 == (-292275054));
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[2073, 3, 2, 52]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test05631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05631");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.seconds();
        org.joda.time.DurationField durationField5 = chronology2.seconds();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.secondOfDay();
        org.joda.time.DurationField durationField7 = chronology2.weekyears();
        org.joda.time.DurationField durationField8 = chronology2.years();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test05632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05632");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = durationFieldType1.getName();
        java.lang.String str3 = durationFieldType1.getName();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.DurationField durationField8 = chronology6.centuries();
        org.joda.time.DurationField durationField9 = chronology6.hours();
        org.joda.time.DurationField durationField10 = chronology6.seconds();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology6.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getShortName((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str19 = dateTimeZone17.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        long long22 = dateTimeZone14.getMillisKeepLocal(dateTimeZone17, 1645629358939L);
        java.lang.Object obj23 = null;
        boolean boolean24 = dateTimeZone14.equals(obj23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 28, dateTimeZone14);
        long long27 = dateTimeZone14.previousTransition(1645514199918L);
        java.lang.String str28 = dateTimeZone14.getID();
        int int30 = dateTimeZone14.getOffset(1645629287L);
        org.joda.time.Chronology chronology31 = chronology6.withZone(dateTimeZone14);
        boolean boolean32 = durationFieldType1.isSupported(chronology6);
        org.joda.time.Chronology chronology33 = chronology6.withUTC();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "years" + "'", str2, "years");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645629358939L + "'", long22 == 1645629358939L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645514199918L + "'", long27 == 1645514199918L);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(chronology33);
    }

    @Test
    public void test05633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05633");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        boolean boolean5 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.DateTimeField dateTimeField6 = chronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        long long11 = chronology3.add((long) 54974408, 0L, (int) (short) 10);
        org.joda.time.DateTimeField dateTimeField12 = chronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withDurationAdded(readableDuration14, (int) '#');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYear(0);
        int int19 = localDateTime18.getDayOfYear();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str24 = dateTimeZone22.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.millisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.minuteOfHour();
        int int30 = property29.get();
        java.util.Locale locale31 = java.util.Locale.GERMANY;
        java.lang.String str32 = locale31.getDisplayCountry();
        int int33 = property29.getMaximumShortTextLength(locale31);
        org.joda.time.LocalDateTime localDateTime34 = property29.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime35 = localDateTime34.toDateTime();
        org.joda.time.DateTime dateTime36 = localDateTime18.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        int int37 = localDateTime18.size();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime18.minusMinutes(57);
        int int40 = dateTimeField12.getMinimumValue((org.joda.time.ReadablePartial) localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 54974408L + "'", long11 == 54974408L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 21 + "'", int30 == 21);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Deutschland" + "'", str32, "Deutschland");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test05634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05634");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.seconds();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str7 = dateTimeZone5.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType19.getField(chronology20);
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale24 = locale23.stripExtensions();
        java.lang.String str25 = dateTimeField21.getAsShortText(100, locale24);
        int int27 = dateTimeField21.getLeapAmount((long) (short) 100);
        java.lang.String str28 = dateTimeField21.getName();
        long long31 = dateTimeField21.add((long) (short) 1, 0);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str34 = dateTimeZone32.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        org.joda.time.ReadableInstant readableInstant37 = null;
        long long38 = property36.getDifferenceAsLong(readableInstant37);
        org.joda.time.DurationField durationField39 = property36.getLeapDurationField();
        java.lang.String str40 = property36.getAsString();
        org.joda.time.LocalDateTime localDateTime41 = property36.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.weekyears();
        boolean boolean48 = dateTimeFieldType43.isSupported(chronology46);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        java.lang.String str50 = localDateTime49.toString();
        int int51 = localDateTime49.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.minusMonths(2);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str57 = dateTimeZone55.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now(dateTimeZone55);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.millisOfDay();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime58.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localDateTime63.toDateTime(readableInstant64);
        long long66 = dateTime65.getMillis();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str69 = dateTimeZone67.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime70 = org.joda.time.LocalDateTime.now(dateTimeZone67);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = localDateTime70.getFieldType((int) (short) 0);
        boolean boolean73 = dateTime65.isSupported(dateTimeFieldType72);
        org.joda.time.DateTime dateTime74 = localDateTime53.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        int[] intArray76 = chronology46.get((org.joda.time.ReadablePartial) localDateTime53, 11L);
        int[] intArray78 = dateTimeField21.add((org.joda.time.ReadablePartial) localDateTime41, (int) (short) 10, intArray76, (int) (byte) 0);
        chronology2.validate((org.joda.time.ReadablePartial) localDateTime17, intArray76);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime17.plusMillis(54974408);
        int int82 = localDateTime17.getMillisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime84 = localDateTime17.withWeekOfWeekyear(55205019);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 55205019 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "100" + "'", str25, "100");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "minuteOfDay" + "'", str28, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNull(durationField39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "26481537" + "'", str40, "26481537");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-22T07:21:21.537" + "'", str50, "2022-02-22T07:21:21.537");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 20 + "'", int51 == 20);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1645629681537L + "'", long66 == 1645629681537L);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00" + "'", str69, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(localDateTime81);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 537 + "'", int82 == 537);
    }

    @Test
    public void test05635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05635");
        java.util.Locale locale0 = java.util.Locale.PRC;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getDisplayScript();
        boolean boolean3 = locale0.hasExtensions();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.hours();
        java.lang.String str8 = chronology6.toString();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.clockhourOfDay();
        int int11 = dateTimeField9.get(1645629354990L);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str14 = dateTimeZone12.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.centuries();
        boolean boolean18 = localDateTime15.equals((java.lang.Object) durationFieldType17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime15.getFieldTypes();
        java.lang.String str20 = localDateTime15.toString();
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str22 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime15, locale21);
        org.joda.time.Chronology chronology23 = localDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) locale0, chronology23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[UTC]" + "'", str8, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 15 + "'", int11 == 15);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T07:21:21.559" + "'", str20, "2022-02-22T07:21:21.559");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "7" + "'", str22, "7");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test05636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05636");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((int) '4', 39, 948, 55220511, 280, 25836881);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 55220511 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05637");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withWeekOfWeekyear((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusMillis(0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test05638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05638");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(26213656);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05639");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean8 = localDateTime6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.minusDays((-56082));
        // The following exception was thrown during execution in test generation
        try {
            int int12 = localDateTime10.getValue(26439387);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26439387");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test05640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05640");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.secondOfDay();
        org.joda.time.DurationField durationField6 = chronology2.hours();
        long long10 = chronology2.add(20L, 38093L, 0);
        org.joda.time.DateTimeField dateTimeField11 = chronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = chronology2.weekyear();
        org.joda.time.DurationField durationField13 = chronology2.days();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 20L + "'", long10 == 20L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test05641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05641");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusMonths((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plus(readablePeriod7);
        java.util.Date date9 = localDateTime6.toDate();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.fromDateFields(date9);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Sat Jun 22 07:21:22 GMT 2030");
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test05642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05642");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        int int11 = localDateTime8.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minus(readablePeriod12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusYears(5);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusMonths((-38093));
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str19 = durationFieldType18.toString();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.weekyears();
        org.joda.time.DurationField durationField25 = chronology23.centuries();
        org.joda.time.DurationField durationField26 = durationFieldType20.getField(chronology23);
        boolean boolean27 = durationFieldType18.isSupported(chronology23);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.year();
        org.joda.time.DateTimeField dateTimeField29 = chronology23.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str32 = dateTimeZone30.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.millisOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.secondOfMinute();
        java.lang.String str44 = property43.getAsShortText();
        int int45 = property43.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withDurationAdded(readableDuration47, (int) '#');
        org.joda.time.LocalDateTime.Property property50 = localDateTime46.era();
        int int51 = property43.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime53 = property43.setCopy(24);
        org.joda.time.LocalDateTime localDateTime54 = property43.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusMillis(69);
        int int57 = dateTimeField29.getMaximumValue((org.joda.time.ReadablePartial) localDateTime56);
        boolean boolean58 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 21 + "'", int11 == 21);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "weekyears" + "'", str19, "weekyears");
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "21" + "'", str44, "21");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 11 + "'", int57 == 11);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test05643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05643");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("0100-02-22T07:19:40.808", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05644");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DurationField durationField8 = chronology3.months();
        org.joda.time.DurationField durationField9 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology3.secondOfDay();
        org.joda.time.DurationField durationField12 = chronology3.months();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = chronology3.getDateTimeMillis(320, 55164, 58, 50, 12, 26352, 55041013);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test05645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05645");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = chronology3.year();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str14 = dateTimeZone12.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.centuries();
        boolean boolean18 = localDateTime15.equals((java.lang.Object) durationFieldType17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime15.getFieldTypes();
        java.lang.String str20 = localDateTime15.toString();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.plusMillis(22);
        int[] intArray24 = chronology3.get((org.joda.time.ReadablePartial) localDateTime22, (-1893417120000000L));
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.withDurationAdded(readableDuration25, 26355785);
        int int28 = localDateTime27.getYearOfCentury();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T07:21:21.862" + "'", str20, "2022-02-22T07:21:21.862");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-58030, 1, 1, 0]");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 22 + "'", int28 == 22);
    }

    @Test
    public void test05646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05646");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        org.joda.time.DurationField durationField6 = chronology4.centuries();
        org.joda.time.DurationField durationField7 = chronology4.hours();
        boolean boolean8 = durationFieldType1.isSupported(chronology4);
        org.joda.time.DateTimeField dateTimeField9 = chronology4.secondOfDay();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(1645629451459L, chronology4);
        int int11 = localDateTime10.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDateTime10.getFieldType(20);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 20");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
    }

    @Test
    public void test05647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05647");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale7.getISO3Language();
        java.lang.String str9 = property4.getAsShortText(locale7);
        org.joda.time.DurationField durationField10 = property4.getDurationField();
        long long13 = durationField10.add((long) 1, 10);
        boolean boolean14 = durationField10.isPrecise();
        int int16 = durationField10.getValue((long) 26149500);
        int int19 = durationField10.getValue((long) (short) 10, 0L);
        long long22 = durationField10.add(1645514404598L, 27426242);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "26481888" + "'", str9, "26481888");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 11L + "'", long13 == 11L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 26149500 + "'", int16 == 26149500);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645541830840L + "'", long22 == 1645541830840L);
    }

    @Test
    public void test05648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05648");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(locale2);
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale locale8 = builder7.build();
        java.lang.String str9 = locale8.toLanguageTag();
        java.lang.String str10 = locale2.getDisplayCountry(locale8);
        java.util.Locale.Builder builder11 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder12 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder0.setRegion("2022-02-22T07:16:09.701");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2022-02-22T07:16:09.701 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "und" + "'", str9, "und");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test05649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05649");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        int int11 = localDateTime8.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minus(readablePeriod12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withYear((int) (short) 100);
        int int21 = localDateTime20.getCenturyOfEra();
        boolean boolean22 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.plusMinutes(0);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str27 = dateTimeZone25.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.centuries();
        boolean boolean31 = localDateTime28.equals((java.lang.Object) durationFieldType30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = localDateTime28.getFieldTypes();
        java.lang.String str33 = localDateTime28.toString();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.plusMillis(22);
        org.joda.time.LocalDateTime.Property property36 = localDateTime28.monthOfYear();
        int int37 = localDateTime28.getDayOfYear();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime28.withPeriodAdded(readablePeriod38, (-1));
        boolean boolean41 = localDateTime24.isAfter((org.joda.time.ReadablePartial) localDateTime28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime43 = localDateTime28.withWeekOfWeekyear(242);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 242 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 21 + "'", int11 == 21);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T07:21:21.907" + "'", str33, "2022-02-22T07:21:21.907");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 53 + "'", int37 == 53);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test05650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05650");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        long long7 = dateTimeZone0.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone0);
        int int10 = dateTimeZone0.getOffset((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.weekyears();
        org.joda.time.DurationField durationField16 = chronology14.centuries();
        org.joda.time.DurationField durationField17 = chronology14.hours();
        boolean boolean18 = dateTimeFieldType11.isSupported(chronology14);
        org.joda.time.DateTimeField dateTimeField19 = chronology14.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology14.days();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        java.lang.String str22 = localDateTime21.toString();
        int int23 = localDateTime21.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.minusMonths(2);
        int[] intArray27 = chronology14.get((org.joda.time.ReadablePartial) localDateTime25, 86340010L);
        org.joda.time.DurationField durationField28 = chronology14.months();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((java.lang.Object) (-1L), chronology14);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusWeeks(72000000);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withPeriodAdded(readablePeriod32, 24);
        org.joda.time.LocalDateTime.Property property35 = localDateTime31.year();
        java.lang.String str36 = property35.toString();
        long long37 = property35.remainder();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T07:21:21.953" + "'", str22, "2022-02-22T07:21:21.953");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20 + "'", int23 == 20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1970, 1, 1, 86340010]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Property[year]" + "'", str36, "Property[year]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 4147199999L + "'", long37 == 4147199999L);
    }

    @Test
    public void test05651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05651");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DurationField durationField5 = durationFieldType0.getField(chronology3);
        org.joda.time.DateTimeField dateTimeField6 = chronology3.hourOfHalfday();
        long long8 = dateTimeField6.roundHalfEven((long) (short) 0);
        long long10 = dateTimeField6.remainder((long) 100);
        long long12 = dateTimeField6.remainder((-27427140000L));
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str15 = dateTimeZone13.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        java.lang.String str18 = property17.getName();
        org.joda.time.LocalDateTime localDateTime19 = property17.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withDurationAdded(readableDuration20, 26276262);
        int int23 = dateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.DurationField durationField24 = dateTimeField6.getRangeDurationField();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1260000L + "'", long12 == 1260000L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "millisOfDay" + "'", str18, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 11 + "'", int23 == 11);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test05652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05652");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withWeekyear(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays(365);
        int int13 = localDateTime10.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test05653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05653");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDateTime8.toDateTime(readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        long long15 = dateTimeZone11.convertUTCToLocal((long) ' ');
        java.lang.String str16 = dateTimeZone11.toString();
        long long18 = dateTimeZone11.previousTransition(32L);
        long long21 = dateTimeZone11.convertLocalToUTC(97L, false);
        boolean boolean22 = dateTime10.equals((java.lang.Object) false);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str25 = dateTimeZone23.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime(readableInstant32);
        long long34 = dateTime33.getMillis();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str37 = dateTimeZone35.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = localDateTime38.getFieldType((int) (short) 0);
        boolean boolean41 = dateTime33.isSupported(dateTimeFieldType40);
        boolean boolean42 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str45 = dateTimeZone43.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.millisOfDay();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localDateTime51.toDateTime(readableInstant52);
        long long54 = dateTime53.getMillis();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str57 = dateTimeZone55.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now(dateTimeZone55);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = localDateTime58.getFieldType((int) (short) 0);
        boolean boolean61 = dateTime53.isSupported(dateTimeFieldType60);
        boolean boolean62 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Instant instant63 = dateTime53.toInstant();
        org.joda.time.Chronology chronology64 = dateTime53.getChronology();
        long long65 = dateTime53.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 32L + "'", long15 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 97L + "'", long21 == 97L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645629682007L + "'", long34 == 1645629682007L);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1645629682007L + "'", long54 == 1645629682007L);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(chronology64);
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1645629682007L + "'", long65 == 1645629682007L);
    }

    @Test
    public void test05654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05654");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long4 = dateTimeField2.roundFloor((long) (-1));
        org.joda.time.DurationField durationField5 = dateTimeField2.getDurationField();
        java.lang.String str7 = dateTimeField2.getAsText(0L);
        long long9 = dateTimeField2.roundHalfCeiling(1645629364123L);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusHours((int) (short) 10);
        int int21 = localDateTime18.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.minusMinutes(0);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str25 = durationFieldType24.toString();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.weekyears();
        org.joda.time.DurationField durationField31 = chronology29.centuries();
        org.joda.time.DurationField durationField32 = durationFieldType26.getField(chronology29);
        boolean boolean33 = durationFieldType24.isSupported(chronology29);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime18.withFieldAdded(durationFieldType24, (-1));
        int int36 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localDateTime18);
        java.lang.String str37 = dateTimeField2.getName();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str40 = dateTimeZone38.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(dateTimeZone38);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.centuries();
        boolean boolean44 = localDateTime41.equals((java.lang.Object) durationFieldType43);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = localDateTime41.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str48 = dateTimeZone46.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.millisOfDay();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime49.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.secondOfMinute();
        boolean boolean60 = localDateTime41.isAfter((org.joda.time.ReadablePartial) localDateTime58);
        java.util.Locale locale61 = java.util.Locale.JAPAN;
        java.lang.String str62 = locale61.toLanguageTag();
        java.lang.String str63 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localDateTime58, locale61);
        org.joda.time.LocalDateTime.Property property64 = localDateTime58.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60000L) + "'", long4 == (-60000L));
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0" + "'", str7, "0");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645629360000L + "'", long9 == 1645629360000L);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 21 + "'", int21 == 21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "weekyears" + "'", str25, "weekyears");
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "minuteOfDay" + "'", str37, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ja-JP" + "'", str62, "ja-JP");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "321" + "'", str63, "321");
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test05655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05655");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.minutes();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfDay();
        int int8 = dateTimeField7.getMinimumValue();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test05656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05656");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale7.getISO3Language();
        java.lang.String str9 = property4.getAsShortText(locale7);
        org.joda.time.DurationField durationField10 = property4.getDurationField();
        long long13 = durationField10.add((long) 1, 10);
        boolean boolean14 = durationField10.isPrecise();
        int int16 = durationField10.getValue((long) 26149500);
        int int19 = durationField10.getValue((long) (short) 10, 0L);
        long long22 = durationField10.add((long) 'a', (long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = durationField10.getType();
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.hours();
        org.joda.time.DurationField durationField29 = durationFieldType24.getField(chronology27);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.hourOfHalfday();
        org.joda.time.DurationField durationField31 = chronology27.weeks();
        boolean boolean32 = durationFieldType23.isSupported(chronology27);
        org.joda.time.DateTimeField dateTimeField33 = chronology27.secondOfDay();
        org.joda.time.DurationField durationField34 = dateTimeField33.getRangeDurationField();
        long long36 = durationField34.getMillis(81249743);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "26482078" + "'", str9, "26482078");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 11L + "'", long13 == 11L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 26149500 + "'", int16 == 26149500);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 197L + "'", long22 == 197L);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 7019977795200000L + "'", long36 == 7019977795200000L);
    }

    @Test
    public void test05657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05657");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType1.getDurationType();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.DurationField durationField7 = chronology5.centuries();
        boolean boolean8 = durationFieldType2.isSupported(chronology5);
        org.joda.time.DurationField durationField9 = chronology5.halfdays();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology11 = chronology5.withZone(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withDurationAdded(readableDuration13, (int) '#');
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.secondOfMinute();
        int int17 = localDateTime12.getSecondOfMinute();
        long long19 = chronology5.set((org.joda.time.ReadablePartial) localDateTime12, 2022L);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.plusSeconds(9);
        org.joda.time.LocalDateTime.Property property25 = localDateTime21.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.withCenturyOfEra(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.LocalDateTime.Property property29 = localDateTime27.property(dateTimeFieldType28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str32 = dateTimeZone30.getShortName((long) (short) 10);
        long long34 = dateTimeZone30.convertUTCToLocal((long) ' ');
        java.lang.String str35 = dateTimeZone30.toString();
        boolean boolean37 = dateTimeZone30.equals((java.lang.Object) (short) 100);
        java.util.Locale locale39 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str40 = dateTimeZone30.getShortName((long) (-1), locale39);
        org.joda.time.DateTime dateTime41 = localDateTime27.toDateTime(dateTimeZone30);
        java.lang.String str43 = dateTimeZone30.getNameKey(1645629365489L);
        int int45 = dateTimeZone30.getStandardOffset(0L);
        int int47 = dateTimeZone30.getStandardOffset(1151828812800052L);
        org.joda.time.DateTime dateTime48 = localDateTime12.toDateTime(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) 34, dateTimeZone30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withMinuteOfHour(27427157);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27427157 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645514482128L + "'", long19 == 1645514482128L);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 32L + "'", long34 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "UTC" + "'", str43, "UTC");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test05658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05658");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.hours();
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField9 = dateTimeField8.getDurationField();
        long long11 = durationField9.getMillis(26291);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 94647600000L + "'", long11 == 94647600000L);
    }

    @Test
    public void test05659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05659");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale7.getISO3Language();
        java.lang.String str9 = property4.getAsShortText(locale7);
        org.joda.time.DateTimeField dateTimeField10 = property4.getField();
        org.joda.time.LocalDateTime localDateTime11 = property4.withMinimumValue();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withDurationAdded(readableDuration14, (int) '#');
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.weekyear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str23 = dateTimeZone21.getShortName((long) (short) 10);
        long long25 = dateTimeZone21.convertUTCToLocal((long) ' ');
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.lang.String str28 = dateTimeZone21.getName((long) (short) 0, locale27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str31 = dateTimeZone29.getShortName((long) (short) 10);
        long long33 = dateTimeZone29.convertUTCToLocal((long) ' ');
        java.lang.String str34 = dateTimeZone29.toString();
        boolean boolean36 = dateTimeZone29.equals((java.lang.Object) (short) 100);
        java.util.Locale locale38 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str39 = dateTimeZone29.getShortName((long) (-1), locale38);
        java.lang.String str40 = locale27.getDisplayVariant(locale38);
        int int41 = property20.getMaximumShortTextLength(locale38);
        int int42 = property12.getMaximumShortTextLength(locale38);
        java.lang.Object obj43 = locale38.clone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "26482224" + "'", str9, "26482224");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 32L + "'", long25 == 32L);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 32L + "'", long33 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "fr_CA");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "fr_CA");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "fr_CA");
    }

    @Test
    public void test05660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05660");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        java.lang.String str3 = dateTimeZone1.getShortName((long) 86399999);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        java.util.TimeZone.setDefault(timeZone4);
        int int6 = timeZone4.getRawOffset();
        int int8 = timeZone4.getOffset(1645629568145L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.097" + "'", str3, "+00:00:00.097");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
    }

    @Test
    public void test05661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05661");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str1 = durationFieldType0.toString();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.DurationField durationField7 = chronology5.centuries();
        org.joda.time.DurationField durationField8 = durationFieldType2.getField(chronology5);
        boolean boolean9 = durationFieldType0.isSupported(chronology5);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = chronology5.getDateTimeMillis(72, 26328866, 55105632, 0, 673, (int) 'u', 55162270);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 673 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "weekyears" + "'", str1, "weekyears");
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test05662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05662");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = localDateTime3.getFieldType((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusMonths(0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.minusSeconds(55000019);
        int int10 = localDateTime9.size();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDayOfYear(748);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 748 for dayOfYear must be in the range [1,366]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test05663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05663");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale7.getISO3Language();
        java.lang.String str9 = property4.getAsShortText(locale7);
        org.joda.time.DateTimeField dateTimeField10 = property4.getField();
        org.joda.time.LocalDateTime localDateTime11 = property4.withMinimumValue();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime11.getFieldTypes();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.dayOfWeek();
        int[] intArray14 = localDateTime11.getValues();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withPeriodAdded(readablePeriod15, 26224);
        java.lang.String str18 = localDateTime11.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "26482328" + "'", str9, "26482328");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[2022, 2, 22, 0]");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T00:00:00.000" + "'", str18, "2022-02-22T00:00:00.000");
    }

    @Test
    public void test05664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05664");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plus(readablePeriod2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfDay();
        org.joda.time.DurationField durationField7 = property6.getRangeDurationField();
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.lang.String str9 = locale8.getLanguage();
        int int10 = property6.getMaximumShortTextLength(locale8);
        java.util.Locale.Category category11 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category11, locale12);
        java.lang.String str14 = locale12.toLanguageTag();
        java.lang.String str15 = locale12.getLanguage();
        java.lang.String str16 = locale12.getVariant();
        java.lang.String str17 = locale8.getDisplayName(locale12);
        java.lang.String str18 = locale8.getDisplayVariant();
        java.lang.String str19 = locale8.getDisplayCountry();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh" + "'", str9, "zh");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category11.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "fr" + "'", str14, "fr");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "fr" + "'", str15, "fr");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "chinois (Chine)" + "'", str17, "chinois (Chine)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Chine" + "'", str19, "Chine");
    }

    @Test
    public void test05665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05665");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("26202156");
        int int2 = timeZone1.getRawOffset();
        int int4 = timeZone1.getOffset(1645629474271L);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test05666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05666");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        java.lang.String str1 = durationFieldType0.getName();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        org.joda.time.DurationField durationField6 = chronology4.centuries();
        org.joda.time.DurationField durationField7 = chronology4.hours();
        org.joda.time.DurationField durationField8 = chronology4.seconds();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.secondOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.minuteOfDay();
        org.joda.time.DurationField durationField11 = durationFieldType0.getField(chronology4);
        org.joda.time.DateTimeField dateTimeField12 = chronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology4.hourOfDay();
        long long16 = dateTimeField13.add(1645629526585L, 55118112);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "minutes" + "'", str1, "minutes");
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 200070832726585L + "'", long16 == 200070832726585L);
    }

    @Test
    public void test05667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05667");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        java.lang.String str1 = localDateTime0.toString();
        int int2 = localDateTime0.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusMonths(2);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str8 = dateTimeZone6.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime(readableInstant15);
        long long17 = dateTime16.getMillis();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str20 = dateTimeZone18.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = localDateTime21.getFieldType((int) (short) 0);
        boolean boolean24 = dateTime16.isSupported(dateTimeFieldType23);
        org.joda.time.DateTime dateTime25 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str28 = dateTimeZone26.getShortName((long) (short) 10);
        long long30 = dateTimeZone26.convertUTCToLocal((long) ' ');
        java.lang.String str31 = dateTimeZone26.toString();
        long long34 = dateTimeZone26.adjustOffset((long) (short) 100, false);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime25, dateTimeZone26);
        int int36 = localDateTime35.size();
        int int37 = localDateTime35.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withDayOfYear((int) ' ');
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.withYearOfEra(45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withEra(1645629378);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1645629378 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-22T07:21:22.466" + "'", str1, "2022-02-22T07:21:22.466");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 20 + "'", int2 == 20);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645629682466L + "'", long17 == 1645629682466L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 32L + "'", long30 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 100L + "'", long34 == 100L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2021 + "'", int37 == 2021);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
    }

    @Test
    public void test05668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05668");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds(9);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withCenturyOfEra(2);
        org.joda.time.LocalDateTime.Property property8 = localDateTime1.secondOfMinute();
        org.joda.time.LocalDateTime.Property property9 = localDateTime1.year();
        org.joda.time.LocalDateTime.Property property10 = localDateTime1.yearOfCentury();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test05669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05669");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusYears(7);
        int int9 = localDateTime8.getEra();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.centuries();
        boolean boolean16 = localDateTime13.equals((java.lang.Object) durationFieldType15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = localDateTime13.getFieldTypes();
        java.lang.String str18 = localDateTime13.toString();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime13.withField(dateTimeFieldType21, 2);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime8.withField(dateTimeFieldType21, 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.year();
        java.lang.String str29 = property28.toString();
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder32 = builder30.addUnicodeLocaleAttribute("und");
        java.util.Locale locale33 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale34 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str35 = locale33.getDisplayCountry(locale34);
        java.lang.String str36 = locale34.getDisplayName();
        java.util.Locale.Builder builder37 = builder32.setLocale(locale34);
        java.util.Locale.Builder builder39 = builder32.setScript("");
        java.util.Locale locale40 = builder32.build();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType48.getField(chronology49);
        long long52 = dateTimeField50.roundFloor((long) (-1));
        java.util.Locale.Builder builder53 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder55 = builder53.addUnicodeLocaleAttribute("und");
        java.util.Locale locale56 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale57 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str58 = locale56.getDisplayCountry(locale57);
        java.lang.String str59 = locale57.getDisplayName();
        java.util.Locale.Builder builder60 = builder55.setLocale(locale57);
        int int61 = dateTimeField50.getMaximumShortTextLength(locale57);
        java.lang.String str62 = dateTimeField46.getAsShortText((long) 'a', locale57);
        java.lang.String str63 = locale40.getDisplayLanguage(locale57);
        java.util.Set<java.lang.String> strSet64 = locale40.getUnicodeLocaleKeys();
        java.lang.String str65 = property28.getAsShortText(locale40);
        org.joda.time.LocalDateTime localDateTime67 = property28.addWrapFieldToCopy(1439);
        int int68 = localDateTime67.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T07:21:22.506" + "'", str18, "2022-02-22T07:21:22.506");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Property[year]" + "'", str29, "Property[year]");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Canada" + "'", str35, "Canada");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "fran\347ais (Canada)" + "'", str36, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-60000L) + "'", long52 == (-60000L));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Canada" + "'", str58, "Canada");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "fran\347ais (Canada)" + "'", str59, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "97" + "'", str62, "97");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "fran\347ais" + "'", str63, "fran\347ais");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2015" + "'", str65, "2015");
        org.junit.Assert.assertNotNull(localDateTime67);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 22 + "'", int68 == 22);
    }

    @Test
    public void test05670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05670");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("Frankreich");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        int int4 = timeZone2.getOffset((long) (short) 100);
        timeZone2.setID("hourOfDay");
        boolean boolean7 = timeZone1.hasSameRules(timeZone2);
        timeZone1.setRawOffset(1745);
        timeZone1.setRawOffset(53);
        java.util.TimeZone.setDefault(timeZone1);
        timeZone1.setRawOffset(3);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = timeZone1.getOffset(26458297, 14, 292278993, 26306790, 54, 26439387);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test05671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05671");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        java.lang.String str3 = dateTimeZone1.getShortName((long) 86399999);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        java.util.TimeZone.setDefault(timeZone4);
        java.util.TimeZone.setDefault(timeZone4);
        java.util.TimeZone.setDefault(timeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.097" + "'", str3, "+00:00:00.097");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test05672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05672");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean8 = localDateTime6.isSupported(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.centuries();
        boolean boolean15 = localDateTime12.equals((java.lang.Object) durationFieldType14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime12.getFieldTypes();
        java.lang.String str17 = localDateTime12.toString();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.plusMillis(22);
        boolean boolean20 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plus(readableDuration21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plus(readablePeriod25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str31 = dateTimeZone29.getShortName((long) (short) 10);
        long long33 = dateTimeZone29.convertUTCToLocal((long) ' ');
        java.lang.String str34 = dateTimeZone29.toString();
        boolean boolean36 = dateTimeZone29.equals((java.lang.Object) (short) 100);
        java.util.Locale locale38 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str39 = dateTimeZone29.getShortName((long) (-1), locale38);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone29);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withField(dateTimeFieldType41, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.weekyears();
        org.joda.time.DurationField durationField48 = chronology46.centuries();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.minuteOfDay();
        long long53 = chronology46.add((long) 2, (long) 21, (int) '4');
        boolean boolean54 = dateTimeFieldType41.isSupported(chronology46);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str57 = dateTimeZone55.getShortName((long) (short) 10);
        long long59 = dateTimeZone55.convertUTCToLocal((long) ' ');
        java.lang.String str60 = dateTimeZone55.toString();
        long long62 = dateTimeZone55.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(dateTimeZone55);
        org.joda.time.Chronology chronology64 = chronology46.withZone(dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField65 = chronology64.clockhourOfDay();
        java.util.Locale locale66 = java.util.Locale.GERMANY;
        java.lang.String str67 = locale66.getCountry();
        java.lang.String str68 = locale66.toLanguageTag();
        int int69 = dateTimeField65.getMaximumShortTextLength(locale66);
        java.util.Locale locale70 = locale66.stripExtensions();
        org.joda.time.LocalDateTime localDateTime71 = property27.setCopy("30267", locale70);
        // The following exception was thrown during execution in test generation
        try {
            int int73 = localDateTime71.getValue(933);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 933");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T07:21:22.618" + "'", str17, "2022-02-22T07:21:22.618");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 32L + "'", long33 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1094L + "'", long53 == 1094L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 32L + "'", long59 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "UTC" + "'", str60, "UTC");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 32L + "'", long62 == 32L);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "DE" + "'", str67, "DE");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "de-DE" + "'", str68, "de-DE");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localDateTime71);
    }

    @Test
    public void test05673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05673");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        long long9 = durationField7.getMillis((long) '#');
        long long11 = durationField7.getMillis(1645629503377L);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 35L + "'", long9 == 35L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645629503377L + "'", long11 == 1645629503377L);
    }

    @Test
    public void test05674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05674");
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, (int) '#');
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withYear((int) (short) 100);
        java.lang.String str21 = localDateTime20.toString();
        boolean boolean22 = localDateTime10.isAfter((org.joda.time.ReadablePartial) localDateTime20);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray25 = strSet24.toArray();
        boolean boolean26 = strSet24.isEmpty();
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray29 = strSet28.toArray();
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        boolean boolean32 = strSet28.removeAll((java.util.Collection<java.lang.String>) strSet31);
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray37 = new org.joda.time.DurationFieldType[] { durationFieldType35, durationFieldType36 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray38 = strSet34.toArray(durationFieldTypeArray37);
        boolean boolean39 = strSet28.containsAll((java.util.Collection<java.lang.String>) strSet34);
        java.lang.Object[] objArray40 = strSet34.toArray();
        boolean boolean41 = strSet24.removeAll((java.util.Collection<java.lang.String>) strSet34);
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray44 = strSet43.toArray();
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleAttributes();
        boolean boolean47 = strSet43.removeAll((java.util.Collection<java.lang.String>) strSet46);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray52 = new org.joda.time.DurationFieldType[] { durationFieldType50, durationFieldType51 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray53 = strSet49.toArray(durationFieldTypeArray52);
        boolean boolean54 = strSet43.containsAll((java.util.Collection<java.lang.String>) strSet49);
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray57 = strSet56.toArray();
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleAttributes();
        boolean boolean60 = strSet56.removeAll((java.util.Collection<java.lang.String>) strSet59);
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray65 = new org.joda.time.DurationFieldType[] { durationFieldType63, durationFieldType64 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray66 = strSet62.toArray(durationFieldTypeArray65);
        boolean boolean67 = strSet56.containsAll((java.util.Collection<java.lang.String>) strSet62);
        java.lang.Object[] objArray68 = strSet62.toArray();
        boolean boolean69 = strSet43.retainAll((java.util.Collection<java.lang.String>) strSet62);
        boolean boolean70 = strSet34.addAll((java.util.Collection<java.lang.String>) strSet62);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean72 = strSet62.remove((java.lang.Object) dateTimeFieldType71);
        org.joda.time.LocalDateTime.Property property73 = localDateTime10.property(dateTimeFieldType71);
        org.joda.time.DurationFieldType durationFieldType74 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology77 = localDateTime76.getChronology();
        org.joda.time.DurationField durationField78 = chronology77.weekyears();
        org.joda.time.DurationField durationField79 = chronology77.centuries();
        org.joda.time.DurationField durationField80 = durationFieldType74.getField(chronology77);
        boolean boolean81 = dateTimeFieldType71.isSupported(chronology77);
        org.joda.time.DurationField durationField82 = chronology77.millis();
        org.joda.time.DurationField durationField83 = chronology77.seconds();
        org.joda.time.DurationField durationField84 = chronology77.millis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime(0, 81421977, 52, (-15), 17, 26396, 55021617, chronology77);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -15 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0100-02-22T07:21:22.673" + "'", str21, "0100-02-22T07:21:22.673");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(durationFieldTypeArray37);
        org.junit.Assert.assertNotNull(durationFieldTypeArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(durationFieldTypeArray52);
        org.junit.Assert.assertNotNull(durationFieldTypeArray53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertNotNull(durationFieldTypeArray65);
        org.junit.Assert.assertNotNull(durationFieldTypeArray66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(durationField84);
    }

    @Test
    public void test05675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05675");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = chronology2.getZone();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.DurationField durationField6 = chronology2.years();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        long long10 = dateTimeField8.roundCeiling(1645629491065L);
        long long12 = dateTimeField8.roundFloor(36L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645632000000L + "'", long10 == 1645632000000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test05676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05676");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusHours(0);
        int int7 = localDateTime3.getWeekyear();
        org.joda.time.Chronology chronology8 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.minutes();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str14 = dateTimeZone12.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        java.lang.String str17 = property16.getName();
        org.joda.time.LocalDateTime localDateTime18 = property16.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusYears(7);
        int int21 = localDateTime20.getEra();
        java.util.Locale locale23 = java.util.Locale.forLanguageTag("117");
        java.lang.String str24 = locale23.getVariant();
        java.lang.String str25 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) localDateTime20, locale23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = dateTimeField11.getType();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "millisOfDay" + "'", str17, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "20" + "'", str25, "20");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
    }

    @Test
    public void test05677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05677");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        org.joda.time.DurationField durationField8 = property7.getLeapDurationField();
        org.joda.time.DurationField durationField9 = property7.getRangeDurationField();
        java.lang.String str10 = durationField9.toString();
        long long12 = durationField9.getMillis((-59990L));
        long long13 = durationField9.getUnitMillis();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DurationField[hours]" + "'", str10, "DurationField[hours]");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-215964000000L) + "'", long12 == (-215964000000L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 3600000L + "'", long13 == 3600000L);
    }

    @Test
    public void test05678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05678");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMonths(22);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra(3);
        int[] intArray13 = localDateTime12.getValues();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.era();
        org.joda.time.Chronology chronology15 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(intArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[320, 4, 22, 26482777]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test05679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05679");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.hours();
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.clockhourOfDay();
        int int7 = dateTimeField5.get(1645629354990L);
        java.util.Locale locale11 = new java.util.Locale("und", "+00:00:00.097");
        boolean boolean12 = locale11.hasExtensions();
        java.lang.String str13 = dateTimeField5.getAsShortText((long) 26169, locale11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.ReadableInstant readableInstant19 = null;
        long long20 = property18.getDifferenceAsLong(readableInstant19);
        java.util.Locale locale22 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        org.joda.time.LocalDateTime localDateTime24 = property18.setCopy("26153615", locale22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusYears((-997));
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.weekyears();
        org.joda.time.DurationField durationField32 = chronology30.seconds();
        org.joda.time.DurationField durationField33 = chronology30.seconds();
        org.joda.time.DurationField durationField34 = chronology30.seconds();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str37 = dateTimeZone35.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.millisOfDay();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusHours((int) (short) 10);
        int int46 = localDateTime43.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.minus(readablePeriod47);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str51 = dateTimeZone49.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(dateTimeZone49);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.millisOfDay();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withYear((int) (short) 100);
        int int56 = localDateTime55.getCenturyOfEra();
        boolean boolean57 = localDateTime43.isBefore((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.plusMinutes(0);
        int[] intArray61 = chronology30.get((org.joda.time.ReadablePartial) localDateTime59, 2022L);
        int[] intArray63 = dateTimeField5.add((org.joda.time.ReadablePartial) localDateTime26, 55, intArray61, 0);
        java.lang.String str65 = dateTimeField5.getAsShortText(1645629400999L);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.Locale locale72 = new java.util.Locale("fra", "fran\347ais (Canada)");
        java.lang.String str73 = dateTimeZone68.getShortName((long) 26198, locale72);
        java.lang.String str74 = locale72.getDisplayScript();
        java.lang.String str75 = dateTimeField5.getAsShortText(55231121, locale72);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertEquals(locale11.toString(), "und_+00:00:00.097");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "24" + "'", str13, "24");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 21 + "'", int46 == 21);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1970, 1, 1, 2022]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1970, 1, 1, 2022]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "15" + "'", str65, "15");
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertEquals(locale72.toString(), "fra_FRAN\347AIS (CANADA)");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00:00.052" + "'", str73, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "55231121" + "'", str75, "55231121");
    }

    @Test
    public void test05680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05680");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("52301668", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05681");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        long long5 = property4.remainder();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundFloorCopy();
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder7.addUnicodeLocaleAttribute("und");
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str12 = locale10.getDisplayCountry(locale11);
        java.lang.String str13 = locale11.getDisplayName();
        java.util.Locale.Builder builder14 = builder9.setLocale(locale11);
        java.util.Locale.Builder builder16 = builder9.setScript("");
        java.util.Locale locale17 = builder9.build();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        long long29 = dateTimeField27.roundFloor((long) (-1));
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder32 = builder30.addUnicodeLocaleAttribute("und");
        java.util.Locale locale33 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale34 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str35 = locale33.getDisplayCountry(locale34);
        java.lang.String str36 = locale34.getDisplayName();
        java.util.Locale.Builder builder37 = builder32.setLocale(locale34);
        int int38 = dateTimeField27.getMaximumShortTextLength(locale34);
        java.lang.String str39 = dateTimeField23.getAsShortText((long) 'a', locale34);
        java.lang.String str40 = locale17.getDisplayLanguage(locale34);
        java.util.Locale locale41 = locale34.stripExtensions();
        boolean boolean42 = property4.equals((java.lang.Object) locale34);
        org.joda.time.LocalDateTime localDateTime44 = property4.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime45 = property4.getLocalDateTime();
        org.joda.time.DateTimeField dateTimeField46 = property4.getField();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str49 = dateTimeZone47.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(dateTimeZone47);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.plusMonths(16);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.year();
        int int55 = property54.getMaximumValue();
        org.joda.time.tz.NameProvider nameProvider56 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Category category57 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale58 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category57, locale58);
        java.lang.String str60 = locale58.toLanguageTag();
        java.lang.String str61 = locale58.getLanguage();
        java.lang.String str64 = nameProvider56.getShortName(locale58, "days", "26149261");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider56);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider56);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider56);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider56);
        java.util.Locale locale72 = new java.util.Locale("Etc/UTC", "26151809", "26169002");
        java.lang.String str75 = nameProvider56.getName(locale72, "2022-02-22T07:16:53.570", "26162741");
        int int76 = property54.getMaximumTextLength(locale72);
        java.util.Locale.setDefault(locale72);
        java.lang.String str78 = property4.getAsText(locale72);
        org.joda.time.LocalDateTime localDateTime79 = property4.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime80 = property4.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Canada" + "'", str12, "Canada");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Franz\366sisch (Kanada)" + "'", str13, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-60000L) + "'", long29 == (-60000L));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Canada" + "'", str35, "Canada");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Franz\366sisch (Kanada)" + "'", str36, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "97" + "'", str39, "97");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "fran\347ais" + "'", str40, "fran\347ais");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 292278993 + "'", int55 == 292278993);
        org.junit.Assert.assertNotNull(nameProvider56);
        org.junit.Assert.assertTrue("'" + category57 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category57.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "fr" + "'", str60, "fr");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "fr" + "'", str61, "fr");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals(locale72.toString(), "etc/utc_26151809_26169002");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 9 + "'", int76 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "26482831" + "'", str78, "26482831");
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime80);
    }

    @Test
    public void test05682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05682");
        java.util.Locale locale1 = new java.util.Locale("26178487");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = locale1.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for 26178487");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "26178487");
    }

    @Test
    public void test05683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05683");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.hours();
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, (int) '#');
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str18 = dateTimeZone16.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.centuries();
        boolean boolean22 = localDateTime19.equals((java.lang.Object) durationFieldType21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime19.getFieldTypes();
        java.lang.String str24 = localDateTime19.toString();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean28 = localDateTime19.isSupported(dateTimeFieldType27);
        int int29 = localDateTime15.indexOf(dateTimeFieldType27);
        int[] intArray31 = chronology2.get((org.joda.time.ReadablePartial) localDateTime15, 1645629358650L);
        org.joda.time.DurationField durationField32 = chronology2.millis();
        org.joda.time.DurationField durationField33 = chronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology2.secondOfDay();
        java.util.Locale locale35 = null;
        int int36 = dateTimeField34.getMaximumTextLength(locale35);
        boolean boolean37 = dateTimeField34.isLenient();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T07:21:22.888" + "'", str24, "2022-02-22T07:21:22.888");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2022, 2, 23, 54958650]");
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test05684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05684");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.LocalDateTime localDateTime7 = property4.setCopy(67);
        org.joda.time.LocalDateTime localDateTime8 = property4.roundFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plus(readablePeriod9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.minusMonths(27427155);
        org.joda.time.LocalDateTime.Property property13 = localDateTime8.year();
        java.lang.String str14 = property13.getName();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "year" + "'", str14, "year");
    }

    @Test
    public void test05685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05685");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("und");
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale4.getDisplayName();
        java.util.Locale.Builder builder7 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder8 = builder2.clearExtensions();
        java.util.Locale.Builder builder10 = builder2.removeUnicodeLocaleAttribute("26185191");
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.util.Locale.Builder builder12 = builder10.setLocale(locale11);
        java.util.Locale locale13 = builder12.build();
        java.util.Locale.Builder builder15 = builder12.addUnicodeLocaleAttribute("26349462");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Canada" + "'", str5, "Canada");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "French (Canada)" + "'", str6, "French (Canada)");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test05686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05686");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("26151980");
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusHours(26149);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.minutes();
        org.joda.time.DurationField durationField6 = chronology4.centuries();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test05687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05687");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = localDateTime3.getFieldType((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusMonths(0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.minusSeconds(55000019);
        int int10 = localDateTime9.size();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusMonths(45);
        int int14 = localDateTime13.getMinuteOfHour();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minus(readableDuration15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = property17.setCopy("2022-02-22T00:00:00.001");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T00:00:00.001\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 34 + "'", int14 == 34);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test05688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05688");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        long long8 = dateTimeZone0.adjustOffset((long) (short) 100, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone0);
        long long12 = dateTimeZone0.convertUTCToLocal((long) 0);
        long long15 = dateTimeZone0.convertLocalToUTC(1645629366715L, false);
        long long19 = dateTimeZone0.convertLocalToUTC((long) 81287455, true, 1645165151799L);
        java.util.TimeZone timeZone20 = dateTimeZone0.toTimeZone();
        timeZone20.setRawOffset((-15));
        timeZone20.setID("26236078");
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645629366715L + "'", long15 == 1645629366715L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 81287455L + "'", long19 == 81287455L);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test05689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05689");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(22, 7);
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test05690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05690");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.minuteOfDay();
        boolean boolean6 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.DateTimeField dateTimeField7 = chronology3.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds(9);
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.minus(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readablePeriod16);
        int int18 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minusHours(32);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readablePeriod21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withMonthOfYear(49);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test05691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05691");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.lang.String str11 = dateTimeField7.getAsShortText(100, locale10);
        int int12 = property4.getMaximumShortTextLength(locale10);
        java.lang.String str13 = locale10.getDisplayLanguage();
        java.util.Locale.Category category14 = java.util.Locale.Category.DISPLAY;
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder15.addUnicodeLocaleAttribute("und");
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str20 = locale18.getDisplayCountry(locale19);
        java.lang.String str21 = locale19.getDisplayName();
        java.util.Locale.Builder builder22 = builder17.setLocale(locale19);
        java.util.Locale.Builder builder24 = builder17.setScript("");
        java.util.Locale locale25 = builder17.build();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        long long37 = dateTimeField35.roundFloor((long) (-1));
        java.util.Locale.Builder builder38 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder40 = builder38.addUnicodeLocaleAttribute("und");
        java.util.Locale locale41 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale42 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str43 = locale41.getDisplayCountry(locale42);
        java.lang.String str44 = locale42.getDisplayName();
        java.util.Locale.Builder builder45 = builder40.setLocale(locale42);
        int int46 = dateTimeField35.getMaximumShortTextLength(locale42);
        java.lang.String str47 = dateTimeField31.getAsShortText((long) 'a', locale42);
        java.lang.String str48 = locale25.getDisplayLanguage(locale42);
        java.util.Locale locale49 = locale42.stripExtensions();
        java.util.Locale.setDefault(category14, locale42);
        java.util.Locale locale51 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleAttributes();
        java.lang.String str54 = locale51.getDisplayCountry(locale52);
        java.util.Locale locale55 = locale52.stripExtensions();
        java.lang.String str56 = locale55.getISO3Language();
        java.util.Locale.setDefault(category14, locale55);
        java.util.Set<java.lang.Character> charSet58 = locale55.getExtensionKeys();
        boolean boolean59 = locale10.equals((java.lang.Object) charSet58);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "100" + "'", str11, "100");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 7 + "'", int12 == 7);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "French" + "'", str13, "French");
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category14.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Canada" + "'", str20, "Canada");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "French (Canada)" + "'", str21, "French (Canada)");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-60000L) + "'", long37 == (-60000L));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Canada" + "'", str43, "Canada");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "French (Canada)" + "'", str44, "French (Canada)");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "97" + "'", str47, "97");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "fran\347ais" + "'", str48, "fran\347ais");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "China" + "'", str54, "China");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(charSet58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test05692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05692");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.dayOfYear();
        org.joda.time.DurationField durationField8 = chronology2.days();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMinutes(635);
        int int12 = localDateTime11.getDayOfWeek();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime11.getFieldTypes();
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.dayOfYear();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test05693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05693");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("26191330");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet6 = provider0.getAvailableIDs();
        java.util.Spliterator<java.lang.String> strSpliterator7 = strSet6.spliterator();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strSpliterator7);
    }

    @Test
    public void test05694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05694");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.monthOfYear();
        org.joda.time.DurationField durationField10 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField11 = chronology3.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray14 = chronology3.get(readablePeriod12, (-59006939975428L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test05695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05695");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean8 = localDateTime6.isSupported(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.centuries();
        boolean boolean15 = localDateTime12.equals((java.lang.Object) durationFieldType14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime12.getFieldTypes();
        java.lang.String str17 = localDateTime12.toString();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.plusMillis(22);
        boolean boolean20 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime6.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withDurationAdded(readableDuration24, (int) '#');
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.weekyear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str32 = dateTimeZone30.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.millisOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withYear((int) (short) 100);
        java.lang.String str37 = localDateTime36.toString();
        boolean boolean38 = localDateTime26.isAfter((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.withEra((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime36.withYear(26163523);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime36.plus(readablePeriod43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.secondOfMinute();
        boolean boolean46 = localDateTime22.equals((java.lang.Object) property45);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T07:21:23.170" + "'", str17, "2022-02-22T07:21:23.170");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0100-02-22T07:21:23.170" + "'", str37, "0100-02-22T07:21:23.170");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test05696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05696");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        int int2 = localDateTime1.getCenturyOfEra();
        int int3 = localDateTime1.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withHourOfDay((int) (short) 0);
        int int6 = localDateTime1.getDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withSecondOfMinute(26507059);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26507059 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 19 + "'", int2 == 19);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 70 + "'", int3 == 70);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
    }

    @Test
    public void test05697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05697");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        long long14 = dateTimeZone10.convertUTCToLocal((long) ' ');
        java.lang.String str15 = dateTimeZone10.toString();
        boolean boolean17 = dateTimeZone10.equals((java.lang.Object) (short) 100);
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str20 = dateTimeZone10.getShortName((long) (-1), locale19);
        long long23 = dateTimeZone10.convertLocalToUTC((long) (short) 10, true);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 7, dateTimeZone10);
        org.joda.time.DateTime dateTime25 = localDateTime8.toDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime8.withDayOfYear(9);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusMonths(26169744);
        int int30 = localDateTime29.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.minus(readableDuration31);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 32L + "'", long14 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10L + "'", long23 == 10L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 21787 + "'", int30 == 21787);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test05698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05698");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        int int5 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.monthOfYear();
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.lang.String str12 = locale9.getDisplayCountry(locale10);
        java.util.Locale locale13 = locale10.stripExtensions();
        int int14 = property8.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime15 = property8.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property8.getFieldType();
        org.joda.time.LocalDateTime localDateTime17 = property8.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "China" + "'", str12, "China");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test05699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05699");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.monthOfYear();
        org.joda.time.DurationField durationField7 = chronology2.months();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str10 = dateTimeZone8.getShortName((long) (short) 10);
        long long12 = dateTimeZone8.convertUTCToLocal((long) ' ');
        java.lang.String str13 = dateTimeZone8.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        org.joda.time.Chronology chronology15 = chronology2.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.dayOfYear();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 32L + "'", long12 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test05700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05700");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(18, 0);
        long long5 = dateTimeZone2.adjustOffset(1645629359098L, true);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(15, 21);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.lang.String str12 = locale10.toLanguageTag();
        java.lang.String str13 = locale10.getScript();
        java.util.Set<java.lang.Character> charSet14 = locale10.getExtensionKeys();
        java.lang.String str15 = dateTimeZone8.getName((long) 11000, locale10);
        long long17 = dateTimeZone2.getMillisKeepLocal(dateTimeZone8, (long) 26295);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645629359098L + "'", long5 == 1645629359098L);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "und" + "'", str12, "und");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(charSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+15:21" + "'", str15, "+15:21");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 9566295L + "'", long17 == 9566295L);
    }

    @Test
    public void test05701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05701");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        boolean boolean7 = dateTimeZone0.equals((java.lang.Object) (short) 100);
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = dateTimeZone0.getShortName((long) (-1), locale9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withField(dateTimeFieldType12, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.weekyears();
        org.joda.time.DurationField durationField19 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.minuteOfDay();
        long long24 = chronology17.add((long) 2, (long) 21, (int) '4');
        boolean boolean25 = dateTimeFieldType12.isSupported(chronology17);
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField27 = chronology17.halfdays();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str30 = dateTimeZone28.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusHours((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = localDateTime36.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.minusMillis(0);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withWeekyear(1970);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusDays(15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = localDateTime43.toString(dateTimeFormatter46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.withHourOfDay(15);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusMillis(1645629378);
        long long53 = chronology17.set((org.joda.time.ReadablePartial) localDateTime49, 1645629417380L);
        int int54 = localDateTime49.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1094L + "'", long24 == 1094L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-02-18T15:21:23.406" + "'", str47, "1970-02-18T15:21:23.406");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 4202483406L + "'", long53 == 4202483406L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1970 + "'", int54 == 1970);
    }

    @Test
    public void test05702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05702");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("26248686");
        timeZone1.setID("2022-02-22T14:31:34.000");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test05703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05703");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        int int5 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekOfWeekyear((int) (byte) 1);
        int int8 = localDateTime0.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.plusDays(500);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        java.lang.String str12 = durationFieldType11.toString();
        boolean boolean13 = localDateTime10.isSupported(durationFieldType11);
        int int14 = localDateTime10.size();
        int int15 = localDateTime10.getMillisOfSecond();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime10.withDurationAdded(readableDuration16, 32);
        int int19 = localDateTime10.getDayOfYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 7 + "'", int8 == 7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "days" + "'", str12, "days");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 504 + "'", int15 == 504);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 188 + "'", int19 == 188);
    }

    @Test
    public void test05704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05704");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        long long8 = dateTimeZone0.adjustOffset((long) (short) 100, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        boolean boolean11 = dateTimeZone0.equals((java.lang.Object) "CA");
        int int13 = dateTimeZone0.getOffsetFromLocal(1094L);
        java.util.TimeZone timeZone14 = dateTimeZone0.toTimeZone();
        java.lang.String str15 = timeZone14.getID();
        int int17 = timeZone14.getOffset(1640995200000L);
        int int19 = timeZone14.getOffset(1645514199918L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = timeZone14.getDisplayName(true, 81377961);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 81377961");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test05705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05705");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("Frankreich");
        timeZone1.setRawOffset(292278993);
        timeZone1.setRawOffset(12);
        timeZone1.setRawOffset(1645629378);
        boolean boolean8 = timeZone1.observesDaylightTime();
        java.lang.Object obj9 = timeZone1.clone();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=1645629378,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=1645629378,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=1645629378,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test05706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05706");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DurationField durationField8 = chronology3.months();
        org.joda.time.DurationField durationField9 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology3.secondOfDay();
        org.joda.time.DurationField durationField12 = chronology3.months();
        long long15 = durationField12.getMillis((long) 20, 1645629564254L);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52444800000L + "'", long15 == 52444800000L);
    }

    @Test
    public void test05707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05707");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        int int5 = property4.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusHours((int) (short) 10);
        int int18 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDateTime17);
        java.lang.String str20 = dateTimeField6.getAsText((long) (-292275054));
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str23 = dateTimeZone21.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.millisOfDay();
        org.joda.time.ReadableInstant readableInstant26 = null;
        long long27 = property25.getDifferenceAsLong(readableInstant26);
        java.util.Locale locale28 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str29 = locale28.getISO3Language();
        java.lang.String str30 = property25.getAsShortText(locale28);
        int int31 = dateTimeField6.getMaximumShortTextLength(locale28);
        long long33 = dateTimeField6.roundHalfFloor(0L);
        java.util.Locale locale35 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale36 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str37 = locale35.getDisplayCountry(locale36);
        java.lang.String str38 = locale36.getDisplayName();
        java.lang.String str39 = dateTimeField6.getAsText(19, locale36);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str42 = dateTimeZone40.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(dateTimeZone40);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.millisOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusHours((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = localDateTime48.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.withMillisOfDay((int) '4');
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plusYears(51);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusWeeks((int) (byte) -1);
        int int58 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.LocalDateTime.Property property59 = localDateTime57.centuryOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 292278993 + "'", int5 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-292275054) + "'", int18 == (-292275054));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1969" + "'", str20, "1969");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "fra" + "'", str29, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "26483570" + "'", str30, "26483570");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-259200000L) + "'", long33 == (-259200000L));
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Canada" + "'", str37, "Canada");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "French (Canada)" + "'", str38, "French (Canada)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "19" + "'", str39, "19");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-292275054) + "'", int58 == (-292275054));
        org.junit.Assert.assertNotNull(property59);
    }

    @Test
    public void test05708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05708");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusYears(7);
        int int9 = localDateTime8.getEra();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.centuries();
        boolean boolean16 = localDateTime13.equals((java.lang.Object) durationFieldType15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = localDateTime13.getFieldTypes();
        java.lang.String str18 = localDateTime13.toString();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime13.withField(dateTimeFieldType21, 2);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime8.withField(dateTimeFieldType21, 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.year();
        java.lang.String str29 = property28.toString();
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder32 = builder30.addUnicodeLocaleAttribute("und");
        java.util.Locale locale33 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale34 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str35 = locale33.getDisplayCountry(locale34);
        java.lang.String str36 = locale34.getDisplayName();
        java.util.Locale.Builder builder37 = builder32.setLocale(locale34);
        java.util.Locale.Builder builder39 = builder32.setScript("");
        java.util.Locale locale40 = builder32.build();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType48.getField(chronology49);
        long long52 = dateTimeField50.roundFloor((long) (-1));
        java.util.Locale.Builder builder53 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder55 = builder53.addUnicodeLocaleAttribute("und");
        java.util.Locale locale56 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale57 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str58 = locale56.getDisplayCountry(locale57);
        java.lang.String str59 = locale57.getDisplayName();
        java.util.Locale.Builder builder60 = builder55.setLocale(locale57);
        int int61 = dateTimeField50.getMaximumShortTextLength(locale57);
        java.lang.String str62 = dateTimeField46.getAsShortText((long) 'a', locale57);
        java.lang.String str63 = locale40.getDisplayLanguage(locale57);
        java.util.Set<java.lang.String> strSet64 = locale40.getUnicodeLocaleKeys();
        java.lang.String str65 = property28.getAsShortText(locale40);
        org.joda.time.LocalDateTime localDateTime67 = property28.addWrapFieldToCopy(1439);
        org.joda.time.DurationField durationField68 = property28.getRangeDurationField();
        org.joda.time.tz.NameProvider nameProvider69 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale70 = java.util.Locale.CANADA;
        java.lang.String str73 = nameProvider69.getShortName(locale70, "fran\347ais", "2022-02-22T07:15:48.066");
        java.lang.String str74 = locale70.getLanguage();
        java.util.Set<java.lang.Character> charSet75 = locale70.getExtensionKeys();
        java.lang.String str76 = property28.getAsShortText(locale70);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T07:21:23.629" + "'", str18, "2022-02-22T07:21:23.629");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Property[year]" + "'", str29, "Property[year]");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Canada" + "'", str35, "Canada");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "French (Canada)" + "'", str36, "French (Canada)");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-60000L) + "'", long52 == (-60000L));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Canada" + "'", str58, "Canada");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "French (Canada)" + "'", str59, "French (Canada)");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "97" + "'", str62, "97");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "fran\347ais" + "'", str63, "fran\347ais");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2015" + "'", str65, "2015");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNull(durationField68);
        org.junit.Assert.assertNotNull(nameProvider69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_CA");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "en" + "'", str74, "en");
        org.junit.Assert.assertNotNull(charSet75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "2015" + "'", str76, "2015");
    }

    @Test
    public void test05709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05709");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField4 = dateTimeField3.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str7 = dateTimeZone5.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        java.lang.String str10 = property9.getName();
        org.joda.time.LocalDateTime localDateTime11 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears((int) (short) -1);
        int[] intArray21 = new int[] { 'a', (-1), 10, 26151696, 4, (byte) 1 };
        int[] intArray23 = dateTimeField3.set((org.joda.time.ReadablePartial) localDateTime11, 0, intArray21, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str26 = dateTimeZone24.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusHours((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = localDateTime32.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.withMillisOfDay((int) '4');
        boolean boolean38 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime.Property property39 = localDateTime32.hourOfDay();
        org.joda.time.DurationField durationField40 = property39.getRangeDurationField();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "millisOfDay" + "'", str10, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 1, 10, 26151696, 4, 1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 1, 10, 26151696, 4, 1]");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test05710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05710");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = dateTimeField2.getAsShortText(100, locale5);
        int int8 = dateTimeField2.getLeapAmount((long) (short) 100);
        org.joda.time.DurationField durationField9 = dateTimeField2.getRangeDurationField();
        long long11 = durationField9.getMillis(25836881);
        java.lang.String str12 = durationField9.toString();
        long long15 = durationField9.getDifferenceAsLong(1645629613684L, 1645629528462L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "100" + "'", str6, "100");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2232306518400000L + "'", long11 == 2232306518400000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DurationField[days]" + "'", str12, "DurationField[days]");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test05711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05711");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        int int5 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.monthOfYear();
        int int9 = property8.getLeapAmount();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test05712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05712");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.DurationField durationField6 = chronology3.hours();
        boolean boolean7 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DateTimeField dateTimeField8 = chronology3.secondOfDay();
        org.joda.time.DurationField durationField9 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology3);
        int int12 = localDateTime11.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minus(readablePeriod13);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test05713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05713");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("26440055", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05714");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale7.getISO3Language();
        java.lang.String str9 = property4.getAsShortText(locale7);
        org.joda.time.DurationField durationField10 = property4.getDurationField();
        long long13 = durationField10.add((long) 1, 10);
        boolean boolean14 = durationField10.isPrecise();
        int int16 = durationField10.getValue((long) 26149500);
        int int19 = durationField10.getValue((long) (short) 10, 0L);
        long long22 = durationField10.add((long) 'a', (long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = durationField10.getType();
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.hours();
        org.joda.time.DurationField durationField29 = durationFieldType24.getField(chronology27);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.hourOfHalfday();
        org.joda.time.DurationField durationField31 = chronology27.weeks();
        boolean boolean32 = durationFieldType23.isSupported(chronology27);
        org.joda.time.DateTimeField dateTimeField33 = chronology27.year();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str36 = dateTimeZone34.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.millisOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusHours((int) (short) 10);
        int int45 = localDateTime42.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.minusMinutes(0);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str49 = durationFieldType48.toString();
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.weekyears();
        org.joda.time.DurationField durationField55 = chronology53.centuries();
        org.joda.time.DurationField durationField56 = durationFieldType50.getField(chronology53);
        boolean boolean57 = durationFieldType48.isSupported(chronology53);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime42.withFieldAdded(durationFieldType48, (-1));
        int int60 = localDateTime59.getWeekOfWeekyear();
        int int61 = dateTimeField33.getMinimumValue((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.withDurationAdded(readableDuration63, (int) '#');
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.weekyear();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property69 = localDateTime65.dayOfMonth();
        int int70 = localDateTime65.getWeekyear();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime65.withYear(54974408);
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.year();
        int int74 = localDateTime72.getMonthOfYear();
        int[] intArray76 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray78 = dateTimeField33.addWrapField((org.joda.time.ReadablePartial) localDateTime72, 2021, intArray76, 126);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "26483707" + "'", str9, "26483707");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 11L + "'", long13 == 11L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 26149500 + "'", int16 == 26149500);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 197L + "'", long22 == 197L);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 21 + "'", int45 == 21);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "weekyears" + "'", str49, "weekyears");
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-292275054) + "'", int61 == (-292275054));
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2022 + "'", int70 == 2022);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test05715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05715");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long4 = dateTimeField2.roundFloor((long) (-1));
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("und");
        java.util.Locale locale8 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        java.lang.String str11 = locale9.getDisplayName();
        java.util.Locale.Builder builder12 = builder7.setLocale(locale9);
        int int13 = dateTimeField2.getMaximumShortTextLength(locale9);
        int int15 = dateTimeField2.getMaximumValue(1645629352137L);
        long long17 = dateTimeField2.roundCeiling((long) 34);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str20 = dateTimeZone18.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfDay();
        org.joda.time.ReadableInstant readableInstant23 = null;
        long long24 = property22.getDifferenceAsLong(readableInstant23);
        org.joda.time.DurationField durationField25 = property22.getLeapDurationField();
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.lang.String str28 = locale26.getLanguage();
        java.lang.String str29 = locale26.toLanguageTag();
        java.lang.String str30 = property22.getAsShortText(locale26);
        org.joda.time.LocalDateTime localDateTime31 = property22.roundCeilingCopy();
        org.joda.time.DurationField durationField32 = property22.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str35 = dateTimeZone33.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.centuries();
        boolean boolean39 = localDateTime36.equals((java.lang.Object) durationFieldType38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = localDateTime36.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str43 = dateTimeZone41.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(dateTimeZone41);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.millisOfDay();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime44.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.secondOfMinute();
        boolean boolean55 = localDateTime36.isAfter((org.joda.time.ReadablePartial) localDateTime53);
        int int56 = property22.compareTo((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime.Property property57 = localDateTime36.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(15, 21);
        java.util.Locale locale62 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet63 = locale62.getUnicodeLocaleAttributes();
        java.lang.String str64 = locale62.toLanguageTag();
        java.lang.String str65 = locale62.getScript();
        java.util.Set<java.lang.Character> charSet66 = locale62.getExtensionKeys();
        java.lang.String str67 = dateTimeZone60.getName((long) 11000, locale62);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology71 = localDateTime70.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField73 = chronology71.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((-100L), chronology71);
        org.joda.time.DateTimeField dateTimeField75 = chronology71.yearOfCentury();
        int int76 = dateTimeField75.getMaximumValue();
        java.util.Locale locale78 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet79 = locale78.getUnicodeLocaleAttributes();
        java.lang.String str80 = locale78.toLanguageTag();
        java.lang.String str81 = locale78.getScript();
        java.util.Locale locale82 = java.util.Locale.US;
        java.lang.String str83 = locale78.getDisplayName(locale82);
        java.lang.String str84 = locale78.getLanguage();
        java.lang.String str85 = dateTimeField75.getAsShortText(31, locale78);
        boolean boolean86 = locale78.hasExtensions();
        java.lang.String str87 = locale62.getDisplayVariant(locale78);
        java.lang.String str88 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localDateTime36, locale62);
        int int89 = localDateTime36.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60000L) + "'", long4 == (-60000L));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Canada" + "'", str10, "Canada");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "French (Canada)" + "'", str11, "French (Canada)");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1439 + "'", int15 == 1439);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 60000L + "'", long17 == 60000L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNull(durationField25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "und" + "'", str29, "und");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "26483726" + "'", str30, "26483726");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "und" + "'", str64, "und");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(charSet66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+15:21" + "'", str67, "+15:21");
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 99 + "'", int76 == 99);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "und" + "'", str80, "und");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "31" + "'", str85, "31");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "441" + "'", str88, "441");
// flaky:         org.junit.Assert.assertTrue("'" + int89 + "' != '" + 21 + "'", int89 == 21);
    }

    @Test
    public void test05716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05716");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("+00:00:00.100", (double) 26310);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=26310.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05717");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.secondOfMinute();
        java.lang.String str14 = property13.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property13.getFieldType();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.weekyears();
        org.joda.time.DurationField durationField20 = chronology18.seconds();
        org.joda.time.DurationField durationField21 = chronology18.seconds();
        org.joda.time.DurationField durationField22 = chronology18.seconds();
        org.joda.time.DateTimeField dateTimeField23 = chronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology18.centuryOfEra();
        boolean boolean25 = dateTimeFieldType15.isSupported(chronology18);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.weekyears();
        org.joda.time.DurationField durationField30 = chronology28.centuries();
        org.joda.time.DurationField durationField31 = chronology28.hours();
        org.joda.time.DurationField durationField32 = chronology28.seconds();
        org.joda.time.DateTimeField dateTimeField33 = chronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField34 = chronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType15.getField(chronology28);
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType15.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.weekyears();
        boolean boolean43 = dateTimeFieldType38.isSupported(chronology41);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        java.lang.String str45 = localDateTime44.toString();
        int int46 = localDateTime44.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.minusMonths(2);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str52 = dateTimeZone50.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(dateTimeZone50);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.millisOfDay();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        long long61 = dateTime60.getMillis();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str64 = dateTimeZone62.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now(dateTimeZone62);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = localDateTime65.getFieldType((int) (short) 0);
        boolean boolean68 = dateTime60.isSupported(dateTimeFieldType67);
        org.joda.time.DateTime dateTime69 = localDateTime48.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        int[] intArray71 = chronology41.get((org.joda.time.ReadablePartial) localDateTime48, 11L);
        org.joda.time.DateTimeField dateTimeField72 = chronology41.centuryOfEra();
        org.joda.time.DurationField durationField73 = chronology41.minutes();
        boolean boolean74 = durationFieldType37.isSupported(chronology41);
        org.joda.time.DurationField durationField75 = chronology41.seconds();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[secondOfMinute]" + "'", str14, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-22T07:21:23.797" + "'", str45, "2022-02-22T07:21:23.797");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20 + "'", int46 == 20);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00" + "'", str52, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1645629683797L + "'", long61 == 1645629683797L);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(durationField75);
    }

    @Test
    public void test05718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05718");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.DurationField durationField3 = dateTimeField2.getRangeDurationField();
        long long5 = dateTimeField2.remainder(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = dateTimeField2.getType();
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType6.getDurationType();
        java.lang.String str8 = durationFieldType7.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "minutes" + "'", str8, "minutes");
    }

    @Test
    public void test05719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05719");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        int int6 = property4.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property4.getFieldType();
        int int8 = property4.getLeapAmount();
        int int9 = property4.getMinimumValueOverall();
        java.lang.String str10 = property4.getAsString();
        org.joda.time.LocalDateTime localDateTime12 = property4.addToCopy(5);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusYears(43);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withYearOfEra(74051404);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology18 = null;
        boolean boolean19 = durationFieldType17.isSupported(chronology18);
        boolean boolean20 = localDateTime16.isSupported(durationFieldType17);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = localDateTime16.getValue(31);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 31");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 86399999 + "'", int6 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "26483909" + "'", str10, "26483909");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test05720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05720");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = dateTimeField2.getAsShortText(100, locale5);
        int int8 = dateTimeField2.getLeapAmount((long) (short) 100);
        java.lang.String str9 = dateTimeField2.getName();
        long long12 = dateTimeField2.add((long) (short) 1, 0);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str15 = dateTimeZone13.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.ReadableInstant readableInstant18 = null;
        long long19 = property17.getDifferenceAsLong(readableInstant18);
        org.joda.time.DurationField durationField20 = property17.getLeapDurationField();
        java.lang.String str21 = property17.getAsString();
        org.joda.time.LocalDateTime localDateTime22 = property17.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.weekyears();
        boolean boolean29 = dateTimeFieldType24.isSupported(chronology27);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        java.lang.String str31 = localDateTime30.toString();
        int int32 = localDateTime30.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.minusMonths(2);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str38 = dateTimeZone36.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfDay();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime44.toDateTime(readableInstant45);
        long long47 = dateTime46.getMillis();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str50 = dateTimeZone48.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now(dateTimeZone48);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = localDateTime51.getFieldType((int) (short) 0);
        boolean boolean54 = dateTime46.isSupported(dateTimeFieldType53);
        org.joda.time.DateTime dateTime55 = localDateTime34.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        int[] intArray57 = chronology27.get((org.joda.time.ReadablePartial) localDateTime34, 11L);
        int[] intArray59 = dateTimeField2.add((org.joda.time.ReadablePartial) localDateTime22, (int) (short) 10, intArray57, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime22.minusMinutes(0);
        org.joda.time.LocalDateTime.Property property62 = localDateTime22.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime22.withPeriodAdded(readablePeriod63, 1439);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minus(readableDuration66);
        org.joda.time.LocalDateTime.Property property68 = localDateTime65.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime70 = localDateTime65.withSecondOfMinute(1940);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1940 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "100" + "'", str6, "100");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "minuteOfDay" + "'", str9, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNull(durationField20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "26483931" + "'", str21, "26483931");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-22T07:21:23.931" + "'", str31, "2022-02-22T07:21:23.931");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20 + "'", int32 == 20);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645629683931L + "'", long47 == 1645629683931L);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
    }

    @Test
    public void test05721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05721");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder1.setVariant("2022-02-22T07:20:32.390");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2022-02-22T07:20:32.390 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test05722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05722");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("und");
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale4.getDisplayName();
        java.util.Locale.Builder builder7 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder8 = builder2.clearExtensions();
        java.util.Locale.Builder builder10 = builder2.removeUnicodeLocaleAttribute("26185191");
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.util.Locale.Builder builder12 = builder10.setLocale(locale11);
        java.util.Locale locale13 = builder12.build();
        java.util.Locale.Builder builder15 = builder12.removeUnicodeLocaleAttribute("26156413");
        java.util.Locale.Builder builder17 = builder12.setVariant("26186144");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder12.setUnicodeLocaleKeyword("2022-02-22T07:17:40.220", "2022-02-22T07:19:19.305");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-22T07:17:40.220 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Canada" + "'", str5, "Canada");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "French (Canada)" + "'", str6, "French (Canada)");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test05723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05723");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str5 = dateTimeZone3.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone3);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        java.lang.String str8 = property7.getName();
        org.joda.time.LocalDateTime localDateTime9 = property7.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean11 = localDateTime9.isSupported(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str14 = dateTimeZone12.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.centuries();
        boolean boolean18 = localDateTime15.equals((java.lang.Object) durationFieldType17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime15.getFieldTypes();
        java.lang.String str20 = localDateTime15.toString();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.plusMillis(22);
        boolean boolean23 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plus(readableDuration24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfEvenCopy();
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet30 = locale28.getUnicodeLocaleAttributes();
        java.lang.String str31 = locale28.getVariant();
        java.util.Locale locale32 = locale28.stripExtensions();
        int int33 = property26.getMaximumTextLength(locale32);
        java.util.Locale.Builder builder34 = builder0.setLocale(locale32);
        java.util.Locale locale35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder36 = builder0.setLocale(locale35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "millisOfDay" + "'", str8, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T07:21:24.006" + "'", str20, "2022-02-22T07:21:24.006");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test05724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05724");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.hours();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.halfdayOfDay();
        org.joda.time.Chronology chronology10 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.centuryOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.LocalDateTime localDateTime16 = property14.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType18.getField(chronology19);
        long long22 = dateTimeField20.roundFloor((long) (-1));
        boolean boolean23 = dateTimeField20.isLenient();
        org.joda.time.ReadablePartial readablePartial24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str27 = dateTimeZone25.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.centuries();
        boolean boolean31 = localDateTime28.equals((java.lang.Object) durationFieldType30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = localDateTime28.getFieldTypes();
        org.joda.time.LocalDateTime.Property property33 = localDateTime28.monthOfYear();
        int[] intArray34 = localDateTime28.getValues();
        int int35 = dateTimeField20.getMinimumValue(readablePartial24, intArray34);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray37 = dateTimeField11.set((org.joda.time.ReadablePartial) localDateTime16, 563, intArray34, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 563");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60000L) + "'", long22 == (-60000L));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(intArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[2022, 2, 22, 26484021]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test05725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05725");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusDays(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMinuteOfHour(55231121);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 55231121 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test05726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05726");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        int int5 = localDateTime3.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withSecondOfMinute(21);
        int int8 = localDateTime7.getYear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
    }

    @Test
    public void test05727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05727");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = localDateTime3.getFieldType((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusMonths(0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.minusSeconds(55000019);
        int int10 = localDateTime9.size();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.centuryOfEra();
        org.joda.time.Chronology chronology12 = localDateTime9.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test05728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05728");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        java.lang.String str7 = chronology5.toString();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.clockhourOfDay();
        int int10 = dateTimeField8.get(1645629354990L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.centuries();
        boolean boolean17 = localDateTime14.equals((java.lang.Object) durationFieldType16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = localDateTime14.getFieldTypes();
        java.lang.String str19 = localDateTime14.toString();
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str21 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDateTime14, locale20);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str25 = dateTimeZone23.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        java.lang.String str28 = property27.getName();
        int int29 = property27.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property27.getFieldType();
        org.joda.time.LocalDateTime localDateTime31 = property27.roundFloorCopy();
        java.util.Locale locale32 = java.util.Locale.US;
        java.lang.String str33 = property27.getAsShortText(locale32);
        java.lang.String str34 = dateTimeField8.getAsShortText((long) (byte) 0, locale32);
        java.util.Locale.Builder builder35 = builder0.setLocale(locale32);
        java.util.Locale.Builder builder37 = builder35.addUnicodeLocaleAttribute("26191000");
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.weekyears();
        org.joda.time.DurationField durationField43 = chronology41.centuries();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology41);
        org.joda.time.DateTimeField dateTimeField45 = chronology41.halfdayOfDay();
        int int48 = dateTimeField45.getDifference(11L, 0L);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str51 = dateTimeZone49.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(dateTimeZone49);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.millisOfDay();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.minuteOfHour();
        int int57 = property56.get();
        org.joda.time.LocalDateTime localDateTime59 = property56.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.withYearOfCentury(0);
        java.util.Locale locale64 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale65 = locale64.stripExtensions();
        java.lang.String str66 = locale64.getVariant();
        java.lang.String str67 = locale64.getLanguage();
        java.lang.String str68 = dateTimeField45.getAsShortText((org.joda.time.ReadablePartial) localDateTime62, 0, locale64);
        java.util.Locale.Builder builder69 = builder37.setLocale(locale64);
        java.util.Locale.Builder builder70 = builder37.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder72 = builder37.addUnicodeLocaleAttribute("2022-02-22T07:16:30.642");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-22T07:16:30.642 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[UTC]" + "'", str7, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T07:21:24.080" + "'", str19, "2022-02-22T07:21:24.080");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "7" + "'", str21, "7");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "millisOfDay" + "'", str28, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 86399999 + "'", int29 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "26484080" + "'", str33, "26484080");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "24" + "'", str34, "24");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 21 + "'", int57 == 21);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "fr" + "'", str67, "fr");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "AM" + "'", str68, "AM");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test05729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05729");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.weekyears();
        org.joda.time.DurationField durationField12 = chronology10.centuries();
        org.joda.time.DurationField durationField13 = chronology10.hours();
        org.joda.time.DurationField durationField14 = chronology10.seconds();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.secondOfDay();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withHourOfDay(5);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusMonths(26368704);
        int int23 = property7.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test05730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05730");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.era();
        org.joda.time.DurationField durationField8 = chronology3.halfdays();
        org.joda.time.DurationField durationField9 = chronology3.years();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.clockhourOfDay();
        org.joda.time.DurationField durationField11 = chronology3.seconds();
        org.joda.time.DateTimeField dateTimeField12 = chronology3.secondOfDay();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(1645629433809L, chronology3);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        java.lang.String str19 = property18.getName();
        org.joda.time.LocalDateTime localDateTime20 = property18.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean22 = localDateTime20.isSupported(dateTimeFieldType21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str25 = dateTimeZone23.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.centuries();
        boolean boolean29 = localDateTime26.equals((java.lang.Object) durationFieldType28);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = localDateTime26.getFieldTypes();
        java.lang.String str31 = localDateTime26.toString();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime26.plusMillis(22);
        boolean boolean34 = localDateTime20.isBefore((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.plus(readableDuration35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withDurationAdded(readableDuration37, 26169);
        org.joda.time.DateTime dateTime40 = localDateTime36.toDateTime();
        org.joda.time.LocalDateTime.Property property41 = localDateTime36.millisOfDay();
        int int42 = localDateTime36.getMillisOfDay();
        boolean boolean43 = localDateTime13.isEqual((org.joda.time.ReadablePartial) localDateTime36);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "millisOfDay" + "'", str19, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-22T07:21:24.127" + "'", str31, "2022-02-22T07:21:24.127");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 26484149 + "'", int42 == 26484149);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test05731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05731");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        int int9 = localDateTime3.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.minusHours(26147585);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str14 = dateTimeZone12.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        java.lang.String str17 = property16.getName();
        org.joda.time.LocalDateTime localDateTime18 = property16.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime20 = property16.addToCopy(0L);
        java.lang.String str21 = property16.getAsString();
        org.joda.time.LocalDateTime localDateTime22 = property16.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime3.withFields((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str26 = dateTimeZone24.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        long long29 = property28.remainder();
        org.joda.time.LocalDateTime localDateTime30 = property28.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = property28.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str34 = dateTimeZone32.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.centuries();
        boolean boolean38 = localDateTime35.equals((java.lang.Object) durationFieldType37);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.weekyears();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.minuteOfDay();
        org.joda.time.DurationField durationField44 = durationFieldType37.getField(chronology41);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str47 = dateTimeZone45.getShortName((long) (short) 10);
        long long49 = dateTimeZone45.convertUTCToLocal((long) ' ');
        java.lang.String str50 = dateTimeZone45.toString();
        long long53 = dateTimeZone45.adjustOffset((long) (short) 100, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone45);
        org.joda.time.Chronology chronology55 = chronology41.withZone(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField56 = chronology41.halfdayOfDay();
        boolean boolean57 = dateTimeFieldType31.isSupported(chronology41);
        org.joda.time.LocalDateTime.Property property58 = localDateTime22.property(dateTimeFieldType31);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        org.joda.time.DurationField durationField63 = chronology62.weekyears();
        org.joda.time.DurationField durationField64 = chronology62.centuries();
        org.joda.time.DurationField durationField65 = chronology62.hours();
        boolean boolean66 = durationFieldType59.isSupported(chronology62);
        org.joda.time.DateTimeField dateTimeField67 = chronology62.centuryOfEra();
        org.joda.time.DurationField durationField68 = chronology62.weekyears();
        org.joda.time.DateTimeField dateTimeField69 = dateTimeFieldType31.getField(chronology62);
        long long72 = dateTimeField69.add(1645514405293L, (int) (short) 0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "millisOfDay" + "'", str17, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "26484166" + "'", str21, "26484166");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 32L + "'", long49 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "UTC" + "'", str50, "UTC");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 100L + "'", long53 == 100L);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1645514405293L + "'", long72 == 1645514405293L);
    }

    @Test
    public void test05732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05732");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((-100L), chronology3);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, (int) '#');
        int int11 = localDateTime10.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        java.util.Locale locale16 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale17 = locale16.stripExtensions();
        java.lang.String str18 = dateTimeField14.getAsShortText(100, locale17);
        int int20 = dateTimeField14.getLeapAmount((long) (short) 100);
        java.lang.String str21 = dateTimeField14.getName();
        long long24 = dateTimeField14.add((long) (short) 1, 0);
        int int26 = dateTimeField14.get((long) 86399999);
        int int28 = dateTimeField14.get((long) ' ');
        int int30 = dateTimeField14.getMaximumValue(97L);
        long long33 = dateTimeField14.set(1645629374450L, 20);
        org.joda.time.DurationField durationField34 = dateTimeField14.getLeapDurationField();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str37 = dateTimeZone35.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.millisOfDay();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withYear((int) (short) 100);
        int int42 = localDateTime41.getCenturyOfEra();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withPeriodAdded(readablePeriod43, 10);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.halfdayOfDay();
        org.joda.time.DurationField durationField50 = dateTimeField49.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str53 = dateTimeZone51.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now(dateTimeZone51);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.millisOfDay();
        java.lang.String str56 = property55.getName();
        org.joda.time.LocalDateTime localDateTime57 = property55.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.plusYears((int) (short) -1);
        int[] intArray67 = new int[] { 'a', (-1), 10, 26151696, 4, (byte) 1 };
        int[] intArray69 = dateTimeField49.set((org.joda.time.ReadablePartial) localDateTime57, 0, intArray67, (int) (short) 0);
        int int70 = dateTimeField14.getMaximumValue((org.joda.time.ReadablePartial) localDateTime41, intArray67);
        chronology3.validate((org.joda.time.ReadablePartial) localDateTime10, intArray67);
        org.joda.time.DateTimeField dateTimeField72 = chronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField73 = chronology3.halfdayOfDay();
        org.joda.time.DurationField durationField74 = chronology3.centuries();
        org.joda.time.DurationField durationField75 = chronology3.years();
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.LocalDateTime localDateTime79 = localDateTime76.withDurationAdded(readableDuration77, (int) '#');
        org.joda.time.LocalDateTime.Property property80 = localDateTime79.weekyear();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime79.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str85 = dateTimeZone83.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime86 = org.joda.time.LocalDateTime.now(dateTimeZone83);
        org.joda.time.LocalDateTime.Property property87 = localDateTime86.millisOfDay();
        org.joda.time.LocalDateTime localDateTime89 = localDateTime86.withYear((int) (short) 100);
        java.lang.String str90 = localDateTime89.toString();
        boolean boolean91 = localDateTime79.isAfter((org.joda.time.ReadablePartial) localDateTime89);
        org.joda.time.DateTimeField[] dateTimeFieldArray92 = localDateTime79.getFields();
        org.joda.time.LocalDateTime localDateTime94 = localDateTime79.plusMinutes(26149);
        org.joda.time.LocalDateTime localDateTime96 = localDateTime94.withWeekOfWeekyear(27);
        int[] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            chronology3.validate((org.joda.time.ReadablePartial) localDateTime94, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "100" + "'", str18, "100");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "minuteOfDay" + "'", str21, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1439 + "'", int26 == 1439);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1439 + "'", int30 == 1439);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1645575614450L + "'", long33 == 1645575614450L);
        org.junit.Assert.assertNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "millisOfDay" + "'", str56, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0, 1, 10, 26151696, 4, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 1, 10, 26151696, 4, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1439 + "'", int70 == 1439);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+00:00" + "'", str85, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(localDateTime89);
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "0100-02-22T07:21:24.225" + "'", str90, "0100-02-22T07:21:24.225");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray92);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertNotNull(localDateTime96);
    }

    @Test
    public void test05733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05733");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.hours();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology2.getZone();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField10 = chronology2.halfdays();
        org.joda.time.DurationFieldType durationFieldType11 = durationField10.getType();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationFieldType11);
    }

    @Test
    public void test05734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05734");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getCountry();
        java.lang.String str2 = locale0.toLanguageTag();
        java.lang.String str3 = locale0.getLanguage();
        java.lang.String str4 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DE" + "'", str1, "DE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "de-DE" + "'", str2, "de-DE");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "de" + "'", str3, "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "de_DE" + "'", str4, "de_DE");
    }

    @Test
    public void test05735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05735");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray2 = strSet1.toArray();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str5 = dateTimeZone3.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone3);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.centuries();
        boolean boolean9 = localDateTime6.equals((java.lang.Object) durationFieldType8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDateTime6.getFieldTypes();
        java.lang.String str11 = localDateTime6.toString();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.plusMillis(22);
        org.joda.time.LocalDateTime.Property property14 = localDateTime6.monthOfYear();
        boolean boolean15 = strSet1.remove((java.lang.Object) property14);
        java.lang.Object obj16 = null;
        boolean boolean17 = property14.equals(obj16);
        org.joda.time.LocalDateTime localDateTime18 = property14.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22T07:21:24.288" + "'", str11, "2022-02-22T07:21:24.288");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test05736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05736");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        org.joda.time.DurationField durationField7 = property4.getLeapDurationField();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale8.getLanguage();
        java.lang.String str11 = locale8.toLanguageTag();
        java.lang.String str12 = property4.getAsShortText(locale8);
        org.joda.time.LocalDateTime localDateTime13 = property4.roundCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = localDateTime13.toString(dateTimeFormatter14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.secondOfMinute();
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.hourOfDay();
        int int18 = localDateTime13.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minusMinutes((-20170));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNull(durationField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "26484301" + "'", str12, "26484301");
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T07:21:24.301" + "'", str15, "2022-02-22T07:21:24.301");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test05737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05737");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        java.lang.String str1 = localDateTime0.toString();
        int int2 = localDateTime0.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusMonths(2);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str8 = dateTimeZone6.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime(readableInstant15);
        long long17 = dateTime16.getMillis();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str20 = dateTimeZone18.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = localDateTime21.getFieldType((int) (short) 0);
        boolean boolean24 = dateTime16.isSupported(dateTimeFieldType23);
        org.joda.time.DateTime dateTime25 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str28 = dateTimeZone26.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(readableInstant35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str39 = dateTimeZone37.getShortName((long) (short) 10);
        long long41 = dateTimeZone37.convertUTCToLocal((long) ' ');
        java.lang.String str42 = dateTimeZone37.toString();
        long long44 = dateTimeZone37.previousTransition(32L);
        long long47 = dateTimeZone37.convertLocalToUTC(97L, false);
        boolean boolean48 = dateTime36.equals((java.lang.Object) false);
        boolean boolean49 = dateTime25.isEqual((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str52 = dateTimeZone50.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(dateTimeZone50);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.millisOfDay();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str63 = dateTimeZone61.getShortName((long) (short) 10);
        long long65 = dateTimeZone61.convertUTCToLocal((long) ' ');
        java.lang.String str66 = dateTimeZone61.toString();
        long long68 = dateTimeZone61.previousTransition(32L);
        long long71 = dateTimeZone61.convertLocalToUTC(97L, false);
        boolean boolean72 = dateTime60.equals((java.lang.Object) false);
        boolean boolean73 = dateTime36.isEqual((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology77 = localDateTime76.getChronology();
        org.joda.time.DurationField durationField78 = chronology77.weekyears();
        org.joda.time.DurationField durationField79 = chronology77.centuries();
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology77);
        org.joda.time.DateTimeField dateTimeField81 = chronology77.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField82 = chronology77.clockhourOfHalfday();
        long long86 = chronology77.add((long) 1970, (-4838399947L), 292278993);
        org.joda.time.DateTimeField dateTimeField87 = chronology77.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = dateTimeField87.getType();
        int int89 = dateTime60.get(dateTimeFieldType88);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-22T07:21:24.316" + "'", str1, "2022-02-22T07:21:24.316");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 20 + "'", int2 == 20);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645629684316L + "'", long17 == 1645629684316L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 32L + "'", long41 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 32L + "'", long44 == 32L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 97L + "'", long47 == 97L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00" + "'", str52, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00" + "'", str63, "+00:00");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 32L + "'", long65 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "UTC" + "'", str66, "UTC");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 32L + "'", long68 == 32L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 97L + "'", long71 == 97L);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + (-1414162664240411401L) + "'", long86 == (-1414162664240411401L));
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 22 + "'", int89 == 22);
    }

    @Test
    public void test05738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05738");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYear(0);
        int int6 = localDateTime5.getDayOfYear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.minuteOfHour();
        int int17 = property16.get();
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.lang.String str19 = locale18.getDisplayCountry();
        int int20 = property16.getMaximumShortTextLength(locale18);
        org.joda.time.LocalDateTime localDateTime21 = property16.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime22 = localDateTime21.toDateTime();
        org.joda.time.DateTime dateTime23 = localDateTime5.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        int int24 = localDateTime5.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property25 = localDateTime5.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime26 = property25.withMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 21 + "'", int17 == 21);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Germany" + "'", str19, "Germany");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test05739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05739");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        org.joda.time.DurationField durationField6 = chronology4.centuries();
        org.joda.time.DurationField durationField7 = chronology4.minutes();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 26163523, chronology4);
        org.joda.time.DurationField durationField11 = chronology4.days();
        org.joda.time.DateTimeField dateTimeField12 = chronology4.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(1645629415330L, chronology4);
        org.joda.time.DateTimeField dateTimeField14 = chronology4.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withDurationAdded(readableDuration16, (int) '#');
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusHours(0);
        int int22 = localDateTime18.getWeekyear();
        org.joda.time.Chronology chronology23 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str27 = dateTimeZone25.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str31 = dateTimeZone29.getShortName((long) (short) 10);
        long long33 = dateTimeZone29.convertUTCToLocal((long) ' ');
        java.lang.String str34 = dateTimeZone29.toString();
        boolean boolean36 = dateTimeZone29.equals((java.lang.Object) (short) 100);
        java.util.Locale locale38 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str39 = dateTimeZone29.getShortName((long) (-1), locale38);
        long long41 = dateTimeZone25.getMillisKeepLocal(dateTimeZone29, (long) (byte) -1);
        org.joda.time.Chronology chronology42 = chronology23.withZone(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone43 = chronology42.getZone();
        java.lang.String str45 = dateTimeZone43.getShortName(43200052L);
        org.joda.time.Chronology chronology46 = chronology4.withZone(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField47 = chronology4.hourOfDay();
        org.joda.time.DateTimeField dateTimeField48 = chronology4.minuteOfDay();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 32L + "'", long33 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test05740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05740");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("und");
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale4.getDisplayName();
        java.util.Locale.Builder builder7 = builder2.setLocale(locale4);
        java.util.Locale locale8 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale12 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str13 = locale11.getDisplayCountry(locale12);
        java.lang.String str14 = locale8.getDisplayVariant(locale11);
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale16 = locale15.stripExtensions();
        java.lang.String str17 = locale8.getDisplayLanguage(locale16);
        java.util.Locale.Builder builder18 = builder2.setLocale(locale16);
        java.util.Locale locale19 = builder2.build();
        java.util.Locale.Builder builder20 = builder2.clear();
        java.util.Locale.Builder builder21 = builder2.clear();
        java.util.Locale locale22 = builder21.build();
        java.util.Locale.Builder builder24 = builder21.addUnicodeLocaleAttribute("26181381");
        java.util.Locale.Builder builder25 = builder24.clear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Canada" + "'", str5, "Canada");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "French (Canada)" + "'", str6, "French (Canada)");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Canada" + "'", str10, "Canada");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Canada" + "'", str13, "Canada");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "fran\347ais" + "'", str17, "fran\347ais");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test05741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05741");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        boolean boolean7 = dateTimeZone0.equals((java.lang.Object) (short) 100);
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = dateTimeZone0.getShortName((long) (-1), locale9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone0);
        java.lang.String str13 = dateTimeZone0.getName((long) 26149);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getShortName((long) (short) 10);
        long long18 = dateTimeZone14.convertUTCToLocal((long) ' ');
        java.lang.String str19 = dateTimeZone14.toString();
        long long21 = dateTimeZone14.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone14);
        long long24 = dateTimeZone0.getMillisKeepLocal(dateTimeZone14, 0L);
        java.lang.String str26 = dateTimeZone14.getNameKey((long) 1439);
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeZone14.getShortName(98737773996000000L, locale28);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 32L + "'", long21 == 32L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
    }

    @Test
    public void test05742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05742");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.months();
        int int10 = durationField7.getValue(1645629441286L, 1645629360208L);
        long long13 = durationField7.add(1645629374258L, 673);
        int int16 = durationField7.getDifference((long) 26507059, 1645629572141L);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 625 + "'", int10 == 625);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 3415274174258L + "'", long13 == 3415274174258L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-625) + "'", int16 == (-625));
    }

    @Test
    public void test05743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05743");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        java.lang.String str12 = dateTimeZone10.getShortName((long) 86399999);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.Chronology chronology14 = chronology2.withZone(dateTimeZone10);
        int int16 = dateTimeZone10.getStandardOffset(1645629474953L);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str19 = dateTimeZone17.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusMonths(16);
        boolean boolean24 = dateTimeZone10.isLocalDateTimeGap(localDateTime23);
        long long28 = dateTimeZone10.convertLocalToUTC((long) 459, true, 0L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.097" + "'", str12, "+00:00:00.097");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 362L + "'", long28 == 362L);
    }

    @Test
    public void test05744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05744");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        boolean boolean1 = timeZone0.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone0);
        timeZone0.setRawOffset(26181236);
        java.lang.String str5 = timeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str8 = dateTimeZone6.getShortName((long) (short) 10);
        long long10 = dateTimeZone6.convertUTCToLocal((long) ' ');
        java.lang.String str11 = dateTimeZone6.toString();
        long long14 = dateTimeZone6.adjustOffset((long) (short) 100, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        boolean boolean17 = dateTimeZone6.equals((java.lang.Object) "CA");
        int int19 = dateTimeZone6.getOffsetFromLocal(1094L);
        java.util.TimeZone timeZone20 = dateTimeZone6.toTimeZone();
        timeZone20.setRawOffset(224);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone23.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone23);
        timeZone23.setRawOffset(26181236);
        timeZone23.setRawOffset((int) (byte) 10);
        boolean boolean30 = timeZone20.hasSameRules(timeZone23);
        boolean boolean31 = timeZone0.hasSameRules(timeZone23);
        java.util.TimeZone.setDefault(timeZone23);
        // The following exception was thrown during execution in test generation
        try {
            int int39 = timeZone23.getOffset(30, 33, 55251202, 25814384, 0, (-330821279));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 30");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+07:16");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.097" + "'", str5, "+00:00:00.097");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 32L + "'", long10 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test05745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05745");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        java.lang.String str1 = durationFieldType0.getName();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        org.joda.time.DurationField durationField6 = chronology4.centuries();
        org.joda.time.DurationField durationField7 = chronology4.hours();
        org.joda.time.DurationField durationField8 = chronology4.seconds();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.secondOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.minuteOfDay();
        org.joda.time.DurationField durationField11 = durationFieldType0.getField(chronology4);
        long long14 = durationField11.add(1000L, 55021617);
        boolean boolean15 = durationField11.isPrecise();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withDurationAdded(readableDuration17, (int) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.weekyear();
        int int21 = property20.getMaximumValue();
        org.joda.time.DurationField durationField22 = property20.getDurationField();
        long long25 = durationField22.getDifferenceAsLong(0L, (long) 26304059);
        int int26 = durationField11.compareTo(durationField22);
        long long29 = durationField22.subtract(1645629565526L, 55076);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "minutes" + "'", str1, "minutes");
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 3301297021000L + "'", long14 == 3301297021000L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 292278993 + "'", int21 == 292278993);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1736385064834474L) + "'", long29 == (-1736385064834474L));
    }

    @Test
    public void test05746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05746");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        boolean boolean7 = dateTimeZone0.equals((java.lang.Object) (short) 100);
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = dateTimeZone0.getShortName((long) (-1), locale9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withField(dateTimeFieldType12, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.weekyears();
        org.joda.time.DurationField durationField19 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.minuteOfDay();
        long long24 = chronology17.add((long) 2, (long) 21, (int) '4');
        boolean boolean25 = dateTimeFieldType12.isSupported(chronology17);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str28 = dateTimeZone26.getShortName((long) (short) 10);
        long long30 = dateTimeZone26.convertUTCToLocal((long) ' ');
        java.lang.String str31 = dateTimeZone26.toString();
        long long33 = dateTimeZone26.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.Chronology chronology35 = chronology17.withZone(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.Chronology chronology38 = chronology17.withZone(dateTimeZone37);
        org.joda.time.Chronology chronology39 = chronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.weekOfWeekyear();
        java.lang.String str41 = chronology39.toString();
        org.joda.time.DurationField durationField42 = chronology39.halfdays();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1094L + "'", long24 == 1094L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 32L + "'", long30 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 32L + "'", long33 == 32L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[UTC]" + "'", str41, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test05747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05747");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.dayOfMonth();
        java.lang.String str8 = property7.getAsString();
        org.joda.time.DurationField durationField9 = property7.getLeapDurationField();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        java.lang.String str15 = property14.getName();
        org.joda.time.LocalDateTime localDateTime16 = property14.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusHours(0);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str22 = dateTimeZone20.getShortName((long) (short) 10);
        long long24 = dateTimeZone20.convertUTCToLocal((long) ' ');
        java.lang.String str25 = dateTimeZone20.toString();
        boolean boolean27 = dateTimeZone20.equals((java.lang.Object) (short) 100);
        java.util.Locale locale29 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str30 = dateTimeZone20.getShortName((long) (-1), locale29);
        long long33 = dateTimeZone20.convertLocalToUTC((long) (short) 10, true);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 7, dateTimeZone20);
        org.joda.time.DateTime dateTime35 = localDateTime18.toDateTime(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str38 = dateTimeZone36.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfDay();
        java.lang.String str41 = property40.getName();
        org.joda.time.LocalDateTime localDateTime42 = property40.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean44 = localDateTime42.isSupported(dateTimeFieldType43);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str47 = dateTimeZone45.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(dateTimeZone45);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.centuries();
        boolean boolean51 = localDateTime48.equals((java.lang.Object) durationFieldType50);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = localDateTime48.getFieldTypes();
        java.lang.String str53 = localDateTime48.toString();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime48.plusMillis(22);
        boolean boolean56 = localDateTime42.isBefore((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.plus(readableDuration57);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.withDurationAdded(readableDuration59, 26169);
        org.joda.time.DateTime dateTime62 = localDateTime58.toDateTime();
        org.joda.time.DateTime dateTime63 = localDateTime18.toDateTime((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTimeZone dateTimeZone64 = dateTime63.getZone();
        org.joda.time.Instant instant65 = dateTime63.toInstant();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str68 = dateTimeZone66.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now(dateTimeZone66);
        org.joda.time.LocalDateTime.Property property70 = localDateTime69.millisOfDay();
        java.lang.String str71 = property70.getName();
        org.joda.time.LocalDateTime localDateTime72 = property70.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minusHours(0);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str78 = dateTimeZone76.getShortName((long) (short) 10);
        long long80 = dateTimeZone76.convertUTCToLocal((long) ' ');
        java.lang.String str81 = dateTimeZone76.toString();
        boolean boolean83 = dateTimeZone76.equals((java.lang.Object) (short) 100);
        java.util.Locale locale85 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str86 = dateTimeZone76.getShortName((long) (-1), locale85);
        long long89 = dateTimeZone76.convertLocalToUTC((long) (short) 10, true);
        org.joda.time.LocalDateTime localDateTime90 = new org.joda.time.LocalDateTime((long) 7, dateTimeZone76);
        org.joda.time.DateTime dateTime91 = localDateTime74.toDateTime(dateTimeZone76);
        boolean boolean92 = instant65.isBefore((org.joda.time.ReadableInstant) dateTime91);
        int int93 = property7.compareTo((org.joda.time.ReadableInstant) instant65);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "22" + "'", str8, "22");
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "millisOfDay" + "'", str15, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 32L + "'", long24 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "millisOfDay" + "'", str41, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-22T07:21:24.586" + "'", str53, "2022-02-22T07:21:24.586");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00" + "'", str68, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "millisOfDay" + "'", str71, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+00:00" + "'", str78, "+00:00");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 32L + "'", long80 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "UTC" + "'", str81, "UTC");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+00:00" + "'", str86, "+00:00");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 10L + "'", long89 == 10L);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test05748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05748");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.minuteOfDay();
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getScript();
        java.lang.String str9 = dateTimeField5.getAsText(1645629393657L, locale7);
        java.lang.String str10 = locale7.getDisplayScript();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "916" + "'", str9, "916");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test05749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05749");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime3.getFieldTypes();
        java.lang.String str8 = localDateTime3.toString();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.plusMillis(22);
        org.joda.time.LocalDateTime.Property property11 = localDateTime3.monthOfYear();
        java.util.Locale locale12 = java.util.Locale.ROOT;
        int int13 = property11.getMaximumShortTextLength(locale12);
        java.lang.Object obj14 = null;
        boolean boolean15 = property11.equals(obj14);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T07:21:24.626" + "'", str8, "2022-02-22T07:21:24.626");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test05750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05750");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.millisOfSecond();
        org.joda.time.Chronology chronology10 = chronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfDay();
        org.joda.time.Chronology chronology12 = chronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.year();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.yearOfCentury();
        org.joda.time.DurationField durationField15 = chronology10.centuries();
        org.joda.time.DateTimeField dateTimeField16 = chronology10.dayOfMonth();
        org.joda.time.DurationField durationField17 = chronology10.months();
        boolean boolean18 = durationField17.isSupported();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test05751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05751");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str3 = dateTimeZone1.getShortName((long) (short) 10);
        long long5 = dateTimeZone1.convertUTCToLocal((long) ' ');
        java.lang.String str6 = dateTimeZone1.toString();
        boolean boolean8 = dateTimeZone1.equals((java.lang.Object) (short) 100);
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = dateTimeZone1.getShortName((long) (-1), locale10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withField(dateTimeFieldType13, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.weekyears();
        org.joda.time.DurationField durationField20 = chronology18.centuries();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.minuteOfDay();
        long long25 = chronology18.add((long) 2, (long) 21, (int) '4');
        boolean boolean26 = dateTimeFieldType13.isSupported(chronology18);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str29 = dateTimeZone27.getShortName((long) (short) 10);
        long long31 = dateTimeZone27.convertUTCToLocal((long) ' ');
        java.lang.String str32 = dateTimeZone27.toString();
        long long34 = dateTimeZone27.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.Chronology chronology36 = chronology18.withZone(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(35L, chronology36);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str41 = dateTimeZone39.getShortName((long) (short) 10);
        long long43 = dateTimeZone39.convertUTCToLocal((long) ' ');
        java.lang.String str44 = dateTimeZone39.toString();
        boolean boolean46 = dateTimeZone39.equals((java.lang.Object) (short) 100);
        java.util.Locale locale48 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str49 = dateTimeZone39.getShortName((long) (-1), locale48);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(dateTimeZone39);
        int int52 = dateTimeZone39.getOffset((long) (short) 10);
        java.util.TimeZone timeZone53 = dateTimeZone39.toTimeZone();
        java.lang.String str54 = dateTimeZone39.getID();
        java.lang.String str56 = dateTimeZone39.getShortName(1645629456968L);
        org.joda.time.Chronology chronology57 = chronology36.withZone(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField64 = chronology61.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTimeField dateTimeField68 = dateTimeFieldType66.getField(chronology67);
        long long70 = dateTimeField68.roundFloor((long) (-1));
        java.util.Locale.Builder builder71 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder73 = builder71.addUnicodeLocaleAttribute("und");
        java.util.Locale locale74 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale75 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str76 = locale74.getDisplayCountry(locale75);
        java.lang.String str77 = locale75.getDisplayName();
        java.util.Locale.Builder builder78 = builder73.setLocale(locale75);
        int int79 = dateTimeField68.getMaximumShortTextLength(locale75);
        java.lang.String str80 = dateTimeField64.getAsShortText((long) 'a', locale75);
        java.lang.String str81 = locale75.toLanguageTag();
        java.util.Set<java.lang.Character> charSet82 = locale75.getExtensionKeys();
        java.lang.String str83 = dateTimeZone39.getShortName(26239424L, locale75);
        org.joda.time.LocalDateTime localDateTime84 = org.joda.time.LocalDateTime.now(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 32L + "'", long5 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1094L + "'", long25 == 1094L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 32L + "'", long31 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 32L + "'", long34 == 32L);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 32L + "'", long43 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Coordinated Universal Time");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "UTC" + "'", str54, "UTC");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00" + "'", str56, "+00:00");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-60000L) + "'", long70 == (-60000L));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Canada" + "'", str76, "Canada");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "French (Canada)" + "'", str77, "French (Canada)");
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 4 + "'", int79 == 4);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "97" + "'", str80, "97");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "fr-CA" + "'", str81, "fr-CA");
        org.junit.Assert.assertNotNull(charSet82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+00:00" + "'", str83, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime84);
    }

    @Test
    public void test05752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05752");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        org.joda.time.DurationField durationField7 = property4.getLeapDurationField();
        java.lang.String str8 = property4.getAsString();
        org.joda.time.LocalDateTime localDateTime9 = property4.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.centuries();
        boolean boolean16 = localDateTime13.equals((java.lang.Object) durationFieldType15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.withWeekOfWeekyear((int) (byte) 10);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = localDateTime13.getFields();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.withWeekOfWeekyear(7);
        boolean boolean22 = localDateTime9.isEqual((org.joda.time.ReadablePartial) localDateTime21);
        int int23 = localDateTime21.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str26 = dateTimeZone24.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.centuries();
        boolean boolean30 = localDateTime27.equals((java.lang.Object) durationFieldType29);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = localDateTime27.getFieldTypes();
        java.lang.String str32 = localDateTime27.toString();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime27.plusMillis(22);
        org.joda.time.LocalDateTime.Property property35 = localDateTime27.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str38 = dateTimeZone36.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfDay();
        java.lang.String str41 = property40.getName();
        int int42 = property40.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property40.getFieldType();
        int int44 = localDateTime27.indexOf(dateTimeFieldType43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime27.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property45.getFieldType();
        java.lang.String str47 = dateTimeFieldType46.getName();
        int int48 = localDateTime21.get(dateTimeFieldType46);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str51 = dateTimeZone49.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(dateTimeZone49);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.millisOfDay();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.minuteOfHour();
        int int57 = property56.get();
        org.joda.time.LocalDateTime localDateTime59 = property56.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime60 = property56.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = property61.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime64 = localDateTime21.withField(dateTimeFieldType62, 26233287);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26233287 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNull(durationField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "26484690" + "'", str8, "26484690");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-22T07:21:24.690" + "'", str32, "2022-02-22T07:21:24.690");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "millisOfDay" + "'", str41, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 86399999 + "'", int42 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "weekyear" + "'", str47, "weekyear");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 21 + "'", int57 == 21);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
    }

    @Test
    public void test05753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05753");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        int int5 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekOfWeekyear((int) (byte) 1);
        int int8 = localDateTime0.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.plusDays(500);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        java.lang.String str12 = durationFieldType11.toString();
        boolean boolean13 = localDateTime10.isSupported(durationFieldType11);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.weekyears();
        org.joda.time.DurationField durationField19 = chronology17.centuries();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology17);
        org.joda.time.DurationField durationField21 = chronology17.millis();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.minuteOfDay();
        org.joda.time.DurationField durationField23 = durationFieldType11.getField(chronology17);
        org.joda.time.DateTimeField dateTimeField24 = chronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.minuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 7 + "'", int8 == 7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "days" + "'", str12, "days");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test05754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05754");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = property4.addToCopy(0L);
        java.lang.String str9 = property4.getAsString();
        org.joda.time.LocalDateTime localDateTime10 = property4.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime11 = property4.roundHalfCeilingCopy();
        java.lang.String str12 = property4.getAsShortText();
        org.joda.time.LocalDateTime localDateTime13 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime14 = property4.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "26484719" + "'", str9, "26484719");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "26484719" + "'", str12, "26484719");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test05755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05755");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        org.joda.time.DurationField durationField6 = chronology4.centuries();
        boolean boolean7 = durationFieldType1.isSupported(chronology4);
        org.joda.time.DurationField durationField8 = chronology4.halfdays();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField10 = chronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = chronology4.halfdayOfDay();
        java.lang.String str13 = dateTimeField11.getAsShortText(1645629434501L);
        org.joda.time.DurationField durationField14 = dateTimeField11.getDurationField();
        long long17 = durationField14.add(1645629595231L, 55076);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PM" + "'", str13, "PM");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4024912795231L + "'", long17 == 4024912795231L);
    }

    @Test
    public void test05756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05756");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        boolean boolean5 = dateTimeZone0.equals((java.lang.Object) "2022-02-22T07:16:14.450");
        long long8 = dateTimeZone0.adjustOffset(81854010L, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.TimeZone timeZone10 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = timeZone10.getOffset((-18836232225774L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 81854010L + "'", long8 == 81854010L);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test05757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05757");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = dateTimeField2.getAsShortText(100, locale5);
        int int8 = dateTimeField2.getLeapAmount((long) (short) 100);
        org.joda.time.DurationField durationField9 = dateTimeField2.getRangeDurationField();
        boolean boolean10 = dateTimeField2.isLenient();
        int int12 = dateTimeField2.getLeapAmount(1645629366934L);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str15 = dateTimeZone13.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        int int18 = property17.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime20 = property17.setCopy((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = property17.setCopy(81254740);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale28 = locale27.stripExtensions();
        java.lang.String str29 = dateTimeField25.getAsShortText(100, locale28);
        int int31 = dateTimeField25.getLeapAmount((long) (short) 100);
        java.lang.String str32 = dateTimeField25.getName();
        long long35 = dateTimeField25.add((long) (short) 1, 0);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str38 = dateTimeZone36.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfDay();
        org.joda.time.ReadableInstant readableInstant41 = null;
        long long42 = property40.getDifferenceAsLong(readableInstant41);
        org.joda.time.DurationField durationField43 = property40.getLeapDurationField();
        java.lang.String str44 = property40.getAsString();
        org.joda.time.LocalDateTime localDateTime45 = property40.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.weekyears();
        boolean boolean52 = dateTimeFieldType47.isSupported(chronology50);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        java.lang.String str54 = localDateTime53.toString();
        int int55 = localDateTime53.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.minusMonths(2);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str61 = dateTimeZone59.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now(dateTimeZone59);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.millisOfDay();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime62.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localDateTime67.toDateTime(readableInstant68);
        long long70 = dateTime69.getMillis();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str73 = dateTimeZone71.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime74 = org.joda.time.LocalDateTime.now(dateTimeZone71);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = localDateTime74.getFieldType((int) (short) 0);
        boolean boolean77 = dateTime69.isSupported(dateTimeFieldType76);
        org.joda.time.DateTime dateTime78 = localDateTime57.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        int[] intArray80 = chronology50.get((org.joda.time.ReadablePartial) localDateTime57, 11L);
        int[] intArray82 = dateTimeField25.add((org.joda.time.ReadablePartial) localDateTime45, (int) (short) 10, intArray80, (int) (byte) 0);
        int int83 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localDateTime22, intArray82);
        int[] intArray84 = localDateTime22.getValues();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "100" + "'", str6, "100");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 86399999 + "'", int18 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "100" + "'", str29, "100");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "minuteOfDay" + "'", str32, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNull(durationField43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "26484773" + "'", str44, "26484773");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-22T07:21:24.773" + "'", str54, "2022-02-22T07:21:24.773");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 20 + "'", int55 == 20);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00" + "'", str61, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1645629684773L + "'", long70 == 1645629684773L);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00" + "'", str73, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1970, 1, 1, 11]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[2022, 2, 22, 81254740]");
    }

    @Test
    public void test05758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05758");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        java.lang.String str14 = localDateTime13.toString();
        boolean boolean15 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withEra((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYear(26163523);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.plus(readablePeriod20);
        java.util.Locale.Category category23 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category23, locale24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        java.util.Locale locale30 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale31 = locale30.stripExtensions();
        java.lang.String str32 = dateTimeField28.getAsShortText(100, locale31);
        java.util.Locale.setDefault(category23, locale31);
        org.joda.time.tz.NameProvider nameProvider34 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.lang.String str38 = nameProvider34.getShortName(locale35, "fran\347ais", "2022-02-22T07:15:48.066");
        java.util.Locale.setDefault(category23, locale35);
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale35.getDisplayScript(locale40);
        java.lang.String str42 = locale35.getDisplayCountry();
        java.lang.String str43 = localDateTime21.toString("+00:00:00.097", locale35);
        java.lang.String str44 = locale35.getISO3Country();
        java.lang.String str45 = locale35.getLanguage();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0100-02-22T07:21:24.865" + "'", str14, "0100-02-22T07:21:24.865");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + category23 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category23.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "100" + "'", str32, "100");
        org.junit.Assert.assertNotNull(nameProvider34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Canada" + "'", str42, "Canada");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.097" + "'", str43, "+00:00:00.097");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "CAN" + "'", str44, "CAN");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "en" + "'", str45, "en");
    }

    @Test
    public void test05759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05759");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = dateTimeField2.getAsShortText(100, locale5);
        int int8 = dateTimeField2.getLeapAmount((long) (short) 100);
        org.joda.time.DurationField durationField9 = dateTimeField2.getRangeDurationField();
        boolean boolean10 = dateTimeField2.isLenient();
        int int12 = dateTimeField2.getLeapAmount(1645629366934L);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.weekyears();
        org.joda.time.DurationField durationField18 = chronology16.centuries();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology16);
        org.joda.time.DateTimeField dateTimeField20 = chronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusDays(0);
        long long27 = chronology16.set((org.joda.time.ReadablePartial) localDateTime25, (long) 24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = localDateTime25.toString(dateTimeFormatter28);
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localDateTime25, 57, locale31);
        long long34 = dateTimeField2.roundHalfFloor((-3040L));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "100" + "'", str6, "100");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 100L + "'", long27 == 100L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.100" + "'", str29, "1970-01-01T00:00:00.100");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "57" + "'", str32, "57");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test05760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05760");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(948);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test05761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05761");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(482);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test05762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05762");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("Deutschland");
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet6 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        long long12 = property11.remainder();
        org.joda.time.LocalDateTime localDateTime13 = property11.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        java.lang.String str15 = localDateTime14.toString();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.yearOfEra();
        int int19 = property11.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.plusHours((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withWeekyear(356);
        int int24 = localDateTime23.getWeekyear();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.monthOfYear();
        boolean boolean26 = strSet6.equals((java.lang.Object) localDateTime23);
        java.util.Iterator<java.lang.String> strItor27 = strSet6.iterator();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T07:21:24.938" + "'", str15, "2022-02-22T07:21:24.938");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 356 + "'", int24 == 356);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strItor27);
    }

    @Test
    public void test05763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05763");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.millisOfSecond();
        org.joda.time.Chronology chronology10 = chronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfDay();
        org.joda.time.Chronology chronology12 = chronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.year();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.monthOfYear();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test05764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05764");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1645629554647L);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str4 = dateTimeZone2.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.millisOfDay();
        org.joda.time.ReadableInstant readableInstant7 = null;
        long long8 = property6.getDifferenceAsLong(readableInstant7);
        org.joda.time.DurationField durationField9 = property6.getLeapDurationField();
        java.lang.String str10 = property6.getAsString();
        org.joda.time.LocalDateTime localDateTime12 = property6.addToCopy(1645629357222L);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        long long14 = property13.remainder();
        org.joda.time.LocalDateTime localDateTime15 = property13.roundHalfEvenCopy();
        boolean boolean16 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime15);
        int int17 = localDateTime1.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNull(durationField9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "26484982" + "'", str10, "26484982");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
    }

    @Test
    public void test05765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05765");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.dayOfMonth();
        int int8 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.withYear(54974408);
        int int11 = localDateTime10.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property13.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = property13.setCopy(54974408);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54974408 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
    }

    @Test
    public void test05766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05766");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusYears(7);
        int int9 = localDateTime8.getEra();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        long long14 = dateTimeZone10.convertUTCToLocal((long) ' ');
        java.lang.String str15 = dateTimeZone10.toString();
        java.lang.String str16 = dateTimeZone10.toString();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime8, dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime8.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime8.withYearOfCentury((int) (byte) 10);
        int int22 = localDateTime21.getYearOfCentury();
        int[] intArray23 = localDateTime21.getValues();
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.year();
        org.joda.time.LocalDateTime localDateTime25 = property24.getLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = property24.setCopy("2022-02-22T07:17:24.625");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:17:24.625\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 32L + "'", long14 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[2010, 2, 22, 26485004]");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test05767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05767");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = chronology2.getZone();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = chronology2.add(readablePeriod5, (long) 55105632, (-997));
        org.joda.time.DurationField durationField9 = chronology2.eras();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 55105632L + "'", long8 == 55105632L);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test05768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05768");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(173, 26436597, 0, 948, 67, 26251);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 948 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05769");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.plusDays(55162270);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withYearOfCentury(55147551);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 55147551 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test05770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05770");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("26202156");
        timeZone1.setRawOffset(242);
        timeZone1.setID("FRAN\347AIS (CANADA)");
        boolean boolean6 = timeZone1.observesDaylightTime();
        java.lang.String str7 = timeZone1.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GMT+00:00" + "'", str7, "GMT+00:00");
    }

    @Test
    public void test05771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05771");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DurationField durationField5 = durationFieldType0.getField(chronology3);
        org.joda.time.DateTimeField dateTimeField6 = chronology3.hourOfHalfday();
        long long8 = dateTimeField6.roundHalfEven((long) (short) 0);
        java.lang.String str9 = dateTimeField6.getName();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withDurationAdded(readableDuration11, (int) '#');
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.era();
        int int15 = localDateTime10.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = localDateTime17.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minusMonths((-52));
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        java.util.Locale locale25 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.lang.String str27 = dateTimeField23.getAsShortText(100, locale26);
        int int29 = dateTimeField23.getLeapAmount((long) (short) 100);
        java.lang.String str30 = dateTimeField23.getName();
        long long33 = dateTimeField23.add((long) (short) 1, 0);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str36 = dateTimeZone34.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.millisOfDay();
        org.joda.time.ReadableInstant readableInstant39 = null;
        long long40 = property38.getDifferenceAsLong(readableInstant39);
        org.joda.time.DurationField durationField41 = property38.getLeapDurationField();
        java.lang.String str42 = property38.getAsString();
        org.joda.time.LocalDateTime localDateTime43 = property38.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.weekyears();
        boolean boolean50 = dateTimeFieldType45.isSupported(chronology48);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        java.lang.String str52 = localDateTime51.toString();
        int int53 = localDateTime51.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.minusMonths(2);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str59 = dateTimeZone57.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(dateTimeZone57);
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.millisOfDay();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime60.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = localDateTime65.toDateTime(readableInstant66);
        long long68 = dateTime67.getMillis();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str71 = dateTimeZone69.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime72 = org.joda.time.LocalDateTime.now(dateTimeZone69);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = localDateTime72.getFieldType((int) (short) 0);
        boolean boolean75 = dateTime67.isSupported(dateTimeFieldType74);
        org.joda.time.DateTime dateTime76 = localDateTime55.toDateTime((org.joda.time.ReadableInstant) dateTime67);
        int[] intArray78 = chronology48.get((org.joda.time.ReadablePartial) localDateTime55, 11L);
        int[] intArray80 = dateTimeField23.add((org.joda.time.ReadablePartial) localDateTime43, (int) (short) 10, intArray78, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime43.minusMinutes(0);
        org.joda.time.LocalDateTime.Property property83 = localDateTime43.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.LocalDateTime localDateTime86 = localDateTime43.withPeriodAdded(readablePeriod84, 1439);
        org.joda.time.LocalDateTime localDateTime88 = localDateTime43.withSecondOfMinute((int) (short) 1);
        org.joda.time.DateTime dateTime89 = localDateTime43.toDateTime();
        int[] intArray90 = localDateTime43.getValues();
        int int91 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDateTime20, intArray90);
        int int92 = localDateTime20.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime94 = localDateTime20.plusWeeks(243);
        org.joda.time.LocalDateTime localDateTime96 = localDateTime94.withCenturyOfEra(0);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hourOfHalfday" + "'", str9, "hourOfHalfday");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100" + "'", str27, "100");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "minuteOfDay" + "'", str30, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNull(durationField41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "26485120" + "'", str42, "26485120");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-02-22T07:21:25.120" + "'", str52, "2022-02-22T07:21:25.120");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 20 + "'", int53 == 20);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00" + "'", str59, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1645629685120L + "'", long68 == 1645629685120L);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(intArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[2022, 2, 22, 26485120]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int92 + "' != '" + 120 + "'", int92 == 120);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertNotNull(localDateTime96);
    }

    @Test
    public void test05772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05772");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("");
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test05773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05773");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long4 = dateTimeField2.roundFloor((long) (-1));
        org.joda.time.DurationField durationField5 = dateTimeField2.getDurationField();
        java.lang.String str7 = dateTimeField2.getAsText(0L);
        long long9 = dateTimeField2.roundHalfCeiling(1645629364123L);
        long long11 = dateTimeField2.roundHalfCeiling((-31L));
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str16 = locale13.getVariant();
        java.lang.String str17 = locale13.getDisplayLanguage();
        java.lang.String str18 = dateTimeField2.getAsText(31795200000L, locale13);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str21 = dateTimeZone19.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.centuries();
        boolean boolean25 = localDateTime22.equals((java.lang.Object) durationFieldType24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = localDateTime22.getFieldTypes();
        java.lang.String str27 = localDateTime22.toString();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime22.plusMillis(22);
        org.joda.time.LocalDateTime.Property property30 = localDateTime22.monthOfYear();
        int int31 = localDateTime22.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withDurationAdded(readableDuration33, (int) '#');
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.weekyear();
        int int37 = property36.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField38 = property36.getField();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str41 = dateTimeZone39.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(dateTimeZone39);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.millisOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusHours((int) (short) 10);
        int int50 = dateTimeField38.getMinimumValue((org.joda.time.ReadablePartial) localDateTime49);
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str53 = dateTimeField38.getAsShortText((long) 15, locale52);
        java.lang.String str54 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localDateTime22, locale52);
        org.joda.time.LocalDateTime.Property property55 = localDateTime22.secondOfMinute();
        int int56 = localDateTime22.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60000L) + "'", long4 == (-60000L));
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0" + "'", str7, "0");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645629360000L + "'", long9 == 1645629360000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T07:21:25.225" + "'", str27, "2022-02-22T07:21:25.225");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 53 + "'", int31 == 53);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 292278993 + "'", int37 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-292275054) + "'", int50 == (-292275054));
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970" + "'", str53, "1970");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "441" + "'", str54, "441");
        org.junit.Assert.assertNotNull(property55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 26485225 + "'", int56 == 26485225);
    }

    @Test
    public void test05774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05774");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.seconds();
        org.joda.time.DurationField durationField5 = chronology2.seconds();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField7 = chronology2.seconds();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.secondOfMinute();
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.lang.String str11 = dateTimeField8.getAsShortText(1645629633046L, locale10);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "33" + "'", str11, "33");
    }

    @Test
    public void test05775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05775");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        java.util.Locale locale8 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = locale8.getVariant();
        java.lang.String str11 = localDateTime6.toString("26149261", locale8);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.plus(readableDuration12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime6.year();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime6.minusMinutes(17);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "26149261" + "'", str11, "26149261");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test05776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05776");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2022-02-22T14:31:42.635", (double) 52293435);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=5.2293435E7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05777");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        long long15 = dateTimeZone11.convertUTCToLocal((long) ' ');
        java.lang.String str16 = dateTimeZone11.toString();
        boolean boolean18 = dateTimeZone11.equals((java.lang.Object) (short) 100);
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str21 = dateTimeZone11.getShortName((long) (-1), locale20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone11);
        int int24 = dateTimeZone11.getOffset((long) (short) 10);
        boolean boolean25 = dateTimeZone11.isFixed();
        boolean boolean27 = dateTimeZone11.isStandardOffset((long) (byte) 1);
        java.lang.String str28 = dateTimeZone11.toString();
        org.joda.time.Chronology chronology29 = chronology3.withZone(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.weekyears();
        org.joda.time.DurationField durationField34 = chronology32.centuries();
        org.joda.time.DurationField durationField35 = chronology32.hours();
        org.joda.time.Chronology chronology36 = chronology32.withUTC();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str40 = dateTimeZone38.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(dateTimeZone38);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withFieldAdded(durationFieldType43, 26149500);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.minusHours((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType49 = dateTimeFieldType48.getDurationType();
        boolean boolean50 = localDateTime47.isSupported(dateTimeFieldType48);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.weekyears();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.secondOfDay();
        org.joda.time.DateTimeField dateTimeField57 = chronology53.dayOfYear();
        org.joda.time.DateTimeField dateTimeField58 = chronology53.clockhourOfDay();
        boolean boolean59 = dateTimeFieldType48.isSupported(chronology53);
        org.joda.time.DateTimeField dateTimeField60 = chronology53.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone61 = chronology53.getZone();
        java.lang.String str63 = dateTimeZone61.getShortName((-19046L));
        java.util.TimeZone timeZone64 = dateTimeZone61.toTimeZone();
        org.joda.time.Chronology chronology65 = chronology36.withZone(dateTimeZone61);
        long long67 = dateTimeZone11.getMillisKeepLocal(dateTimeZone61, 1645629664687L);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 32L + "'", long15 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00" + "'", str63, "+00:00");
        org.junit.Assert.assertNotNull(timeZone64);
// flaky:         org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1645629664687L + "'", long67 == 1645629664687L);
    }

    @Test
    public void test05778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05778");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        org.joda.time.LocalDateTime localDateTime8 = property4.addToCopy((int) (short) -1);
        int int10 = localDateTime8.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withYearOfEra(5689406);
        int int13 = localDateTime12.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5689406 + "'", int13 == 5689406);
    }

    @Test
    public void test05779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05779");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.minuteOfDay();
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale6.getDisplayScript(locale8);
        int int11 = dateTimeField5.getMaximumTextLength(locale8);
        long long13 = dateTimeField5.roundHalfFloor((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withDurationAdded(readableDuration15, (int) '#');
        int int18 = localDateTime17.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withMinuteOfHour(2);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.withMinuteOfHour(2);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.plus(readableDuration23);
        int int25 = localDateTime17.getMinuteOfHour();
        int int26 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str29 = dateTimeZone27.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone27);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.millisOfDay();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.weekyears();
        org.joda.time.DurationField durationField46 = chronology44.centuries();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology44);
        org.joda.time.DateTimeField dateTimeField48 = chronology44.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField49 = chronology44.clockhourOfHalfday();
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleAttributes();
        java.lang.String str54 = dateTimeField49.getAsShortText((int) (byte) 0, locale51);
        java.lang.String str55 = dateTimeField5.getAsShortText((org.joda.time.ReadablePartial) localDateTime39, (-1), locale51);
        int int57 = dateTimeField5.getMaximumValue(1640157482070L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 21 + "'", int25 == 21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0" + "'", str54, "0");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-1" + "'", str55, "-1");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1439 + "'", int57 == 1439);
    }

    @Test
    public void test05780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05780");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds(9);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withCenturyOfEra(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.property(dateTimeFieldType8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        long long14 = dateTimeZone10.convertUTCToLocal((long) ' ');
        java.lang.String str15 = dateTimeZone10.toString();
        boolean boolean17 = dateTimeZone10.equals((java.lang.Object) (short) 100);
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str20 = dateTimeZone10.getShortName((long) (-1), locale19);
        org.joda.time.DateTime dateTime21 = localDateTime7.toDateTime(dateTimeZone10);
        java.lang.String str23 = dateTimeZone10.getNameKey(1645629365489L);
        int int25 = dateTimeZone10.getStandardOffset(0L);
        boolean boolean27 = dateTimeZone10.isStandardOffset(1645629552885L);
        java.lang.String str29 = dateTimeZone10.getName(1645629584705L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 32L + "'", long14 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
    }

    @Test
    public void test05781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05781");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-22T07:16:00.550");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.hours();
        java.lang.String str6 = chronology4.toString();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withDurationAdded(readableDuration10, (int) '#');
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.weekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str20 = dateTimeZone18.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.centuries();
        boolean boolean24 = localDateTime21.equals((java.lang.Object) durationFieldType23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localDateTime21.getFieldTypes();
        java.lang.String str26 = localDateTime21.toString();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime21.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean30 = localDateTime21.isSupported(dateTimeFieldType29);
        int int31 = localDateTime17.indexOf(dateTimeFieldType29);
        int[] intArray33 = chronology4.get((org.joda.time.ReadablePartial) localDateTime17, 1645629358650L);
        org.joda.time.DurationField durationField34 = chronology4.millis();
        org.joda.time.DurationField durationField35 = chronology4.halfdays();
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.hours();
        java.lang.String str41 = chronology39.toString();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withDurationAdded(readableDuration45, (int) '#');
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.weekyear();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property51 = localDateTime47.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime52 = property51.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str55 = dateTimeZone53.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(dateTimeZone53);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.centuries();
        boolean boolean59 = localDateTime56.equals((java.lang.Object) durationFieldType58);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray60 = localDateTime56.getFieldTypes();
        java.lang.String str61 = localDateTime56.toString();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime56.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean65 = localDateTime56.isSupported(dateTimeFieldType64);
        int int66 = localDateTime52.indexOf(dateTimeFieldType64);
        int[] intArray68 = chronology39.get((org.joda.time.ReadablePartial) localDateTime52, 1645629358650L);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime52.plusWeeks(26149500);
        org.joda.time.LocalDateTime.Property property71 = localDateTime70.dayOfMonth();
        long long73 = chronology4.set((org.joda.time.ReadablePartial) localDateTime70, 1645629456271L);
        java.util.Date date74 = localDateTime70.toDate();
        boolean boolean75 = timeZone1.inDaylightTime(date74);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[UTC]" + "'", str6, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T07:21:25.387" + "'", str26, "2022-02-22T07:21:25.387");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[2022, 2, 23, 54958650]");
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[UTC]" + "'", str41, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray60);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2022-02-22T07:21:25.387" + "'", str61, "2022-02-22T07:21:25.387");
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[2022, 2, 23, 54958650]");
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 15816863088000000L + "'", long73 == 15816863088000000L);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Tue Jun 10 00:00:00 GMT+00:00 503186");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test05782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05782");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str3 = dateTimeZone1.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.millisOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.secondOfMinute();
        java.lang.String str15 = property14.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property14.getFieldType();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.weekyears();
        org.joda.time.DurationField durationField21 = chronology19.seconds();
        org.joda.time.DurationField durationField22 = chronology19.seconds();
        org.joda.time.DurationField durationField23 = chronology19.seconds();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.centuryOfEra();
        boolean boolean26 = dateTimeFieldType16.isSupported(chronology19);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.weekyears();
        org.joda.time.DurationField durationField31 = chronology29.centuries();
        org.joda.time.DurationField durationField32 = chronology29.hours();
        org.joda.time.DurationField durationField33 = chronology29.seconds();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.dayOfYear();
        org.joda.time.DateTimeField dateTimeField35 = chronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology29.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType16.getField(chronology29);
        org.joda.time.DateTimeField dateTimeField38 = chronology29.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField39 = chronology29.secondOfDay();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(30L, chronology29);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusHours(11990863);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(26164);
        org.joda.time.DateTime dateTime45 = localDateTime40.toDateTime(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[secondOfMinute]" + "'", str15, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test05783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05783");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        int int11 = property9.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test05784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05784");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Category category1 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category1, locale2);
        java.lang.String str4 = locale2.toLanguageTag();
        java.lang.String str5 = locale2.getLanguage();
        java.lang.String str8 = nameProvider0.getShortName(locale2, "days", "26149261");
        java.util.Locale locale11 = new java.util.Locale("und-26150748", "dayOfWeek");
        java.lang.String str14 = nameProvider0.getName(locale11, "26191920", "2022-02-22T07:16:40.334");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale16.getDisplayScript();
        java.lang.String str20 = locale16.getISO3Country();
        java.lang.String str21 = locale16.getISO3Language();
        java.lang.String str24 = nameProvider0.getName(locale16, "26268337", "2022-02-22T07:17:36.707");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category1.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "fr" + "'", str4, "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fr" + "'", str5, "fr");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals(locale11.toString(), "und-26150748_DAYOFWEEK");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test05785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05785");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        int int5 = property4.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusHours((int) (short) 10);
        int int18 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDateTime17);
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str21 = dateTimeField6.getAsShortText((long) 15, locale20);
        int int22 = dateTimeField6.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str25 = dateTimeZone23.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        java.lang.String str28 = property27.getName();
        org.joda.time.LocalDateTime localDateTime29 = property27.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusHours(0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusMonths(22);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withCenturyOfEra(3);
        int[] intArray36 = localDateTime35.getValues();
        org.joda.time.tz.NameProvider nameProvider38 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Category category39 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category39, locale40);
        java.lang.String str42 = locale40.toLanguageTag();
        java.lang.String str43 = locale40.getLanguage();
        java.lang.String str46 = nameProvider38.getShortName(locale40, "days", "26149261");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider38);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider38);
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.lang.String str51 = locale49.toLanguageTag();
        java.lang.String str52 = locale49.getScript();
        java.lang.String str55 = nameProvider38.getShortName(locale49, "44", "2022-02-22T07:16:49.120");
        java.util.Locale locale56 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale57 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str58 = locale56.getDisplayCountry(locale57);
        java.lang.String str59 = locale57.getDisplayName();
        java.lang.String str60 = locale57.getVariant();
        java.lang.String str63 = nameProvider38.getShortName(locale57, "0100-02-22T07:16:46.967", "2022-02-23T15:17:18.879Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTimeField dateTimeField66 = dateTimeFieldType64.getField(chronology65);
        java.util.Locale locale68 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale69 = locale68.stripExtensions();
        java.lang.String str70 = dateTimeField66.getAsShortText(100, locale69);
        java.lang.String str73 = nameProvider38.getShortName(locale69, "", "2022-02-22T07:16:09.901");
        java.util.Locale locale76 = new java.util.Locale("1970-02-18T15:16:30.383", "2022-02-22T07:16:40.752");
        java.lang.String str77 = locale69.getDisplayCountry(locale76);
        java.lang.String str78 = locale76.getScript();
        java.lang.String str79 = dateTimeField6.getAsText((org.joda.time.ReadablePartial) localDateTime35, 330, locale76);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 292278993 + "'", int5 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-292275054) + "'", int18 == (-292275054));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970" + "'", str21, "1970");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 292278993 + "'", int22 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "millisOfDay" + "'", str28, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[320, 4, 22, 26485470]");
        org.junit.Assert.assertNotNull(nameProvider38);
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category39.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "fr" + "'", str42, "fr");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "fr" + "'", str43, "fr");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "und" + "'", str51, "und");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Canada" + "'", str58, "Canada");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "fran\347ais (Canada)" + "'", str59, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "100" + "'", str70, "100");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertEquals(locale76.toString(), "1970-02-18t15:16:30.383_2022-02-22T07:16:40.752");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Canada" + "'", str77, "Canada");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "330" + "'", str79, "330");
    }

    @Test
    public void test05786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05786");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        java.lang.String str1 = localDateTime0.toString();
        int int2 = localDateTime0.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusMonths(2);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.secondOfMinute();
        org.joda.time.DateTime dateTime6 = localDateTime0.toDateTime();
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.dayOfYear();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-22T07:21:25.654" + "'", str1, "2022-02-22T07:21:25.654");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 20 + "'", int2 == 20);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test05787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05787");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str3 = dateTimeZone1.getShortName((long) (short) 10);
        long long5 = dateTimeZone1.convertUTCToLocal((long) ' ');
        java.lang.String str6 = dateTimeZone1.toString();
        boolean boolean8 = dateTimeZone1.equals((java.lang.Object) (short) 100);
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = dateTimeZone1.getShortName((long) (-1), locale10);
        long long14 = dateTimeZone1.convertLocalToUTC((long) (short) 10, true);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 7, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone1);
        java.util.Locale locale18 = java.util.Locale.PRC;
        java.lang.String str19 = dateTimeZone1.getName((long) 93, locale18);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 32L + "'", long5 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
    }

    @Test
    public void test05788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05788");
        java.util.Locale locale1 = new java.util.Locale("2022-02-22T07:21:04.218");
        org.junit.Assert.assertEquals(locale1.toString(), "2022-02-22t07:21:04.218");
    }

    @Test
    public void test05789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05789");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.LocalDateTime localDateTime7 = property4.setCopy(67);
        org.joda.time.LocalDateTime localDateTime8 = property4.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime11 = property9.addWrapFieldToCopy(1);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.monthOfYear();
        java.lang.String str14 = localDateTime11.toString("26320124");
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.minusHours(26472719);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "26320124" + "'", str14, "26320124");
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test05790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05790");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField4 = dateTimeField3.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str7 = dateTimeZone5.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        java.lang.String str10 = property9.getName();
        org.joda.time.LocalDateTime localDateTime11 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears((int) (short) -1);
        int[] intArray21 = new int[] { 'a', (-1), 10, 26151696, 4, (byte) 1 };
        int[] intArray23 = dateTimeField3.set((org.joda.time.ReadablePartial) localDateTime11, 0, intArray21, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str26 = dateTimeZone24.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusHours((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = localDateTime32.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.withMillisOfDay((int) '4');
        boolean boolean38 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime32.minusMinutes(2922789);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime32.minusDays(24);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime32.withPeriodAdded(readablePeriod43, 53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = localDateTime45.toString(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "millisOfDay" + "'", str10, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 1, 10, 26151696, 4, 1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 1, 10, 26151696, 4, 1]");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-23T15:21:25.722" + "'", str47, "2022-02-23T15:21:25.722");
    }

    @Test
    public void test05791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05791");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getShortName((long) (short) 10);
        long long13 = dateTimeZone9.convertUTCToLocal((long) ' ');
        java.lang.String str14 = dateTimeZone9.toString();
        java.lang.String str15 = dateTimeZone9.toString();
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale21 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str22 = locale20.getDisplayCountry(locale21);
        java.lang.String str23 = locale17.getDisplayVariant(locale20);
        java.util.Locale locale24 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale25 = locale24.stripExtensions();
        java.lang.String str26 = locale17.getDisplayLanguage(locale25);
        java.lang.String str27 = dateTimeZone9.getName((long) 67, locale25);
        int int28 = dateTimeField8.getMaximumTextLength(locale25);
        int int30 = dateTimeField8.getMaximumValue((long) 26180486);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.weekyears();
        org.joda.time.DurationField durationField36 = chronology34.centuries();
        org.joda.time.DurationField durationField37 = chronology34.minutes();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.monthOfYear();
        boolean boolean39 = dateTimeField38.isLenient();
        boolean boolean40 = dateTimeField38.isLenient();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str43 = dateTimeZone41.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(dateTimeZone41);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.centuries();
        boolean boolean47 = localDateTime44.equals((java.lang.Object) durationFieldType46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime44.withWeekOfWeekyear((int) (byte) 10);
        int int50 = localDateTime49.getDayOfYear();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.plus(readablePeriod51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withYearOfEra(69);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.weekOfWeekyear();
        java.util.Locale locale59 = new java.util.Locale("2022-02-22T07:16:13.657", "0100-02-22T07:16:04.074", "2022-02-22T07:16:14.450");
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleAttributes();
        java.lang.String str61 = dateTimeField38.getAsShortText((org.joda.time.ReadablePartial) localDateTime54, locale59);
        java.lang.String str62 = dateTimeField8.getAsText(0L, locale59);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTimeField dateTimeField65 = dateTimeFieldType63.getField(chronology64);
        java.util.Locale locale67 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale68 = locale67.stripExtensions();
        java.lang.String str69 = dateTimeField65.getAsShortText(100, locale68);
        int int71 = dateTimeField65.getLeapAmount((long) (short) 100);
        org.joda.time.DurationField durationField72 = dateTimeField65.getRangeDurationField();
        boolean boolean73 = dateTimeField65.isLenient();
        int int75 = dateTimeField65.getLeapAmount(1645629366934L);
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology79 = localDateTime78.getChronology();
        org.joda.time.DurationField durationField80 = chronology79.weekyears();
        org.joda.time.DurationField durationField81 = chronology79.centuries();
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology79);
        org.joda.time.DateTimeField dateTimeField83 = chronology79.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField84 = chronology79.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime86 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime localDateTime88 = localDateTime86.plusDays(0);
        long long90 = chronology79.set((org.joda.time.ReadablePartial) localDateTime88, (long) 24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter91 = null;
        java.lang.String str92 = localDateTime88.toString(dateTimeFormatter91);
        java.util.Locale locale94 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str95 = dateTimeField65.getAsShortText((org.joda.time.ReadablePartial) localDateTime88, 57, locale94);
        java.lang.String str96 = locale59.getDisplayLanguage(locale94);
        java.util.Set<java.lang.Character> charSet97 = locale94.getExtensionKeys();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 32L + "'", long13 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Canada" + "'", str19, "Canada");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Canada" + "'", str22, "Canada");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fran\347ais" + "'", str26, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1439 + "'", int30 == 1439);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 67 + "'", int50 == 67);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertEquals(locale59.toString(), "2022-02-22t07:16:13.657_0100-02-22T07:16:04.074_2022-02-22T07:16:14.450");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Mar" + "'", str61, "Mar");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0" + "'", str62, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "100" + "'", str69, "100");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 100L + "'", long90 == 100L);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "1970-01-01T00:00:00.100" + "'", str92, "1970-01-01T00:00:00.100");
        org.junit.Assert.assertNotNull(locale94);
        org.junit.Assert.assertEquals(locale94.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "57" + "'", str95, "57");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "2022-02-22t07:16:13.657" + "'", str96, "2022-02-22t07:16:13.657");
        org.junit.Assert.assertNotNull(charSet97);
    }

    @Test
    public void test05792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05792");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        int int5 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        java.lang.String str9 = localDateTime8.toString();
        int int10 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.minusMonths(2);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str28 = dateTimeZone26.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = localDateTime29.getFieldType((int) (short) 0);
        boolean boolean32 = dateTime24.isSupported(dateTimeFieldType31);
        org.joda.time.DateTime dateTime33 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int34 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property35 = localDateTime7.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime37 = property35.setCopy("2022-02-22T07:16:58.668");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:16:58.668\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T07:21:25.937" + "'", str9, "2022-02-22T07:21:25.937");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645629685937L + "'", long25 == 1645629685937L);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test05793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05793");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField4 = dateTimeField3.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str7 = dateTimeZone5.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        java.lang.String str10 = property9.getName();
        org.joda.time.LocalDateTime localDateTime11 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears((int) (short) -1);
        int[] intArray21 = new int[] { 'a', (-1), 10, 26151696, 4, (byte) 1 };
        int[] intArray23 = dateTimeField3.set((org.joda.time.ReadablePartial) localDateTime11, 0, intArray21, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str26 = dateTimeZone24.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusHours((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = localDateTime32.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.withMillisOfDay((int) '4');
        boolean boolean38 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime32.minusMinutes(2922789);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withDayOfWeek(503186);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 503186 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "millisOfDay" + "'", str10, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 1, 10, 26151696, 4, 1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 1, 10, 26151696, 4, 1]");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test05794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05794");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        org.joda.time.DurationField durationField7 = property4.getLeapDurationField();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale8.getLanguage();
        java.lang.String str11 = locale8.toLanguageTag();
        java.lang.String str12 = property4.getAsShortText(locale8);
        org.joda.time.LocalDateTime localDateTime13 = property4.roundCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = localDateTime13.toString(dateTimeFormatter14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.secondOfMinute();
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str20 = dateTimeZone18.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.minuteOfHour();
        int int26 = property25.get();
        org.joda.time.LocalDateTime localDateTime28 = property25.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime29 = property25.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withYearOfCentury(97);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str35 = dateTimeZone33.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.millisOfDay();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.secondOfMinute();
        java.lang.String str47 = property46.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property46.getFieldType();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.weekyears();
        org.joda.time.DurationField durationField53 = chronology51.seconds();
        org.joda.time.DurationField durationField54 = chronology51.seconds();
        org.joda.time.DurationField durationField55 = chronology51.seconds();
        org.joda.time.DateTimeField dateTimeField56 = chronology51.millisOfDay();
        org.joda.time.DateTimeField dateTimeField57 = chronology51.centuryOfEra();
        boolean boolean58 = dateTimeFieldType48.isSupported(chronology51);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str61 = dateTimeZone59.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now(dateTimeZone59);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.centuries();
        boolean boolean65 = localDateTime62.equals((java.lang.Object) durationFieldType64);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology68 = localDateTime67.getChronology();
        org.joda.time.DurationField durationField69 = chronology68.weekyears();
        org.joda.time.DateTimeField dateTimeField70 = chronology68.minuteOfDay();
        org.joda.time.DurationField durationField71 = durationFieldType64.getField(chronology68);
        boolean boolean72 = dateTimeFieldType48.isSupported(chronology68);
        boolean boolean73 = localDateTime32.isSupported(dateTimeFieldType48);
        int int74 = localDateTime13.get(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(durationField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "26486183" + "'", str12, "26486183");
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T07:21:26.183" + "'", str15, "2022-02-22T07:21:26.183");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 21 + "'", int26 == 21);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Property[secondOfMinute]" + "'", str47, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00" + "'", str61, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 26 + "'", int74 == 26);
    }

    @Test
    public void test05795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05795");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.seconds();
        org.joda.time.DurationField durationField5 = chronology2.seconds();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.millisOfDay();
        org.joda.time.DurationField durationField7 = chronology2.minutes();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test05796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05796");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = chronology3.year();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.weekyears();
        org.joda.time.DurationField durationField18 = chronology16.centuries();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology16);
        org.joda.time.DateTimeField dateTimeField20 = chronology16.halfdayOfDay();
        int int23 = dateTimeField20.getDifference(11L, 0L);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str26 = dateTimeZone24.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.minuteOfHour();
        int int32 = property31.get();
        org.joda.time.LocalDateTime localDateTime34 = property31.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withYearOfCentury(0);
        java.util.Locale locale39 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale40 = locale39.stripExtensions();
        java.lang.String str41 = locale39.getVariant();
        java.lang.String str42 = locale39.getLanguage();
        java.lang.String str43 = dateTimeField20.getAsShortText((org.joda.time.ReadablePartial) localDateTime37, 0, locale39);
        java.lang.String str44 = dateTimeField11.getAsShortText((long) 56, locale39);
        java.lang.String str45 = locale39.toLanguageTag();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 21 + "'", int32 == 21);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "fr" + "'", str42, "fr");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "AM" + "'", str43, "AM");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970" + "'", str44, "1970");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "fr-CA" + "'", str45, "fr-CA");
    }

    @Test
    public void test05797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05797");
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        boolean boolean13 = dateTimeFieldType7.isSupported(chronology10);
        org.joda.time.DateTimeField dateTimeField14 = chronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(127, (-1), 58, 55182793, 26276262, 26409, 86399930, chronology10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 55182793 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test05798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05798");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withYearOfEra(58);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        long long14 = dateTimeZone10.convertUTCToLocal((long) ' ');
        java.lang.String str15 = dateTimeZone10.toString();
        boolean boolean17 = dateTimeZone10.equals((java.lang.Object) (short) 100);
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str20 = dateTimeZone10.getShortName((long) (-1), locale19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone10);
        java.lang.String str23 = dateTimeZone10.getName((long) 26149);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        long long27 = dateTimeZone10.adjustOffset(1640157456968L, true);
        long long29 = dateTimeZone10.nextTransition(1645629535823L);
        org.joda.time.DateTime dateTime30 = localDateTime6.toDateTime(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 32L + "'", long14 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1640157456968L + "'", long27 == 1640157456968L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645629535823L + "'", long29 == 1645629535823L);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test05799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05799");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale7.getISO3Language();
        java.lang.String str9 = property4.getAsShortText(locale7);
        org.joda.time.DurationField durationField10 = property4.getDurationField();
        long long13 = durationField10.add((long) 1, 10);
        boolean boolean14 = durationField10.isPrecise();
        int int16 = durationField10.getValue((long) 26149500);
        int int19 = durationField10.getValue((long) (short) 10, 0L);
        long long22 = durationField10.add((long) 'a', (long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = durationField10.getType();
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.hours();
        org.joda.time.DurationField durationField29 = durationFieldType24.getField(chronology27);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.hourOfHalfday();
        org.joda.time.DurationField durationField31 = chronology27.weeks();
        boolean boolean32 = durationFieldType23.isSupported(chronology27);
        org.joda.time.DateTimeField dateTimeField33 = chronology27.secondOfDay();
        boolean boolean34 = dateTimeField33.isLenient();
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        java.lang.String str37 = locale36.getVariant();
        java.util.Locale locale41 = new java.util.Locale("26259771", "26271917", "2022-02-22T07:15:58.650");
        java.lang.String str42 = locale36.getDisplayScript(locale41);
        java.lang.String str43 = dateTimeField33.getAsShortText(1645629605907L, locale36);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "26486319" + "'", str9, "26486319");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 11L + "'", long13 == 11L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 26149500 + "'", int16 == 26149500);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 197L + "'", long22 == 197L);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals(locale41.toString(), "26259771_26271917_2022-02-22T07:15:58.650");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "55205" + "'", str43, "55205");
    }

    @Test
    public void test05800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05800");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray2 = strSet1.toArray();
        boolean boolean3 = strSet1.isEmpty();
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray6 = strSet5.toArray();
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        boolean boolean9 = strSet5.removeAll((java.util.Collection<java.lang.String>) strSet8);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray14 = new org.joda.time.DurationFieldType[] { durationFieldType12, durationFieldType13 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray15 = strSet11.toArray(durationFieldTypeArray14);
        boolean boolean16 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet11);
        java.lang.Object[] objArray17 = strSet11.toArray();
        boolean boolean18 = strSet1.removeAll((java.util.Collection<java.lang.String>) strSet11);
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray21 = strSet20.toArray();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        boolean boolean24 = strSet20.removeAll((java.util.Collection<java.lang.String>) strSet23);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray29 = new org.joda.time.DurationFieldType[] { durationFieldType27, durationFieldType28 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray30 = strSet26.toArray(durationFieldTypeArray29);
        boolean boolean31 = strSet20.containsAll((java.util.Collection<java.lang.String>) strSet26);
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray34 = strSet33.toArray();
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        boolean boolean37 = strSet33.removeAll((java.util.Collection<java.lang.String>) strSet36);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray42 = new org.joda.time.DurationFieldType[] { durationFieldType40, durationFieldType41 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray43 = strSet39.toArray(durationFieldTypeArray42);
        boolean boolean44 = strSet33.containsAll((java.util.Collection<java.lang.String>) strSet39);
        java.lang.Object[] objArray45 = strSet39.toArray();
        boolean boolean46 = strSet20.retainAll((java.util.Collection<java.lang.String>) strSet39);
        boolean boolean47 = strSet11.addAll((java.util.Collection<java.lang.String>) strSet39);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean49 = strSet39.remove((java.lang.Object) dateTimeFieldType48);
        java.util.Locale.LanguageRange[] languageRangeArray50 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList51 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList51, languageRangeArray50);
        java.util.Locale locale53 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str57 = dateTimeZone55.getShortName((long) (short) 10);
        long long59 = dateTimeZone55.convertUTCToLocal((long) ' ');
        java.lang.String str60 = dateTimeZone55.toString();
        boolean boolean62 = dateTimeZone55.equals((java.lang.Object) (short) 100);
        java.util.Locale locale64 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str65 = dateTimeZone55.getShortName((long) (-1), locale64);
        java.util.Locale locale66 = java.util.Locale.CANADA;
        java.util.Locale locale67 = java.util.Locale.FRENCH;
        java.util.Locale[] localeArray68 = new java.util.Locale[] { locale53, locale54, locale64, locale66, locale67 };
        java.util.ArrayList<java.util.Locale> localeList69 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList69, localeArray68);
        java.util.Locale locale71 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, (java.util.Collection<java.util.Locale>) localeList69);
        java.util.Locale locale72 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet73 = locale72.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray74 = strSet73.toArray();
        java.util.List<java.lang.String> strList75 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, (java.util.Collection<java.lang.String>) strSet73);
        java.util.Spliterator[] spliteratorArray77 = new java.util.Spliterator[0];
        @SuppressWarnings("unchecked")
        java.util.Spliterator<java.lang.String>[] strSpliteratorArray78 = (java.util.Spliterator<java.lang.String>[]) spliteratorArray77;
        java.util.Spliterator<java.lang.String>[] strSpliteratorArray79 = strSet73.toArray((java.util.Spliterator<java.lang.String>[]) spliteratorArray77);
        boolean boolean80 = strSet39.retainAll((java.util.Collection<java.lang.String>) strSet73);
        int int81 = strSet39.size();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(durationFieldTypeArray14);
        org.junit.Assert.assertNotNull(durationFieldTypeArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldTypeArray29);
        org.junit.Assert.assertNotNull(durationFieldTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(durationFieldTypeArray42);
        org.junit.Assert.assertNotNull(durationFieldTypeArray43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(languageRangeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 32L + "'", long59 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "UTC" + "'", str60, "UTC");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00" + "'", str65, "+00:00");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr");
        org.junit.Assert.assertNotNull(localeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(locale71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNotNull(spliteratorArray77);
        org.junit.Assert.assertNotNull(strSpliteratorArray78);
        org.junit.Assert.assertNotNull(strSpliteratorArray79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test05801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05801");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.hours();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withFieldAdded(durationFieldType15, 26149500);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.minusHours((int) 'a');
        long long21 = chronology2.set((org.joda.time.ReadablePartial) localDateTime19, 1908343039481L);
        org.joda.time.DateTimeZone dateTimeZone22 = chronology2.getZone();
        org.joda.time.DateTimeField dateTimeField23 = chronology2.dayOfWeek();
        java.lang.String str25 = dateTimeField23.getAsText((long) 948);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645165286421L + "'", long21 == 1645165286421L);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Donnerstag" + "'", str25, "Donnerstag");
    }

    @Test
    public void test05802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05802");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime3.getFieldTypes();
        java.lang.String str8 = localDateTime3.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = localDateTime3.toString(dateTimeFormatter9);
        int int11 = localDateTime3.size();
        org.joda.time.LocalDateTime.Property property12 = localDateTime3.secondOfMinute();
        int int13 = localDateTime3.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.minusMillis(26181236);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYear(1979);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withPeriodAdded(readablePeriod18, 26403226);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T07:21:26.435" + "'", str8, "2022-02-22T07:21:26.435");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T07:21:26.435" + "'", str10, "2022-02-22T07:21:26.435");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test05803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05803");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str7 = dateTimeZone5.getShortName((long) (short) 10);
        long long9 = dateTimeZone5.convertUTCToLocal((long) ' ');
        java.lang.String str10 = dateTimeZone5.toString();
        boolean boolean12 = dateTimeZone5.equals((java.lang.Object) (short) 100);
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str15 = dateTimeZone5.getShortName((long) (-1), locale14);
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Locale[] localeArray18 = new java.util.Locale[] { locale3, locale4, locale14, locale16, locale17 };
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.Locale locale21 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList19);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray24 = strSet23.toArray();
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet23);
        java.util.Spliterator[] spliteratorArray27 = new java.util.Spliterator[0];
        @SuppressWarnings("unchecked")
        java.util.Spliterator<java.lang.String>[] strSpliteratorArray28 = (java.util.Spliterator<java.lang.String>[]) spliteratorArray27;
        java.util.Spliterator<java.lang.String>[] strSpliteratorArray29 = strSet23.toArray((java.util.Spliterator<java.lang.String>[]) spliteratorArray27);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray32 = strSet31.toArray();
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        boolean boolean35 = strSet31.removeAll((java.util.Collection<java.lang.String>) strSet34);
        java.util.Iterator<java.lang.String> strItor36 = strSet31.iterator();
        boolean boolean37 = strSet23.containsAll((java.util.Collection<java.lang.String>) strSet31);
        java.util.Collection<java.lang.String> strCollection38 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean39 = strSet23.containsAll(strCollection38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 32L + "'", long9 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(locale21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(spliteratorArray27);
        org.junit.Assert.assertNotNull(strSpliteratorArray28);
        org.junit.Assert.assertNotNull(strSpliteratorArray29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test05804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05804");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.DurationField durationField6 = chronology3.hours();
        boolean boolean7 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.DateTimeField dateTimeField8 = chronology3.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.millisOfDay();
        long long12 = dateTimeField9.addWrapField(1645629352137L, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str15 = dateTimeZone13.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property17.addToCopy(500);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withYearOfEra(16);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withPeriodAdded(readablePeriod22, 27427155);
        java.util.Date date25 = localDateTime19.toDate();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.fromDateFields(date25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.months();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.weekyears();
        org.joda.time.DurationField durationField32 = chronology30.seconds();
        org.joda.time.DurationField durationField33 = chronology30.seconds();
        org.joda.time.DurationField durationField34 = chronology30.seconds();
        org.joda.time.DurationField durationField35 = chronology30.weekyears();
        boolean boolean36 = durationFieldType27.isSupported(chronology30);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withDurationAdded(readableDuration38, (int) '#');
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.weekyear();
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.days();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Chronology chronology44 = null;
        boolean boolean45 = durationFieldType42.isSupported(chronology44);
        java.lang.String str46 = durationFieldType42.toString();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime40.withFieldAdded(durationFieldType42, (-86340));
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.halfdayOfDay();
        org.joda.time.DurationField durationField53 = dateTimeField52.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str56 = dateTimeZone54.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(dateTimeZone54);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.millisOfDay();
        java.lang.String str59 = property58.getName();
        org.joda.time.LocalDateTime localDateTime60 = property58.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plusYears((int) (short) -1);
        int[] intArray70 = new int[] { 'a', (-1), 10, 26151696, 4, (byte) 1 };
        int[] intArray72 = dateTimeField52.set((org.joda.time.ReadablePartial) localDateTime60, 0, intArray70, (int) (short) 0);
        chronology30.validate((org.joda.time.ReadablePartial) localDateTime40, intArray72);
        int int74 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDateTime26, intArray72);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645629352172L + "'", long12 == 1645629352172L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Feb 22 07:21:27 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "days" + "'", str43, "days");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "days" + "'", str46, "days");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00" + "'", str56, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "millisOfDay" + "'", str59, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 1, 10, 26151696, 4, 1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 1, 10, 26151696, 4, 1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test05805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05805");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.seconds();
        org.joda.time.DurationField durationField5 = chronology2.seconds();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.secondOfDay();
        long long11 = dateTimeField8.set(1645629620515L, 915);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645575315515L + "'", long11 == 1645575315515L);
    }

    @Test
    public void test05806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05806");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        int int5 = property4.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = property4.setCopy((int) (byte) 1);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.hours();
        org.joda.time.DurationField durationField13 = durationFieldType8.getField(chronology11);
        boolean boolean14 = localDateTime7.isSupported(durationFieldType8);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.weekyears();
        org.joda.time.DurationField durationField19 = chronology17.centuries();
        org.joda.time.DurationField durationField20 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology17.getZone();
        org.joda.time.DateTime dateTime23 = localDateTime7.toDateTime(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withDurationAdded(readableDuration25, (int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.weekyear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.minusMillis((-1));
        java.util.Locale locale32 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.lang.String str34 = locale32.getVariant();
        java.lang.String str35 = localDateTime30.toString("26149261", locale32);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime30.plus(readablePeriod36);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.lang.String str41 = dateTimeZone39.getNameKey((long) 2);
        org.joda.time.DateTime dateTime42 = localDateTime30.toDateTime(dateTimeZone39);
        int int43 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(26149500L);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusSeconds(1439);
        org.joda.time.DateTime dateTime48 = localDateTime45.toDateTime();
        boolean boolean49 = dateTime42.isAfter((org.joda.time.ReadableInstant) dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 86399999 + "'", int5 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "26149261" + "'", str35, "26149261");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test05807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05807");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYear(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withSecondOfMinute(72000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 72000000 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test05808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05808");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        int int11 = localDateTime8.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minus(readablePeriod12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withYear((int) (short) 100);
        int int21 = localDateTime20.getCenturyOfEra();
        boolean boolean22 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.plusMinutes(0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime20.year();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime20.minus(readableDuration26);
        int int28 = localDateTime20.getHourOfDay();
        int int29 = localDateTime20.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime31 = localDateTime20.withEra(948);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 948 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 21 + "'", int11 == 21);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 7 + "'", int28 == 7);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 22 + "'", int29 == 22);
    }

    @Test
    public void test05809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05809");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        java.lang.String str1 = durationFieldType0.getName();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        org.joda.time.DurationField durationField6 = chronology4.centuries();
        org.joda.time.DurationField durationField7 = chronology4.hours();
        org.joda.time.DurationField durationField8 = chronology4.seconds();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.secondOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.minuteOfDay();
        org.joda.time.DurationField durationField11 = durationFieldType0.getField(chronology4);
        long long14 = durationField11.add(1439L, 55021617);
        long long17 = durationField11.add(1645629605771L, 1645629351324L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "minutes" + "'", str1, "minutes");
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 3301297021439L + "'", long14 == 3301297021439L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 98739406709045771L + "'", long17 == 98739406709045771L);
    }

    @Test
    public void test05810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05810");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("26364530");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, (int) '#');
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.era();
        int int7 = localDateTime2.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withWeekOfWeekyear((int) (byte) 1);
        int int10 = localDateTime2.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime2.plusDays(500);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.days();
        java.lang.String str14 = durationFieldType13.toString();
        boolean boolean15 = localDateTime12.isSupported(durationFieldType13);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.weekyears();
        org.joda.time.DurationField durationField21 = chronology19.centuries();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology19);
        org.joda.time.DurationField durationField23 = chronology19.millis();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.minuteOfDay();
        org.joda.time.DurationField durationField25 = durationFieldType13.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField26 = chronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = chronology19.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.weekyears();
        org.joda.time.DurationField durationField33 = chronology31.centuries();
        org.joda.time.DurationField durationField34 = chronology31.hours();
        boolean boolean35 = durationFieldType28.isSupported(chronology31);
        org.joda.time.DateTimeField dateTimeField36 = chronology31.secondOfDay();
        org.joda.time.DurationField durationField37 = chronology31.minutes();
        org.joda.time.DateTimeField dateTimeField38 = chronology31.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str41 = dateTimeZone39.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(dateTimeZone39);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.millisOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusHours((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = localDateTime47.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime47.minusMillis(0);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withWeekyear(1970);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology58 = localDateTime57.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.weekyears();
        org.joda.time.DurationField durationField60 = chronology58.centuries();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology58);
        org.joda.time.DateTimeField dateTimeField62 = chronology58.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField63 = chronology58.clockhourOfHalfday();
        java.util.Locale locale65 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet66 = locale65.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet67 = locale65.getUnicodeLocaleAttributes();
        java.lang.String str68 = dateTimeField63.getAsShortText((int) (byte) 0, locale65);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str71 = dateTimeZone69.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime72 = org.joda.time.LocalDateTime.now(dateTimeZone69);
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.millisOfDay();
        java.lang.String str74 = property73.getName();
        int int75 = property73.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = property73.getFieldType();
        org.joda.time.LocalDateTime localDateTime77 = property73.roundFloorCopy();
        java.util.Locale locale78 = java.util.Locale.US;
        java.lang.String str79 = property73.getAsShortText(locale78);
        java.lang.String str80 = locale65.getDisplayScript(locale78);
        java.lang.String str81 = dateTimeField38.getAsShortText((org.joda.time.ReadablePartial) localDateTime54, locale65);
        java.util.Locale locale85 = new java.util.Locale("Etc/UTC", "26151809", "26169002");
        java.lang.String str86 = locale65.getDisplayVariant(locale85);
        int int87 = dateTimeField27.getMaximumShortTextLength(locale85);
        java.util.Locale locale88 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale89 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str90 = locale88.getDisplayCountry(locale89);
        java.util.Locale locale91 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale92 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str93 = locale91.getDisplayCountry(locale92);
        java.lang.String str94 = locale88.getDisplayVariant(locale91);
        java.util.Locale.setDefault(locale91);
        java.lang.String str96 = locale91.toLanguageTag();
        java.lang.String str97 = locale91.getDisplayCountry();
        java.lang.String str98 = locale85.getDisplayCountry(locale91);
        java.lang.String str99 = timeZone1.getDisplayName(locale85);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "days" + "'", str14, "days");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0" + "'", str68, "0");
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "millisOfDay" + "'", str74, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 86399999 + "'", int75 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "26486692" + "'", str79, "26486692");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Wed" + "'", str81, "Wed");
        org.junit.Assert.assertEquals(locale85.toString(), "etc/utc_26151809_26169002");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Canada" + "'", str90, "Canada");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Canada" + "'", str93, "Canada");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "fr-CA" + "'", str96, "fr-CA");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "Canada" + "'", str97, "Canada");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "26151809" + "'", str98, "26151809");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "Greenwich Mean Time" + "'", str99, "Greenwich Mean Time");
    }

    @Test
    public void test05811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05811");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = property4.addToCopy(0L);
        java.lang.String str9 = property4.getAsString();
        org.joda.time.LocalDateTime localDateTime10 = property4.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime12 = property4.addWrapFieldToCopy(50);
        int int13 = property4.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime14 = property4.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "26486752" + "'", str9, "26486752");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test05812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05812");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        int int6 = property4.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property4.getFieldType();
        org.joda.time.LocalDateTime localDateTime8 = property4.withMinimumValue();
        long long9 = property4.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property4.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime11 = property4.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 86399999 + "'", int6 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test05813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05813");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DurationField durationField8 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.minuteOfHour();
        int int11 = dateTimeField9.getMaximumValue(1645629604489L);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 59 + "'", int11 == 59);
    }

    @Test
    public void test05814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05814");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.dayOfYear();
        org.joda.time.DurationField durationField8 = chronology2.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField10 = chronology2.dayOfYear();
        org.joda.time.DurationField durationField11 = dateTimeField10.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.weekyears();
        org.joda.time.DurationField durationField16 = chronology14.centuries();
        org.joda.time.DurationField durationField17 = chronology14.minutes();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.era();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(chronology14);
        int int20 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime19);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test05815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05815");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Canada");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList3, strMap4);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList3, strMap6);
        java.util.Collection<java.lang.String> strCollection8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags(languageRangeList7, strCollection8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(languageRangeList7);
    }

    @Test
    public void test05816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05816");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str7 = dateTimeZone5.getShortName((long) (short) 10);
        long long9 = dateTimeZone5.convertUTCToLocal((long) ' ');
        java.lang.String str10 = dateTimeZone5.toString();
        boolean boolean12 = dateTimeZone5.equals((java.lang.Object) (short) 100);
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str15 = dateTimeZone5.getShortName((long) (-1), locale14);
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Locale[] localeArray18 = new java.util.Locale[] { locale3, locale4, locale14, locale16, locale17 };
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.Locale locale21 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList19);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray24 = strSet23.toArray();
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet23);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap26);
        java.util.Collection<java.lang.String> strCollection28 = null;
        java.util.Locale.FilteringMode filteringMode29 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags(languageRangeList27, strCollection28, filteringMode29);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap31 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList32 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList27, strMap31);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap33 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList34 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList32, strMap33);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale locale38 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale39 = java.util.Locale.CANADA;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str42 = dateTimeZone40.getShortName((long) (short) 10);
        long long44 = dateTimeZone40.convertUTCToLocal((long) ' ');
        java.lang.String str45 = dateTimeZone40.toString();
        boolean boolean47 = dateTimeZone40.equals((java.lang.Object) (short) 100);
        java.util.Locale locale49 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str50 = dateTimeZone40.getShortName((long) (-1), locale49);
        java.util.Locale locale51 = java.util.Locale.CANADA;
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale[] localeArray53 = new java.util.Locale[] { locale38, locale39, locale49, locale51, locale52 };
        java.util.ArrayList<java.util.Locale> localeList54 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList54, localeArray53);
        java.util.Locale locale56 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList54);
        java.util.Locale locale57 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray59 = strSet58.toArray();
        java.util.List<java.lang.String> strList60 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strSet58);
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray63 = strSet62.toArray();
        java.util.Locale locale64 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet65 = locale64.getUnicodeLocaleAttributes();
        boolean boolean66 = strSet62.removeAll((java.util.Collection<java.lang.String>) strSet65);
        java.util.List<java.lang.String> strList67 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strSet62);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap68 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList69 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, strMap68);
        java.util.Locale locale70 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet71 = locale70.getUnicodeLocaleKeys();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str74 = dateTimeZone72.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime75 = org.joda.time.LocalDateTime.now(dateTimeZone72);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = localDateTime75.getFieldType((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime75.minusMonths(0);
        boolean boolean80 = strSet71.equals((java.lang.Object) 0);
        strSet71.clear();
        java.util.List<java.lang.String> strList82 = java.util.Locale.filterTags(languageRangeList69, (java.util.Collection<java.lang.String>) strSet71);
        java.lang.String str83 = java.util.Locale.lookupTag(languageRangeList32, (java.util.Collection<java.lang.String>) strSet71);
        java.lang.Object[] objArray84 = strSet71.toArray();
        strSet71.clear();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 32L + "'", long9 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(locale21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertTrue("'" + filteringMode29 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode29.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(languageRangeList32);
        org.junit.Assert.assertNotNull(languageRangeList34);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 32L + "'", long44 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(localeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(locale56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNotNull(languageRangeList69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00" + "'", str74, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strList82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[]");
    }

    @Test
    public void test05817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05817");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("26421020", (double) (-27427156));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-2.7427156E7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05818");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology2.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = dateTimeField10.set(36000000L, "26403260");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26403260 for clockhourOfHalfday must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test05819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05819");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        long long8 = dateTimeZone0.adjustOffset((long) (short) 100, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone0);
        long long12 = dateTimeZone0.convertUTCToLocal((long) 0);
        long long15 = dateTimeZone0.convertLocalToUTC(1645629366715L, false);
        long long19 = dateTimeZone0.convertLocalToUTC((long) 81287455, true, 1645165151799L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645629366715L + "'", long15 == 1645629366715L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 81287455L + "'", long19 == 81287455L);
    }

    @Test
    public void test05820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05820");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(503186);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test05821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05821");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.hours();
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.clockhourOfDay();
        int int7 = dateTimeField5.get(1645629354990L);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str10 = dateTimeZone8.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.centuries();
        boolean boolean14 = localDateTime11.equals((java.lang.Object) durationFieldType13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localDateTime11.getFieldTypes();
        java.lang.String str16 = localDateTime11.toString();
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str18 = dateTimeField5.getAsText((org.joda.time.ReadablePartial) localDateTime11, locale17);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str22 = dateTimeZone20.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.millisOfDay();
        java.lang.String str25 = property24.getName();
        int int26 = property24.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property24.getFieldType();
        org.joda.time.LocalDateTime localDateTime28 = property24.roundFloorCopy();
        java.util.Locale locale29 = java.util.Locale.US;
        java.lang.String str30 = property24.getAsShortText(locale29);
        java.lang.String str31 = dateTimeField5.getAsShortText((long) (byte) 0, locale29);
        long long33 = dateTimeField5.remainder(102L);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType34.getField(chronology35);
        java.util.Locale locale38 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale39 = locale38.stripExtensions();
        java.lang.String str40 = dateTimeField36.getAsShortText(100, locale39);
        int int42 = dateTimeField36.getLeapAmount((long) (short) 100);
        java.lang.String str43 = dateTimeField36.getName();
        long long46 = dateTimeField36.add((long) (short) 1, 0);
        int int48 = dateTimeField36.get((long) 86399999);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str51 = dateTimeZone49.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(dateTimeZone49);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.millisOfDay();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.minusMonths(2022);
        int int59 = localDateTime55.getDayOfMonth();
        java.util.Locale locale60 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleAttributes();
        java.lang.String str62 = locale60.toLanguageTag();
        java.lang.String str63 = dateTimeField36.getAsText((org.joda.time.ReadablePartial) localDateTime55, locale60);
        org.joda.time.LocalDateTime.Property property64 = localDateTime55.era();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str67 = dateTimeZone65.getShortName((long) (short) 10);
        long long69 = dateTimeZone65.convertUTCToLocal((long) ' ');
        java.lang.String str70 = dateTimeZone65.toString();
        boolean boolean72 = dateTimeZone65.equals((java.lang.Object) (short) 100);
        java.util.Locale locale74 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str75 = dateTimeZone65.getShortName((long) (-1), locale74);
        long long79 = dateTimeZone65.convertLocalToUTC((long) (short) 100, true, (-1209599395L));
        org.joda.time.DateTime dateTime80 = localDateTime55.toDateTime(dateTimeZone65);
        java.util.Locale locale81 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet82 = locale81.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet83 = locale81.getUnicodeLocaleAttributes();
        java.lang.String str84 = locale81.getDisplayLanguage();
        java.lang.String str85 = dateTimeField5.getAsShortText((org.joda.time.ReadablePartial) localDateTime55, locale81);
        int int86 = localDateTime55.getEra();
        org.joda.time.LocalDateTime localDateTime88 = localDateTime55.plusYears(365);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T07:21:26.976" + "'", str16, "2022-02-22T07:21:26.976");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "7" + "'", str18, "7");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "millisOfDay" + "'", str25, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 86399999 + "'", int26 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "26486976" + "'", str30, "26486976");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "24" + "'", str31, "24");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 102L + "'", long33 == 102L);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "100" + "'", str40, "100");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "minuteOfDay" + "'", str43, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1439 + "'", int48 == 1439);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 22 + "'", int59 == 22);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "und" + "'", str62, "und");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "441" + "'", str63, "441");
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00" + "'", str67, "+00:00");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 32L + "'", long69 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "UTC" + "'", str70, "UTC");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00" + "'", str75, "+00:00");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 100L + "'", long79 == 100L);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "");
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "7" + "'", str85, "7");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(localDateTime88);
    }

    @Test
    public void test05822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05822");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(26411597);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test05823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05823");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.seconds();
        org.joda.time.DurationField durationField5 = chronology2.seconds();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str10 = dateTimeZone8.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str14 = dateTimeZone12.getShortName((long) (short) 10);
        long long16 = dateTimeZone12.convertUTCToLocal((long) ' ');
        java.lang.String str17 = dateTimeZone12.toString();
        boolean boolean19 = dateTimeZone12.equals((java.lang.Object) (short) 100);
        java.util.Locale locale21 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str22 = dateTimeZone12.getShortName((long) (-1), locale21);
        long long24 = dateTimeZone8.getMillisKeepLocal(dateTimeZone12, (long) (byte) -1);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray27 = strSet26.toArray();
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleAttributes();
        boolean boolean30 = strSet26.removeAll((java.util.Collection<java.lang.String>) strSet29);
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray35 = new org.joda.time.DurationFieldType[] { durationFieldType33, durationFieldType34 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray36 = strSet32.toArray(durationFieldTypeArray35);
        boolean boolean37 = strSet26.containsAll((java.util.Collection<java.lang.String>) strSet32);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray40 = strSet39.toArray();
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        boolean boolean43 = strSet39.removeAll((java.util.Collection<java.lang.String>) strSet42);
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray48 = new org.joda.time.DurationFieldType[] { durationFieldType46, durationFieldType47 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray49 = strSet45.toArray(durationFieldTypeArray48);
        boolean boolean50 = strSet39.containsAll((java.util.Collection<java.lang.String>) strSet45);
        java.lang.Object[] objArray51 = strSet39.toArray();
        boolean boolean52 = strSet32.removeAll((java.util.Collection<java.lang.String>) strSet39);
        boolean boolean53 = dateTimeZone12.equals((java.lang.Object) boolean52);
        long long55 = dateTimeZone12.nextTransition(1645629359098L);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str59 = dateTimeZone57.getShortName((long) (short) 10);
        long long61 = dateTimeZone57.convertUTCToLocal((long) ' ');
        java.lang.String str62 = dateTimeZone57.toString();
        long long65 = dateTimeZone57.adjustOffset((long) 'a', true);
        org.joda.time.DateTime dateTime66 = localDateTime56.toDateTime(dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str69 = dateTimeZone67.getShortName((long) (short) 10);
        long long71 = dateTimeZone67.convertUTCToLocal((long) ' ');
        java.lang.String str72 = dateTimeZone67.toString();
        boolean boolean74 = dateTimeZone67.equals((java.lang.Object) (short) 100);
        java.util.Locale locale76 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str77 = dateTimeZone67.getShortName((long) (-1), locale76);
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(dateTimeZone67);
        java.lang.String str80 = dateTimeZone67.getName((long) 26149);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str83 = dateTimeZone81.getShortName((long) (short) 10);
        long long85 = dateTimeZone81.convertUTCToLocal((long) ' ');
        java.lang.String str86 = dateTimeZone81.toString();
        long long88 = dateTimeZone81.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime89 = new org.joda.time.LocalDateTime(dateTimeZone81);
        long long91 = dateTimeZone67.getMillisKeepLocal(dateTimeZone81, 0L);
        long long93 = dateTimeZone57.getMillisKeepLocal(dateTimeZone67, (long) '#');
        org.joda.time.DateTime dateTime94 = localDateTime7.toDateTime(dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime95 = new org.joda.time.LocalDateTime(dateTimeZone57);
        long long99 = dateTimeZone57.convertLocalToUTC(1645629487471L, false, 1645629532590L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 32L + "'", long16 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(durationFieldTypeArray35);
        org.junit.Assert.assertNotNull(durationFieldTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(durationFieldTypeArray48);
        org.junit.Assert.assertNotNull(durationFieldTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1645629359098L + "'", long55 == 1645629359098L);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00" + "'", str59, "+00:00");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 32L + "'", long61 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "UTC" + "'", str62, "UTC");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 97L + "'", long65 == 97L);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00" + "'", str69, "+00:00");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 32L + "'", long71 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "UTC" + "'", str72, "UTC");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+00:00" + "'", str77, "+00:00");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+00:00" + "'", str80, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+00:00" + "'", str83, "+00:00");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 32L + "'", long85 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "UTC" + "'", str86, "UTC");
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 32L + "'", long88 == 32L);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 35L + "'", long93 == 35L);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 1645629487471L + "'", long99 == 1645629487471L);
    }

    @Test
    public void test05824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05824");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.seconds();
        org.joda.time.DurationField durationField5 = chronology2.seconds();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.secondOfDay();
        boolean boolean9 = dateTimeField8.isLenient();
        int int11 = dateTimeField8.getMaximumValue((long) 441);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 86399 + "'", int11 == 86399);
    }

    @Test
    public void test05825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05825");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        int int9 = localDateTime3.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.minusHours(26147585);
        org.joda.time.LocalDateTime.Property property12 = localDateTime3.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test05826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05826");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str1 = durationFieldType0.toString();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, (int) '#');
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.era();
        int int7 = localDateTime2.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withWeekOfWeekyear((int) (byte) 1);
        int int10 = localDateTime2.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime2.plusDays(500);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.days();
        java.lang.String str14 = durationFieldType13.toString();
        boolean boolean15 = localDateTime12.isSupported(durationFieldType13);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.weekyears();
        org.joda.time.DurationField durationField21 = chronology19.centuries();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology19);
        org.joda.time.DurationField durationField23 = chronology19.millis();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.minuteOfDay();
        org.joda.time.DurationField durationField25 = durationFieldType13.getField(chronology19);
        org.joda.time.DurationField durationField26 = durationFieldType0.getField(chronology19);
        org.joda.time.DurationField durationField27 = chronology19.months();
        long long29 = durationField27.getMillis(26149);
        // The following exception was thrown during execution in test generation
        try {
            long long31 = durationField27.getMillis(1908343060955L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1908343060955 * 2629746000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "weeks" + "'", str1, "weeks");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "days" + "'", str14, "days");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 68765228154000L + "'", long29 == 68765228154000L);
    }

    @Test
    public void test05827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05827");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        int int8 = property7.get();
        org.joda.time.LocalDateTime localDateTime10 = property7.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = property7.roundCeilingCopy();
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime11.getFields();
        int int13 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.minusSeconds(0);
        int int16 = localDateTime11.getDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime11.withMonthOfYear(47);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 47 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test05828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05828");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusHours(0);
        int int7 = localDateTime3.getWeekyear();
        org.joda.time.Chronology chronology8 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getShortName((long) (short) 10);
        long long18 = dateTimeZone14.convertUTCToLocal((long) ' ');
        java.lang.String str19 = dateTimeZone14.toString();
        boolean boolean21 = dateTimeZone14.equals((java.lang.Object) (short) 100);
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str24 = dateTimeZone14.getShortName((long) (-1), locale23);
        long long26 = dateTimeZone10.getMillisKeepLocal(dateTimeZone14, (long) (byte) -1);
        org.joda.time.Chronology chronology27 = chronology8.withZone(dateTimeZone10);
        org.joda.time.DurationField durationField28 = chronology27.years();
        long long31 = durationField28.getValueAsLong((-56802470399972L), 1645629474778L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1799L) + "'", long31 == (-1799L));
    }

    @Test
    public void test05829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05829");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.minuteOfDay();
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale6.getDisplayScript(locale8);
        int int11 = dateTimeField5.getMaximumTextLength(locale8);
        long long13 = dateTimeField5.roundHalfFloor((long) (short) 10);
        long long16 = dateTimeField5.add(1645514214277L, 315100800000L);
        org.joda.time.DurationField durationField17 = dateTimeField5.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        java.lang.String str20 = localDateTime19.toString();
        int int21 = localDateTime19.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.minusMonths(2);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str27 = dateTimeZone25.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str39 = dateTimeZone37.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(dateTimeZone37);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = localDateTime40.getFieldType((int) (short) 0);
        boolean boolean43 = dateTime35.isSupported(dateTimeFieldType42);
        org.joda.time.DateTime dateTime44 = localDateTime23.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime.Property property45 = localDateTime23.dayOfMonth();
        int int46 = property45.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        java.lang.String str48 = localDateTime47.toString();
        int int49 = localDateTime47.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.minusMonths(2);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str55 = dateTimeZone53.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(dateTimeZone53);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.millisOfDay();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime56.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = localDateTime61.toDateTime(readableInstant62);
        long long64 = dateTime63.getMillis();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str67 = dateTimeZone65.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now(dateTimeZone65);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = localDateTime68.getFieldType((int) (short) 0);
        boolean boolean71 = dateTime63.isSupported(dateTimeFieldType70);
        org.joda.time.DateTime dateTime72 = localDateTime51.toDateTime((org.joda.time.ReadableInstant) dateTime63);
        long long73 = property45.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str76 = dateTimeZone74.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime77 = org.joda.time.LocalDateTime.now(dateTimeZone74);
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType79 = org.joda.time.DurationFieldType.centuries();
        boolean boolean80 = localDateTime77.equals((java.lang.Object) durationFieldType79);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray81 = localDateTime77.getFieldTypes();
        java.lang.String str82 = localDateTime77.toString();
        org.joda.time.LocalDateTime localDateTime84 = localDateTime77.plusMillis(22);
        org.joda.time.LocalDateTime.Property property85 = localDateTime77.monthOfYear();
        java.util.Locale locale86 = java.util.Locale.ROOT;
        int int87 = property85.getMaximumShortTextLength(locale86);
        java.lang.String str88 = property45.getAsText(locale86);
        boolean boolean89 = locale86.hasExtensions();
        java.lang.String str90 = dateTimeField5.getAsShortText(2629746000L, locale86);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 18907693514214277L + "'", long16 == 18907693514214277L);
        org.junit.Assert.assertNull(durationField17);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T07:21:27.311" + "'", str20, "2022-02-22T07:21:27.311");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20 + "'", int21 == 20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645629687311L + "'", long36 == 1645629687311L);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022-02-22T07:21:27.311" + "'", str48, "2022-02-22T07:21:27.311");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 20 + "'", int49 == 20);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1645629687311L + "'", long64 == 1645629687311L);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00" + "'", str67, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00" + "'", str76, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(durationFieldType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray81);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "2022-02-22T07:21:27.311" + "'", str82, "2022-02-22T07:21:27.311");
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 3 + "'", int87 == 3);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "22" + "'", str88, "22");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "629" + "'", str90, "629");
    }

    @Test
    public void test05830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05830");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("und");
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale4.getDisplayName();
        java.util.Locale.Builder builder7 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder8 = builder2.clearExtensions();
        java.util.Locale.Builder builder10 = builder2.removeUnicodeLocaleAttribute("26185191");
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder10.setScript("2022-02-22T07:20:25.858");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-02-22T07:20:25.858 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Canada" + "'", str5, "Canada");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Franz\366sisch (Kanada)" + "'", str6, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test05831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05831");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        org.joda.time.DurationField durationField7 = property4.getLeapDurationField();
        java.lang.String str8 = property4.getAsString();
        org.joda.time.LocalDateTime localDateTime9 = property4.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withWeekyear((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.weekyears();
        boolean boolean17 = dateTimeFieldType12.isSupported(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        java.lang.String str19 = localDateTime18.toString();
        int int20 = localDateTime18.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minusMonths(2);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str26 = dateTimeZone24.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(readableInstant33);
        long long35 = dateTime34.getMillis();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str38 = dateTimeZone36.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = localDateTime39.getFieldType((int) (short) 0);
        boolean boolean42 = dateTime34.isSupported(dateTimeFieldType41);
        org.joda.time.DateTime dateTime43 = localDateTime22.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        int[] intArray45 = chronology15.get((org.joda.time.ReadablePartial) localDateTime22, 11L);
        org.joda.time.DateTimeField dateTimeField46 = chronology15.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str49 = dateTimeZone47.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(dateTimeZone47);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.millisOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.minuteOfHour();
        java.util.Locale locale56 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale57 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str58 = locale56.getDisplayCountry(locale57);
        java.util.Locale locale59 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale60 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str61 = locale59.getDisplayCountry(locale60);
        java.lang.String str62 = locale56.getDisplayVariant(locale59);
        java.lang.String str63 = dateTimeField46.getAsText((org.joda.time.ReadablePartial) localDateTime53, 1, locale59);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str66 = dateTimeZone64.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now(dateTimeZone64);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.millisOfDay();
        org.joda.time.ReadableInstant readableInstant69 = null;
        long long70 = property68.getDifferenceAsLong(readableInstant69);
        org.joda.time.DurationField durationField71 = property68.getLeapDurationField();
        java.lang.String str72 = property68.getAsString();
        org.joda.time.LocalDateTime localDateTime73 = property68.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.withWeekyear((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str78 = dateTimeZone76.getShortName((long) (short) 10);
        long long80 = dateTimeZone76.convertUTCToLocal((long) ' ');
        java.lang.String str81 = dateTimeZone76.toString();
        boolean boolean83 = dateTimeZone76.equals((java.lang.Object) (short) 100);
        java.util.Locale locale85 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str86 = dateTimeZone76.getShortName((long) (-1), locale85);
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime(dateTimeZone76);
        org.joda.time.DateTime dateTime88 = localDateTime75.toDateTime(dateTimeZone76);
        org.joda.time.DateTime dateTime89 = localDateTime53.toDateTime((org.joda.time.ReadableInstant) dateTime88);
        boolean boolean90 = localDateTime9.equals((java.lang.Object) localDateTime53);
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str92 = dateTimeFieldType91.getName();
        org.joda.time.LocalDateTime.Property property93 = localDateTime9.property(dateTimeFieldType91);
        org.joda.time.DurationFieldType durationFieldType94 = dateTimeFieldType91.getDurationType();
        java.lang.String str95 = dateTimeFieldType91.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNull(durationField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "26487388" + "'", str8, "26487388");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T07:21:27.388" + "'", str19, "2022-02-22T07:21:27.388");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20 + "'", int20 == 20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645629687388L + "'", long35 == 1645629687388L);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Canada" + "'", str58, "Canada");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Canada" + "'", str61, "Canada");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1" + "'", str63, "1");
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNull(durationField71);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "26487388" + "'", str72, "26487388");
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+00:00" + "'", str78, "+00:00");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 32L + "'", long80 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "UTC" + "'", str81, "UTC");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+00:00" + "'", str86, "+00:00");
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "dayOfMonth" + "'", str92, "dayOfMonth");
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNotNull(durationFieldType94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "dayOfMonth" + "'", str95, "dayOfMonth");
    }

    @Test
    public void test05832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05832");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2021-12-22T14:31:36.266+07:10:22.088");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2021-12-22T14:31:36.266+07:10:22.088' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05833");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusHours(0);
        int int7 = localDateTime3.getWeekyear();
        org.joda.time.Chronology chronology8 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getShortName((long) (short) 10);
        long long18 = dateTimeZone14.convertUTCToLocal((long) ' ');
        java.lang.String str19 = dateTimeZone14.toString();
        boolean boolean21 = dateTimeZone14.equals((java.lang.Object) (short) 100);
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str24 = dateTimeZone14.getShortName((long) (-1), locale23);
        long long26 = dateTimeZone10.getMillisKeepLocal(dateTimeZone14, (long) (byte) -1);
        org.joda.time.Chronology chronology27 = chronology8.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField28 = chronology8.secondOfDay();
        org.joda.time.DurationField durationField29 = dateTimeField28.getDurationField();
        long long32 = durationField29.add(1645629678585L, 0);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1645629678585L + "'", long32 == 1645629678585L);
    }

    @Test
    public void test05834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05834");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale2 = null;
        java.lang.String str3 = locale0.getDisplayCountry(locale2);
        java.lang.String str4 = locale0.getVariant();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        java.lang.String str9 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.clockhourOfDay();
        int int12 = dateTimeField10.get(1645629354990L);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str15 = dateTimeZone13.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.centuries();
        boolean boolean19 = localDateTime16.equals((java.lang.Object) durationFieldType18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = localDateTime16.getFieldTypes();
        java.lang.String str21 = localDateTime16.toString();
        java.util.Locale locale22 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str23 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) localDateTime16, locale22);
        java.lang.String str24 = locale22.getDisplayVariant();
        java.lang.String str25 = locale22.getDisplayVariant();
        java.util.Locale locale27 = java.util.Locale.forLanguageTag("117");
        java.lang.String str28 = locale27.getVariant();
        java.lang.String str29 = locale22.getDisplayLanguage(locale27);
        java.lang.String str30 = locale0.getDisplayScript(locale22);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[UTC]" + "'", str9, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 15 + "'", int12 == 15);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T07:21:27.445" + "'", str21, "2022-02-22T07:21:27.445");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "7" + "'", str23, "7");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Chinese" + "'", str29, "Chinese");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test05835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05835");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder6 = builder2.setExtension('a', "26150748");
        java.util.Locale.Builder builder9 = builder2.setExtension('a', "968");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder2.setScript("26358666");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 26358666 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test05836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05836");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale7.getISO3Language();
        java.lang.String str9 = property4.getAsShortText(locale7);
        org.joda.time.LocalDateTime localDateTime10 = property4.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.centuries();
        boolean boolean17 = localDateTime14.equals((java.lang.Object) durationFieldType16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = localDateTime14.getFieldTypes();
        java.lang.String str19 = localDateTime14.toString();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.plusMillis(22);
        org.joda.time.LocalDateTime.Property property22 = localDateTime14.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str25 = dateTimeZone23.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        java.lang.String str28 = property27.getName();
        int int29 = property27.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property27.getFieldType();
        int int31 = localDateTime14.indexOf(dateTimeFieldType30);
        int int32 = localDateTime10.get(dateTimeFieldType30);
        int int33 = localDateTime10.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str36 = dateTimeZone34.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.millisOfDay();
        int int39 = localDateTime37.getCenturyOfEra();
        int int40 = localDateTime37.getYearOfEra();
        org.joda.time.LocalDateTime.Property property41 = localDateTime37.weekOfWeekyear();
        boolean boolean42 = localDateTime10.isAfter((org.joda.time.ReadablePartial) localDateTime37);
        int int43 = localDateTime37.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "26487497" + "'", str9, "26487497");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T07:21:27.497" + "'", str19, "2022-02-22T07:21:27.497");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "millisOfDay" + "'", str28, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 86399999 + "'", int29 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 20 + "'", int39 == 20);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
    }

    @Test
    public void test05837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05837");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.hours();
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withDurationAdded(readableDuration7, (int) '#');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusMillis((-1));
        int[] intArray17 = new int[] { (-292275054), 86399999, 86399999, 22 };
        int int18 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDateTime12, intArray17);
        java.util.Locale.Category category20 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category20, locale21);
        java.lang.String str23 = locale21.toLanguageTag();
        java.lang.String str24 = dateTimeField5.getAsText((long) 26269, locale21);
        long long27 = dateTimeField5.add((long) 309, 500);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str30 = dateTimeZone28.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.minuteOfHour();
        int int36 = property35.get();
        org.joda.time.LocalDateTime localDateTime38 = property35.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime39 = property35.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withYearOfCentury(97);
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        java.util.Locale locale45 = null;
        java.lang.String str46 = locale43.getDisplayCountry(locale45);
        java.lang.String str47 = locale43.getScript();
        java.lang.String str48 = locale43.getScript();
        java.lang.String str49 = dateTimeField5.getAsShortText((org.joda.time.ReadablePartial) localDateTime39, locale43);
        java.util.Locale locale50 = locale43.stripExtensions();
        java.lang.String str51 = locale50.getDisplayVariant();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-292275054, 86399999, 86399999, 22]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category20.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "fr" + "'", str23, "fr");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "24" + "'", str24, "24");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1800000309L + "'", long27 == 1800000309L);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 21 + "'", int36 == 21);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "7" + "'", str49, "7");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test05838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05838");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.weekyear();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minus(readablePeriod8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime6.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = property10.addToCopy(1645629639327L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1645629639327");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test05839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05839");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType10 = null;
        boolean boolean11 = localDateTime8.isSupported(durationFieldType10);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test05840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05840");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        int int11 = localDateTime8.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minusMinutes(0);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.plus(readablePeriod14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusSeconds(26239424);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 21 + "'", int11 == 21);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test05841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05841");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        java.lang.String str1 = durationFieldType0.toString();
        org.joda.time.Chronology chronology2 = null;
        boolean boolean3 = durationFieldType0.isSupported(chronology2);
        java.lang.String str4 = durationFieldType0.toString();
        java.lang.String str5 = durationFieldType0.getName();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "days" + "'", str1, "days");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "days" + "'", str4, "days");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "days" + "'", str5, "days");
    }

    @Test
    public void test05842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05842");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.minuteOfDay();
        boolean boolean6 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.DateTimeField dateTimeField7 = chronology3.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusDays(3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = localDateTime10.toString(dateTimeFormatter14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withDurationAdded(readableDuration17, (int) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.weekyear();
        int int21 = property20.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField22 = property20.getField();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str25 = dateTimeZone23.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusHours((int) (short) 10);
        int int34 = dateTimeField22.getMinimumValue((org.joda.time.ReadablePartial) localDateTime33);
        java.lang.String str36 = dateTimeField22.getAsText((long) (-292275054));
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.lang.String str40 = locale38.getLanguage();
        java.lang.String str41 = dateTimeField22.getAsShortText((-259200000L), locale38);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = dateTimeField22.getType();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withDurationAdded(readableDuration44, (int) '#');
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.weekyears();
        org.joda.time.DurationField durationField52 = chronology50.seconds();
        org.joda.time.DurationField durationField53 = chronology50.seconds();
        org.joda.time.DurationField durationField54 = chronology50.seconds();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str57 = dateTimeZone55.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now(dateTimeZone55);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.millisOfDay();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime58.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusHours((int) (short) 10);
        int int66 = localDateTime63.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime63.minus(readablePeriod67);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str71 = dateTimeZone69.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime72 = org.joda.time.LocalDateTime.now(dateTimeZone69);
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.millisOfDay();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.withYear((int) (short) 100);
        int int76 = localDateTime75.getCenturyOfEra();
        boolean boolean77 = localDateTime63.isBefore((org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime75.plusMinutes(0);
        int[] intArray81 = chronology50.get((org.joda.time.ReadablePartial) localDateTime79, 2022L);
        int int82 = dateTimeField22.getMaximumValue((org.joda.time.ReadablePartial) localDateTime46, intArray81);
        chronology3.validate((org.joda.time.ReadablePartial) localDateTime10, intArray81);
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.LocalDateTime localDateTime85 = localDateTime10.minus(readableDuration84);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01T00:00:00.100" + "'", str15, "1970-01-01T00:00:00.100");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 292278993 + "'", int21 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-292275054) + "'", int34 == (-292275054));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1969" + "'", str36, "1969");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970" + "'", str41, "1970");
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 21 + "'", int66 == 21);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1970, 1, 1, 2022]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 292278993 + "'", int82 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime85);
    }

    @Test
    public void test05843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05843");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str4 = nameProvider0.getShortName(locale1, "fran\347ais", "2022-02-22T07:15:48.066");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str7 = dateTimeZone5.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.centuries();
        boolean boolean11 = localDateTime8.equals((java.lang.Object) durationFieldType10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime8.getFieldTypes();
        java.lang.String str13 = localDateTime8.toString();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.plusMillis(22);
        org.joda.time.LocalDateTime.Property property16 = localDateTime8.monthOfYear();
        java.util.Locale locale17 = java.util.Locale.ROOT;
        int int18 = property16.getMaximumShortTextLength(locale17);
        java.lang.String str19 = locale1.getDisplayCountry(locale17);
        java.lang.String str20 = locale17.getVariant();
        java.util.Locale locale21 = locale17.stripExtensions();
        java.lang.String str22 = locale17.getISO3Language();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22T07:21:27.766" + "'", str13, "2022-02-22T07:21:27.766");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Canada" + "'", str19, "Canada");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test05844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05844");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        long long5 = property4.remainder();
        int int6 = property4.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getDurationType();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.weekyears();
        org.joda.time.DurationField durationField13 = chronology11.centuries();
        boolean boolean14 = durationFieldType8.isSupported(chronology11);
        org.joda.time.DurationField durationField15 = chronology11.halfdays();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology17 = chronology11.withZone(dateTimeZone16);
        boolean boolean18 = property4.equals((java.lang.Object) chronology11);
        java.lang.String str19 = property4.getAsShortText();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "26487780" + "'", str19, "26487780");
    }

    @Test
    public void test05845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05845");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        int int5 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekOfWeekyear((int) (byte) 1);
        int int8 = localDateTime0.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.plusDays(500);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        java.lang.String str12 = durationFieldType11.toString();
        boolean boolean13 = localDateTime10.isSupported(durationFieldType11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.weekyears();
        boolean boolean19 = dateTimeFieldType14.isSupported(chronology17);
        org.joda.time.DurationField durationField20 = durationFieldType11.getField(chronology17);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = chronology17.add(readablePeriod21, (long) 27427155, (int) (byte) 0);
        org.joda.time.DurationField durationField25 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekyearOfCentury();
        int int29 = dateTimeField26.getDifference((long) 356, 1645514199918L);
        org.joda.time.tz.NameProvider nameProvider31 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Category category32 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category32, locale33);
        java.lang.String str35 = locale33.toLanguageTag();
        java.lang.String str36 = locale33.getLanguage();
        java.lang.String str39 = nameProvider31.getShortName(locale33, "days", "26149261");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider31);
        java.util.Locale locale41 = null;
        java.lang.String str44 = nameProvider31.getShortName(locale41, "26159153", "2022-02-22T07:15:52.067");
        java.util.Locale locale45 = java.util.Locale.GERMANY;
        java.lang.String str46 = locale45.getCountry();
        java.lang.String str49 = nameProvider31.getShortName(locale45, "100", "2022-02-22T07:16:09.701");
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleAttributes();
        java.util.Locale locale52 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str53 = locale52.getVariant();
        java.lang.String str54 = locale50.getDisplayScript(locale52);
        java.lang.String str57 = nameProvider31.getName(locale52, "2022-02-22T07:16:34.858", "26224208");
        java.lang.String str58 = locale52.getDisplayScript();
        java.lang.String str59 = dateTimeField26.getAsShortText(3291028410332L, locale52);
        org.joda.time.ReadablePartial readablePartial60 = null;
        int int61 = dateTimeField26.getMaximumValue(readablePartial60);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 7 + "'", int8 == 7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "days" + "'", str12, "days");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 27427155L + "'", long24 == 27427155L);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-52) + "'", int29 == (-52));
        org.junit.Assert.assertNotNull(nameProvider31);
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category32.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "fr" + "'", str35, "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "fr" + "'", str36, "fr");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "DE" + "'", str46, "DE");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "74" + "'", str59, "74");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 99 + "'", int61 == 99);
    }

    @Test
    public void test05846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05846");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        int int11 = localDateTime8.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minusMinutes(0);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str15 = durationFieldType14.toString();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.weekyears();
        org.joda.time.DurationField durationField21 = chronology19.centuries();
        org.joda.time.DurationField durationField22 = durationFieldType16.getField(chronology19);
        boolean boolean23 = durationFieldType14.isSupported(chronology19);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime8.withFieldAdded(durationFieldType14, (-1));
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.weekOfWeekyear();
        boolean boolean31 = durationFieldType14.isSupported(chronology28);
        org.joda.time.DurationField durationField32 = chronology28.minutes();
        org.joda.time.DurationField durationField33 = chronology28.months();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str35 = durationFieldType34.toString();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        java.lang.String str37 = localDateTime36.toString();
        int int38 = localDateTime36.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.minusMonths(2);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str44 = dateTimeZone42.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(dateTimeZone42);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.millisOfDay();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDateTime50.toDateTime(readableInstant51);
        long long53 = dateTime52.getMillis();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str56 = dateTimeZone54.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(dateTimeZone54);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = localDateTime57.getFieldType((int) (short) 0);
        boolean boolean60 = dateTime52.isSupported(dateTimeFieldType59);
        org.joda.time.DateTime dateTime61 = localDateTime40.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str64 = dateTimeZone62.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now(dateTimeZone62);
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.millisOfDay();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime65.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = localDateTime70.toDateTime(readableInstant71);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str75 = dateTimeZone73.getShortName((long) (short) 10);
        long long77 = dateTimeZone73.convertUTCToLocal((long) ' ');
        java.lang.String str78 = dateTimeZone73.toString();
        long long80 = dateTimeZone73.previousTransition(32L);
        long long83 = dateTimeZone73.convertLocalToUTC(97L, false);
        boolean boolean84 = dateTime72.equals((java.lang.Object) false);
        boolean boolean85 = dateTime61.isEqual((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Chronology chronology86 = dateTime72.getChronology();
        org.joda.time.DurationField durationField87 = durationFieldType34.getField(chronology86);
        org.joda.time.DurationField durationField88 = chronology86.weeks();
        int int90 = durationField88.getValue(0L);
        int int91 = durationField33.compareTo(durationField88);
        long long93 = durationField33.getValueAsLong((long) 26437413);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 21 + "'", int11 == 21);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "weekyears" + "'", str15, "weekyears");
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "weeks" + "'", str35, "weeks");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-22T07:21:27.852" + "'", str37, "2022-02-22T07:21:27.852");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20 + "'", int38 == 20);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1645629687852L + "'", long53 == 1645629687852L);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00" + "'", str56, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00" + "'", str75, "+00:00");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 32L + "'", long77 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "UTC" + "'", str78, "UTC");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 32L + "'", long80 == 32L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 97L + "'", long83 == 97L);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
    }

    @Test
    public void test05847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05847");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.seconds();
        org.joda.time.DurationField durationField5 = chronology2.seconds();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.millisOfDay();
        long long8 = dateTimeField6.roundFloor((long) 55257344);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 55257344L + "'", long8 == 55257344L);
    }

    @Test
    public void test05848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05848");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        boolean boolean7 = dateTimeZone0.equals((java.lang.Object) (short) 100);
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = dateTimeZone0.getShortName((long) (-1), locale9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone0);
        int int13 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.TimeZone timeZone14 = dateTimeZone0.toTimeZone();
        java.lang.String str15 = dateTimeZone0.toString();
        java.lang.String str17 = dateTimeZone0.getName((long) 460);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Temps universel coordonn\351");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
    }

    @Test
    public void test05849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05849");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.halfdayOfDay();
        java.util.Locale.Category category11 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category11, locale12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale19 = locale18.stripExtensions();
        java.lang.String str20 = dateTimeField16.getAsShortText(100, locale19);
        java.util.Locale.setDefault(category11, locale19);
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.lang.String str26 = nameProvider22.getShortName(locale23, "fran\347ais", "2022-02-22T07:15:48.066");
        java.util.Locale.setDefault(category11, locale23);
        java.lang.String str28 = dateTimeField9.getAsShortText((long) 5, locale23);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withDurationAdded(readableDuration30, (int) '#');
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.weekyear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.minusMillis((-1));
        java.util.Locale locale37 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale38 = locale37.stripExtensions();
        java.lang.String str39 = locale37.getVariant();
        java.lang.String str40 = localDateTime35.toString("26149261", locale37);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime35.plus(readablePeriod41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusSeconds(4);
        int int45 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime42);
        // The following exception was thrown during execution in test generation
        try {
            long long48 = dateTimeField9.set(1645629671248L, "");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for halfdayOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category11.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(nameProvider22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "AM" + "'", str28, "AM");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "26149261" + "'", str40, "26149261");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test05850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05850");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        boolean boolean7 = dateTimeZone0.equals((java.lang.Object) (short) 100);
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = dateTimeZone0.getShortName((long) (-1), locale9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone0);
        java.lang.String str13 = dateTimeZone0.getName((long) 26149);
        int int15 = dateTimeZone0.getOffsetFromLocal((long) 'a');
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        long long18 = dateTimeZone0.previousTransition(604800000L);
        long long20 = dateTimeZone0.previousTransition((long) 26453581);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 604800000L + "'", long18 == 604800000L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 26453581L + "'", long20 == 26453581L);
    }

    @Test
    public void test05851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05851");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        int int5 = property4.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusHours((int) (short) 10);
        int int18 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDateTime17);
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str21 = dateTimeField6.getAsShortText((long) 15, locale20);
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(locale23);
        java.lang.String str25 = dateTimeField6.getAsText(1654010160000L, locale23);
        long long28 = dateTimeField6.set(1645629404000L, (-86340));
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withDurationAdded(readableDuration30, (int) '#');
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.weekyear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime37 = property36.roundHalfFloorCopy();
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.lang.String str40 = localDateTime37.toString("26156413", locale39);
        java.util.Locale locale41 = java.util.Locale.CHINA;
        java.lang.String str42 = locale39.getDisplayScript(locale41);
        java.lang.String str43 = locale39.toLanguageTag();
        int int44 = dateTimeField6.getMaximumTextLength(locale39);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 292278993 + "'", int5 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-292275054) + "'", int18 == (-292275054));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970" + "'", str21, "1970");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022" + "'", str25, "2022");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-2786790213796000L) + "'", long28 == (-2786790213796000L));
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "26156413" + "'", str40, "26156413");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "fr-FR" + "'", str43, "fr-FR");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
    }

    @Test
    public void test05852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05852");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.seconds();
        org.joda.time.DurationField durationField5 = chronology2.seconds();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.millisOfDay();
        java.lang.String str7 = dateTimeField6.toString();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str10 = dateTimeZone8.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy(500);
        int int15 = localDateTime14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType16.getField(chronology17);
        long long20 = dateTimeField18.roundFloor((long) (-1));
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder21.addUnicodeLocaleAttribute("und");
        java.util.Locale locale24 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale25 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str26 = locale24.getDisplayCountry(locale25);
        java.lang.String str27 = locale25.getDisplayName();
        java.util.Locale.Builder builder28 = builder23.setLocale(locale25);
        int int29 = dateTimeField18.getMaximumShortTextLength(locale25);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str32 = dateTimeZone30.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.millisOfDay();
        org.joda.time.ReadableInstant readableInstant35 = null;
        long long36 = property34.getDifferenceAsLong(readableInstant35);
        org.joda.time.DurationField durationField37 = property34.getLeapDurationField();
        java.lang.String str38 = property34.getAsString();
        org.joda.time.LocalDateTime localDateTime39 = property34.roundFloorCopy();
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet42 = locale40.getUnicodeLocaleAttributes();
        java.lang.String str43 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) localDateTime39, locale40);
        java.util.Locale locale44 = locale40.stripExtensions();
        java.lang.String str45 = dateTimeField6.getAsShortText((org.joda.time.ReadablePartial) localDateTime14, locale44);
        org.joda.time.DurationField durationField46 = dateTimeField6.getRangeDurationField();
        int int49 = durationField46.getValue(0L, 0L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DateTimeField[millisOfDay]" + "'", str7, "DateTimeField[millisOfDay]");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60000L) + "'", long20 == (-60000L));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Canada" + "'", str26, "Canada");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Franz\366sisch (Kanada)" + "'", str27, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "26488009" + "'", str38, "26488009");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(strSet42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "441" + "'", str43, "441");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "26488509" + "'", str45, "26488509");
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test05853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05853");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-22T07:18:22.902");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-22t07:18:22.902");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05854");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.minuteOfDay();
        long long8 = chronology2.add(1645629495864L, 1645655421792L, 147);
        org.joda.time.DateTimeField dateTimeField9 = chronology2.secondOfDay();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withDurationAdded(readableDuration11, (int) '#');
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.weekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfMonth();
        int int18 = localDateTime13.getWeekyear();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.withPeriodAdded(readablePeriod19, 81350981);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str25 = dateTimeZone23.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        long long28 = property27.remainder();
        int int29 = property27.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType30.getDurationType();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.weekyears();
        org.joda.time.DurationField durationField36 = chronology34.centuries();
        boolean boolean37 = durationFieldType31.isSupported(chronology34);
        org.joda.time.DurationField durationField38 = chronology34.halfdays();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology40 = chronology34.withZone(dateTimeZone39);
        boolean boolean41 = property27.equals((java.lang.Object) chronology34);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str44 = dateTimeZone42.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(dateTimeZone42);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = localDateTime45.getFieldType((int) (short) 0);
        int int48 = localDateTime45.getHourOfDay();
        org.joda.time.LocalDateTime.Property property49 = localDateTime45.monthOfYear();
        int[] intArray51 = chronology34.get((org.joda.time.ReadablePartial) localDateTime45, 1737905475021572528L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray53 = dateTimeField9.set((org.joda.time.ReadablePartial) localDateTime21, (-1), intArray51, 81353602);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 81353602 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 243556976499288L + "'", long8 == 243556976499288L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 7 + "'", int48 == 7);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[55074002, 2, 23, 55172528]");
    }

    @Test
    public void test05855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05855");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("und");
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale4.getDisplayName();
        java.util.Locale.Builder builder7 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder8 = builder2.clearExtensions();
        java.util.Locale.Builder builder10 = builder2.removeUnicodeLocaleAttribute("26185191");
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.minuteOfHour();
        org.joda.time.DurationField durationField19 = property18.getLeapDurationField();
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(locale20);
        java.util.Locale locale22 = java.util.Locale.CANADA;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale20.getDisplayScript(locale22);
        java.lang.String str25 = property18.getAsText(locale22);
        org.joda.time.tz.NameProvider nameProvider26 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.lang.String str30 = nameProvider26.getShortName(locale27, "fran\347ais", "2022-02-22T07:15:48.066");
        int int31 = property18.getMaximumTextLength(locale27);
        java.util.Locale.Builder builder32 = builder2.setLocale(locale27);
        java.util.Locale locale33 = builder32.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder35 = builder32.setLanguageTag("2022");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Canada" + "'", str5, "Canada");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Franz\366sisch (Kanada)" + "'", str6, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "21" + "'", str25, "21");
        org.junit.Assert.assertNotNull(nameProvider26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
    }

    @Test
    public void test05856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05856");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withWeekOfWeekyear((int) (byte) 10);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = localDateTime3.getFields();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.minusSeconds(805);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField13 = localDateTime11.getField(52303145);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 52303145");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test05857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05857");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        java.lang.String str14 = localDateTime13.toString();
        boolean boolean15 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray18 = strSet17.toArray();
        boolean boolean19 = strSet17.isEmpty();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray22 = strSet21.toArray();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        boolean boolean25 = strSet21.removeAll((java.util.Collection<java.lang.String>) strSet24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray30 = new org.joda.time.DurationFieldType[] { durationFieldType28, durationFieldType29 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray31 = strSet27.toArray(durationFieldTypeArray30);
        boolean boolean32 = strSet21.containsAll((java.util.Collection<java.lang.String>) strSet27);
        java.lang.Object[] objArray33 = strSet27.toArray();
        boolean boolean34 = strSet17.removeAll((java.util.Collection<java.lang.String>) strSet27);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray37 = strSet36.toArray();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        boolean boolean40 = strSet36.removeAll((java.util.Collection<java.lang.String>) strSet39);
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray45 = new org.joda.time.DurationFieldType[] { durationFieldType43, durationFieldType44 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray46 = strSet42.toArray(durationFieldTypeArray45);
        boolean boolean47 = strSet36.containsAll((java.util.Collection<java.lang.String>) strSet42);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray50 = strSet49.toArray();
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        boolean boolean53 = strSet49.removeAll((java.util.Collection<java.lang.String>) strSet52);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray58 = new org.joda.time.DurationFieldType[] { durationFieldType56, durationFieldType57 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray59 = strSet55.toArray(durationFieldTypeArray58);
        boolean boolean60 = strSet49.containsAll((java.util.Collection<java.lang.String>) strSet55);
        java.lang.Object[] objArray61 = strSet55.toArray();
        boolean boolean62 = strSet36.retainAll((java.util.Collection<java.lang.String>) strSet55);
        boolean boolean63 = strSet27.addAll((java.util.Collection<java.lang.String>) strSet55);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean65 = strSet55.remove((java.lang.Object) dateTimeFieldType64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime3.property(dateTimeFieldType64);
        int int67 = property66.getMaximumValue();
        java.lang.String str68 = property66.getName();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0100-02-22T07:21:28.204" + "'", str14, "0100-02-22T07:21:28.204");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(durationFieldTypeArray30);
        org.junit.Assert.assertNotNull(durationFieldTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(durationFieldTypeArray45);
        org.junit.Assert.assertNotNull(durationFieldTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(durationFieldTypeArray58);
        org.junit.Assert.assertNotNull(durationFieldTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 292278993 + "'", int67 == 292278993);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "yearOfEra" + "'", str68, "yearOfEra");
    }

    @Test
    public void test05858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05858");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str5 = dateTimeZone3.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone3);
        long long8 = dateTimeZone0.getMillisKeepLocal(dateTimeZone3, 1645629358939L);
        java.lang.Object obj9 = null;
        boolean boolean10 = dateTimeZone0.equals(obj9);
        int int12 = dateTimeZone0.getOffsetFromLocal(1373552640000000000L);
        java.lang.String str13 = dateTimeZone0.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645629358939L + "'", long8 == 1645629358939L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
    }

    @Test
    public void test05859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05859");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        long long8 = dateTimeZone0.adjustOffset((long) (short) 100, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        boolean boolean11 = dateTimeZone0.equals((java.lang.Object) "CA");
        int int13 = dateTimeZone0.getOffset(69000L);
        int int15 = dateTimeZone0.getOffset(72000864L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test05860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05860");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray2 = strSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        boolean boolean5 = strSet1.removeAll((java.util.Collection<java.lang.String>) strSet4);
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = new org.joda.time.DurationFieldType[] { durationFieldType8, durationFieldType9 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = strSet7.toArray(durationFieldTypeArray10);
        boolean boolean12 = strSet1.containsAll((java.util.Collection<java.lang.String>) strSet7);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray15 = strSet14.toArray();
        boolean boolean16 = strSet1.addAll((java.util.Collection<java.lang.String>) strSet14);
        strSet1.clear();
        java.lang.Object[] objArray18 = strSet1.toArray();
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream21 = strSet20.parallelStream();
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale26 = java.util.Locale.CANADA;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str29 = dateTimeZone27.getShortName((long) (short) 10);
        long long31 = dateTimeZone27.convertUTCToLocal((long) ' ');
        java.lang.String str32 = dateTimeZone27.toString();
        boolean boolean34 = dateTimeZone27.equals((java.lang.Object) (short) 100);
        java.util.Locale locale36 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str37 = dateTimeZone27.getShortName((long) (-1), locale36);
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.util.Locale[] localeArray40 = new java.util.Locale[] { locale25, locale26, locale36, locale38, locale39 };
        java.util.ArrayList<java.util.Locale> localeList41 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList41, localeArray40);
        java.util.Locale locale43 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList41);
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray46 = strSet45.toArray();
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strSet45);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap48 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList49 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, strMap48);
        java.util.Collection<java.lang.String> strCollection50 = null;
        java.util.Locale.FilteringMode filteringMode51 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList52 = java.util.Locale.filterTags(languageRangeList49, strCollection50, filteringMode51);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap53 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList54 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList49, strMap53);
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray57 = strSet56.toArray();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str60 = dateTimeZone58.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now(dateTimeZone58);
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.centuries();
        boolean boolean64 = localDateTime61.equals((java.lang.Object) durationFieldType63);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray65 = localDateTime61.getFieldTypes();
        java.lang.String str66 = localDateTime61.toString();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime61.plusMillis(22);
        org.joda.time.LocalDateTime.Property property69 = localDateTime61.monthOfYear();
        boolean boolean70 = strSet56.remove((java.lang.Object) property69);
        java.lang.String str71 = java.util.Locale.lookupTag(languageRangeList49, (java.util.Collection<java.lang.String>) strSet56);
        boolean boolean72 = strSet20.equals((java.lang.Object) languageRangeList49);
        boolean boolean73 = strSet1.addAll((java.util.Collection<java.lang.String>) strSet20);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DurationFieldType durationFieldType75 = dateTimeFieldType74.getRangeDurationType();
        boolean boolean76 = strSet1.contains((java.lang.Object) dateTimeFieldType74);
        java.util.stream.Stream<java.lang.String> strStream77 = strSet1.stream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(strStream21);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 32L + "'", long31 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertNotNull(localeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(locale43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(languageRangeList49);
        org.junit.Assert.assertTrue("'" + filteringMode51 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode51.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(languageRangeList54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00" + "'", str60, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022-02-22T07:21:28.360" + "'", str66, "2022-02-22T07:21:28.360");
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strStream77);
    }

    @Test
    public void test05861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05861");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        java.lang.String str1 = localDateTime0.toString();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property4.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYear(115200000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime6.withDate(2027, 81256273, 26169744);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 81256273 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-22T07:21:28.427" + "'", str1, "2022-02-22T07:21:28.427");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test05862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05862");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        java.util.Locale locale8 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = locale8.getVariant();
        java.lang.String str11 = localDateTime6.toString("26149261", locale8);
        java.lang.String str12 = locale8.toLanguageTag();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "26149261" + "'", str11, "26149261");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "fr-CA" + "'", str12, "fr-CA");
    }

    @Test
    public void test05863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05863");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plus(readablePeriod2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.plusMillis(54);
        int int8 = localDateTime7.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 70 + "'", int8 == 70);
    }

    @Test
    public void test05864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05864");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1645629436559L);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        java.lang.String str7 = chronology5.toString();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.clockhourOfDay();
        int int10 = dateTimeField8.get(1645629354990L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.centuries();
        boolean boolean17 = localDateTime14.equals((java.lang.Object) durationFieldType16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = localDateTime14.getFieldTypes();
        java.lang.String str19 = localDateTime14.toString();
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str21 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDateTime14, locale20);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str25 = dateTimeZone23.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        java.lang.String str28 = property27.getName();
        int int29 = property27.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property27.getFieldType();
        org.joda.time.LocalDateTime localDateTime31 = property27.roundFloorCopy();
        java.util.Locale locale32 = java.util.Locale.US;
        java.lang.String str33 = property27.getAsShortText(locale32);
        java.lang.String str34 = dateTimeField8.getAsShortText((long) (byte) 0, locale32);
        long long36 = dateTimeField8.remainder(102L);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType37.getField(chronology38);
        java.util.Locale locale41 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale42 = locale41.stripExtensions();
        java.lang.String str43 = dateTimeField39.getAsShortText(100, locale42);
        int int45 = dateTimeField39.getLeapAmount((long) (short) 100);
        java.lang.String str46 = dateTimeField39.getName();
        long long49 = dateTimeField39.add((long) (short) 1, 0);
        int int51 = dateTimeField39.get((long) 86399999);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str54 = dateTimeZone52.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now(dateTimeZone52);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.millisOfDay();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.minusMonths(2022);
        int int62 = localDateTime58.getDayOfMonth();
        java.util.Locale locale63 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet64 = locale63.getUnicodeLocaleAttributes();
        java.lang.String str65 = locale63.toLanguageTag();
        java.lang.String str66 = dateTimeField39.getAsText((org.joda.time.ReadablePartial) localDateTime58, locale63);
        org.joda.time.LocalDateTime.Property property67 = localDateTime58.era();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str70 = dateTimeZone68.getShortName((long) (short) 10);
        long long72 = dateTimeZone68.convertUTCToLocal((long) ' ');
        java.lang.String str73 = dateTimeZone68.toString();
        boolean boolean75 = dateTimeZone68.equals((java.lang.Object) (short) 100);
        java.util.Locale locale77 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str78 = dateTimeZone68.getShortName((long) (-1), locale77);
        long long82 = dateTimeZone68.convertLocalToUTC((long) (short) 100, true, (-1209599395L));
        org.joda.time.DateTime dateTime83 = localDateTime58.toDateTime(dateTimeZone68);
        java.util.Locale locale84 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet85 = locale84.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet86 = locale84.getUnicodeLocaleAttributes();
        java.lang.String str87 = locale84.getDisplayLanguage();
        java.lang.String str88 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime58, locale84);
        int int89 = property2.getMaximumTextLength(locale84);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[UTC]" + "'", str7, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T07:21:28.496" + "'", str19, "2022-02-22T07:21:28.496");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "7" + "'", str21, "7");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "millisOfDay" + "'", str28, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 86399999 + "'", int29 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "26488496" + "'", str33, "26488496");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "24" + "'", str34, "24");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 102L + "'", long36 == 102L);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "100" + "'", str43, "100");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "minuteOfDay" + "'", str46, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1439 + "'", int51 == 1439);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 22 + "'", int62 == 22);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "und" + "'", str65, "und");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "441" + "'", str66, "441");
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00" + "'", str70, "+00:00");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 32L + "'", long72 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "UTC" + "'", str73, "UTC");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+00:00" + "'", str78, "+00:00");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 100L + "'", long82 == 100L);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "");
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "7" + "'", str88, "7");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
    }

    @Test
    public void test05865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05865");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DurationField durationField5 = durationFieldType0.getField(chronology3);
        org.joda.time.DateTimeField dateTimeField6 = chronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.halfdayOfDay();
        org.joda.time.DurationField durationField8 = chronology3.weekyears();
        java.lang.String str9 = durationField8.toString();
        java.lang.String str10 = durationField8.toString();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DurationField[weekyears]" + "'", str9, "DurationField[weekyears]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DurationField[weekyears]" + "'", str10, "DurationField[weekyears]");
    }

    @Test
    public void test05866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05866");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType2.getDurationType();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.DurationField durationField8 = chronology6.centuries();
        boolean boolean9 = durationFieldType3.isSupported(chronology6);
        org.joda.time.DurationField durationField10 = chronology6.halfdays();
        boolean boolean11 = durationFieldType1.isSupported(chronology6);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.weekyears();
        org.joda.time.DurationField durationField16 = chronology14.centuries();
        org.joda.time.DurationField durationField17 = chronology14.hours();
        org.joda.time.DurationField durationField18 = chronology14.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.secondOfDay();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DurationField durationField21 = chronology14.hours();
        boolean boolean22 = durationFieldType1.isSupported(chronology14);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((-100L), chronology26);
        org.joda.time.DateTimeField dateTimeField30 = chronology26.yearOfCentury();
        boolean boolean31 = durationFieldType1.isSupported(chronology26);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.weekyears();
        org.joda.time.DurationField durationField36 = chronology34.centuries();
        org.joda.time.DurationField durationField37 = chronology34.minutes();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.monthOfYear();
        boolean boolean39 = durationFieldType1.isSupported(chronology34);
        org.joda.time.DurationField durationField40 = chronology34.weekyears();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test05867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05867");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("und");
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale4.getDisplayName();
        java.util.Locale.Builder builder7 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder8 = builder2.clearExtensions();
        java.util.Locale.Builder builder10 = builder2.removeUnicodeLocaleAttribute("26185191");
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.util.Locale.Builder builder12 = builder10.setLocale(locale11);
        java.util.Locale locale13 = builder12.build();
        java.util.Locale.Builder builder15 = builder12.removeUnicodeLocaleAttribute("26156413");
        java.util.Locale.Builder builder17 = builder12.setVariant("26186144");
        java.util.Locale.Builder builder18 = builder12.clear();
        java.util.Locale.Builder builder20 = builder18.removeUnicodeLocaleAttribute("26180917");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder20.setLanguage("0100-02-22T07:17:19.481");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 0100-02-22T07:17:19.481 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Canada" + "'", str5, "Canada");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "French (Canada)" + "'", str6, "French (Canada)");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test05868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05868");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str3 = dateTimeZone1.getShortName((long) (short) 10);
        long long5 = dateTimeZone1.convertUTCToLocal((long) ' ');
        java.lang.String str6 = dateTimeZone1.toString();
        boolean boolean8 = dateTimeZone1.equals((java.lang.Object) (short) 100);
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = dateTimeZone1.getShortName((long) (-1), locale10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone1);
        java.lang.String str14 = dateTimeZone1.getName((long) 26149);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str17 = dateTimeZone15.getShortName((long) (short) 10);
        long long19 = dateTimeZone15.convertUTCToLocal((long) ' ');
        java.lang.String str20 = dateTimeZone15.toString();
        long long22 = dateTimeZone15.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(dateTimeZone15);
        long long25 = dateTimeZone1.getMillisKeepLocal(dateTimeZone15, 0L);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone15);
        java.lang.String str27 = dateTimeZone15.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str31 = dateTimeZone29.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime(readableInstant38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str42 = dateTimeZone40.getShortName((long) (short) 10);
        long long44 = dateTimeZone40.convertUTCToLocal((long) ' ');
        java.lang.String str45 = dateTimeZone40.toString();
        long long47 = dateTimeZone40.previousTransition(32L);
        long long50 = dateTimeZone40.convertLocalToUTC(97L, false);
        boolean boolean51 = dateTime39.equals((java.lang.Object) false);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str54 = dateTimeZone52.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now(dateTimeZone52);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.millisOfDay();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime55.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = localDateTime60.toDateTime(readableInstant61);
        long long63 = dateTime62.getMillis();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str66 = dateTimeZone64.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now(dateTimeZone64);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = localDateTime67.getFieldType((int) (short) 0);
        boolean boolean70 = dateTime62.isSupported(dateTimeFieldType69);
        boolean boolean71 = dateTime39.isAfter((org.joda.time.ReadableInstant) dateTime62);
        java.lang.String str72 = dateTime39.toString();
        boolean boolean74 = dateTime39.equals((java.lang.Object) (short) 1);
        int int75 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime39);
        int int77 = dateTimeZone15.getOffset(126000000L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        java.lang.String str80 = dateTimeZone15.getNameKey(606660000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 32L + "'", long5 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 32L + "'", long19 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32L + "'", long22 == 32L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 32L + "'", long44 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 32L + "'", long47 == 32L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 97L + "'", long50 == 97L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1645629688665L + "'", long63 == 1645629688665L);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022-02-23T15:21:28.665Z" + "'", str72, "2022-02-23T15:21:28.665Z");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "UTC" + "'", str80, "UTC");
    }

    @Test
    public void test05869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05869");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        org.joda.time.DurationField durationField7 = property4.getLeapDurationField();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale8.getLanguage();
        java.lang.String str11 = locale8.toLanguageTag();
        java.lang.String str12 = property4.getAsShortText(locale8);
        org.joda.time.LocalDateTime localDateTime13 = property4.roundCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = localDateTime13.toString(dateTimeFormatter14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusWeeks(20);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plusSeconds(9);
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.withCenturyOfEra(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.property(dateTimeFieldType26);
        java.lang.String str28 = dateTimeFieldType26.getName();
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType26.getDurationType();
        boolean boolean30 = localDateTime17.isSupported(durationFieldType29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime17.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNull(durationField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "26488761" + "'", str12, "26488761");
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T07:21:28.761" + "'", str15, "2022-02-22T07:21:28.761");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "centuryOfEra" + "'", str28, "centuryOfEra");
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test05870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05870");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str3 = dateTimeZone1.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.millisOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusMonths(2022);
        int int11 = localDateTime7.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean13 = localDateTime7.equals((java.lang.Object) dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime7.plusHours(26163523);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.withDayOfMonth((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusYears((int) 'x');
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str22 = dateTimeZone20.getShortName((long) (short) 10);
        long long24 = dateTimeZone20.convertUTCToLocal((long) ' ');
        java.lang.String str25 = dateTimeZone20.toString();
        boolean boolean27 = dateTimeZone20.equals((java.lang.Object) (short) 100);
        java.util.Locale locale29 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str30 = dateTimeZone20.getShortName((long) (-1), locale29);
        long long33 = dateTimeZone20.adjustOffset(1645629356616L, false);
        boolean boolean35 = dateTimeZone20.isStandardOffset((-6004871L));
        org.joda.time.DateTime dateTime36 = localDateTime19.toDateTime(dateTimeZone20);
        java.lang.String str37 = dateTimeZone20.getID();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((java.lang.Object) "0100-02-22T07:16:46.967", dateTimeZone20);
        boolean boolean40 = dateTimeZone20.equals((java.lang.Object) 1645629649354L);
        java.lang.String str42 = dateTimeZone20.getNameKey(1645629527301L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 32L + "'", long24 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1645629356616L + "'", long33 == 1645629356616L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
    }

    @Test
    public void test05871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05871");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("26393979");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=26393979");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05872");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        int int5 = property4.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusHours((int) (short) 10);
        int int18 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDateTime17);
        java.lang.String str20 = dateTimeField6.getAsText((long) (-292275054));
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str24 = locale22.getLanguage();
        java.lang.String str25 = dateTimeField6.getAsShortText((-259200000L), locale22);
        long long27 = dateTimeField6.roundHalfCeiling(0L);
        int int28 = dateTimeField6.getMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 292278993 + "'", int5 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-292275054) + "'", int18 == (-292275054));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1969" + "'", str20, "1969");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970" + "'", str25, "1970");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-259200000L) + "'", long27 == (-259200000L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-292275054) + "'", int28 == (-292275054));
    }

    @Test
    public void test05873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05873");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        java.lang.String str6 = dateTimeZone0.toString();
        int int8 = dateTimeZone0.getOffsetFromLocal((long) 51);
        long long10 = dateTimeZone0.previousTransition(1645629404245L);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withDurationAdded(readableDuration13, (int) '#');
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.weekyear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str22 = dateTimeZone20.getShortName((long) (short) 10);
        long long24 = dateTimeZone20.convertUTCToLocal((long) ' ');
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = dateTimeZone20.getName((long) (short) 0, locale26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str30 = dateTimeZone28.getShortName((long) (short) 10);
        long long32 = dateTimeZone28.convertUTCToLocal((long) ' ');
        java.lang.String str33 = dateTimeZone28.toString();
        boolean boolean35 = dateTimeZone28.equals((java.lang.Object) (short) 100);
        java.util.Locale locale37 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str38 = dateTimeZone28.getShortName((long) (-1), locale37);
        java.lang.String str39 = locale26.getDisplayVariant(locale37);
        int int40 = property19.getMaximumShortTextLength(locale37);
        java.lang.String str41 = locale37.getLanguage();
        java.lang.String str42 = dateTimeZone0.getShortName(1645629606399L, locale37);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645629404245L + "'", long10 == 1645629404245L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 32L + "'", long24 == 32L);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 32L + "'", long32 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "fr" + "'", str41, "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
    }

    @Test
    public void test05874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05874");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("und");
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale4.getDisplayName();
        java.util.Locale.Builder builder7 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder9 = builder2.setScript("");
        java.util.Locale.Builder builder12 = builder9.setExtension('x', "26368704");
        java.util.Locale.Builder builder14 = builder9.removeUnicodeLocaleAttribute("26452284");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Canada" + "'", str5, "Canada");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "French (Canada)" + "'", str6, "French (Canada)");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test05875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05875");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        java.util.Locale locale8 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        org.joda.time.LocalDateTime localDateTime10 = property4.setCopy("26153615", locale8);
        org.joda.time.LocalDateTime localDateTime11 = property4.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusYears(26181236);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMinutes(26149);
        int int16 = localDateTime15.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 261792 + "'", int16 == 261792);
    }

    @Test
    public void test05876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05876");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.hours();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str10 = dateTimeZone8.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        java.lang.String str13 = property12.getName();
        org.joda.time.LocalDateTime localDateTime14 = property12.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean16 = localDateTime14.isSupported(dateTimeFieldType15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plusMinutes(26147585);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType19.getField(chronology20);
        long long23 = dateTimeField21.roundFloor((long) (-1));
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder26 = builder24.addUnicodeLocaleAttribute("und");
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale28 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str29 = locale27.getDisplayCountry(locale28);
        java.lang.String str30 = locale28.getDisplayName();
        java.util.Locale.Builder builder31 = builder26.setLocale(locale28);
        int int32 = dateTimeField21.getMaximumShortTextLength(locale28);
        java.lang.String str33 = dateTimeField7.getAsText((org.joda.time.ReadablePartial) localDateTime18, locale28);
        java.util.Locale locale34 = locale28.stripExtensions();
        java.lang.String str35 = locale28.getScript();
        java.util.Set<java.lang.Character> charSet36 = locale28.getExtensionKeys();
        boolean boolean38 = locale28.equals((java.lang.Object) 1908343126141L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-60000L) + "'", long23 == (-60000L));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Canada" + "'", str29, "Canada");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "French (Canada)" + "'", str30, "French (Canada)");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "30389" + "'", str33, "30389");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(charSet36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test05877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05877");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        long long5 = property4.remainder();
        int int6 = property4.getMinimumValueOverall();
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category7, locale8);
        java.lang.String str10 = locale8.getDisplayName();
        int int11 = property4.getMaximumShortTextLength(locale8);
        java.lang.String str12 = locale8.getDisplayLanguage();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.weekyears();
        org.joda.time.DurationField durationField17 = chronology15.centuries();
        org.joda.time.DurationField durationField18 = chronology15.minutes();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withDurationAdded(readableDuration22, (int) '#');
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.weekyear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str31 = dateTimeZone29.getShortName((long) (short) 10);
        long long33 = dateTimeZone29.convertUTCToLocal((long) ' ');
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.lang.String str36 = dateTimeZone29.getName((long) (short) 0, locale35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str39 = dateTimeZone37.getShortName((long) (short) 10);
        long long41 = dateTimeZone37.convertUTCToLocal((long) ' ');
        java.lang.String str42 = dateTimeZone37.toString();
        boolean boolean44 = dateTimeZone37.equals((java.lang.Object) (short) 100);
        java.util.Locale locale46 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str47 = dateTimeZone37.getShortName((long) (-1), locale46);
        java.lang.String str48 = locale35.getDisplayVariant(locale46);
        int int49 = property28.getMaximumShortTextLength(locale46);
        java.lang.String str50 = locale46.getLanguage();
        int int51 = dateTimeField20.getMaximumTextLength(locale46);
        java.lang.String str52 = locale46.getDisplayScript();
        java.lang.String str53 = locale8.getDisplayName(locale46);
        java.lang.String str54 = locale8.getLanguage();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "fran\347ais" + "'", str10, "fran\347ais");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "fran\347ais" + "'", str12, "fran\347ais");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 32L + "'", long33 == 32L);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 32L + "'", long41 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "fr" + "'", str50, "fr");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "fran\347ais" + "'", str53, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "fr" + "'", str54, "fr");
    }

    @Test
    public void test05878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05878");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        int int7 = property4.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = property4.roundHalfEvenCopy();
        org.joda.time.DurationField durationField9 = property4.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime10 = property4.roundHalfEvenCopy();
        java.lang.String str11 = property4.getName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = property4.getAsText(locale12);
        org.joda.time.LocalDateTime localDateTime15 = property4.addToCopy(26180486);
        org.joda.time.LocalDateTime localDateTime17 = property4.addToCopy((-52));
        org.joda.time.DateTimeField dateTimeField18 = property4.getField();
        boolean boolean19 = dateTimeField18.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 86399999 + "'", int7 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "millisOfDay" + "'", str11, "millisOfDay");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "26489152" + "'", str13, "26489152");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test05879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05879");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale7.getISO3Language();
        java.lang.String str9 = property4.getAsShortText(locale7);
        org.joda.time.DurationField durationField10 = property4.getDurationField();
        org.joda.time.LocalDateTime localDateTime11 = property4.getLocalDateTime();
        int int12 = property4.getMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.ReadableInstant readableInstant19 = null;
        long long20 = property18.getDifferenceAsLong(readableInstant19);
        org.joda.time.DurationField durationField21 = property18.getLeapDurationField();
        java.lang.String str22 = property18.getAsString();
        org.joda.time.LocalDateTime localDateTime23 = property18.roundFloorCopy();
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = property18.getAsText(locale24);
        org.joda.time.LocalDateTime localDateTime26 = property4.setCopy("26175305", locale24);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withDurationAdded(readableDuration28, (int) '#');
        int int31 = localDateTime30.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withMinuteOfHour(2);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.withMinuteOfHour(2);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str38 = dateTimeZone36.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = localDateTime39.getFieldType((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.minusMonths(0);
        boolean boolean44 = localDateTime35.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        int int45 = localDateTime39.getYearOfCentury();
        int int46 = property4.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        java.lang.String str47 = property4.getAsString();
        org.joda.time.LocalDateTime localDateTime48 = property4.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withDurationAdded(readableDuration49, 918);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusMonths(439);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "26489193" + "'", str9, "26489193");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(durationField21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "26489193" + "'", str22, "26489193");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "26489193" + "'", str25, "26489193");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 22 + "'", int45 == 22);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "26489193" + "'", str47, "26489193");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
    }

    @Test
    public void test05880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05880");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long7 = dateTimeField4.set((-9794L), 81249743);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 81249743 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test05881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05881");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        boolean boolean5 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.DateTimeField dateTimeField6 = chronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        long long11 = chronology3.add((long) 54974408, 0L, (int) (short) 10);
        org.joda.time.DateTimeField dateTimeField12 = chronology3.minuteOfDay();
        long long14 = dateTimeField12.roundHalfEven(1645629438879L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 54974408L + "'", long11 == 54974408L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645629420000L + "'", long14 == 1645629420000L);
    }

    @Test
    public void test05882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05882");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        int int8 = property7.get();
        int int9 = property7.getMinimumValueOverall();
        long long10 = property7.remainder();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property7.getFieldType();
        org.joda.time.DurationField durationField12 = property7.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 29360L + "'", long10 == 29360L);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test05883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05883");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime3.getFieldTypes();
        java.lang.String str8 = localDateTime3.toString();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.plusMillis(22);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime3.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology13 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.monthOfYear();
        org.joda.time.tz.NameProvider nameProvider16 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.lang.String str20 = nameProvider16.getShortName(locale17, "fran\347ais", "2022-02-22T07:15:48.066");
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str23 = dateTimeZone21.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.centuries();
        boolean boolean27 = localDateTime24.equals((java.lang.Object) durationFieldType26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = localDateTime24.getFieldTypes();
        java.lang.String str29 = localDateTime24.toString();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime24.plusMillis(22);
        org.joda.time.LocalDateTime.Property property32 = localDateTime24.monthOfYear();
        java.util.Locale locale33 = java.util.Locale.ROOT;
        int int34 = property32.getMaximumShortTextLength(locale33);
        java.lang.String str35 = locale17.getDisplayCountry(locale33);
        java.lang.String str36 = locale33.getVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = dateTimeField14.getAsShortText(26234606, locale33);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26234606");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T07:21:29.373" + "'", str8, "2022-02-22T07:21:29.373");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(nameProvider16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T07:21:29.373" + "'", str29, "2022-02-22T07:21:29.373");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Canada" + "'", str35, "Canada");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test05884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05884");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        int int7 = property4.getMaximumTextLength(locale5);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withDurationAdded(readableDuration9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.era();
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property12.getMaximumTextLength(locale13);
        java.lang.String str16 = locale5.getDisplayVariant(locale13);
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("1970-01-01T00:00:00.100");
        java.util.Locale locale21 = new java.util.Locale("26166632", "era");
        java.lang.String str22 = locale21.getDisplayCountry();
        java.lang.String str23 = locale18.getDisplayCountry(locale21);
        java.lang.String str24 = locale5.getDisplayName(locale21);
        java.lang.String str25 = locale5.getDisplayName();
        java.lang.Object obj26 = locale5.clone();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals(locale21.toString(), "26166632_ERA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ERA" + "'", str22, "ERA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "");
    }

    @Test
    public void test05885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05885");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDateTime8.toDateTime(readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        long long15 = dateTimeZone11.convertUTCToLocal((long) ' ');
        java.lang.String str16 = dateTimeZone11.toString();
        long long18 = dateTimeZone11.previousTransition(32L);
        long long21 = dateTimeZone11.convertLocalToUTC(97L, false);
        boolean boolean22 = dateTime10.equals((java.lang.Object) false);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str25 = dateTimeZone23.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime(readableInstant32);
        long long34 = dateTime33.getMillis();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str37 = dateTimeZone35.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = localDateTime38.getFieldType((int) (short) 0);
        boolean boolean41 = dateTime33.isSupported(dateTimeFieldType40);
        boolean boolean42 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime33);
        java.lang.String str43 = dateTime10.toString();
        long long44 = dateTime10.getMillis();
        org.joda.time.Chronology chronology45 = dateTime10.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.hours();
        org.joda.time.DurationField durationField47 = chronology45.millis();
        long long50 = durationField47.getMillis(52291, (long) 26364);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 32L + "'", long15 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 97L + "'", long21 == 97L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645629689451L + "'", long34 == 1645629689451L);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-23T15:21:29.451Z" + "'", str43, "2022-02-23T15:21:29.451Z");
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645629689451L + "'", long44 == 1645629689451L);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 52291L + "'", long50 == 52291L);
    }

    @Test
    public void test05886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05886");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2022-02-22T07:19:26.090", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-22t07:19:26.090");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05887");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = property4.addToCopy(500);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYearOfEra(16);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withPeriodAdded(readablePeriod9, 460);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test05888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05888");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYear(0);
        int int6 = localDateTime5.getDayOfYear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.weekOfWeekyear();
        int int8 = localDateTime5.getYearOfCentury();
        java.lang.String str9 = localDateTime5.toString();
        int int10 = localDateTime5.getMillisOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0000-02-22T07:21:29.515" + "'", str9, "0000-02-22T07:21:29.515");
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 26489515 + "'", int10 == 26489515);
    }

    @Test
    public void test05889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05889");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(654, 0, 0, 26485225, 2021, 26328866, 56);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26485225 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05890");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        int int5 = property4.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = property4.setCopy(681);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType9.getField(chronology10);
        long long13 = dateTimeField11.roundFloor((long) (-1));
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.addUnicodeLocaleAttribute("und");
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.lang.String str20 = locale18.getDisplayName();
        java.util.Locale.Builder builder21 = builder16.setLocale(locale18);
        int int22 = dateTimeField11.getMaximumShortTextLength(locale18);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str25 = dateTimeZone23.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        org.joda.time.ReadableInstant readableInstant28 = null;
        long long29 = property27.getDifferenceAsLong(readableInstant28);
        org.joda.time.DurationField durationField30 = property27.getLeapDurationField();
        java.lang.String str31 = property27.getAsString();
        org.joda.time.LocalDateTime localDateTime32 = property27.roundFloorCopy();
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleAttributes();
        java.lang.String str36 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) localDateTime32, locale33);
        long long38 = dateTimeField11.remainder(100L);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str41 = dateTimeZone39.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(dateTimeZone39);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.millisOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusHours((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = localDateTime47.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime47.minusMillis(0);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withDayOfYear(32);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology58 = localDateTime57.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.weekyears();
        boolean boolean60 = dateTimeFieldType55.isSupported(chronology58);
        org.joda.time.DateTimeField dateTimeField61 = chronology58.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField62 = chronology58.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str66 = dateTimeZone64.getShortName((long) (short) 10);
        long long68 = dateTimeZone64.convertUTCToLocal((long) ' ');
        java.util.Locale locale70 = java.util.Locale.ROOT;
        java.lang.String str71 = dateTimeZone64.getName((long) (short) 0, locale70);
        java.lang.String str72 = dateTimeField62.getAsShortText((long) 54976760, locale70);
        java.lang.String str73 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) localDateTime54, locale70);
        java.lang.String str74 = localDateTime7.toString("26273943", locale70);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology78 = localDateTime77.getChronology();
        org.joda.time.DurationField durationField79 = chronology78.weekyears();
        org.joda.time.DurationField durationField80 = chronology78.centuries();
        org.joda.time.DurationField durationField81 = chronology78.hours();
        boolean boolean82 = dateTimeFieldType75.isSupported(chronology78);
        org.joda.time.DateTimeField dateTimeField83 = chronology78.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField84 = chronology78.weekyear();
        java.util.Locale locale86 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(locale86);
        java.util.Locale locale88 = java.util.Locale.CANADA;
        boolean boolean89 = locale88.hasExtensions();
        java.lang.String str90 = locale86.getDisplayScript(locale88);
        java.lang.String str91 = dateTimeField84.getAsText(21, locale86);
        java.lang.String str92 = locale70.getDisplayCountry(locale86);
        java.lang.String str93 = locale86.getISO3Language();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 86399999 + "'", int5 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60000L) + "'", long13 == (-60000L));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Canada" + "'", str19, "Canada");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fran\347ais (Canada)" + "'", str20, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNull(durationField30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "26489597" + "'", str31, "26489597");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(strSet35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "441" + "'", str36, "441");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 100L + "'", long38 == 100L);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 32L + "'", long68 == 32L);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "70" + "'", str72, "70");
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "921" + "'", str73, "921");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "26273943" + "'", str74, "26273943");
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "de");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "21" + "'", str91, "21");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "deu" + "'", str93, "deu");
    }

    @Test
    public void test05891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05891");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withDurationAdded(readableDuration2, (int) '#');
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.weekyear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str10 = dateTimeZone8.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withYear((int) (short) 100);
        java.lang.String str15 = localDateTime14.toString();
        boolean boolean16 = localDateTime4.isAfter((org.joda.time.ReadablePartial) localDateTime14);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray19 = strSet18.toArray();
        boolean boolean20 = strSet18.isEmpty();
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray23 = strSet22.toArray();
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        boolean boolean26 = strSet22.removeAll((java.util.Collection<java.lang.String>) strSet25);
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray31 = new org.joda.time.DurationFieldType[] { durationFieldType29, durationFieldType30 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray32 = strSet28.toArray(durationFieldTypeArray31);
        boolean boolean33 = strSet22.containsAll((java.util.Collection<java.lang.String>) strSet28);
        java.lang.Object[] objArray34 = strSet28.toArray();
        boolean boolean35 = strSet18.removeAll((java.util.Collection<java.lang.String>) strSet28);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray38 = strSet37.toArray();
        java.util.Locale locale39 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        boolean boolean41 = strSet37.removeAll((java.util.Collection<java.lang.String>) strSet40);
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray46 = new org.joda.time.DurationFieldType[] { durationFieldType44, durationFieldType45 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray47 = strSet43.toArray(durationFieldTypeArray46);
        boolean boolean48 = strSet37.containsAll((java.util.Collection<java.lang.String>) strSet43);
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray51 = strSet50.toArray();
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleAttributes();
        boolean boolean54 = strSet50.removeAll((java.util.Collection<java.lang.String>) strSet53);
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray59 = new org.joda.time.DurationFieldType[] { durationFieldType57, durationFieldType58 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray60 = strSet56.toArray(durationFieldTypeArray59);
        boolean boolean61 = strSet50.containsAll((java.util.Collection<java.lang.String>) strSet56);
        java.lang.Object[] objArray62 = strSet56.toArray();
        boolean boolean63 = strSet37.retainAll((java.util.Collection<java.lang.String>) strSet56);
        boolean boolean64 = strSet28.addAll((java.util.Collection<java.lang.String>) strSet56);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean66 = strSet56.remove((java.lang.Object) dateTimeFieldType65);
        org.joda.time.LocalDateTime.Property property67 = localDateTime4.property(dateTimeFieldType65);
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology71 = localDateTime70.getChronology();
        org.joda.time.DurationField durationField72 = chronology71.weekyears();
        org.joda.time.DurationField durationField73 = chronology71.centuries();
        org.joda.time.DurationField durationField74 = durationFieldType68.getField(chronology71);
        boolean boolean75 = dateTimeFieldType65.isSupported(chronology71);
        org.joda.time.DateTimeField dateTimeField76 = chronology71.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField77 = chronology71.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(0L, chronology71);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0100-02-22T07:21:29.629" + "'", str15, "0100-02-22T07:21:29.629");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(durationFieldTypeArray31);
        org.junit.Assert.assertNotNull(durationFieldTypeArray32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(durationFieldTypeArray46);
        org.junit.Assert.assertNotNull(durationFieldTypeArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(durationFieldTypeArray59);
        org.junit.Assert.assertNotNull(durationFieldTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
    }

    @Test
    public void test05892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05892");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        org.joda.time.DurationField durationField6 = chronology4.centuries();
        boolean boolean7 = durationFieldType1.isSupported(chronology4);
        org.joda.time.DurationField durationField8 = chronology4.halfdays();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology10 = chronology4.withZone(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        long long15 = dateTimeZone11.convertUTCToLocal((long) ' ');
        java.lang.String str16 = dateTimeZone11.toString();
        boolean boolean18 = dateTimeZone11.equals((java.lang.Object) (short) 100);
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str21 = dateTimeZone11.getShortName((long) (-1), locale20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone11);
        int int24 = dateTimeZone11.getOffset((long) (short) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        long long27 = dateTimeZone11.previousTransition(1645629368743L);
        java.lang.String str29 = dateTimeZone11.getNameKey(1645629405943L);
        org.joda.time.Chronology chronology30 = chronology10.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.halfdayOfDay();
        org.joda.time.DurationField durationField32 = dateTimeField31.getDurationField();
        // The following exception was thrown during execution in test generation
        try {
            long long35 = dateTimeField31.add(1645629654289L, 126264484802022L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 126264484802022 * 43200000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 32L + "'", long15 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645629368743L + "'", long27 == 1645629368743L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test05893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05893");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        java.lang.String str1 = localDateTime0.toString();
        int int2 = localDateTime0.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusMonths(2);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str8 = dateTimeZone6.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime(readableInstant15);
        long long17 = dateTime16.getMillis();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str20 = dateTimeZone18.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = localDateTime21.getFieldType((int) (short) 0);
        boolean boolean24 = dateTime16.isSupported(dateTimeFieldType23);
        org.joda.time.DateTime dateTime25 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.LocalDateTime.Property property26 = localDateTime4.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime28 = localDateTime4.withDayOfYear(919);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 919 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-22T07:21:29.679" + "'", str1, "2022-02-22T07:21:29.679");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 20 + "'", int2 == 20);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645629689679L + "'", long17 == 1645629689679L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test05894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05894");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plus(readablePeriod2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths(356);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.millisOfDay();
        int int7 = property6.get();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
    }

    @Test
    public void test05895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05895");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDateTime8.toDateTime(readableInstant9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str14 = dateTimeZone12.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.minuteOfHour();
        int int20 = property19.get();
        org.joda.time.LocalDateTime localDateTime22 = property19.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.minuteOfHour();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.year();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        java.lang.String str26 = localDateTime25.toString();
        int int27 = localDateTime25.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.minusMonths(2);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str33 = dateTimeZone31.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.millisOfDay();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDateTime39.toDateTime(readableInstant40);
        long long42 = dateTime41.getMillis();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str45 = dateTimeZone43.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = localDateTime46.getFieldType((int) (short) 0);
        boolean boolean49 = dateTime41.isSupported(dateTimeFieldType48);
        org.joda.time.DateTime dateTime50 = localDateTime29.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str53 = dateTimeZone51.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now(dateTimeZone51);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.millisOfDay();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime54.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localDateTime59.toDateTime(readableInstant60);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str64 = dateTimeZone62.getShortName((long) (short) 10);
        long long66 = dateTimeZone62.convertUTCToLocal((long) ' ');
        java.lang.String str67 = dateTimeZone62.toString();
        long long69 = dateTimeZone62.previousTransition(32L);
        long long72 = dateTimeZone62.convertLocalToUTC(97L, false);
        boolean boolean73 = dateTime61.equals((java.lang.Object) false);
        boolean boolean74 = dateTime50.isEqual((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Instant instant75 = dateTime50.toInstant();
        long long76 = property24.getDifferenceAsLong((org.joda.time.ReadableInstant) instant75);
        boolean boolean77 = dateTime10.isBefore((org.joda.time.ReadableInstant) instant75);
        org.joda.time.DateTimeZone dateTimeZone78 = dateTime10.getZone();
        org.joda.time.DateTimeZone dateTimeZone79 = dateTime10.getZone();
        long long81 = dateTimeZone79.convertUTCToLocal((-125970748895169L));
        int int83 = dateTimeZone79.getOffset(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645629689774L + "'", long11 == 1645629689774L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 21 + "'", int20 == 21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T07:21:29.774" + "'", str26, "2022-02-22T07:21:29.774");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20 + "'", int27 == 20);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1645629689774L + "'", long42 == 1645629689774L);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 32L + "'", long66 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "UTC" + "'", str67, "UTC");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 32L + "'", long69 == 32L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 97L + "'", long72 == 97L);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-1921L) + "'", long76 == (-1921L));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-125970748895169L) + "'", long81 == (-125970748895169L));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test05896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05896");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str5 = dateTimeZone3.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone3);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(readableInstant12);
        int int14 = dateTimeZone1.getOffset(readableInstant12);
        java.util.TimeZone timeZone15 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(15, 21);
        java.util.Locale locale23 = new java.util.Locale("", "2022-02-22T07:15:52.067");
        java.util.Set<java.lang.Character> charSet24 = locale23.getExtensionKeys();
        java.lang.String str25 = locale23.getCountry();
        java.lang.String str26 = dateTimeZone19.getName(3216503530103L, locale23);
        java.lang.String str28 = locale23.getExtension('u');
        java.lang.String str29 = dateTimeZone1.getName((-59006940554459L), locale23);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+32:00" + "'", str2, "+32:00");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 115200000 + "'", int14 == 115200000);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals(locale23.toString(), "_2022-02-22T07:15:52.067");
        org.junit.Assert.assertNotNull(charSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-22T07:15:52.067" + "'", str25, "2022-02-22T07:15:52.067");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+15:21" + "'", str26, "+15:21");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+32:00" + "'", str29, "+32:00");
    }

    @Test
    public void test05897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05897");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getShortName((long) (short) 10);
        long long13 = dateTimeZone9.convertUTCToLocal((long) ' ');
        java.lang.String str14 = dateTimeZone9.toString();
        java.lang.String str15 = dateTimeZone9.toString();
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale21 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str22 = locale20.getDisplayCountry(locale21);
        java.lang.String str23 = locale17.getDisplayVariant(locale20);
        java.util.Locale locale24 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale25 = locale24.stripExtensions();
        java.lang.String str26 = locale17.getDisplayLanguage(locale25);
        java.lang.String str27 = dateTimeZone9.getName((long) 67, locale25);
        int int28 = dateTimeField8.getMaximumTextLength(locale25);
        java.lang.String str29 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str32 = dateTimeZone30.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.millisOfDay();
        org.joda.time.ReadableInstant readableInstant35 = null;
        long long36 = property34.getDifferenceAsLong(readableInstant35);
        org.joda.time.DurationField durationField37 = property34.getLeapDurationField();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.lang.String str40 = locale38.getLanguage();
        java.lang.String str41 = locale38.toLanguageTag();
        java.lang.String str42 = property34.getAsShortText(locale38);
        org.joda.time.LocalDateTime localDateTime43 = property34.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusSeconds(1);
        int int46 = localDateTime43.getSecondOfMinute();
        int int47 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localDateTime43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime51 = localDateTime43.withDate((-1640157631), 429, 26437413);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1640157631 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 32L + "'", long13 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Canada" + "'", str19, "Canada");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Canada" + "'", str22, "Canada");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fran\347ais" + "'", str26, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "minuteOfDay" + "'", str29, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNull(durationField37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "und" + "'", str41, "und");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "26489816" + "'", str42, "26489816");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 29 + "'", int46 == 29);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test05898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05898");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        int int11 = localDateTime8.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime15 = property14.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMillis(83);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 21 + "'", int11 == 21);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test05899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05899");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.DurationField durationField6 = chronology3.hours();
        boolean boolean7 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.DateTimeField dateTimeField8 = chronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField9 = chronology3.days();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        java.lang.String str11 = localDateTime10.toString();
        int int12 = localDateTime10.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusMonths(2);
        int[] intArray16 = chronology3.get((org.joda.time.ReadablePartial) localDateTime14, 86340010L);
        org.joda.time.DurationField durationField17 = chronology3.months();
        java.lang.String str18 = chronology3.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.weekyears();
        boolean boolean24 = dateTimeFieldType19.isSupported(chronology22);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.era();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str28 = dateTimeZone26.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusHours((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = localDateTime34.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.minusMillis(0);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withWeekyear(1970);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusDays(15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = localDateTime41.toString(dateTimeFormatter44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.plus(readablePeriod46);
        int int48 = dateTimeField25.getMinimumValue((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType49.getField(chronology50);
        long long53 = dateTimeField51.roundFloor((long) (-1));
        java.lang.String str54 = dateTimeField51.getName();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.halfdayOfDay();
        org.joda.time.DurationField durationField59 = dateTimeField58.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str62 = dateTimeZone60.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now(dateTimeZone60);
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.millisOfDay();
        java.lang.String str65 = property64.getName();
        org.joda.time.LocalDateTime localDateTime66 = property64.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.plusYears((int) (short) -1);
        int[] intArray76 = new int[] { 'a', (-1), 10, 26151696, 4, (byte) 1 };
        int[] intArray78 = dateTimeField58.set((org.joda.time.ReadablePartial) localDateTime66, 0, intArray76, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str81 = dateTimeZone79.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime82 = org.joda.time.LocalDateTime.now(dateTimeZone79);
        org.joda.time.LocalDateTime.Property property83 = localDateTime82.millisOfDay();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime82.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime82.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime89 = localDateTime87.minusHours((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray90 = localDateTime87.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime92 = localDateTime87.withMillisOfDay((int) '4');
        boolean boolean93 = localDateTime66.isBefore((org.joda.time.ReadablePartial) localDateTime87);
        org.joda.time.LocalDateTime localDateTime95 = localDateTime87.minusMinutes(2922789);
        java.util.Date date96 = localDateTime95.toDate();
        int int97 = dateTimeField51.getMinimumValue((org.joda.time.ReadablePartial) localDateTime95);
        int[] intArray98 = localDateTime95.getValues();
        chronology3.validate((org.joda.time.ReadablePartial) localDateTime47, intArray98);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22T07:21:29.849" + "'", str11, "2022-02-22T07:21:29.849");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1970, 1, 1, 86340010]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-02-18T15:21:29.849" + "'", str45, "1970-02-18T15:21:29.849");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-60000L) + "'", long53 == (-60000L));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "minuteOfDay" + "'", str54, "minuteOfDay");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "millisOfDay" + "'", str65, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 1, 10, 26151696, 4, 1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1, 10, 26151696, 4, 1]");
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00" + "'", str81, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray90);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(localDateTime95);
        org.junit.Assert.assertNotNull(date96);
// flaky:         org.junit.Assert.assertEquals(date96.toString(), "Wed Aug 03 22:12:29 UTC 2016");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertNotNull(intArray98);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[2016, 8, 3, 79949849]");
    }

    @Test
    public void test05900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05900");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        java.lang.String str3 = dateTimeZone1.getShortName((long) 86399999);
        java.lang.String str4 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.097" + "'", str3, "+00:00:00.097");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.097" + "'", str4, "+00:00:00.097");
    }

    @Test
    public void test05901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05901");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Locale locale6 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str7 = locale6.getVariant();
        java.lang.String str8 = locale4.getDisplayVariant(locale6);
        java.lang.String str9 = locale0.getDisplayLanguage(locale6);
        java.util.Set<java.lang.Character> charSet10 = locale0.getExtensionKeys();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.ReadableInstant readableInstant16 = null;
        long long17 = property15.getDifferenceAsLong(readableInstant16);
        int int18 = property15.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime19 = property15.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime20 = property15.roundCeilingCopy();
        java.util.Locale locale21 = java.util.Locale.PRC;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = property15.getAsText(locale21);
        java.lang.String str24 = locale0.getDisplayCountry(locale21);
        java.lang.String str25 = locale21.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "China" + "'", str3, "China");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u6587" + "'", str9, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 86399999 + "'", int18 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zh" + "'", str22, "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "26489967" + "'", str23, "26489967");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u4e2d\u56fd" + "'", str24, "\u4e2d\u56fd");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zho" + "'", str25, "zho");
    }

    @Test
    public void test05902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05902");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.hours();
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.era();
        org.joda.time.DurationField durationField7 = chronology2.hours();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.clockhourOfDay();
        org.joda.time.DurationField durationField9 = chronology2.days();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.weekyears();
        org.joda.time.DurationField durationField14 = chronology12.centuries();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withDurationAdded(readableDuration18, (int) '#');
        org.joda.time.LocalDateTime.Property property21 = localDateTime17.era();
        int int22 = localDateTime17.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.withWeekOfWeekyear((int) (byte) 1);
        int int25 = localDateTime17.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime17.plusDays(500);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.days();
        java.lang.String str29 = durationFieldType28.toString();
        boolean boolean30 = localDateTime27.isSupported(durationFieldType28);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plus(readablePeriod31);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology34 = null;
        boolean boolean35 = durationFieldType33.isSupported(chronology34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime27.withFieldAdded(durationFieldType33, 3);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withDate(500, 7, 17);
        long long43 = chronology12.set((org.joda.time.ReadablePartial) localDateTime37, 1645629356615L);
        org.joda.time.DateTimeZone dateTimeZone44 = chronology12.getZone();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str47 = dateTimeZone45.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(dateTimeZone45);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.millisOfDay();
        org.joda.time.ReadableInstant readableInstant50 = null;
        long long51 = property49.getDifferenceAsLong(readableInstant50);
        org.joda.time.DurationField durationField52 = property49.getLeapDurationField();
        java.lang.String str53 = property49.getAsString();
        org.joda.time.LocalDateTime localDateTime54 = property49.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withWeekyear((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str59 = dateTimeZone57.getShortName((long) (short) 10);
        long long61 = dateTimeZone57.convertUTCToLocal((long) ' ');
        java.lang.String str62 = dateTimeZone57.toString();
        boolean boolean64 = dateTimeZone57.equals((java.lang.Object) (short) 100);
        java.util.Locale locale66 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str67 = dateTimeZone57.getShortName((long) (-1), locale66);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(dateTimeZone57);
        org.joda.time.DateTime dateTime69 = localDateTime56.toDateTime(dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone70 = dateTime69.getZone();
        int int71 = dateTimeZone44.getOffset((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Chronology chronology72 = chronology2.withZone(dateTimeZone44);
        org.joda.time.DurationField durationField73 = chronology72.years();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "days" + "'", str29, "days");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1688725289982L + "'", long43 == 1688725289982L);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNull(durationField52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "26489982" + "'", str53, "26489982");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00" + "'", str59, "+00:00");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 32L + "'", long61 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "UTC" + "'", str62, "UTC");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00" + "'", str67, "+00:00");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(durationField73);
    }

    @Test
    public void test05903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05903");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusYears(7);
        int int9 = localDateTime8.getEra();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.centuries();
        boolean boolean16 = localDateTime13.equals((java.lang.Object) durationFieldType15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = localDateTime13.getFieldTypes();
        java.lang.String str18 = localDateTime13.toString();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime13.withField(dateTimeFieldType21, 2);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime8.withField(dateTimeFieldType21, 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.year();
        java.lang.String str29 = property28.toString();
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder32 = builder30.addUnicodeLocaleAttribute("und");
        java.util.Locale locale33 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale34 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str35 = locale33.getDisplayCountry(locale34);
        java.lang.String str36 = locale34.getDisplayName();
        java.util.Locale.Builder builder37 = builder32.setLocale(locale34);
        java.util.Locale.Builder builder39 = builder32.setScript("");
        java.util.Locale locale40 = builder32.build();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType48.getField(chronology49);
        long long52 = dateTimeField50.roundFloor((long) (-1));
        java.util.Locale.Builder builder53 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder55 = builder53.addUnicodeLocaleAttribute("und");
        java.util.Locale locale56 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale57 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str58 = locale56.getDisplayCountry(locale57);
        java.lang.String str59 = locale57.getDisplayName();
        java.util.Locale.Builder builder60 = builder55.setLocale(locale57);
        int int61 = dateTimeField50.getMaximumShortTextLength(locale57);
        java.lang.String str62 = dateTimeField46.getAsShortText((long) 'a', locale57);
        java.lang.String str63 = locale40.getDisplayLanguage(locale57);
        java.util.Set<java.lang.String> strSet64 = locale40.getUnicodeLocaleKeys();
        java.lang.String str65 = property28.getAsShortText(locale40);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime67.plusSeconds(9);
        org.joda.time.LocalDateTime.Property property71 = localDateTime67.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime67.withCenturyOfEra(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.LocalDateTime.Property property75 = localDateTime73.property(dateTimeFieldType74);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str78 = dateTimeZone76.getShortName((long) (short) 10);
        long long80 = dateTimeZone76.convertUTCToLocal((long) ' ');
        java.lang.String str81 = dateTimeZone76.toString();
        boolean boolean83 = dateTimeZone76.equals((java.lang.Object) (short) 100);
        java.util.Locale locale85 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str86 = dateTimeZone76.getShortName((long) (-1), locale85);
        org.joda.time.DateTime dateTime87 = localDateTime73.toDateTime(dateTimeZone76);
        int int88 = property28.getDifference((org.joda.time.ReadableInstant) dateTime87);
        int int89 = property28.getLeapAmount();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T07:21:30.012" + "'", str18, "2022-02-22T07:21:30.012");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Property[year]" + "'", str29, "Property[year]");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Canada" + "'", str35, "Canada");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Franz\366sisch (Kanada)" + "'", str36, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-60000L) + "'", long52 == (-60000L));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Canada" + "'", str58, "Canada");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Franz\366sisch (Kanada)" + "'", str59, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "97" + "'", str62, "97");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "fran\347ais" + "'", str63, "fran\347ais");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2015" + "'", str65, "2015");
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+00:00" + "'", str78, "+00:00");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 32L + "'", long80 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "UTC" + "'", str81, "UTC");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+00:00" + "'", str86, "+00:00");
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1745 + "'", int88 == 1745);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test05904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05904");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        int int11 = localDateTime8.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minus(readablePeriod12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withYear((int) (short) 100);
        int int21 = localDateTime20.getCenturyOfEra();
        boolean boolean22 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime.Property property23 = localDateTime8.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(915);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        java.lang.String str28 = dateTimeZone25.getShortName(1645629471285L);
        org.joda.time.DateTime dateTime29 = localDateTime8.toDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime.Property property30 = localDateTime8.era();
        org.joda.time.LocalDateTime localDateTime31 = property30.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime32 = property30.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 21 + "'", int11 == 21);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.915" + "'", str28, "+00:00:00.915");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test05905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05905");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str4 = nameProvider0.getShortName(locale1, "fran\347ais", "2022-02-22T07:15:48.066");
        java.util.Locale locale5 = locale1.stripExtensions();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str8 = dateTimeZone6.getShortName((long) (short) 10);
        long long10 = dateTimeZone6.convertUTCToLocal((long) ' ');
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = dateTimeZone6.getName((long) (short) 0, locale12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getShortName((long) (short) 10);
        long long18 = dateTimeZone14.convertUTCToLocal((long) ' ');
        java.lang.String str19 = dateTimeZone14.toString();
        boolean boolean21 = dateTimeZone14.equals((java.lang.Object) (short) 100);
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str24 = dateTimeZone14.getShortName((long) (-1), locale23);
        java.lang.String str25 = locale12.getDisplayVariant(locale23);
        org.joda.time.tz.NameProvider nameProvider26 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.lang.String str30 = nameProvider26.getShortName(locale27, "fran\347ais", "2022-02-22T07:15:48.066");
        java.lang.String str31 = locale27.getLanguage();
        java.lang.String str32 = locale23.getDisplayLanguage(locale27);
        java.lang.String str33 = locale5.getDisplayLanguage(locale23);
        java.util.Locale.Builder builder34 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder36 = builder34.addUnicodeLocaleAttribute("und");
        java.util.Locale locale37 = builder36.build();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet40 = locale38.getUnicodeLocaleAttributes();
        java.lang.String str41 = locale38.getVariant();
        java.util.Locale.Builder builder42 = builder36.setLocale(locale38);
        java.lang.String str43 = locale5.getDisplayScript(locale38);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 32L + "'", long10 == 32L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(nameProvider26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "en" + "'", str31, "en");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "French" + "'", str32, "French");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "anglais" + "'", str33, "anglais");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test05906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05906");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        boolean boolean5 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.centuries();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.year();
        long long11 = chronology3.add(1645629353861L, (long) 26149500, 97);
        org.joda.time.DurationField durationField12 = chronology3.months();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1648165855361L + "'", long11 == 1648165855361L);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test05907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05907");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.hours();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.secondOfDay();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withHourOfDay(5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withSecondOfMinute((-60));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test05908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05908");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        java.lang.String str1 = durationFieldType0.getName();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        org.joda.time.DurationField durationField6 = chronology4.centuries();
        org.joda.time.DurationField durationField7 = chronology4.hours();
        org.joda.time.DurationField durationField8 = chronology4.seconds();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.secondOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.minuteOfDay();
        org.joda.time.DurationField durationField11 = durationFieldType0.getField(chronology4);
        org.joda.time.DateTimeField dateTimeField12 = chronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withDurationAdded(readableDuration15, (int) '#');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.weekyear();
        java.lang.String str19 = property18.getAsString();
        org.joda.time.LocalDateTime localDateTime21 = property18.setCopy(67);
        org.joda.time.LocalDateTime localDateTime22 = property18.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime25 = property23.addWrapFieldToCopy(1);
        int[] intArray27 = chronology4.get((org.joda.time.ReadablePartial) localDateTime25, 1645629474271L);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.dayOfYear();
        int int29 = localDateTime25.getYearOfCentury();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "minutes" + "'", str1, "minutes");
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022" + "'", str19, "2022");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[2022, 2, 23, 55074271]");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 22 + "'", int29 == 22);
    }

    @Test
    public void test05909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05909");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long4 = dateTimeField2.roundFloor((long) (-1));
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("und");
        java.util.Locale locale8 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        java.lang.String str11 = locale9.getDisplayName();
        java.util.Locale.Builder builder12 = builder7.setLocale(locale9);
        int int13 = dateTimeField2.getMaximumShortTextLength(locale9);
        int int15 = dateTimeField2.getLeapAmount((long) 'a');
        long long17 = dateTimeField2.remainder((long) 30);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60000L) + "'", long4 == (-60000L));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Canada" + "'", str10, "Canada");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Franz\366sisch (Kanada)" + "'", str11, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 30L + "'", long17 == 30L);
    }

    @Test
    public void test05910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05910");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.DurationField durationField3 = dateTimeField2.getRangeDurationField();
        long long5 = dateTimeField2.remainder(1L);
        // The following exception was thrown during execution in test generation
        try {
            long long8 = dateTimeField2.set((long) 25836881, "2022-02-22T07:19:13.190");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:19:13.190\" for minuteOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
    }

    @Test
    public void test05911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05911");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        java.lang.String str14 = localDateTime13.toString();
        boolean boolean15 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.withFieldAdded(durationFieldType16, 7);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        java.lang.String str20 = durationFieldType19.toString();
        boolean boolean21 = localDateTime13.isSupported(durationFieldType19);
        int int22 = localDateTime13.getMinuteOfHour();
        int int23 = localDateTime13.getMinuteOfHour();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime13.minus(readableDuration24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = localDateTime13.withDayOfYear(26433719);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26433719 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0100-02-22T07:21:30.173" + "'", str14, "0100-02-22T07:21:30.173");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "days" + "'", str20, "days");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 21 + "'", int22 == 21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 21 + "'", int23 == 21);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test05912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05912");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str3 = dateTimeZone1.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str7 = dateTimeZone5.getShortName((long) (short) 10);
        long long9 = dateTimeZone5.convertUTCToLocal((long) ' ');
        java.lang.String str10 = dateTimeZone5.toString();
        boolean boolean12 = dateTimeZone5.equals((java.lang.Object) (short) 100);
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str15 = dateTimeZone5.getShortName((long) (-1), locale14);
        long long17 = dateTimeZone1.getMillisKeepLocal(dateTimeZone5, (long) (byte) -1);
        java.util.Locale locale19 = java.util.Locale.US;
        java.lang.String str20 = dateTimeZone1.getShortName(1645629357666L, locale19);
        long long22 = dateTimeZone1.nextTransition(1645629352172L);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((java.lang.Object) "2022-02-22T07:16:41.658", dateTimeZone1);
        int int24 = localDateTime23.getEra();
        int int25 = localDateTime23.size();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 32L + "'", long9 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645629352172L + "'", long22 == 1645629352172L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
    }

    @Test
    public void test05913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05913");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale7.getISO3Language();
        java.lang.String str9 = property4.getAsShortText(locale7);
        org.joda.time.DurationField durationField10 = property4.getDurationField();
        long long13 = durationField10.add((long) 1, 10);
        int int15 = durationField10.getValue((long) 0);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str18 = dateTimeZone16.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.ReadableInstant readableInstant21 = null;
        long long22 = property20.getDifferenceAsLong(readableInstant21);
        int int23 = property20.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime24 = property20.roundHalfEvenCopy();
        org.joda.time.DurationField durationField25 = property20.getRangeDurationField();
        int int26 = durationField10.compareTo(durationField25);
        long long28 = durationField25.getMillis(0L);
        long long30 = durationField25.getValueAsLong((-59990L));
        // The following exception was thrown during execution in test generation
        try {
            long long33 = durationField25.add(1645629572966L, 1640157482070L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1640157482070 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "26490244" + "'", str9, "26490244");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 11L + "'", long13 == 11L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 86399999 + "'", int23 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test05914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05914");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.centuries();
        boolean boolean16 = localDateTime13.equals((java.lang.Object) durationFieldType15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.withWeekOfWeekyear((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.plusDays(67);
        org.joda.time.tz.NameProvider nameProvider21 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.lang.String str25 = nameProvider21.getShortName(locale22, "fran\347ais", "2022-02-22T07:15:48.066");
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str28 = dateTimeZone26.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.centuries();
        boolean boolean32 = localDateTime29.equals((java.lang.Object) durationFieldType31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = localDateTime29.getFieldTypes();
        java.lang.String str34 = localDateTime29.toString();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime29.plusMillis(22);
        org.joda.time.LocalDateTime.Property property37 = localDateTime29.monthOfYear();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        int int39 = property37.getMaximumShortTextLength(locale38);
        java.lang.String str40 = locale22.getDisplayCountry(locale38);
        java.util.Locale locale42 = new java.util.Locale("2022-02-22T07:16:29.758");
        java.util.Locale.Builder builder43 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder45 = builder43.addUnicodeLocaleAttribute("und");
        java.util.Locale locale46 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale47 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str48 = locale46.getDisplayCountry(locale47);
        java.lang.String str49 = locale47.getDisplayName();
        java.util.Locale.Builder builder50 = builder45.setLocale(locale47);
        java.util.Locale.Builder builder52 = builder45.setScript("");
        java.util.Locale locale53 = builder45.build();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField58 = chronology56.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField59 = chronology56.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTimeField dateTimeField63 = dateTimeFieldType61.getField(chronology62);
        long long65 = dateTimeField63.roundFloor((long) (-1));
        java.util.Locale.Builder builder66 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder68 = builder66.addUnicodeLocaleAttribute("und");
        java.util.Locale locale69 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale70 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str71 = locale69.getDisplayCountry(locale70);
        java.lang.String str72 = locale70.getDisplayName();
        java.util.Locale.Builder builder73 = builder68.setLocale(locale70);
        int int74 = dateTimeField63.getMaximumShortTextLength(locale70);
        java.lang.String str75 = dateTimeField59.getAsShortText((long) 'a', locale70);
        java.lang.String str76 = locale53.getDisplayLanguage(locale70);
        java.util.Locale locale77 = locale70.stripExtensions();
        java.lang.String str78 = locale42.getDisplayName(locale77);
        java.lang.String str79 = locale38.getDisplayScript(locale42);
        java.lang.String str80 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime13, locale38);
        org.joda.time.DateTimeField[] dateTimeFieldArray81 = localDateTime13.getFields();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime13.withDayOfYear(3);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(nameProvider21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T07:21:30.256" + "'", str34, "2022-02-22T07:21:30.256");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Canada" + "'", str40, "Canada");
        org.junit.Assert.assertEquals(locale42.toString(), "2022-02-22t07:16:29.758");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Canada" + "'", str48, "Canada");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Franz\366sisch (Kanada)" + "'", str49, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-60000L) + "'", long65 == (-60000L));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Canada" + "'", str71, "Canada");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Franz\366sisch (Kanada)" + "'", str72, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "97" + "'", str75, "97");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "fran\347ais" + "'", str76, "fran\347ais");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "2022-02-22t07:16:29.758" + "'", str78, "2022-02-22t07:16:29.758");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "February" + "'", str80, "February");
        org.junit.Assert.assertNotNull(dateTimeFieldArray81);
        org.junit.Assert.assertNotNull(localDateTime83);
    }

    @Test
    public void test05915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05915");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = dateTimeField2.getAsShortText(100, locale5);
        int int8 = dateTimeField2.getLeapAmount(31795200000L);
        long long10 = dateTimeField2.roundHalfCeiling(1645629483778L);
        long long12 = dateTimeField2.roundHalfFloor(1645629622393L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "100" + "'", str6, "100");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645629480000L + "'", long10 == 1645629480000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645629600000L + "'", long12 == 1645629600000L);
    }

    @Test
    public void test05916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05916");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.hours();
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, (int) '#');
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str18 = dateTimeZone16.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.centuries();
        boolean boolean22 = localDateTime19.equals((java.lang.Object) durationFieldType21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime19.getFieldTypes();
        java.lang.String str24 = localDateTime19.toString();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean28 = localDateTime19.isSupported(dateTimeFieldType27);
        int int29 = localDateTime15.indexOf(dateTimeFieldType27);
        int[] intArray31 = chronology2.get((org.joda.time.ReadablePartial) localDateTime15, 1645629358650L);
        org.joda.time.DurationField durationField32 = chronology2.millis();
        org.joda.time.DurationField durationField33 = chronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField36 = chronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField37 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = chronology2.getZone();
        org.joda.time.DurationField durationField39 = chronology2.days();
        org.joda.time.DateTimeField dateTimeField40 = chronology2.secondOfDay();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T07:21:30.306" + "'", str24, "2022-02-22T07:21:30.306");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2022, 2, 23, 54958650]");
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test05917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05917");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str3 = dateTimeZone1.getShortName((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str6 = dateTimeZone4.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        long long9 = dateTimeZone1.getMillisKeepLocal(dateTimeZone4, 1645629358939L);
        java.lang.String str10 = dateTimeZone1.toString();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((java.lang.Object) "2022-02-22T07:19:14.914", dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645629358939L + "'", long9 == 1645629358939L);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
    }

    @Test
    public void test05918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05918");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withDurationAdded(readableDuration2, (int) '#');
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.weekyear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str10 = dateTimeZone8.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withYear((int) (short) 100);
        java.lang.String str15 = localDateTime14.toString();
        boolean boolean16 = localDateTime4.isAfter((org.joda.time.ReadablePartial) localDateTime14);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray19 = strSet18.toArray();
        boolean boolean20 = strSet18.isEmpty();
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray23 = strSet22.toArray();
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        boolean boolean26 = strSet22.removeAll((java.util.Collection<java.lang.String>) strSet25);
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray31 = new org.joda.time.DurationFieldType[] { durationFieldType29, durationFieldType30 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray32 = strSet28.toArray(durationFieldTypeArray31);
        boolean boolean33 = strSet22.containsAll((java.util.Collection<java.lang.String>) strSet28);
        java.lang.Object[] objArray34 = strSet28.toArray();
        boolean boolean35 = strSet18.removeAll((java.util.Collection<java.lang.String>) strSet28);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray38 = strSet37.toArray();
        java.util.Locale locale39 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        boolean boolean41 = strSet37.removeAll((java.util.Collection<java.lang.String>) strSet40);
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray46 = new org.joda.time.DurationFieldType[] { durationFieldType44, durationFieldType45 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray47 = strSet43.toArray(durationFieldTypeArray46);
        boolean boolean48 = strSet37.containsAll((java.util.Collection<java.lang.String>) strSet43);
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray51 = strSet50.toArray();
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleAttributes();
        boolean boolean54 = strSet50.removeAll((java.util.Collection<java.lang.String>) strSet53);
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray59 = new org.joda.time.DurationFieldType[] { durationFieldType57, durationFieldType58 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray60 = strSet56.toArray(durationFieldTypeArray59);
        boolean boolean61 = strSet50.containsAll((java.util.Collection<java.lang.String>) strSet56);
        java.lang.Object[] objArray62 = strSet56.toArray();
        boolean boolean63 = strSet37.retainAll((java.util.Collection<java.lang.String>) strSet56);
        boolean boolean64 = strSet28.addAll((java.util.Collection<java.lang.String>) strSet56);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean66 = strSet56.remove((java.lang.Object) dateTimeFieldType65);
        org.joda.time.LocalDateTime.Property property67 = localDateTime4.property(dateTimeFieldType65);
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology71 = localDateTime70.getChronology();
        org.joda.time.DurationField durationField72 = chronology71.weekyears();
        org.joda.time.DurationField durationField73 = chronology71.centuries();
        org.joda.time.DurationField durationField74 = durationFieldType68.getField(chronology71);
        boolean boolean75 = dateTimeFieldType65.isSupported(chronology71);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str78 = dateTimeZone76.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime79 = org.joda.time.LocalDateTime.now(dateTimeZone76);
        org.joda.time.LocalDateTime.Property property80 = localDateTime79.millisOfDay();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime79.plusMonths((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.plus(readablePeriod83);
        long long86 = chronology71.set((org.joda.time.ReadablePartial) localDateTime84, 864000010L);
        org.joda.time.DurationField durationField87 = chronology71.weekyears();
        org.joda.time.DateTimeField dateTimeField88 = chronology71.millisOfSecond();
        org.joda.time.Chronology chronology89 = chronology71.withUTC();
        org.joda.time.LocalDateTime localDateTime90 = new org.joda.time.LocalDateTime(1645629372311L, chronology71);
        org.joda.time.DateTimeField dateTimeField91 = chronology71.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField92 = chronology71.millisOfDay();
        org.joda.time.DateTimeField dateTimeField93 = chronology71.hourOfDay();
        int int94 = dateTimeField93.getMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0100-02-22T07:21:30.335" + "'", str15, "0100-02-22T07:21:30.335");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(durationFieldTypeArray31);
        org.junit.Assert.assertNotNull(durationFieldTypeArray32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(durationFieldTypeArray46);
        org.junit.Assert.assertNotNull(durationFieldTypeArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(durationFieldTypeArray59);
        org.junit.Assert.assertNotNull(durationFieldTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+00:00" + "'", str78, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
// flaky:         org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1908343290335L + "'", long86 == 1908343290335L);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 23 + "'", int94 == 23);
    }

    @Test
    public void test05919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05919");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        long long8 = dateTimeZone0.adjustOffset((long) (short) 100, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        boolean boolean11 = dateTimeZone0.equals((java.lang.Object) "CA");
        int int13 = dateTimeZone0.getOffsetFromLocal(1094L);
        java.util.TimeZone timeZone14 = dateTimeZone0.toTimeZone();
        timeZone14.setRawOffset(224);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone17.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone17);
        timeZone17.setRawOffset(26181236);
        timeZone17.setRawOffset((int) (byte) 10);
        boolean boolean24 = timeZone14.hasSameRules(timeZone17);
        // The following exception was thrown during execution in test generation
        try {
            int int31 = timeZone14.getOffset((-27427156), 2030, 1645650859, 55220511, 26489, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era -27427156");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test05920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05920");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((-1), 55021617, 26444559, 0, 26310, 55248233, 40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26310 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05921");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("26153539");
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale8 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        long long14 = dateTimeZone10.convertUTCToLocal((long) ' ');
        java.lang.String str15 = dateTimeZone10.toString();
        boolean boolean17 = dateTimeZone10.equals((java.lang.Object) (short) 100);
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str20 = dateTimeZone10.getShortName((long) (-1), locale19);
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.util.Locale[] localeArray23 = new java.util.Locale[] { locale8, locale9, locale19, locale21, locale22 };
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.Locale locale26 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList24);
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray29 = strSet28.toArray();
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strSet28);
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray33 = strSet32.toArray();
        boolean boolean34 = strSet32.isEmpty();
        java.lang.String str35 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strSet32);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap36 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap36);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray40 = strSet39.toArray();
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        boolean boolean43 = strSet39.removeAll((java.util.Collection<java.lang.String>) strSet42);
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags(languageRangeList37, (java.util.Collection<java.lang.String>) strSet39);
        boolean boolean45 = strSet4.removeAll((java.util.Collection<java.lang.String>) strSet39);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str48 = dateTimeZone46.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withFieldAdded(durationFieldType51, 26149500);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime49.minusHours((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType56.getDurationType();
        boolean boolean58 = localDateTime55.isSupported(dateTimeFieldType56);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.weekyears();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField64 = chronology61.secondOfDay();
        org.joda.time.DateTimeField dateTimeField65 = chronology61.dayOfYear();
        org.joda.time.DateTimeField dateTimeField66 = chronology61.clockhourOfDay();
        boolean boolean67 = dateTimeFieldType56.isSupported(chronology61);
        org.joda.time.DateTimeField dateTimeField68 = chronology61.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone69 = chronology61.getZone();
        boolean boolean70 = dateTimeZone69.isFixed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((java.lang.Object) strSet39, dateTimeZone69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Collections$EmptySet");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 32L + "'", long14 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertNotNull(localeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(locale26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test05922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05922");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(26444559, 716, 55000019, 41, 53, 673);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 41 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05923");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Category category1 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category1, locale2);
        java.lang.String str4 = locale2.toLanguageTag();
        java.lang.String str5 = locale2.getLanguage();
        java.lang.String str8 = nameProvider0.getShortName(locale2, "days", "26149261");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleAttributes();
        java.lang.String str13 = locale11.toLanguageTag();
        java.lang.String str14 = locale11.getScript();
        java.lang.String str17 = nameProvider0.getShortName(locale11, "44", "2022-02-22T07:16:49.120");
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.weekyears();
        org.joda.time.DurationField durationField22 = chronology20.centuries();
        org.joda.time.DurationField durationField23 = chronology20.hours();
        org.joda.time.DurationField durationField24 = chronology20.seconds();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str28 = dateTimeZone26.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        java.lang.String str31 = property30.getName();
        org.joda.time.LocalDateTime localDateTime32 = property30.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean34 = localDateTime32.isSupported(dateTimeFieldType33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.plusMinutes(26147585);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType37.getField(chronology38);
        long long41 = dateTimeField39.roundFloor((long) (-1));
        java.util.Locale.Builder builder42 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder44 = builder42.addUnicodeLocaleAttribute("und");
        java.util.Locale locale45 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale46 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str47 = locale45.getDisplayCountry(locale46);
        java.lang.String str48 = locale46.getDisplayName();
        java.util.Locale.Builder builder49 = builder44.setLocale(locale46);
        int int50 = dateTimeField39.getMaximumShortTextLength(locale46);
        java.lang.String str51 = dateTimeField25.getAsText((org.joda.time.ReadablePartial) localDateTime36, locale46);
        java.util.Locale locale52 = locale46.stripExtensions();
        java.lang.String str55 = nameProvider0.getShortName(locale46, "67", "2022-02-22T07:17:23.108");
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str58 = dateTimeZone56.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.now(dateTimeZone56);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.millisOfDay();
        org.joda.time.LocalDateTime localDateTime62 = property60.addToCopy(500);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.plus(readableDuration63);
        org.joda.time.LocalDateTime.Property property65 = localDateTime62.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime67 = property65.addWrapFieldToCopy(54976760);
        int int68 = property65.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime69.withDurationAdded(readableDuration70, (int) '#');
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.weekyear();
        int int74 = property73.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField75 = property73.getField();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str78 = dateTimeZone76.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime79 = org.joda.time.LocalDateTime.now(dateTimeZone76);
        org.joda.time.LocalDateTime.Property property80 = localDateTime79.millisOfDay();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime79.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime79.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.minusHours((int) (short) 10);
        int int87 = dateTimeField75.getMinimumValue((org.joda.time.ReadablePartial) localDateTime86);
        java.lang.String str89 = dateTimeField75.getAsText((long) (-292275054));
        java.util.Locale locale91 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet92 = locale91.getUnicodeLocaleAttributes();
        java.lang.String str93 = locale91.getLanguage();
        java.lang.String str94 = dateTimeField75.getAsShortText((-259200000L), locale91);
        int int95 = property65.getMaximumShortTextLength(locale91);
        java.lang.String str98 = nameProvider0.getName(locale91, "2022-02-22T07:16:36.044", "2022-02-22T07:17:24.625");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category1.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "fr" + "'", str4, "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fr" + "'", str5, "fr");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "und" + "'", str13, "und");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "millisOfDay" + "'", str31, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-60000L) + "'", long41 == (-60000L));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Canada" + "'", str47, "Canada");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "fran\347ais (Canada)" + "'", str48, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "30390" + "'", str51, "30390");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 999 + "'", int68 == 999);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 292278993 + "'", int74 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+00:00" + "'", str78, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-292275054) + "'", int87 == (-292275054));
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "1969" + "'", str89, "1969");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "");
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "1970" + "'", str94, "1970");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 3 + "'", int95 == 3);
        org.junit.Assert.assertNull(str98);
    }

    @Test
    public void test05924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05924");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        java.lang.String str14 = localDateTime13.toString();
        boolean boolean15 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray18 = strSet17.toArray();
        boolean boolean19 = strSet17.isEmpty();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray22 = strSet21.toArray();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        boolean boolean25 = strSet21.removeAll((java.util.Collection<java.lang.String>) strSet24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray30 = new org.joda.time.DurationFieldType[] { durationFieldType28, durationFieldType29 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray31 = strSet27.toArray(durationFieldTypeArray30);
        boolean boolean32 = strSet21.containsAll((java.util.Collection<java.lang.String>) strSet27);
        java.lang.Object[] objArray33 = strSet27.toArray();
        boolean boolean34 = strSet17.removeAll((java.util.Collection<java.lang.String>) strSet27);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray37 = strSet36.toArray();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        boolean boolean40 = strSet36.removeAll((java.util.Collection<java.lang.String>) strSet39);
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray45 = new org.joda.time.DurationFieldType[] { durationFieldType43, durationFieldType44 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray46 = strSet42.toArray(durationFieldTypeArray45);
        boolean boolean47 = strSet36.containsAll((java.util.Collection<java.lang.String>) strSet42);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray50 = strSet49.toArray();
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        boolean boolean53 = strSet49.removeAll((java.util.Collection<java.lang.String>) strSet52);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray58 = new org.joda.time.DurationFieldType[] { durationFieldType56, durationFieldType57 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray59 = strSet55.toArray(durationFieldTypeArray58);
        boolean boolean60 = strSet49.containsAll((java.util.Collection<java.lang.String>) strSet55);
        java.lang.Object[] objArray61 = strSet55.toArray();
        boolean boolean62 = strSet36.retainAll((java.util.Collection<java.lang.String>) strSet55);
        boolean boolean63 = strSet27.addAll((java.util.Collection<java.lang.String>) strSet55);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean65 = strSet55.remove((java.lang.Object) dateTimeFieldType64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime3.property(dateTimeFieldType64);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology70 = localDateTime69.getChronology();
        org.joda.time.DurationField durationField71 = chronology70.weekyears();
        org.joda.time.DurationField durationField72 = chronology70.centuries();
        org.joda.time.DurationField durationField73 = durationFieldType67.getField(chronology70);
        boolean boolean74 = dateTimeFieldType64.isSupported(chronology70);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str77 = dateTimeZone75.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.now(dateTimeZone75);
        org.joda.time.LocalDateTime.Property property79 = localDateTime78.millisOfDay();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime78.plusMonths((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.plus(readablePeriod82);
        long long85 = chronology70.set((org.joda.time.ReadablePartial) localDateTime83, 864000010L);
        org.joda.time.DurationField durationField86 = chronology70.weekyears();
        org.joda.time.DateTimeField dateTimeField87 = chronology70.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField88 = chronology70.weekyear();
        org.joda.time.DateTimeField dateTimeField89 = chronology70.year();
        org.joda.time.DateTimeZone dateTimeZone91 = org.joda.time.DateTimeZone.forOffsetMillis((-52));
        org.joda.time.LocalDateTime localDateTime92 = new org.joda.time.LocalDateTime(dateTimeZone91);
        int int94 = dateTimeZone91.getOffset(3216503530103L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime95 = new org.joda.time.LocalDateTime((java.lang.Object) chronology70, dateTimeZone91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0100-02-22T07:21:30.512" + "'", str14, "0100-02-22T07:21:30.512");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(durationFieldTypeArray30);
        org.junit.Assert.assertNotNull(durationFieldTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(durationFieldTypeArray45);
        org.junit.Assert.assertNotNull(durationFieldTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(durationFieldTypeArray58);
        org.junit.Assert.assertNotNull(durationFieldTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+00:00" + "'", str77, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
// flaky:         org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1908343290513L + "'", long85 == 1908343290513L);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeZone91);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-52) + "'", int94 == (-52));
    }

    @Test
    public void test05925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05925");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        java.util.Locale locale8 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = locale8.getVariant();
        java.lang.String str11 = localDateTime6.toString("26149261", locale8);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.plus(readablePeriod12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusSeconds(4);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str18 = dateTimeZone16.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withFieldAdded(durationFieldType21, 26149500);
        boolean boolean24 = localDateTime15.isSupported(durationFieldType21);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime15.plusYears(97);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDate(46, 43, 324);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 43 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "26149261" + "'", str11, "26149261");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test05926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05926");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weekyears();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.DurationField durationField12 = durationFieldType5.getField(chronology9);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.weekyears();
        org.joda.time.DurationField durationField17 = chronology15.seconds();
        org.joda.time.DurationField durationField18 = durationFieldType5.getField(chronology15);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = chronology15.add(readablePeriod19, 153L, (int) '4');
        org.joda.time.DateTimeField dateTimeField23 = chronology15.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str26 = dateTimeZone24.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.minuteOfHour();
        int int32 = property31.get();
        org.joda.time.LocalDateTime localDateTime34 = property31.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withYearOfCentury(0);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str40 = dateTimeZone38.getShortName((long) (short) 10);
        long long42 = dateTimeZone38.convertUTCToLocal((long) ' ');
        java.lang.String str43 = dateTimeZone38.toString();
        boolean boolean45 = dateTimeZone38.equals((java.lang.Object) (short) 100);
        java.util.Locale locale47 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str48 = dateTimeZone38.getShortName((long) (-1), locale47);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(dateTimeZone38);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withField(dateTimeFieldType50, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology55 = localDateTime54.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.weekyears();
        org.joda.time.DurationField durationField57 = chronology55.centuries();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.minuteOfDay();
        long long62 = chronology55.add((long) 2, (long) 21, (int) '4');
        boolean boolean63 = dateTimeFieldType50.isSupported(chronology55);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str66 = dateTimeZone64.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now(dateTimeZone64);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.millisOfDay();
        int int69 = property68.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime70 = property68.withMaximumValue();
        int[] intArray72 = chronology55.get((org.joda.time.ReadablePartial) localDateTime70, 5498195040L);
        chronology15.validate((org.joda.time.ReadablePartial) localDateTime34, intArray72);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime34.withMillisOfDay(438);
        int int76 = localDateTime75.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 153L + "'", long22 == 153L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 21 + "'", int32 == 21);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 32L + "'", long42 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "UTC" + "'", str43, "UTC");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1094L + "'", long62 == 1094L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 86399999 + "'", int69 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1970, 3, 5, 54995040]");
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test05927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05927");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str3 = dateTimeZone1.getShortName((long) (short) 10);
        long long5 = dateTimeZone1.convertUTCToLocal((long) ' ');
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = dateTimeZone1.getName((long) (short) 0, locale7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(1645629356616L, dateTimeZone1);
        java.lang.String str10 = dateTimeZone1.toString();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.weekyears();
        org.joda.time.DurationField durationField16 = chronology14.centuries();
        org.joda.time.DurationField durationField17 = chronology14.minutes();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.monthOfYear();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withDurationAdded(readableDuration21, (int) '#');
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.weekyear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property27 = localDateTime23.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str30 = dateTimeZone28.getShortName((long) (short) 10);
        long long32 = dateTimeZone28.convertUTCToLocal((long) ' ');
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.lang.String str35 = dateTimeZone28.getName((long) (short) 0, locale34);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str38 = dateTimeZone36.getShortName((long) (short) 10);
        long long40 = dateTimeZone36.convertUTCToLocal((long) ' ');
        java.lang.String str41 = dateTimeZone36.toString();
        boolean boolean43 = dateTimeZone36.equals((java.lang.Object) (short) 100);
        java.util.Locale locale45 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str46 = dateTimeZone36.getShortName((long) (-1), locale45);
        java.lang.String str47 = locale34.getDisplayVariant(locale45);
        int int48 = property27.getMaximumShortTextLength(locale45);
        java.lang.String str49 = locale45.getLanguage();
        int int50 = dateTimeField19.getMaximumTextLength(locale45);
        java.lang.String str51 = dateTimeZone1.getShortName(23L, locale45);
        java.util.Set<java.lang.Character> charSet52 = locale45.getExtensionKeys();
        java.lang.String str53 = locale45.getVariant();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 32L + "'", long5 == 32L);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 32L + "'", long32 == 32L);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 32L + "'", long40 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "fr" + "'", str49, "fr");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertNotNull(charSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test05928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05928");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.seconds();
        org.joda.time.DurationField durationField5 = chronology2.seconds();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = chronology2.add(readablePeriod8, 197L, (int) 'a');
        org.joda.time.DateTimeField dateTimeField12 = chronology2.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str15 = dateTimeZone13.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusHours((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = localDateTime21.getFieldTypes();
        int int25 = localDateTime21.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str28 = dateTimeZone26.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.minuteOfHour();
        int int34 = property33.get();
        org.joda.time.LocalDateTime localDateTime36 = property33.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withYearOfCentury(0);
        int int40 = localDateTime39.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withSecondOfMinute(0);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime21.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.hours();
        java.lang.String str48 = chronology46.toString();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField50 = chronology46.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withDurationAdded(readableDuration52, (int) '#');
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.weekyear();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property58 = localDateTime54.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime59 = property58.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str62 = dateTimeZone60.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now(dateTimeZone60);
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.centuries();
        boolean boolean66 = localDateTime63.equals((java.lang.Object) durationFieldType65);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray67 = localDateTime63.getFieldTypes();
        java.lang.String str68 = localDateTime63.toString();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime63.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean72 = localDateTime63.isSupported(dateTimeFieldType71);
        int int73 = localDateTime59.indexOf(dateTimeFieldType71);
        int[] intArray75 = chronology46.get((org.joda.time.ReadablePartial) localDateTime59, 1645629358650L);
        int int76 = dateTimeField12.getMinimumValue((org.joda.time.ReadablePartial) localDateTime21, intArray75);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime21.withYear(19190617);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 197L + "'", long11 == 197L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 21 + "'", int34 == 21);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 25830596 + "'", int40 == 25830596);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ISOChronology[UTC]" + "'", str48, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray67);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2022-02-22T07:21:30.596" + "'", str68, "2022-02-22T07:21:30.596");
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[2022, 2, 23, 54958650]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(localDateTime78);
    }

    @Test
    public void test05929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05929");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds(9);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property5.getFieldType();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weekyears();
        org.joda.time.DurationField durationField11 = chronology9.seconds();
        org.joda.time.DurationField durationField12 = chronology9.seconds();
        org.joda.time.DurationField durationField13 = chronology9.seconds();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType6.getField(chronology9);
        org.joda.time.DateTimeField dateTimeField16 = chronology9.clockhourOfHalfday();
        org.joda.time.DurationField durationField17 = chronology9.years();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test05930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05930");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        int int7 = property4.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = property4.roundHalfEvenCopy();
        org.joda.time.DurationField durationField9 = property4.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime10 = property4.roundHalfEvenCopy();
        java.lang.String str11 = property4.getName();
        org.joda.time.LocalDateTime localDateTime13 = property4.addWrapFieldToCopy(26283608);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.weekyears();
        org.joda.time.DurationField durationField19 = chronology17.centuries();
        org.joda.time.DurationField durationField20 = chronology17.minutes();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology17);
        boolean boolean22 = dateTimeFieldType14.isSupported(chronology17);
        org.joda.time.DateTimeZone dateTimeZone23 = chronology17.getZone();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.weekyear();
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getScript();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        long long32 = dateTimeField30.roundFloor((long) (-1));
        java.util.Locale.Builder builder33 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder33.addUnicodeLocaleAttribute("und");
        java.util.Locale locale36 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale37 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str38 = locale36.getDisplayCountry(locale37);
        java.lang.String str39 = locale37.getDisplayName();
        java.util.Locale.Builder builder40 = builder35.setLocale(locale37);
        int int41 = dateTimeField30.getMaximumShortTextLength(locale37);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str44 = dateTimeZone42.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(dateTimeZone42);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.millisOfDay();
        org.joda.time.ReadableInstant readableInstant47 = null;
        long long48 = property46.getDifferenceAsLong(readableInstant47);
        org.joda.time.DurationField durationField49 = property46.getLeapDurationField();
        java.lang.String str50 = property46.getAsString();
        org.joda.time.LocalDateTime localDateTime51 = property46.roundFloorCopy();
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet54 = locale52.getUnicodeLocaleAttributes();
        java.lang.String str55 = dateTimeField30.getAsShortText((org.joda.time.ReadablePartial) localDateTime51, locale52);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology58 = localDateTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str62 = dateTimeZone60.getShortName((long) (short) 10);
        long long64 = dateTimeZone60.convertUTCToLocal((long) ' ');
        java.lang.String str65 = dateTimeZone60.toString();
        boolean boolean67 = dateTimeZone60.equals((java.lang.Object) (short) 100);
        java.util.Locale locale69 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str70 = dateTimeZone60.getShortName((long) (-1), locale69);
        int int71 = dateTimeField59.getMaximumShortTextLength(locale69);
        java.util.Locale locale73 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale74 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str75 = locale73.getDisplayCountry(locale74);
        java.util.Locale locale76 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale77 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str78 = locale76.getDisplayCountry(locale77);
        java.lang.String str79 = locale73.getDisplayVariant(locale76);
        java.util.Locale locale80 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale81 = locale80.stripExtensions();
        java.lang.String str82 = locale73.getDisplayLanguage(locale81);
        java.lang.String str83 = dateTimeField59.getAsText(0, locale81);
        int int84 = dateTimeField30.getMaximumShortTextLength(locale81);
        java.lang.String str85 = locale26.getDisplayLanguage(locale81);
        java.lang.String str86 = dateTimeField24.getAsText((int) (byte) 0, locale81);
        java.util.Set<java.lang.String> strSet87 = locale81.getUnicodeLocaleAttributes();
        java.lang.String str88 = locale81.getDisplayLanguage();
        int int89 = property4.getMaximumTextLength(locale81);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 86399999 + "'", int7 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "millisOfDay" + "'", str11, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-60000L) + "'", long32 == (-60000L));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Canada" + "'", str38, "Canada");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "fran\347ais (Canada)" + "'", str39, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNull(durationField49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "26490657" + "'", str50, "26490657");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strSet54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "441" + "'", str55, "441");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 32L + "'", long64 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "UTC" + "'", str65, "UTC");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00" + "'", str70, "+00:00");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Canada" + "'", str75, "Canada");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Canada" + "'", str78, "Canada");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "fran\347ais" + "'", str82, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "AM" + "'", str83, "AM");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 4 + "'", int84 == 4);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0" + "'", str86, "0");
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "fran\347ais" + "'", str88, "fran\347ais");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 8 + "'", int89 == 8);
    }

    @Test
    public void test05931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05931");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getShortName((long) (short) 10);
        long long13 = dateTimeZone9.convertUTCToLocal((long) ' ');
        java.lang.String str14 = dateTimeZone9.toString();
        java.lang.String str15 = dateTimeZone9.toString();
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale21 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str22 = locale20.getDisplayCountry(locale21);
        java.lang.String str23 = locale17.getDisplayVariant(locale20);
        java.util.Locale locale24 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale25 = locale24.stripExtensions();
        java.lang.String str26 = locale17.getDisplayLanguage(locale25);
        java.lang.String str27 = dateTimeZone9.getName((long) 67, locale25);
        int int28 = dateTimeField8.getMaximumTextLength(locale25);
        int int30 = dateTimeField8.getMaximumValue((long) 26180486);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.weekyears();
        org.joda.time.DurationField durationField35 = chronology33.centuries();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.minuteOfDay();
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(locale37);
        java.util.Locale locale39 = java.util.Locale.CANADA;
        boolean boolean40 = locale39.hasExtensions();
        java.lang.String str41 = locale37.getDisplayScript(locale39);
        int int42 = dateTimeField36.getMaximumTextLength(locale39);
        long long44 = dateTimeField36.roundHalfFloor((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withDurationAdded(readableDuration46, (int) '#');
        int int49 = localDateTime48.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withMinuteOfHour(2);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.withMinuteOfHour(2);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime48.plus(readableDuration54);
        int int56 = localDateTime48.getMinuteOfHour();
        int int57 = dateTimeField36.getMinimumValue((org.joda.time.ReadablePartial) localDateTime48);
        int int58 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localDateTime48);
        long long61 = dateTimeField8.addWrapField(1645629371856L, 1970);
        int int63 = dateTimeField8.getLeapAmount((-447892415999999992L));
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 32L + "'", long13 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Canada" + "'", str19, "Canada");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Canada" + "'", str22, "Canada");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fran\347ais" + "'", str26, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1439 + "'", int30 == 1439);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 21 + "'", int56 == 21);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1645574771856L + "'", long61 == 1645574771856L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test05932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05932");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = dateTimeZone0.getName((long) (short) 0, locale6);
        java.lang.String str9 = dateTimeZone0.getNameKey(180000L);
        int int11 = dateTimeZone0.getOffsetFromLocal((long) 30);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str14 = dateTimeZone12.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDateTime20.toDateTime(readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str25 = dateTimeZone23.getShortName((long) (short) 10);
        long long27 = dateTimeZone23.convertUTCToLocal((long) ' ');
        java.lang.String str28 = dateTimeZone23.toString();
        long long30 = dateTimeZone23.previousTransition(32L);
        long long33 = dateTimeZone23.convertLocalToUTC(97L, false);
        boolean boolean34 = dateTime22.equals((java.lang.Object) false);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str37 = dateTimeZone35.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.millisOfDay();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        long long46 = dateTime45.getMillis();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str49 = dateTimeZone47.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(dateTimeZone47);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = localDateTime50.getFieldType((int) (short) 0);
        boolean boolean53 = dateTime45.isSupported(dateTimeFieldType52);
        boolean boolean54 = dateTime22.isAfter((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeZone dateTimeZone55 = dateTime45.getZone();
        long long56 = dateTime45.getMillis();
        int int57 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime45);
        long long61 = dateTimeZone0.convertLocalToUTC((long) 805, true, 1645629490899L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 32L + "'", long27 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 32L + "'", long30 == 32L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 97L + "'", long33 == 97L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1645629690730L + "'", long46 == 1645629690730L);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1645629690730L + "'", long56 == 1645629690730L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 805L + "'", long61 == 805L);
    }

    @Test
    public void test05933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05933");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime3.getFieldTypes();
        java.lang.String str8 = localDateTime3.toString();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.plusMillis(22);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime3.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology13 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.years();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = durationField14.getMillis(1908343058912L, (-27L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1908343058912");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T07:21:30.759" + "'", str8, "2022-02-22T07:21:30.759");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test05934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05934");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str3 = dateTimeZone1.getShortName((long) (short) 10);
        long long5 = dateTimeZone1.convertUTCToLocal((long) ' ');
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = dateTimeZone1.getName((long) (short) 0, locale7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(1645629356616L, dateTimeZone1);
        java.lang.String str11 = dateTimeZone1.getShortName(180000L);
        int int13 = dateTimeZone1.getOffsetFromLocal(1645629638650L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 32L + "'", long5 == 32L);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test05935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05935");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plus(readablePeriod2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYearOfCentury(51);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusWeeks(0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        java.lang.String str15 = property14.getName();
        org.joda.time.LocalDateTime localDateTime16 = property14.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusHours(0);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str22 = dateTimeZone20.getShortName((long) (short) 10);
        long long24 = dateTimeZone20.convertUTCToLocal((long) ' ');
        java.lang.String str25 = dateTimeZone20.toString();
        boolean boolean27 = dateTimeZone20.equals((java.lang.Object) (short) 100);
        java.util.Locale locale29 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str30 = dateTimeZone20.getShortName((long) (-1), locale29);
        long long33 = dateTimeZone20.convertLocalToUTC((long) (short) 10, true);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 7, dateTimeZone20);
        org.joda.time.DateTime dateTime35 = localDateTime18.toDateTime(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str38 = dateTimeZone36.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfDay();
        java.lang.String str41 = property40.getName();
        org.joda.time.LocalDateTime localDateTime42 = property40.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean44 = localDateTime42.isSupported(dateTimeFieldType43);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str47 = dateTimeZone45.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(dateTimeZone45);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.centuries();
        boolean boolean51 = localDateTime48.equals((java.lang.Object) durationFieldType50);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = localDateTime48.getFieldTypes();
        java.lang.String str53 = localDateTime48.toString();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime48.plusMillis(22);
        boolean boolean56 = localDateTime42.isBefore((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.plus(readableDuration57);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.withDurationAdded(readableDuration59, 26169);
        org.joda.time.DateTime dateTime62 = localDateTime58.toDateTime();
        org.joda.time.DateTime dateTime63 = localDateTime18.toDateTime((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTimeZone dateTimeZone64 = dateTime63.getZone();
        org.joda.time.Instant instant65 = dateTime63.toInstant();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str68 = dateTimeZone66.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now(dateTimeZone66);
        org.joda.time.LocalDateTime.Property property70 = localDateTime69.millisOfDay();
        java.lang.String str71 = property70.getName();
        org.joda.time.LocalDateTime localDateTime72 = property70.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minusHours(0);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str78 = dateTimeZone76.getShortName((long) (short) 10);
        long long80 = dateTimeZone76.convertUTCToLocal((long) ' ');
        java.lang.String str81 = dateTimeZone76.toString();
        boolean boolean83 = dateTimeZone76.equals((java.lang.Object) (short) 100);
        java.util.Locale locale85 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str86 = dateTimeZone76.getShortName((long) (-1), locale85);
        long long89 = dateTimeZone76.convertLocalToUTC((long) (short) 10, true);
        org.joda.time.LocalDateTime localDateTime90 = new org.joda.time.LocalDateTime((long) 7, dateTimeZone76);
        org.joda.time.DateTime dateTime91 = localDateTime74.toDateTime(dateTimeZone76);
        boolean boolean92 = instant65.isBefore((org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.DateTime dateTime93 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime91);
        int int94 = localDateTime9.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "millisOfDay" + "'", str15, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 32L + "'", long24 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "millisOfDay" + "'", str41, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-22T07:21:30.777" + "'", str53, "2022-02-22T07:21:30.777");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00" + "'", str68, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "millisOfDay" + "'", str71, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+00:00" + "'", str78, "+00:00");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 32L + "'", long80 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "UTC" + "'", str81, "UTC");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+00:00" + "'", str86, "+00:00");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 10L + "'", long89 == 10L);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test05936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05936");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.millisOfSecond();
        org.joda.time.Chronology chronology10 = chronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        java.util.Locale.Category category14 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category14, locale15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType17.getField(chronology18);
        java.util.Locale locale21 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale22 = locale21.stripExtensions();
        java.lang.String str23 = dateTimeField19.getAsShortText(100, locale22);
        java.util.Locale.setDefault(category14, locale22);
        java.util.Locale locale25 = java.util.Locale.getDefault(category14);
        // The following exception was thrown during execution in test generation
        try {
            long long26 = dateTimeField11.set(1645629665793L, "26276629", locale25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26276629 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category14.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "100" + "'", str23, "100");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
    }

    @Test
    public void test05937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05937");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.minuteOfDay();
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale6.getDisplayScript(locale8);
        int int11 = dateTimeField5.getMaximumTextLength(locale8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str14 = dateTimeZone12.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.centuries();
        boolean boolean18 = localDateTime15.equals((java.lang.Object) durationFieldType17);
        int int19 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDateTime15);
        long long22 = dateTimeField5.addWrapField(153L, 100);
        org.joda.time.DurationField durationField23 = dateTimeField5.getLeapDurationField();
        org.joda.time.ReadablePartial readablePartial24 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.hours();
        java.lang.String str30 = chronology28.toString();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.era();
        org.joda.time.DurationField durationField33 = chronology28.hours();
        org.joda.time.DateTimeField dateTimeField34 = chronology28.clockhourOfDay();
        org.joda.time.DurationField durationField35 = chronology28.days();
        org.joda.time.DateTimeField dateTimeField36 = chronology28.dayOfWeek();
        java.util.Locale locale40 = new java.util.Locale("2", "26153291", "2022-02-22T07:16:32.655");
        int int41 = dateTimeField36.getMaximumTextLength(locale40);
        java.lang.String str42 = dateTimeField5.getAsText(readablePartial24, 26304059, locale40);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1439 + "'", int19 == 1439);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 6000153L + "'", long22 == 6000153L);
        org.junit.Assert.assertNull(durationField23);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ISOChronology[UTC]" + "'", str30, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals(locale40.toString(), "2_26153291_2022-02-22T07:16:32.655");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "26304059" + "'", str42, "26304059");
    }

    @Test
    public void test05938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05938");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        int int10 = property9.getMaximumValue();
        int int11 = property9.getMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str15 = dateTimeZone13.getShortName((long) (short) 10);
        long long17 = dateTimeZone13.convertUTCToLocal((long) ' ');
        java.lang.String str18 = dateTimeZone13.toString();
        boolean boolean20 = dateTimeZone13.equals((java.lang.Object) (short) 100);
        java.util.Locale locale22 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str23 = dateTimeZone13.getShortName((long) (-1), locale22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone13);
        java.lang.String str26 = dateTimeZone13.getName((long) 26149);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str29 = dateTimeZone27.getShortName((long) (short) 10);
        long long31 = dateTimeZone27.convertUTCToLocal((long) ' ');
        java.lang.String str32 = dateTimeZone27.toString();
        long long34 = dateTimeZone27.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone27);
        long long37 = dateTimeZone13.getMillisKeepLocal(dateTimeZone27, 0L);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone27);
        java.lang.String str39 = dateTimeZone27.toString();
        boolean boolean40 = property9.equals((java.lang.Object) dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str43 = dateTimeZone41.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(dateTimeZone41);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.plusMonths(16);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.year();
        int int49 = property48.getMaximumValue();
        org.joda.time.tz.NameProvider nameProvider50 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Category category51 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category51, locale52);
        java.lang.String str54 = locale52.toLanguageTag();
        java.lang.String str55 = locale52.getLanguage();
        java.lang.String str58 = nameProvider50.getShortName(locale52, "days", "26149261");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider50);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider50);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider50);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider50);
        java.util.Locale locale66 = new java.util.Locale("Etc/UTC", "26151809", "26169002");
        java.lang.String str69 = nameProvider50.getName(locale66, "2022-02-22T07:16:53.570", "26162741");
        int int70 = property48.getMaximumTextLength(locale66);
        int int71 = property9.getMaximumTextLength(locale66);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 86399999 + "'", int10 == 86399999);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 32L + "'", long17 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 32L + "'", long31 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 32L + "'", long34 == 32L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 292278993 + "'", int49 == 292278993);
        org.junit.Assert.assertNotNull(nameProvider50);
        org.junit.Assert.assertTrue("'" + category51 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category51.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "fr" + "'", str54, "fr");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "fr" + "'", str55, "fr");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals(locale66.toString(), "etc/utc_26151809_26169002");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 8 + "'", int71 == 8);
    }

    @Test
    public void test05939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05939");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMonths(2022);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withMillisOfDay(1439);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.monthOfYear();
        boolean boolean14 = property13.isLeap();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test05940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05940");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.hours();
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.minuteOfHour();
        boolean boolean7 = dateTimeField6.isSupported();
        int int10 = dateTimeField6.getDifference((-1640157684L), 1645629617235L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-27454496) + "'", int10 == (-27454496));
    }

    @Test
    public void test05941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05941");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DurationField durationField8 = chronology3.months();
        org.joda.time.DurationField durationField9 = chronology3.halfdays();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        long long14 = dateTimeZone10.convertUTCToLocal((long) ' ');
        java.lang.String str15 = dateTimeZone10.toString();
        boolean boolean17 = dateTimeZone10.equals((java.lang.Object) (short) 100);
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str20 = dateTimeZone10.getShortName((long) (-1), locale19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withField(dateTimeFieldType22, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.weekyears();
        org.joda.time.DurationField durationField29 = chronology27.centuries();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.minuteOfDay();
        long long34 = chronology27.add((long) 2, (long) 21, (int) '4');
        boolean boolean35 = dateTimeFieldType22.isSupported(chronology27);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str38 = dateTimeZone36.getShortName((long) (short) 10);
        long long40 = dateTimeZone36.convertUTCToLocal((long) ' ');
        java.lang.String str41 = dateTimeZone36.toString();
        long long43 = dateTimeZone36.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(dateTimeZone36);
        org.joda.time.Chronology chronology45 = chronology27.withZone(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.Chronology chronology48 = chronology27.withZone(dateTimeZone47);
        org.joda.time.Chronology chronology49 = chronology3.withZone(dateTimeZone47);
        org.joda.time.DurationField durationField50 = chronology3.hours();
        org.joda.time.Chronology chronology51 = chronology3.withUTC();
        org.joda.time.DurationField durationField52 = chronology3.hours();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 32L + "'", long14 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1094L + "'", long34 == 1094L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 32L + "'", long40 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 32L + "'", long43 == 32L);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
    }

    @Test
    public void test05942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05942");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str5 = dateTimeZone3.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone3);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(readableInstant12);
        int int14 = dateTimeZone1.getOffset(readableInstant12);
        java.util.TimeZone timeZone15 = dateTimeZone1.toTimeZone();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plus(readablePeriod17);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+32:00" + "'", str2, "+32:00");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 115200000 + "'", int14 == 115200000);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test05943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05943");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        org.joda.time.DurationField durationField6 = chronology4.centuries();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology4);
        org.joda.time.DurationField durationField8 = chronology4.millis();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (-997), chronology4);
        org.joda.time.DurationField durationField12 = chronology4.days();
        org.joda.time.DateTimeField dateTimeField13 = chronology4.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = chronology4.weekyearOfCentury();
        int int16 = dateTimeField14.get(1645629501608L);
        int int18 = dateTimeField14.getLeapAmount(1645632667471L);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test05944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05944");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = null; // flaky: org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str4 = timeZone0.getID();
        timeZone0.setRawOffset(20);
        java.util.TimeZone.setDefault(timeZone0);
        timeZone0.setRawOffset((int) (byte) 0);
        java.time.ZoneId zoneId10 = null; // flaky: timeZone0.toZoneId();
        java.lang.String str11 = timeZone0.getID();
        java.util.Locale locale12 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale13 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.lang.String str15 = locale13.getDisplayName();
        java.lang.String str16 = locale13.getVariant();
        java.lang.String str17 = locale13.toLanguageTag();
        java.lang.String str18 = timeZone0.getDisplayName(locale13);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
// flaky:         org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
// flaky:         org.junit.Assert.assertNotNull(zoneId10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Canada" + "'", str14, "Canada");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "fran\347ais (Canada)" + "'", str15, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "fr-CA" + "'", str17, "fr-CA");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Temps universel coordonn\351" + "'", str18, "Temps universel coordonn\351");
    }

    @Test
    public void test05945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05945");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        java.lang.String str1 = localDateTime0.toString();
        int int2 = localDateTime0.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusMonths(2);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str8 = dateTimeZone6.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime(readableInstant15);
        long long17 = dateTime16.getMillis();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str20 = dateTimeZone18.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = localDateTime21.getFieldType((int) (short) 0);
        boolean boolean24 = dateTime16.isSupported(dateTimeFieldType23);
        org.joda.time.DateTime dateTime25 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str28 = dateTimeZone26.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(readableInstant35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str39 = dateTimeZone37.getShortName((long) (short) 10);
        long long41 = dateTimeZone37.convertUTCToLocal((long) ' ');
        java.lang.String str42 = dateTimeZone37.toString();
        long long44 = dateTimeZone37.previousTransition(32L);
        long long47 = dateTimeZone37.convertLocalToUTC(97L, false);
        boolean boolean48 = dateTime36.equals((java.lang.Object) false);
        boolean boolean49 = dateTime25.isEqual((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Instant instant50 = dateTime25.toInstant();
        org.joda.time.DateTimeZone dateTimeZone51 = instant50.getZone();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str54 = dateTimeZone52.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now(dateTimeZone52);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.millisOfDay();
        long long57 = property56.remainder();
        org.joda.time.LocalDateTime localDateTime58 = property56.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property56.getFieldType();
        org.joda.time.DurationFieldType durationFieldType60 = dateTimeFieldType59.getRangeDurationType();
        boolean boolean61 = instant50.isSupported(dateTimeFieldType59);
        org.joda.time.Instant instant62 = instant50.toInstant();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-22T07:21:31.097" + "'", str1, "2022-02-22T07:21:31.097");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 20 + "'", int2 == 20);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645629691097L + "'", long17 == 1645629691097L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 32L + "'", long41 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 32L + "'", long44 == 32L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 97L + "'", long47 == 97L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(instant62);
    }

    @Test
    public void test05946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05946");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("26231608");
        org.joda.time.tz.NameProvider nameProvider2 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider2);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.hours();
        java.lang.String str8 = chronology6.toString();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.clockhourOfDay();
        int int11 = dateTimeField9.get(1645629354990L);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str14 = dateTimeZone12.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.centuries();
        boolean boolean18 = localDateTime15.equals((java.lang.Object) durationFieldType17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime15.getFieldTypes();
        java.lang.String str20 = localDateTime15.toString();
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str22 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime15, locale21);
        java.lang.String str23 = locale21.getDisplayVariant();
        java.lang.String str24 = locale21.getDisplayVariant();
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("117");
        java.lang.String str27 = locale26.getVariant();
        java.lang.String str28 = locale21.getDisplayLanguage(locale26);
        java.lang.String str31 = nameProvider2.getName(locale26, "26318806", "2022-02-22T07:18:23.347");
        java.lang.String str32 = locale1.getDisplayLanguage(locale26);
        java.lang.String str33 = locale1.getScript();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(nameProvider2);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[UTC]" + "'", str8, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 15 + "'", int11 == 15);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T07:21:31.121" + "'", str20, "2022-02-22T07:21:31.121");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "7" + "'", str22, "7");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Chinese" + "'", str28, "Chinese");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test05947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05947");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.DurationField durationField6 = chronology3.hours();
        boolean boolean7 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.hours();
        org.joda.time.DurationField durationField13 = durationFieldType8.getField(chronology11);
        org.joda.time.Chronology chronology14 = chronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.weekOfWeekyear();
        boolean boolean17 = durationFieldType0.isSupported(chronology11);
        org.joda.time.DurationField durationField18 = chronology11.minutes();
        org.joda.time.DateTimeField dateTimeField19 = chronology11.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test05948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05948");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        java.lang.String str14 = localDateTime13.toString();
        boolean boolean15 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        int int16 = localDateTime13.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.weekyears();
        org.joda.time.DurationField durationField22 = chronology20.centuries();
        org.joda.time.DurationField durationField23 = chronology20.hours();
        boolean boolean24 = dateTimeFieldType17.isSupported(chronology20);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.withField(dateTimeFieldType17, (int) 'x');
        org.joda.time.LocalDateTime localDateTime28 = localDateTime13.withMillisOfDay(52477744);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date29 = localDateTime13.toDate();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -775 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0100-02-22T07:21:31.225" + "'", str14, "0100-02-22T07:21:31.225");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test05949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05949");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime3.getFieldTypes();
        java.lang.String str8 = localDateTime3.toString();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.plusMillis(22);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYear(26198);
        int int13 = localDateTime10.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T07:21:31.241" + "'", str8, "2022-02-22T07:21:31.241");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
    }

    @Test
    public void test05950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05950");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = dateTimeField2.getAsShortText(100, locale5);
        int int8 = dateTimeField2.getLeapAmount((long) (short) 100);
        java.lang.String str9 = dateTimeField2.getName();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale10);
        int int12 = dateTimeField2.getMaximumTextLength(locale10);
        long long15 = dateTimeField2.add(1645629370103L, 26181236);
        org.joda.time.DurationField durationField16 = dateTimeField2.getDurationField();
        long long19 = durationField16.add((long) 9, 1645629633942L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "100" + "'", str6, "100");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "minuteOfDay" + "'", str9, "minuteOfDay");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3216503530103L + "'", long15 == 3216503530103L);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 98737778036520009L + "'", long19 == 98737778036520009L);
    }

    @Test
    public void test05951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05951");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.seconds();
        org.joda.time.DurationField durationField6 = chronology3.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType0.getField(chronology3);
        java.util.Locale locale10 = null;
        long long11 = dateTimeField7.set((long) 26151696, "26157599", locale10);
        long long13 = dateTimeField7.remainder(0L);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = dateTimeField7.set((long) 181, "2022-02-22T07:20:09.598");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:20:09.598\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 825391928906151696L + "'", long11 == 825391928906151696L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test05952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05952");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType11 = localDateTime8.getFieldType(26239424);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26239424");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test05953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05953");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.hours();
        org.joda.time.DurationField durationField4 = chronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.dayOfWeek();
        org.joda.time.DurationField durationField7 = chronology2.centuries();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = chronology2.getDateTimeMillis(1645620000L, 26224, 25842433, (-52), 55217610);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26224 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test05954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05954");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category0, locale1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str5 = dateTimeZone3.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone3);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        java.lang.String str8 = property7.getName();
        int int9 = property7.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withDurationAdded(readableDuration11, (int) '#');
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.weekyear();
        int int15 = property14.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField16 = property14.getField();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str19 = dateTimeZone17.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusHours((int) (short) 10);
        int int28 = dateTimeField16.getMinimumValue((org.joda.time.ReadablePartial) localDateTime27);
        java.lang.String str30 = dateTimeField16.getAsText((long) (-292275054));
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str33 = dateTimeZone31.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.millisOfDay();
        org.joda.time.ReadableInstant readableInstant36 = null;
        long long37 = property35.getDifferenceAsLong(readableInstant36);
        java.util.Locale locale38 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str39 = locale38.getISO3Language();
        java.lang.String str40 = property35.getAsShortText(locale38);
        int int41 = dateTimeField16.getMaximumShortTextLength(locale38);
        long long43 = dateTimeField16.roundHalfFloor(0L);
        java.util.Locale locale45 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale46 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str47 = locale45.getDisplayCountry(locale46);
        java.lang.String str48 = locale46.getDisplayName();
        java.lang.String str49 = dateTimeField16.getAsText(19, locale46);
        int int50 = property7.getMaximumTextLength(locale46);
        java.util.Locale locale51 = locale46.stripExtensions();
        java.lang.String str52 = locale1.getDisplayVariant(locale51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = locale1.getUnicodeLocaleType("2021-12-22T07:18:33.864");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2021-12-22T07:18:33.864");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "millisOfDay" + "'", str8, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 86399999 + "'", int9 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-292275054) + "'", int28 == (-292275054));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1969" + "'", str30, "1969");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "fra" + "'", str39, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "26491340" + "'", str40, "26491340");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-259200000L) + "'", long43 == (-259200000L));
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Canada" + "'", str47, "Canada");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "fran\347ais (Canada)" + "'", str48, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "19" + "'", str49, "19");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
    }

    @Test
    public void test05955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05955");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.LocalDateTime localDateTime7 = property4.setCopy(67);
        org.joda.time.LocalDateTime localDateTime8 = property4.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYearOfCentury((int) '4');
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusSeconds(309);
        int int13 = localDateTime8.getEra();
        org.joda.time.Chronology chronology14 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra(0);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test05956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05956");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("26228505");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '26228505' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05957");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime8.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minusMillis(0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withDayOfYear(32);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str18 = dateTimeZone16.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.ReadableInstant readableInstant21 = null;
        long long22 = property20.getDifferenceAsLong(readableInstant21);
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str24 = locale23.getISO3Language();
        java.lang.String str25 = property20.getAsShortText(locale23);
        org.joda.time.DurationField durationField26 = property20.getDurationField();
        long long29 = durationField26.add((long) 1, 10);
        boolean boolean30 = durationField26.isPrecise();
        boolean boolean31 = localDateTime13.equals((java.lang.Object) boolean30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime13.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withDurationAdded(readableDuration34, (int) '#');
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.weekyear();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property40 = localDateTime36.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime41 = property40.roundHalfFloorCopy();
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.lang.String str44 = localDateTime41.toString("26156413", locale43);
        java.util.Locale locale45 = java.util.Locale.CHINA;
        java.lang.String str46 = locale43.getDisplayScript(locale45);
        java.lang.String str47 = locale43.toLanguageTag();
        java.lang.String str48 = property32.getAsShortText(locale43);
        org.joda.time.LocalDateTime localDateTime49 = property32.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fra" + "'", str24, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "26491380" + "'", str25, "26491380");
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 11L + "'", long29 == 11L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "26156413" + "'", str44, "26156413");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "fr-FR" + "'", str47, "fr-FR");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "23" + "'", str48, "23");
        org.junit.Assert.assertNotNull(localDateTime49);
    }

    @Test
    public void test05958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05958");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        boolean boolean5 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        java.lang.String str7 = localDateTime6.toString();
        int int8 = localDateTime6.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.minusMonths(2);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str14 = dateTimeZone12.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDateTime20.toDateTime(readableInstant21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str26 = dateTimeZone24.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = localDateTime27.getFieldType((int) (short) 0);
        boolean boolean30 = dateTime22.isSupported(dateTimeFieldType29);
        org.joda.time.DateTime dateTime31 = localDateTime10.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        int[] intArray33 = chronology3.get((org.joda.time.ReadablePartial) localDateTime10, 11L);
        org.joda.time.DateTimeField dateTimeField34 = chronology3.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str37 = dateTimeZone35.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.millisOfDay();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.minuteOfHour();
        java.util.Locale locale44 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale45 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str46 = locale44.getDisplayCountry(locale45);
        java.util.Locale locale47 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale48 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str49 = locale47.getDisplayCountry(locale48);
        java.lang.String str50 = locale44.getDisplayVariant(locale47);
        java.lang.String str51 = dateTimeField34.getAsText((org.joda.time.ReadablePartial) localDateTime41, 1, locale47);
        int int52 = dateTimeField34.getMinimumValue();
        int int55 = dateTimeField34.getDifference((-215964000000L), 1645629471698L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T07:21:31.425" + "'", str7, "2022-02-22T07:21:31.425");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20 + "'", int8 == 20);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645629691425L + "'", long23 == 1645629691425L);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Canada" + "'", str46, "Canada");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Canada" + "'", str49, "Canada");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1" + "'", str51, "1");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test05959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05959");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("und");
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale4.getDisplayName();
        java.util.Locale.Builder builder7 = builder2.setLocale(locale4);
        java.util.Locale locale8 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale12 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str13 = locale11.getDisplayCountry(locale12);
        java.lang.String str14 = locale8.getDisplayVariant(locale11);
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale16 = locale15.stripExtensions();
        java.lang.String str17 = locale8.getDisplayLanguage(locale16);
        java.util.Locale.Builder builder18 = builder2.setLocale(locale16);
        java.util.Locale locale19 = builder2.build();
        java.util.Locale.Builder builder20 = builder2.clear();
        java.util.Locale.Builder builder21 = builder2.clear();
        java.util.Locale locale22 = builder21.build();
        java.util.Locale.Builder builder24 = builder21.removeUnicodeLocaleAttribute("26382477");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder27 = builder24.setUnicodeLocaleKeyword("26203430", "2022-02-22T07:20:07.768");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 26203430 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Canada" + "'", str5, "Canada");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fran\347ais (Canada)" + "'", str6, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Canada" + "'", str10, "Canada");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Canada" + "'", str13, "Canada");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "fran\347ais" + "'", str17, "fran\347ais");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test05960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05960");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        boolean boolean5 = dateTimeZone0.equals((java.lang.Object) "2022-02-22T07:16:14.450");
        java.lang.String str6 = dateTimeZone0.getID();
        int int8 = dateTimeZone0.getOffsetFromLocal(1645629517479L);
        java.util.TimeZone timeZone9 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = dateTimeField12.getAsShortText(100, locale15);
        int int18 = dateTimeField12.getLeapAmount((long) (short) 100);
        org.joda.time.DurationField durationField19 = dateTimeField12.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.weekyears();
        org.joda.time.DurationField durationField26 = chronology24.centuries();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology24);
        org.joda.time.DurationField durationField28 = chronology24.millis();
        org.joda.time.DateTimeField dateTimeField29 = chronology24.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology24.halfdayOfDay();
        java.util.Locale.Category category32 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category32, locale33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType35.getField(chronology36);
        java.util.Locale locale39 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale40 = locale39.stripExtensions();
        java.lang.String str41 = dateTimeField37.getAsShortText(100, locale40);
        java.util.Locale.setDefault(category32, locale40);
        org.joda.time.tz.NameProvider nameProvider43 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale44 = java.util.Locale.CANADA;
        java.lang.String str47 = nameProvider43.getShortName(locale44, "fran\347ais", "2022-02-22T07:15:48.066");
        java.util.Locale.setDefault(category32, locale44);
        java.lang.String str49 = dateTimeField30.getAsShortText((long) 5, locale44);
        java.lang.String str50 = dateTimeField12.getAsText(1645629369L, locale44);
        java.lang.String str51 = locale44.getLanguage();
        java.util.Locale.Category category52 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale53 = java.util.Locale.getDefault();
        java.lang.String str54 = locale53.getISO3Language();
        java.util.Locale.setDefault(category52, locale53);
        java.util.Locale locale56 = java.util.Locale.getDefault(category52);
        java.util.Locale locale57 = java.util.Locale.getDefault(category52);
        java.lang.String str58 = locale57.getISO3Country();
        java.lang.String str59 = locale57.getDisplayName();
        java.lang.String str60 = locale57.getISO3Language();
        java.lang.String str61 = locale44.getDisplayVariant(locale57);
        java.lang.String str62 = timeZone9.getDisplayName(locale57);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "100" + "'", str16, "100");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category32.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "100" + "'", str41, "100");
        org.junit.Assert.assertNotNull(nameProvider43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "AM" + "'", str49, "AM");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "67" + "'", str50, "67");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "en" + "'", str51, "en");
        org.junit.Assert.assertTrue("'" + category52 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category52.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Coordinated Universal Time" + "'", str62, "Coordinated Universal Time");
    }

    @Test
    public void test05961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05961");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.secondOfMinute();
        boolean boolean14 = property13.isLeap();
        org.joda.time.LocalDateTime localDateTime15 = property13.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.halfdayOfDay();
        org.joda.time.DurationField durationField20 = dateTimeField19.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withDurationAdded(readableDuration22, (int) '#');
        int int25 = localDateTime24.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withMinuteOfHour(2);
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.lang.String str29 = dateTimeField19.getAsText((org.joda.time.ReadablePartial) localDateTime27, locale28);
        int int30 = property13.getMaximumShortTextLength(locale28);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str33 = dateTimeZone31.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.centuries();
        boolean boolean37 = localDateTime34.equals((java.lang.Object) durationFieldType36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.withWeekOfWeekyear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.Locale locale46 = new java.util.Locale("fra", "fran\347ais (Canada)");
        java.lang.String str47 = dateTimeZone42.getShortName((long) 26198, locale46);
        java.lang.String str48 = localDateTime39.toString("26156413", locale46);
        java.lang.String str49 = locale28.getDisplayCountry(locale46);
        java.lang.String str50 = locale28.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "AM" + "'", str29, "AM");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals(locale46.toString(), "fra_FRAN\347AIS (CANADA)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.052" + "'", str47, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "26156413" + "'", str48, "26156413");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Canada" + "'", str49, "Canada");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "en_CA" + "'", str50, "en_CA");
    }

    @Test
    public void test05962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05962");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("hours");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        java.lang.String str6 = languageRange1.getRange();
        double double7 = languageRange1.getWeight();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.weekyears();
        org.joda.time.DurationField durationField12 = chronology10.seconds();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.millisOfDay();
        org.joda.time.DurationField durationField14 = chronology10.hours();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.hourOfHalfday();
        org.joda.time.DurationField durationField16 = chronology10.halfdays();
        boolean boolean17 = languageRange1.equals((java.lang.Object) chronology10);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hours" + "'", str2, "hours");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hours" + "'", str5, "hours");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hours" + "'", str6, "hours");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test05963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05963");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDateTime8.toDateTime(readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        long long15 = dateTimeZone11.convertUTCToLocal((long) ' ');
        java.lang.String str16 = dateTimeZone11.toString();
        long long18 = dateTimeZone11.previousTransition(32L);
        long long21 = dateTimeZone11.convertLocalToUTC(97L, false);
        boolean boolean22 = dateTime10.equals((java.lang.Object) false);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str25 = dateTimeZone23.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime(readableInstant32);
        long long34 = dateTime33.getMillis();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str37 = dateTimeZone35.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = localDateTime38.getFieldType((int) (short) 0);
        boolean boolean41 = dateTime33.isSupported(dateTimeFieldType40);
        boolean boolean42 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean44 = dateTime33.isSupported(dateTimeFieldType43);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str47 = dateTimeZone45.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(dateTimeZone45);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.millisOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime(readableInstant54);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str58 = dateTimeZone56.getShortName((long) (short) 10);
        long long60 = dateTimeZone56.convertUTCToLocal((long) ' ');
        java.lang.String str61 = dateTimeZone56.toString();
        long long63 = dateTimeZone56.previousTransition(32L);
        long long66 = dateTimeZone56.convertLocalToUTC(97L, false);
        boolean boolean67 = dateTime55.equals((java.lang.Object) false);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str70 = dateTimeZone68.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now(dateTimeZone68);
        org.joda.time.LocalDateTime.Property property72 = localDateTime71.millisOfDay();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime71.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = localDateTime76.toDateTime(readableInstant77);
        long long79 = dateTime78.getMillis();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str82 = dateTimeZone80.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime83 = org.joda.time.LocalDateTime.now(dateTimeZone80);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = localDateTime83.getFieldType((int) (short) 0);
        boolean boolean86 = dateTime78.isSupported(dateTimeFieldType85);
        boolean boolean87 = dateTime55.isAfter((org.joda.time.ReadableInstant) dateTime78);
        java.lang.String str88 = dateTime55.toString();
        boolean boolean89 = dateTime33.isBefore((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Chronology chronology90 = dateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField91 = chronology90.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField92 = chronology90.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray95 = chronology90.get(readablePeriod93, (-127L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 32L + "'", long15 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 97L + "'", long21 == 97L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645629691561L + "'", long34 == 1645629691561L);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 32L + "'", long60 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "UTC" + "'", str61, "UTC");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 32L + "'", long63 == 32L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 97L + "'", long66 == 97L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00" + "'", str70, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
// flaky:         org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1645629691561L + "'", long79 == 1645629691561L);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+00:00" + "'", str82, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "2022-02-23T15:21:31.561Z" + "'", str88, "2022-02-23T15:21:31.561Z");
// flaky:         org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
    }

    @Test
    public void test05964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05964");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        int int7 = property4.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = property4.roundHalfEvenCopy();
        org.joda.time.DurationField durationField9 = property4.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime10 = property4.roundHalfEvenCopy();
        int int11 = localDateTime10.getYearOfCentury();
        int int12 = localDateTime10.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 86399999 + "'", int7 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
    }

    @Test
    public void test05965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05965");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.millisOfDay();
        org.joda.time.DurationField durationField7 = chronology2.hours();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology2.getZone();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.weekyears();
        org.joda.time.DurationField durationField14 = chronology12.centuries();
        org.joda.time.DurationField durationField15 = chronology12.minutes();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str19 = dateTimeZone17.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusMonths(2022);
        int int27 = localDateTime23.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean29 = localDateTime23.equals((java.lang.Object) dateTimeFieldType28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime23.plusHours(26163523);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime23.withDayOfMonth((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusYears((int) 'x');
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.minusMillis(26224);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.year();
        org.joda.time.LocalDateTime localDateTime40 = property39.getLocalDateTime();
        int[] intArray42 = chronology2.get((org.joda.time.ReadablePartial) localDateTime40, (long) 52291);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 22 + "'", int27 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1970, 1, 1, 52291]");
    }

    @Test
    public void test05966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05966");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(26388563, 11, 54976760, 72, 93, 55105541);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 72 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05967");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DateTimeField dateTimeField7 = chronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.clockhourOfHalfday();
        long long12 = chronology3.add((long) 1970, (-4838399947L), 292278993);
        org.joda.time.DateTimeField dateTimeField13 = chronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology3.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        java.lang.String str16 = localDateTime15.toString();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.yearOfEra();
        java.lang.String str20 = property19.getAsText();
        org.joda.time.LocalDateTime localDateTime21 = property19.withMinimumValue();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.year();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.minusSeconds(55000019);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        java.util.Locale locale30 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale31 = locale30.stripExtensions();
        java.lang.String str32 = dateTimeField28.getAsShortText(100, locale31);
        int int34 = dateTimeField28.getLeapAmount((long) (short) 100);
        java.lang.String str35 = dateTimeField28.getName();
        long long38 = dateTimeField28.add((long) (short) 1, 0);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str41 = dateTimeZone39.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(dateTimeZone39);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.millisOfDay();
        org.joda.time.ReadableInstant readableInstant44 = null;
        long long45 = property43.getDifferenceAsLong(readableInstant44);
        org.joda.time.DurationField durationField46 = property43.getLeapDurationField();
        java.lang.String str47 = property43.getAsString();
        org.joda.time.LocalDateTime localDateTime48 = property43.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.weekyears();
        boolean boolean55 = dateTimeFieldType50.isSupported(chronology53);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        java.lang.String str57 = localDateTime56.toString();
        int int58 = localDateTime56.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.minusMonths(2);
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str64 = dateTimeZone62.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now(dateTimeZone62);
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.millisOfDay();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime65.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = localDateTime70.toDateTime(readableInstant71);
        long long73 = dateTime72.getMillis();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str76 = dateTimeZone74.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime77 = org.joda.time.LocalDateTime.now(dateTimeZone74);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = localDateTime77.getFieldType((int) (short) 0);
        boolean boolean80 = dateTime72.isSupported(dateTimeFieldType79);
        org.joda.time.DateTime dateTime81 = localDateTime60.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        int[] intArray83 = chronology53.get((org.joda.time.ReadablePartial) localDateTime60, 11L);
        int[] intArray85 = dateTimeField28.add((org.joda.time.ReadablePartial) localDateTime48, (int) (short) 10, intArray83, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray87 = dateTimeField14.add((org.joda.time.ReadablePartial) localDateTime21, 261792, intArray83, 81254740);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 261792");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1414162664240411401L) + "'", long12 == (-1414162664240411401L));
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T07:21:31.638" + "'", str16, "2022-02-22T07:21:31.638");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022" + "'", str20, "2022");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "100" + "'", str32, "100");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "minuteOfDay" + "'", str35, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNull(durationField46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "26491638" + "'", str47, "26491638");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-22T07:21:31.638" + "'", str57, "2022-02-22T07:21:31.638");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 20 + "'", int58 == 20);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1645629691638L + "'", long73 == 1645629691638L);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00" + "'", str76, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1970, 1, 1, 11]");
    }

    @Test
    public void test05968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05968");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMonths(2022);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusDays(0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.dayOfMonth();
        int int13 = localDateTime9.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 21 + "'", int13 == 21);
    }

    @Test
    public void test05969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05969");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.hours();
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, (int) '#');
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str18 = dateTimeZone16.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.centuries();
        boolean boolean22 = localDateTime19.equals((java.lang.Object) durationFieldType21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime19.getFieldTypes();
        java.lang.String str24 = localDateTime19.toString();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean28 = localDateTime19.isSupported(dateTimeFieldType27);
        int int29 = localDateTime15.indexOf(dateTimeFieldType27);
        int[] intArray31 = chronology2.get((org.joda.time.ReadablePartial) localDateTime15, 1645629358650L);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime15.plusWeeks(26149500);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        java.lang.String str36 = localDateTime35.toString();
        int int37 = localDateTime35.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.minusMonths(2);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str43 = dateTimeZone41.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(dateTimeZone41);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.millisOfDay();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime44.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = localDateTime49.toDateTime(readableInstant50);
        long long52 = dateTime51.getMillis();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str55 = dateTimeZone53.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(dateTimeZone53);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = localDateTime56.getFieldType((int) (short) 0);
        boolean boolean59 = dateTime51.isSupported(dateTimeFieldType58);
        org.joda.time.DateTime dateTime60 = localDateTime39.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.LocalDateTime.Property property61 = localDateTime39.dayOfMonth();
        int int62 = property61.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        java.lang.String str64 = localDateTime63.toString();
        int int65 = localDateTime63.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.minusMonths(2);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str71 = dateTimeZone69.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime72 = org.joda.time.LocalDateTime.now(dateTimeZone69);
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.millisOfDay();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime72.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.DateTime dateTime79 = localDateTime77.toDateTime(readableInstant78);
        long long80 = dateTime79.getMillis();
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str83 = dateTimeZone81.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime84 = org.joda.time.LocalDateTime.now(dateTimeZone81);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = localDateTime84.getFieldType((int) (short) 0);
        boolean boolean87 = dateTime79.isSupported(dateTimeFieldType86);
        org.joda.time.DateTime dateTime88 = localDateTime67.toDateTime((org.joda.time.ReadableInstant) dateTime79);
        long long89 = property61.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.DateTime dateTime90 = localDateTime33.toDateTime((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.DateTimeField[] dateTimeFieldArray91 = localDateTime33.getFields();
        org.joda.time.ReadablePeriod readablePeriod92 = null;
        org.joda.time.LocalDateTime localDateTime94 = localDateTime33.withPeriodAdded(readablePeriod92, 430);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T07:21:31.702" + "'", str24, "2022-02-22T07:21:31.702");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2022, 2, 23, 54958650]");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-22T07:21:31.702" + "'", str36, "2022-02-22T07:21:31.702");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 20 + "'", int37 == 20);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1645629691702L + "'", long52 == 1645629691702L);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022-02-22T07:21:31.702" + "'", str64, "2022-02-22T07:21:31.702");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 20 + "'", int65 == 20);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
// flaky:         org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1645629691702L + "'", long80 == 1645629691702L);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+00:00" + "'", str83, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTimeFieldArray91);
        org.junit.Assert.assertNotNull(localDateTime94);
    }

    @Test
    public void test05970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05970");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        int int5 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekOfWeekyear((int) (byte) 1);
        int int8 = localDateTime0.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.plusDays(500);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        java.lang.String str12 = durationFieldType11.toString();
        boolean boolean13 = localDateTime10.isSupported(durationFieldType11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.weekyears();
        boolean boolean19 = dateTimeFieldType14.isSupported(chronology17);
        org.joda.time.DurationField durationField20 = durationFieldType11.getField(chronology17);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = chronology17.add(readablePeriod21, (long) 27427155, (int) (byte) 0);
        org.joda.time.DurationField durationField25 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.dayOfYear();
        java.lang.String str28 = chronology17.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 7 + "'", int8 == 7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "days" + "'", str12, "days");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 27427155L + "'", long24 == 27427155L);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ISOChronology[UTC]" + "'", str28, "ISOChronology[UTC]");
    }

    @Test
    public void test05971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05971");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        int int5 = property4.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusHours((int) (short) 10);
        int int18 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDateTime17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType20 = localDateTime17.getFieldType(26483059);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26483059");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 292278993 + "'", int5 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-292275054) + "'", int18 == (-292275054));
    }

    @Test
    public void test05972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05972");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        int int5 = property4.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusHours((int) (short) 10);
        int int18 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.halfdayOfDay();
        org.joda.time.DurationField durationField23 = dateTimeField22.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str26 = dateTimeZone24.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        java.lang.String str29 = property28.getName();
        org.joda.time.LocalDateTime localDateTime30 = property28.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusYears((int) (short) -1);
        int[] intArray40 = new int[] { 'a', (-1), 10, 26151696, 4, (byte) 1 };
        int[] intArray42 = dateTimeField22.set((org.joda.time.ReadablePartial) localDateTime30, 0, intArray40, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str45 = dateTimeZone43.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.millisOfDay();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusHours((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = localDateTime51.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime51.withMillisOfDay((int) '4');
        boolean boolean57 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime51.minusMinutes(2922789);
        java.util.Date date60 = localDateTime59.toDate();
        org.joda.time.LocalDateTime.Property property61 = localDateTime59.weekOfWeekyear();
        java.util.Locale locale62 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str63 = locale62.getISO3Language();
        java.lang.String str64 = dateTimeField6.getAsShortText((org.joda.time.ReadablePartial) localDateTime59, locale62);
        org.joda.time.DurationField durationField65 = dateTimeField6.getLeapDurationField();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 292278993 + "'", int5 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-292275054) + "'", int18 == (-292275054));
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "millisOfDay" + "'", str29, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 1, 10, 26151696, 4, 1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1, 10, 26151696, 4, 1]");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(date60);
// flaky:         org.junit.Assert.assertEquals(date60.toString(), "Wed Aug 03 22:12:31 UTC 2016");
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "fra" + "'", str63, "fra");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2016" + "'", str64, "2016");
        org.junit.Assert.assertNotNull(durationField65);
    }

    @Test
    public void test05973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05973");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.hours();
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, (int) '#');
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str18 = dateTimeZone16.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.centuries();
        boolean boolean22 = localDateTime19.equals((java.lang.Object) durationFieldType21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime19.getFieldTypes();
        java.lang.String str24 = localDateTime19.toString();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean28 = localDateTime19.isSupported(dateTimeFieldType27);
        int int29 = localDateTime15.indexOf(dateTimeFieldType27);
        int[] intArray31 = chronology2.get((org.joda.time.ReadablePartial) localDateTime15, 1645629358650L);
        org.joda.time.DurationField durationField32 = chronology2.millis();
        org.joda.time.DurationField durationField33 = chronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField36 = chronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField37 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = chronology2.era();
        java.lang.String str39 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField40 = chronology2.dayOfMonth();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T07:21:31.901" + "'", str24, "2022-02-22T07:21:31.901");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2022, 2, 23, 54958650]");
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test05974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05974");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        int int5 = property4.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusHours((int) (short) 10);
        int int18 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDateTime17);
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str21 = dateTimeField6.getAsShortText((long) 15, locale20);
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(locale23);
        java.lang.String str25 = dateTimeField6.getAsText(1654010160000L, locale23);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withDurationAdded(readableDuration27, (int) '#');
        org.joda.time.LocalDateTime.Property property30 = localDateTime26.era();
        int int31 = localDateTime26.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime26.withWeekOfWeekyear((int) (byte) 1);
        int int34 = localDateTime26.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime26.plusDays(500);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str39 = dateTimeZone37.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(dateTimeZone37);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.millisOfDay();
        org.joda.time.ReadableInstant readableInstant42 = null;
        long long43 = property41.getDifferenceAsLong(readableInstant42);
        java.util.Locale locale44 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str45 = locale44.getISO3Language();
        java.lang.String str46 = property41.getAsShortText(locale44);
        java.lang.String str47 = dateTimeField6.getAsText((org.joda.time.ReadablePartial) localDateTime26, locale44);
        java.lang.String str48 = locale44.getDisplayName();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 292278993 + "'", int5 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-292275054) + "'", int18 == (-292275054));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970" + "'", str21, "1970");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022" + "'", str25, "2022");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 22 + "'", int31 == 22);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 7 + "'", int34 == 7);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "fra" + "'", str45, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "26491923" + "'", str46, "26491923");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022" + "'", str47, "2022");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Franz\366sisch (Kanada)" + "'", str48, "Franz\366sisch (Kanada)");
    }

    @Test
    public void test05975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05975");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DurationField durationField8 = chronology3.months();
        org.joda.time.DurationField durationField9 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.hourOfDay();
        long long13 = dateTimeField10.getDifferenceAsLong(1645629465394L, 1645629484270L);
        int int15 = dateTimeField10.getMinimumValue(1908343175219L);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withDurationAdded(readableDuration17, (int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        java.util.Locale locale24 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale25 = locale24.stripExtensions();
        java.lang.String str26 = dateTimeField22.getAsShortText(100, locale25);
        int int28 = dateTimeField22.getLeapAmount((long) (short) 100);
        org.joda.time.DurationField durationField29 = dateTimeField22.getRangeDurationField();
        boolean boolean30 = dateTimeField22.isLenient();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = dateTimeField22.getType();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime16.withField(dateTimeFieldType31, 0);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.hours();
        java.lang.String str39 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withDurationAdded(readableDuration42, (int) '#');
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.weekyear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.minusMillis((-1));
        int[] intArray52 = new int[] { (-292275054), 86399999, 86399999, 22 };
        int int53 = dateTimeField40.getMaximumValue((org.joda.time.ReadablePartial) localDateTime47, intArray52);
        java.util.Locale locale55 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale56 = locale55.stripExtensions();
        java.lang.String str57 = locale55.getVariant();
        java.lang.String str58 = locale55.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray59 = dateTimeField10.set((org.joda.time.ReadablePartial) localDateTime33, 957, intArray52, "2022-02-22T07:18:02.870", locale55);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:18:02.870\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100" + "'", str26, "100");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-292275054, 86399999, 86399999, 22]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 24 + "'", int53 == 24);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "fr" + "'", str58, "fr");
    }

    @Test
    public void test05976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05976");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DurationField durationField5 = durationFieldType0.getField(chronology3);
        org.joda.time.Chronology chronology6 = chronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.era();
        java.lang.String str8 = dateTimeField7.toString();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DateTimeField[era]" + "'", str8, "DateTimeField[era]");
    }

    @Test
    public void test05977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05977");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DurationField durationField5 = durationFieldType0.getField(chronology3);
        org.joda.time.Chronology chronology6 = chronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.era();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        java.lang.String str14 = property13.getName();
        org.joda.time.LocalDateTime localDateTime15 = property13.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean17 = localDateTime15.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str20 = dateTimeZone18.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.centuries();
        boolean boolean24 = localDateTime21.equals((java.lang.Object) durationFieldType23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localDateTime21.getFieldTypes();
        java.lang.String str26 = localDateTime21.toString();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime21.plusMillis(22);
        boolean boolean29 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plus(readableDuration30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withDurationAdded(readableDuration32, 26169);
        org.joda.time.DateTime dateTime35 = localDateTime31.toDateTime();
        int[] intArray37 = chronology6.get((org.joda.time.ReadablePartial) localDateTime31, 1645629355285L);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.weekyears();
        org.joda.time.DurationField durationField44 = chronology42.centuries();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology42);
        org.joda.time.DurationField durationField46 = chronology42.millis();
        org.joda.time.DateTimeField dateTimeField47 = chronology42.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField48 = chronology42.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (-997), chronology42);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str52 = dateTimeZone50.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(dateTimeZone50);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.millisOfDay();
        org.joda.time.ReadableInstant readableInstant55 = null;
        long long56 = property54.getDifferenceAsLong(readableInstant55);
        java.util.Locale locale57 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str58 = locale57.getISO3Language();
        java.lang.String str59 = property54.getAsShortText(locale57);
        org.joda.time.LocalDateTime localDateTime60 = property54.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str63 = dateTimeZone61.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now(dateTimeZone61);
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.centuries();
        boolean boolean67 = localDateTime64.equals((java.lang.Object) durationFieldType66);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = localDateTime64.getFieldTypes();
        java.lang.String str69 = localDateTime64.toString();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime64.plusMillis(22);
        org.joda.time.LocalDateTime.Property property72 = localDateTime64.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str75 = dateTimeZone73.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime76 = org.joda.time.LocalDateTime.now(dateTimeZone73);
        org.joda.time.LocalDateTime.Property property77 = localDateTime76.millisOfDay();
        java.lang.String str78 = property77.getName();
        int int79 = property77.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = property77.getFieldType();
        int int81 = localDateTime64.indexOf(dateTimeFieldType80);
        int int82 = localDateTime60.get(dateTimeFieldType80);
        org.joda.time.LocalDateTime.Property property83 = localDateTime49.property(dateTimeFieldType80);
        org.joda.time.DurationFieldType durationFieldType84 = dateTimeFieldType80.getDurationType();
        int int85 = localDateTime31.get(dateTimeFieldType80);
        java.lang.String str86 = localDateTime31.toString();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "millisOfDay" + "'", str14, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T07:21:31.967" + "'", str26, "2022-02-22T07:21:31.967");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[2022, 2, 23, 54955285]");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00" + "'", str52, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "fra" + "'", str58, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "26491967" + "'", str59, "26491967");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00" + "'", str63, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "2022-02-22T07:21:31.967" + "'", str69, "2022-02-22T07:21:31.967");
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00" + "'", str75, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "millisOfDay" + "'", str78, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 86399999 + "'", int79 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(durationFieldType84);
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + 26491989 + "'", int85 == 26491989);
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "2022-02-22T07:21:31.989" + "'", str86, "2022-02-22T07:21:31.989");
    }

    @Test
    public void test05978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05978");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        int int11 = localDateTime8.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minusMinutes(0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis(2022);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusMillis(56);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.monthOfYear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str22 = dateTimeZone20.getShortName((long) (short) 10);
        long long24 = dateTimeZone20.convertUTCToLocal((long) ' ');
        java.lang.String str25 = dateTimeZone20.toString();
        long long27 = dateTimeZone20.previousTransition(32L);
        long long30 = dateTimeZone20.convertLocalToUTC(97L, false);
        java.lang.String str32 = dateTimeZone20.getShortName((long) 5);
        int int34 = dateTimeZone20.getOffsetFromLocal(5356800000L);
        org.joda.time.DateTime dateTime35 = localDateTime17.toDateTime(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str39 = dateTimeZone37.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(dateTimeZone37);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.millisOfDay();
        java.lang.String str42 = property41.getName();
        org.joda.time.LocalDateTime localDateTime43 = property41.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean45 = localDateTime43.isSupported(dateTimeFieldType44);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str48 = dateTimeZone46.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.centuries();
        boolean boolean52 = localDateTime49.equals((java.lang.Object) durationFieldType51);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = localDateTime49.getFieldTypes();
        java.lang.String str54 = localDateTime49.toString();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime49.plusMillis(22);
        boolean boolean57 = localDateTime43.isBefore((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.plus(readableDuration58);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.withDurationAdded(readableDuration60, 26169);
        org.joda.time.Chronology chronology63 = localDateTime62.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 13, chronology63);
        boolean boolean66 = dateTimeZone20.isLocalDateTimeGap(localDateTime65);
        long long69 = dateTimeZone20.convertLocalToUTC(31805261L, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 21 + "'", int11 == 21);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 32L + "'", long24 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 32L + "'", long27 == 32L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 97L + "'", long30 == 97L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "millisOfDay" + "'", str42, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-22T07:21:32.015" + "'", str54, "2022-02-22T07:21:32.015");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 31805261L + "'", long69 == 31805261L);
    }

    @Test
    public void test05979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05979");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        int int6 = property4.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property4.getFieldType();
        org.joda.time.LocalDateTime localDateTime8 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = property4.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusHours(55021617);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str14 = dateTimeZone12.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.centuries();
        boolean boolean18 = localDateTime15.equals((java.lang.Object) durationFieldType17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime15.getFieldTypes();
        java.lang.String str20 = localDateTime15.toString();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime15.withField(dateTimeFieldType23, 2);
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType23.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.weekyears();
        boolean boolean34 = dateTimeFieldType29.isSupported(chronology32);
        org.joda.time.DurationField durationField35 = chronology32.centuries();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.year();
        boolean boolean37 = durationFieldType28.isSupported(chronology32);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((-100L), chronology41);
        org.joda.time.DateTimeField dateTimeField45 = chronology41.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = chronology41.dayOfWeek();
        boolean boolean47 = durationFieldType28.isSupported(chronology41);
        boolean boolean48 = localDateTime9.isSupported(durationFieldType28);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime9.withPeriodAdded(readablePeriod49, 30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withDayOfYear(81254740);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 81254740 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 86399999 + "'", int6 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T07:21:32.038" + "'", str20, "2022-02-22T07:21:32.038");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(localDateTime51);
    }

    @Test
    public void test05980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05980");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        int int5 = localDateTime0.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.minus(readablePeriod6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime0.withDayOfWeek(26328281);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26328281 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test05981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05981");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.hours();
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField9 = dateTimeField8.getDurationField();
        long long12 = durationField9.getDifferenceAsLong((long) 54, 1645629560806L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-457119L) + "'", long12 == (-457119L));
    }

    @Test
    public void test05982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05982");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withPeriodAdded(readablePeriod6, 24);
        int int9 = localDateTime8.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.era();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        long long15 = dateTimeZone11.convertUTCToLocal((long) ' ');
        java.lang.String str16 = dateTimeZone11.toString();
        boolean boolean18 = dateTimeZone11.equals((java.lang.Object) (short) 100);
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str21 = dateTimeZone11.getShortName((long) (-1), locale20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withField(dateTimeFieldType23, (int) (short) 100);
        int int26 = localDateTime8.indexOf(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 32L + "'", long15 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test05983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05983");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        java.lang.String str14 = localDateTime13.toString();
        boolean boolean15 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.withFieldAdded(durationFieldType16, 7);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        java.lang.String str20 = durationFieldType19.toString();
        boolean boolean21 = localDateTime13.isSupported(durationFieldType19);
        int int22 = localDateTime13.getMinuteOfHour();
        org.joda.time.DateTime dateTime23 = localDateTime13.toDateTime();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0100-02-22T07:21:32.264" + "'", str14, "0100-02-22T07:21:32.264");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "days" + "'", str20, "days");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 21 + "'", int22 == 21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test05984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05984");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        int int5 = property4.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = property4.setCopy(681);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType9.getField(chronology10);
        long long13 = dateTimeField11.roundFloor((long) (-1));
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.addUnicodeLocaleAttribute("und");
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.lang.String str20 = locale18.getDisplayName();
        java.util.Locale.Builder builder21 = builder16.setLocale(locale18);
        int int22 = dateTimeField11.getMaximumShortTextLength(locale18);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str25 = dateTimeZone23.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        org.joda.time.ReadableInstant readableInstant28 = null;
        long long29 = property27.getDifferenceAsLong(readableInstant28);
        org.joda.time.DurationField durationField30 = property27.getLeapDurationField();
        java.lang.String str31 = property27.getAsString();
        org.joda.time.LocalDateTime localDateTime32 = property27.roundFloorCopy();
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleAttributes();
        java.lang.String str36 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) localDateTime32, locale33);
        long long38 = dateTimeField11.remainder(100L);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str41 = dateTimeZone39.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(dateTimeZone39);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.millisOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusHours((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = localDateTime47.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime47.minusMillis(0);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withDayOfYear(32);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology58 = localDateTime57.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.weekyears();
        boolean boolean60 = dateTimeFieldType55.isSupported(chronology58);
        org.joda.time.DateTimeField dateTimeField61 = chronology58.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField62 = chronology58.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str66 = dateTimeZone64.getShortName((long) (short) 10);
        long long68 = dateTimeZone64.convertUTCToLocal((long) ' ');
        java.util.Locale locale70 = java.util.Locale.ROOT;
        java.lang.String str71 = dateTimeZone64.getName((long) (short) 0, locale70);
        java.lang.String str72 = dateTimeField62.getAsShortText((long) 54976760, locale70);
        java.lang.String str73 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) localDateTime54, locale70);
        java.lang.String str74 = localDateTime7.toString("26273943", locale70);
        java.lang.String str75 = locale70.getISO3Country();
        java.lang.String str76 = locale70.getLanguage();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 86399999 + "'", int5 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60000L) + "'", long13 == (-60000L));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Canada" + "'", str19, "Canada");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Franz\366sisch (Kanada)" + "'", str20, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNull(durationField30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "26492288" + "'", str31, "26492288");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(strSet35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "441" + "'", str36, "441");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 100L + "'", long38 == 100L);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 32L + "'", long68 == 32L);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "70" + "'", str72, "70");
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "921" + "'", str73, "921");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "26273943" + "'", str74, "26273943");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
    }

    @Test
    public void test05985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05985");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.minutes();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.weekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str10 = dateTimeZone8.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime(readableInstant17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str21 = dateTimeZone19.getShortName((long) (short) 10);
        long long23 = dateTimeZone19.convertUTCToLocal((long) ' ');
        java.lang.String str24 = dateTimeZone19.toString();
        long long26 = dateTimeZone19.previousTransition(32L);
        long long29 = dateTimeZone19.convertLocalToUTC(97L, false);
        boolean boolean30 = dateTime18.equals((java.lang.Object) false);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str33 = dateTimeZone31.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.millisOfDay();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDateTime39.toDateTime(readableInstant40);
        long long42 = dateTime41.getMillis();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str45 = dateTimeZone43.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = localDateTime46.getFieldType((int) (short) 0);
        boolean boolean49 = dateTime41.isSupported(dateTimeFieldType48);
        boolean boolean50 = dateTime18.isAfter((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str53 = dateTimeZone51.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now(dateTimeZone51);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.millisOfDay();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime54.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localDateTime59.toDateTime(readableInstant60);
        long long62 = dateTime61.getMillis();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str65 = dateTimeZone63.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now(dateTimeZone63);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = localDateTime66.getFieldType((int) (short) 0);
        boolean boolean69 = dateTime61.isSupported(dateTimeFieldType68);
        boolean boolean70 = dateTime18.isAfter((org.joda.time.ReadableInstant) dateTime61);
        int int71 = property7.getDifference((org.joda.time.ReadableInstant) dateTime61);
        java.lang.String str72 = property7.getAsText();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 32L + "'", long23 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 32L + "'", long26 == 32L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 97L + "'", long29 == 97L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1645629692330L + "'", long42 == 1645629692330L);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
// flaky:         org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1645629692330L + "'", long62 == 1645629692330L);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00" + "'", str65, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022" + "'", str72, "2022");
    }

    @Test
    public void test05986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05986");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        boolean boolean7 = dateTimeZone0.equals((java.lang.Object) (short) 100);
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = dateTimeZone0.getShortName((long) (-1), locale9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withField(dateTimeFieldType12, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.weekyears();
        org.joda.time.DurationField durationField19 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.minuteOfDay();
        long long24 = chronology17.add((long) 2, (long) 21, (int) '4');
        boolean boolean25 = dateTimeFieldType12.isSupported(chronology17);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str28 = dateTimeZone26.getShortName((long) (short) 10);
        long long30 = dateTimeZone26.convertUTCToLocal((long) ' ');
        java.lang.String str31 = dateTimeZone26.toString();
        long long33 = dateTimeZone26.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.Chronology chronology35 = chronology17.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.weekyears();
        org.joda.time.DurationField durationField43 = chronology41.centuries();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology41);
        org.joda.time.DurationField durationField45 = chronology41.millis();
        org.joda.time.DateTimeField dateTimeField46 = chronology41.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.weekyears();
        org.joda.time.DurationField durationField52 = chronology50.centuries();
        org.joda.time.DurationField durationField53 = chronology50.hours();
        boolean boolean54 = durationFieldType47.isSupported(chronology50);
        org.joda.time.DateTimeField dateTimeField55 = chronology50.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withDurationAdded(readableDuration57, (int) '#');
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.weekyear();
        int int61 = property60.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField62 = property60.getField();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str65 = dateTimeZone63.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now(dateTimeZone63);
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.millisOfDay();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime66.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime66.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.minusHours((int) (short) 10);
        int int74 = dateTimeField62.getMinimumValue((org.joda.time.ReadablePartial) localDateTime73);
        java.util.Locale locale76 = java.util.Locale.PRC;
        java.lang.String str77 = dateTimeField55.getAsShortText((org.joda.time.ReadablePartial) localDateTime73, (-1), locale76);
        int int78 = dateTimeField46.getMaximumTextLength(locale76);
        java.lang.String str79 = dateTimeField36.getAsText(26239, locale76);
        java.lang.String str81 = locale76.getExtension('x');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str83 = locale76.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1094L + "'", long24 == 1094L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 32L + "'", long30 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 32L + "'", long33 == 32L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 292278993 + "'", int61 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00" + "'", str65, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-292275054) + "'", int74 == (-292275054));
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "-1" + "'", str77, "-1");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 4 + "'", int78 == 4);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "26239" + "'", str79, "26239");
        org.junit.Assert.assertNull(str81);
    }

    @Test
    public void test05987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05987");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray2 = strSet1.toArray();
        boolean boolean3 = strSet1.isEmpty();
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray6 = strSet5.toArray();
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        boolean boolean9 = strSet5.removeAll((java.util.Collection<java.lang.String>) strSet8);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray14 = new org.joda.time.DurationFieldType[] { durationFieldType12, durationFieldType13 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray15 = strSet11.toArray(durationFieldTypeArray14);
        boolean boolean16 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet11);
        java.lang.Object[] objArray17 = strSet11.toArray();
        boolean boolean18 = strSet1.removeAll((java.util.Collection<java.lang.String>) strSet11);
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray21 = strSet20.toArray();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        boolean boolean24 = strSet20.removeAll((java.util.Collection<java.lang.String>) strSet23);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray29 = new org.joda.time.DurationFieldType[] { durationFieldType27, durationFieldType28 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray30 = strSet26.toArray(durationFieldTypeArray29);
        boolean boolean31 = strSet20.containsAll((java.util.Collection<java.lang.String>) strSet26);
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray34 = strSet33.toArray();
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        boolean boolean37 = strSet33.removeAll((java.util.Collection<java.lang.String>) strSet36);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray42 = new org.joda.time.DurationFieldType[] { durationFieldType40, durationFieldType41 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray43 = strSet39.toArray(durationFieldTypeArray42);
        boolean boolean44 = strSet33.containsAll((java.util.Collection<java.lang.String>) strSet39);
        java.lang.Object[] objArray45 = strSet39.toArray();
        boolean boolean46 = strSet20.retainAll((java.util.Collection<java.lang.String>) strSet39);
        boolean boolean47 = strSet11.addAll((java.util.Collection<java.lang.String>) strSet39);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str50 = dateTimeZone48.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now(dateTimeZone48);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.millisOfDay();
        org.joda.time.ReadableInstant readableInstant53 = null;
        long long54 = property52.getDifferenceAsLong(readableInstant53);
        java.util.Locale locale55 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str56 = locale55.getISO3Language();
        java.lang.String str57 = property52.getAsShortText(locale55);
        org.joda.time.DateTimeField dateTimeField58 = property52.getField();
        org.joda.time.LocalDateTime localDateTime59 = property52.withMinimumValue();
        org.joda.time.DurationField durationField60 = property52.getRangeDurationField();
        boolean boolean61 = strSet11.contains((java.lang.Object) property52);
        boolean boolean62 = strSet11.isEmpty();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(durationFieldTypeArray14);
        org.junit.Assert.assertNotNull(durationFieldTypeArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldTypeArray29);
        org.junit.Assert.assertNotNull(durationFieldTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(durationFieldTypeArray42);
        org.junit.Assert.assertNotNull(durationFieldTypeArray43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "fra" + "'", str56, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "26492379" + "'", str57, "26492379");
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test05988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05988");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        long long5 = property4.remainder();
        int int6 = property4.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getDurationType();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.weekyears();
        org.joda.time.DurationField durationField13 = chronology11.centuries();
        boolean boolean14 = durationFieldType8.isSupported(chronology11);
        org.joda.time.DurationField durationField15 = chronology11.halfdays();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology17 = chronology11.withZone(dateTimeZone16);
        boolean boolean18 = property4.equals((java.lang.Object) chronology11);
        java.lang.String str19 = chronology11.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
    }

    @Test
    public void test05989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05989");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str1 = durationFieldType0.toString();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.DurationField durationField7 = chronology5.centuries();
        org.joda.time.DurationField durationField8 = durationFieldType2.getField(chronology5);
        boolean boolean9 = durationFieldType0.isSupported(chronology5);
        org.joda.time.DateTimeField dateTimeField10 = chronology5.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = chronology5.weekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology5.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray16 = chronology5.get(readablePeriod13, 1645629479892L, 3628800000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "weekyears" + "'", str1, "weekyears");
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test05990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05990");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weekyears();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.DurationField durationField12 = durationFieldType5.getField(chronology9);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.weekyears();
        org.joda.time.DurationField durationField17 = chronology15.seconds();
        org.joda.time.DurationField durationField18 = durationFieldType5.getField(chronology15);
        long long21 = durationField18.getDifferenceAsLong(448L, 26339281L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test05991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05991");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        java.lang.String str14 = localDateTime13.toString();
        boolean boolean15 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray18 = strSet17.toArray();
        boolean boolean19 = strSet17.isEmpty();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray22 = strSet21.toArray();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        boolean boolean25 = strSet21.removeAll((java.util.Collection<java.lang.String>) strSet24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray30 = new org.joda.time.DurationFieldType[] { durationFieldType28, durationFieldType29 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray31 = strSet27.toArray(durationFieldTypeArray30);
        boolean boolean32 = strSet21.containsAll((java.util.Collection<java.lang.String>) strSet27);
        java.lang.Object[] objArray33 = strSet27.toArray();
        boolean boolean34 = strSet17.removeAll((java.util.Collection<java.lang.String>) strSet27);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray37 = strSet36.toArray();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        boolean boolean40 = strSet36.removeAll((java.util.Collection<java.lang.String>) strSet39);
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray45 = new org.joda.time.DurationFieldType[] { durationFieldType43, durationFieldType44 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray46 = strSet42.toArray(durationFieldTypeArray45);
        boolean boolean47 = strSet36.containsAll((java.util.Collection<java.lang.String>) strSet42);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray50 = strSet49.toArray();
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        boolean boolean53 = strSet49.removeAll((java.util.Collection<java.lang.String>) strSet52);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray58 = new org.joda.time.DurationFieldType[] { durationFieldType56, durationFieldType57 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray59 = strSet55.toArray(durationFieldTypeArray58);
        boolean boolean60 = strSet49.containsAll((java.util.Collection<java.lang.String>) strSet55);
        java.lang.Object[] objArray61 = strSet55.toArray();
        boolean boolean62 = strSet36.retainAll((java.util.Collection<java.lang.String>) strSet55);
        boolean boolean63 = strSet27.addAll((java.util.Collection<java.lang.String>) strSet55);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean65 = strSet55.remove((java.lang.Object) dateTimeFieldType64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime3.property(dateTimeFieldType64);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime68 = localDateTime3.withCenturyOfEra(26445639);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26445639 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0100-02-22T07:21:32.493" + "'", str14, "0100-02-22T07:21:32.493");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(durationFieldTypeArray30);
        org.junit.Assert.assertNotNull(durationFieldTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(durationFieldTypeArray45);
        org.junit.Assert.assertNotNull(durationFieldTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(durationFieldTypeArray58);
        org.junit.Assert.assertNotNull(durationFieldTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(property66);
    }

    @Test
    public void test05992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05992");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        int int4 = localDateTime3.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMinuteOfHour(2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusDays(26213656);
        int int9 = localDateTime6.size();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str25 = dateTimeZone23.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = localDateTime26.getFieldType((int) (short) 0);
        boolean boolean29 = dateTime21.isSupported(dateTimeFieldType28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str32 = dateTimeZone30.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.millisOfDay();
        org.joda.time.ReadableInstant readableInstant35 = null;
        long long36 = property34.getDifferenceAsLong(readableInstant35);
        org.joda.time.DurationField durationField37 = property34.getLeapDurationField();
        java.lang.String str38 = property34.getAsString();
        org.joda.time.LocalDateTime localDateTime39 = property34.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withWeekyear((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str44 = dateTimeZone42.getShortName((long) (short) 10);
        long long46 = dateTimeZone42.convertUTCToLocal((long) ' ');
        java.lang.String str47 = dateTimeZone42.toString();
        boolean boolean49 = dateTimeZone42.equals((java.lang.Object) (short) 100);
        java.util.Locale locale51 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str52 = dateTimeZone42.getShortName((long) (-1), locale51);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime54 = localDateTime41.toDateTime(dateTimeZone42);
        boolean boolean55 = dateTime21.isEqual((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Instant instant56 = dateTime54.toInstant();
        boolean boolean57 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime54);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645629692527L + "'", long22 == 1645629692527L);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "26492527" + "'", str38, "26492527");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 32L + "'", long46 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00" + "'", str52, "+00:00");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test05993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05993");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.seconds();
        org.joda.time.DurationField durationField5 = chronology2.seconds();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.year();
        long long10 = dateTimeField7.set(1645629356968L, "26153260");
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str15 = locale12.getDisplayCountry(locale13);
        java.lang.String str16 = locale13.getDisplayCountry();
        java.lang.String str17 = dateTimeField7.getAsShortText(1645629365489L, locale13);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.weekyears();
        org.joda.time.DurationField durationField23 = chronology21.centuries();
        org.joda.time.DurationField durationField24 = chronology21.minutes();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withDurationAdded(readableDuration28, (int) '#');
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.weekyear();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property34 = localDateTime30.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str37 = dateTimeZone35.getShortName((long) (short) 10);
        long long39 = dateTimeZone35.convertUTCToLocal((long) ' ');
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.lang.String str42 = dateTimeZone35.getName((long) (short) 0, locale41);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str45 = dateTimeZone43.getShortName((long) (short) 10);
        long long47 = dateTimeZone43.convertUTCToLocal((long) ' ');
        java.lang.String str48 = dateTimeZone43.toString();
        boolean boolean50 = dateTimeZone43.equals((java.lang.Object) (short) 100);
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str53 = dateTimeZone43.getShortName((long) (-1), locale52);
        java.lang.String str54 = locale41.getDisplayVariant(locale52);
        int int55 = property34.getMaximumShortTextLength(locale52);
        java.lang.String str56 = locale52.getLanguage();
        int int57 = dateTimeField26.getMaximumTextLength(locale52);
        java.lang.String str58 = locale52.getDisplayScript();
        java.lang.String str59 = dateTimeField7.getAsShortText(55288191, locale52);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 825255007917356968L + "'", long10 == 825255007917356968L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "China" + "'", str15, "China");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022" + "'", str17, "2022");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 32L + "'", long39 == 32L);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 32L + "'", long47 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "fr" + "'", str56, "fr");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "55288191" + "'", str59, "55288191");
    }

    @Test
    public void test05994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05994");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        boolean boolean5 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        java.lang.String str7 = localDateTime6.toString();
        int int8 = localDateTime6.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.minusMonths(2);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str14 = dateTimeZone12.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDateTime20.toDateTime(readableInstant21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str26 = dateTimeZone24.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = localDateTime27.getFieldType((int) (short) 0);
        boolean boolean30 = dateTime22.isSupported(dateTimeFieldType29);
        org.joda.time.DateTime dateTime31 = localDateTime10.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        int[] intArray33 = chronology3.get((org.joda.time.ReadablePartial) localDateTime10, 11L);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime10.minusMonths((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime10.plusMinutes(26314);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T07:21:32.697" + "'", str7, "2022-02-22T07:21:32.697");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20 + "'", int8 == 20);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645629692697L + "'", long23 == 1645629692697L);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
    }

    @Test
    public void test05995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05995");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        long long5 = property4.remainder();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundFloorCopy();
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder7.addUnicodeLocaleAttribute("und");
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str12 = locale10.getDisplayCountry(locale11);
        java.lang.String str13 = locale11.getDisplayName();
        java.util.Locale.Builder builder14 = builder9.setLocale(locale11);
        java.util.Locale.Builder builder16 = builder9.setScript("");
        java.util.Locale locale17 = builder9.build();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        long long29 = dateTimeField27.roundFloor((long) (-1));
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder32 = builder30.addUnicodeLocaleAttribute("und");
        java.util.Locale locale33 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale34 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str35 = locale33.getDisplayCountry(locale34);
        java.lang.String str36 = locale34.getDisplayName();
        java.util.Locale.Builder builder37 = builder32.setLocale(locale34);
        int int38 = dateTimeField27.getMaximumShortTextLength(locale34);
        java.lang.String str39 = dateTimeField23.getAsShortText((long) 'a', locale34);
        java.lang.String str40 = locale17.getDisplayLanguage(locale34);
        java.util.Locale locale41 = locale34.stripExtensions();
        boolean boolean42 = property4.equals((java.lang.Object) locale34);
        org.joda.time.LocalDateTime localDateTime43 = property4.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property4.getFieldType();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology47 = localDateTime46.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.weekyears();
        org.joda.time.DurationField durationField49 = chronology47.centuries();
        org.joda.time.DurationField durationField50 = chronology47.minutes();
        org.joda.time.DateTimeField dateTimeField51 = chronology47.monthOfYear();
        org.joda.time.DurationField durationField52 = chronology47.months();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str55 = dateTimeZone53.getShortName((long) (short) 10);
        long long57 = dateTimeZone53.convertUTCToLocal((long) ' ');
        java.lang.String str58 = dateTimeZone53.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone53);
        org.joda.time.Chronology chronology60 = chronology47.withZone(dateTimeZone53);
        org.joda.time.DateTimeField dateTimeField61 = chronology60.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str64 = dateTimeZone62.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now(dateTimeZone62);
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.millisOfDay();
        java.lang.String str67 = property66.getName();
        org.joda.time.LocalDateTime localDateTime68 = property66.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean70 = localDateTime68.isSupported(dateTimeFieldType69);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str73 = dateTimeZone71.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime74 = org.joda.time.LocalDateTime.now(dateTimeZone71);
        org.joda.time.LocalDateTime.Property property75 = localDateTime74.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType76 = org.joda.time.DurationFieldType.centuries();
        boolean boolean77 = localDateTime74.equals((java.lang.Object) durationFieldType76);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray78 = localDateTime74.getFieldTypes();
        java.lang.String str79 = localDateTime74.toString();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime74.plusMillis(22);
        boolean boolean82 = localDateTime68.isBefore((org.joda.time.ReadablePartial) localDateTime81);
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.LocalDateTime localDateTime84 = localDateTime81.plus(readableDuration83);
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.LocalDateTime localDateTime87 = localDateTime84.withDurationAdded(readableDuration85, 26169);
        int[] intArray89 = chronology60.get((org.joda.time.ReadablePartial) localDateTime84, (long) 55005041);
        int int90 = property4.compareTo((org.joda.time.ReadablePartial) localDateTime84);
        org.joda.time.LocalDateTime localDateTime91 = property4.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Canada" + "'", str12, "Canada");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Franz\366sisch (Kanada)" + "'", str13, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-60000L) + "'", long29 == (-60000L));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Canada" + "'", str35, "Canada");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Franz\366sisch (Kanada)" + "'", str36, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "97" + "'", str39, "97");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "fran\347ais" + "'", str40, "fran\347ais");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 32L + "'", long57 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "UTC" + "'", str58, "UTC");
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "millisOfDay" + "'", str67, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00" + "'", str73, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray78);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "2022-02-22T07:21:32.718" + "'", str79, "2022-02-22T07:21:32.718");
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1970, 1, 1, 55005041]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(localDateTime91);
    }

    @Test
    public void test05996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05996");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(15, 21);
        java.util.Locale locale6 = new java.util.Locale("", "2022-02-22T07:15:52.067");
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        java.lang.String str8 = locale6.getCountry();
        java.lang.String str9 = dateTimeZone2.getName(3216503530103L, locale6);
        java.util.TimeZone timeZone10 = dateTimeZone2.toTimeZone();
        int int11 = timeZone10.getDSTSavings();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals(locale6.toString(), "_2022-02-22T07:15:52.067");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T07:15:52.067" + "'", str8, "2022-02-22T07:15:52.067");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+15:21" + "'", str9, "+15:21");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+15:21");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test05997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05997");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.DurationField durationField6 = chronology3.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology3);
        boolean boolean8 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.DateTimeField dateTimeField9 = chronology3.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = chronology3.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test05998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05998");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.minuteOfDay();
        int int6 = dateTimeField4.getMaximumValue(8228146884657L);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusHours((int) (short) 10);
        int int18 = localDateTime15.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.minusYears((int) ' ');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.minusHours((int) (byte) 1);
        int int23 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        java.lang.String str25 = localDateTime24.toString();
        int int26 = localDateTime24.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.minusMonths(2);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str32 = dateTimeZone30.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.millisOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(readableInstant39);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str44 = dateTimeZone42.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(dateTimeZone42);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = localDateTime45.getFieldType((int) (short) 0);
        boolean boolean48 = dateTime40.isSupported(dateTimeFieldType47);
        org.joda.time.DateTime dateTime49 = localDateTime28.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str52 = dateTimeZone50.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(dateTimeZone50);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.millisOfDay();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str63 = dateTimeZone61.getShortName((long) (short) 10);
        long long65 = dateTimeZone61.convertUTCToLocal((long) ' ');
        java.lang.String str66 = dateTimeZone61.toString();
        long long68 = dateTimeZone61.previousTransition(32L);
        long long71 = dateTimeZone61.convertLocalToUTC(97L, false);
        boolean boolean72 = dateTime60.equals((java.lang.Object) false);
        boolean boolean73 = dateTime49.isEqual((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Instant instant74 = dateTime49.toInstant();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str77 = dateTimeZone75.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.now(dateTimeZone75);
        org.joda.time.LocalDateTime.Property property79 = localDateTime78.millisOfDay();
        long long80 = property79.remainder();
        org.joda.time.LocalDateTime localDateTime81 = property79.roundFloorCopy();
        boolean boolean82 = instant74.equals((java.lang.Object) localDateTime81);
        int int83 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) localDateTime81);
        org.joda.time.LocalDateTime.Property property84 = localDateTime81.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime85 = property84.withMinimumValue();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1439 + "'", int6 == 1439);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 21 + "'", int18 == 21);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-22T07:21:32.799" + "'", str25, "2022-02-22T07:21:32.799");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20 + "'", int26 == 20);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1645629692799L + "'", long41 == 1645629692799L);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00" + "'", str52, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00" + "'", str63, "+00:00");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 32L + "'", long65 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "UTC" + "'", str66, "UTC");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 32L + "'", long68 == 32L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 97L + "'", long71 == 97L);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+00:00" + "'", str77, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(localDateTime85);
    }

    @Test
    public void test05999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05999");
        java.util.Locale locale2 = new java.util.Locale("26331405", "52299014");
        org.junit.Assert.assertEquals(locale2.toString(), "26331405_52299014");
    }

    @Test
    public void test06000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test06000");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property9.getFieldType();
        org.joda.time.LocalDateTime localDateTime11 = property9.withMinimumValue();
        int int12 = property9.get();
        java.lang.String str13 = property9.getAsString();
        org.joda.time.LocalDateTime localDateTime15 = property9.setCopy(23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMonthOfYear(999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 999 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 26492907 + "'", int12 == 26492907);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "26492907" + "'", str13, "26492907");
        org.junit.Assert.assertNotNull(localDateTime15);
    }
}
